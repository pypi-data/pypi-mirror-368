import abc
from _typeshed import Incomplete
from abc import abstractmethod
from proalgotrader_core.algo_session import AlgoSession as AlgoSession
from proalgotrader_core.api import Api as Api
from proalgotrader_core.base_symbol import BaseSymbol as BaseSymbol
from proalgotrader_core.broker_symbol import BrokerSymbol as BrokerSymbol
from proalgotrader_core.data_broker_managers.angel_one_data_broker_manager import AngelOneDataBrokerManager as AngelOneDataBrokerManager
from proalgotrader_core.data_broker_managers.base_data_broker_manager import BaseDataBrokerManager as BaseDataBrokerManager
from proalgotrader_core.data_broker_managers.fyers_data_broker_manager import FyersDataBrokerManager as FyersDataBrokerManager
from proalgotrader_core.order import Order as Order
from proalgotrader_core.position import Position as Position
from proalgotrader_core.protocols.base_order_broker_manager import BaseOrderBrokerManagerProtocol as BaseOrderBrokerManagerProtocol
from typing import Any

data_broker_managers: dict[str, Any]

class BaseOrderBrokerManager(BaseOrderBrokerManagerProtocol, metaclass=abc.ABCMeta):
    api: Incomplete
    algo_session: Incomplete
    algorithm: Incomplete
    algo_session_broker: Incomplete
    id: Incomplete
    broker_uid: Incomplete
    broker_title: Incomplete
    broker_name: Incomplete
    broker_config: Incomplete
    base_symbols: dict[str, BaseSymbol]
    broker_symbols: dict[Any, BrokerSymbol]
    initial_capital: float
    current_capital: float
    data_manager: BaseDataBrokerManager
    def __init__(self, api: Api, algo_session: AlgoSession) -> None: ...
    @property
    def orders(self) -> list[Order]: ...
    @property
    def positions(self) -> list[Position]: ...
    @property
    def open_positions(self) -> list[Position]: ...
    def initialize(self) -> None: ...
    async def get_order_info(self, data: dict[str, Any]) -> Order: ...
    async def get_position_info(self, data: dict[str, Any]) -> Position: ...
    async def set_orders(self) -> None: ...
    async def set_positions(self) -> None: ...
    async def on_after_market_closed(self) -> None: ...
    def add_equity(self, *, base_symbol: BaseSymbol, market_type: str, segment_type: str) -> BrokerSymbol: ...
    def add_future(self, *, base_symbol: BaseSymbol, market_type: str, segment_type: str, expiry_period: str, expiry_date: str) -> BrokerSymbol: ...
    def add_option(self, *, base_symbol: BaseSymbol, market_type: str, segment_type: str, expiry_period: str, expiry_date: str, strike_price: int, option_type: str) -> BrokerSymbol: ...
    def get_symbol(self, broker_symbol_info: dict[str, Any]) -> BrokerSymbol: ...
    def get_positions(self, symbol_name: str, market_type: str, order_type: str, product_type: str, position_type: str) -> list[Position]: ...
    async def manage_position(self, order: Order) -> None: ...
    async def enter_position(self, order: Order) -> None: ...
    async def exit_position(self, order: Order) -> None: ...
    async def next(self) -> None: ...
    @abstractmethod
    async def get_product_types(self) -> dict[Any, Any]: ...
    @abstractmethod
    async def get_order_types(self) -> dict[Any, Any]: ...
    @abstractmethod
    async def get_position_types(self) -> dict[Any, Any]: ...
    @abstractmethod
    async def set_initial_capital(self) -> None: ...
    @abstractmethod
    async def set_current_capital(self) -> None: ...
    @abstractmethod
    async def get_enter_position_info(self, order: Order, position: Position | None) -> dict[str, Any]: ...
    @abstractmethod
    async def get_exit_position_info(self, order: Order) -> dict[str, Any]: ...
    @abstractmethod
    async def place_order(self, *, broker_symbol: BrokerSymbol, quantities: int, product_type: str, order_type: str, position_type: str, position_id: str | None) -> None: ...
