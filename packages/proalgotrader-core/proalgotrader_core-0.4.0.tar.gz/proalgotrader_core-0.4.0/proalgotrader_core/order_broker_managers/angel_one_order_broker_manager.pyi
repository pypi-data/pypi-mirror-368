from _typeshed import Incomplete
from abc import ABC
from proalgotrader_core.algo_session import AlgoSession as AlgoSession
from proalgotrader_core.api import Api as Api
from proalgotrader_core.broker_symbol import BrokerSymbol as BrokerSymbol
from proalgotrader_core.order import Order as Order
from proalgotrader_core.order_broker_managers.base_order_broker_manager import BaseOrderBrokerManager as BaseOrderBrokerManager
from proalgotrader_core.position import Position as Position
from proalgotrader_core.protocols.enums.order_type import OrderType as OrderType
from proalgotrader_core.protocols.enums.position_type import PositionType as PositionType
from proalgotrader_core.protocols.enums.product_type import ProductType as ProductType
from proalgotrader_core.token_managers.angel_one_token_manager import AngelOneTokenManager as AngelOneTokenManager
from typing import Any

class AngelOneOrderBrokerManager(BaseOrderBrokerManager, ABC):
    token_manager: Incomplete
    def __init__(self, api: Api, algo_session: AlgoSession) -> None: ...
    async def get_order_types(self) -> dict[Any, Any]: ...
    async def get_position_types(self) -> dict[Any, Any]: ...
    async def get_product_types(self) -> dict[Any, Any]: ...
    initial_capital: Incomplete
    async def set_initial_capital(self) -> None: ...
    current_capital: Incomplete
    async def set_current_capital(self) -> None: ...
    async def place_order(self, *, broker_symbol: BrokerSymbol, quantities: int, market_type: str, product_type: str, order_type: str, position_type: str, position_id: str | None) -> None: ...
    async def get_enter_position_info(self, order: Order, position: Position | None) -> dict[str, Any]: ...
    async def get_exit_position_info(self, order: Order) -> dict[str, Any]: ...
