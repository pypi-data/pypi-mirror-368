import pandas as pd
from SmartApi import SmartConnect as SmartConnect
from _typeshed import Incomplete
from abc import ABC
from datetime import datetime, timedelta
from proalgotrader_core.algo_session import AlgoSession as AlgoSession
from proalgotrader_core.api import Api as Api
from proalgotrader_core.bar import Bar as Bar
from proalgotrader_core.base_symbol import BaseSymbol as BaseSymbol
from proalgotrader_core.broker_symbol import BrokerSymbol as BrokerSymbol
from proalgotrader_core.data_broker_managers.base_data_broker_manager import BaseDataBrokerManager as BaseDataBrokerManager
from proalgotrader_core.token_managers.angel_one_token_manager import AngelOneTokenManager as AngelOneTokenManager
from typing import Any

class AngelOneDataBrokerManager(BaseDataBrokerManager, ABC):
    api: Incomplete
    algo_session: Incomplete
    token_manager: Incomplete
    http_client: SmartConnect
    data_ws_url: Incomplete
    ws_client: Incomplete
    connected: bool
    resolutions: Incomplete
    subscribers: list[BrokerSymbol]
    url: str
    file_path: Incomplete
    def __init__(self, api: Api, algo_session: AlgoSession) -> None: ...
    @property
    def instrument_df(self) -> pd.DataFrame: ...
    def check_and_update_file(self) -> None: ...
    def download_file(self) -> None: ...
    def get_instrument_df(self) -> pd.DataFrame: ...
    def start_connection(self) -> None: ...
    def close_connection(self) -> None: ...
    def on_open(self, ws) -> None: ...
    def on_close(self, ws, close_status_code, close_msg) -> None: ...
    def on_error(self, ws, error) -> None: ...
    def on_message(self, ws, message) -> None: ...
    def subscribe(self, broker_symbol: BrokerSymbol) -> None: ...
    def fetch_quotes(self, broker_symbol: BrokerSymbol) -> None: ...
    def fetch_bars(self, broker_symbol: BrokerSymbol, timeframe: timedelta, fetch_from: datetime, fetch_to: datetime) -> list[Bar]: ...
    def get_equity_symbol_name(self, broker_title: str, payload: dict[str, Any], base_symbol: BaseSymbol) -> dict[str, Any]: ...
    def get_future_symbol_name(self, broker_title: str, payload: dict[str, Any], base_symbol: BaseSymbol) -> dict[str, Any]: ...
    def get_option_symbol_name(self, broker_title: str, payload: dict[str, Any], base_symbol: BaseSymbol) -> dict[str, Any]: ...
