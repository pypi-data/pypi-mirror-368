[project]
name = "air"
version = "0.21.0"
description = "The new web framework that breathes fresh air into Python web development. Built with FastAPI, Starlette, and Pydantic."
authors = [
    { name = "Audrey M. Roy Greenfeld", email = "audrey@feldroy.com" },
    { name = "Daniel Roy Greenfeld", email = "daniel@feldroy.com" }
]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">= 3.10"
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

# region dependencies
dependencies = [
    "fastapi>=0.116.1",
    "Jinja2>=3.1.6",
    "python-multipart>=0.0.20",
]

# Runtime extras you want users to install from PyPI
[project.optional-dependencies]
# Make `air[standard]` install FastAPI’s own “standard” extras,
# so *users* can do: uv pip install "air[standard]".
standard = [
    # Re-install FastAPI with its “standard” extra.
    "fastapi[standard]>=0.116.1",
]

# Groups are for contributors; install with: uv sync --group NAME
# Developer-only deps under [dependency-groups],
# so uv sync can install them for contributors.
# (Groups are not published to PyPI (meaning: they’re not visible to end users).)
[dependency-groups]
# umbrella group that pulls in all dev-time groups
dev = [
    { include-group = "devtools" }, # core developer tools
    { include-group = "lint" },     # linting and type-checking toolchain
    { include-group = "test" },     # test runner and helpers
    { include-group = "docs" },     # documentation build toolchain
]
devtools = [
    "rust-just>=1.42.3",  # Justfile tasks
    "uvicorn>=0.34.0",    # run full example apps
]
lint = [
    "ruff>=0.11.13",         # Linting and formatting
    "ty>=0.0.1a16",          # for checking types
    "types-Markdown>=3.8.0", # Types for the markdown library
]
test = [
    "coverage>=7.8.2",     # Measure how much of the code is covered by tests
    "httpx>=0.28.1",       # For the test client
    "pytest>=8.4.0",       # Test runner
    "pdbpp>=0.11.7",       # enables pdb++, a drop-in replacement for pdb
]
docs = [
    "mkdocs-material",          # MkDocs theme
    "mkdocstrings[python]",     # generate API docs from docstrings automatically
    "mkdocs-autorefs>=1.4.2",   # automatic cross-references between pages
]
# endregion dependencies

[project.urls]
Homepage = "https://github.com/feldroy/air"
Docs = "https://airdocs.fastapicloud.dev"
Issues = "https://github.com/feldroy/air/issues"

[project.scripts]
"air" = "air.cli:app"

[tool.mypy]
exclude = "^build/"

# -------- pytest: make tests import from src/ --------
[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]

[tool.coverage.run]
omit = [
    "tests/*",
]

[tool.uv]
package = true
# Disable uv’s implicit dev default (otherwise default-groups=["dev"]).
# Ensure 'uv run' won’t auto-install dev, and will only use groups you pass.
# While, 'uv sync' can add dev via --group dev.
default-groups = []

[tool.ruff]                  # enable import-sorting in the linter
lint.select = ["I"]          # I-rules = isort compatibility

[tool.ruff.lint.isort]
combine-as-imports = true    # group aliases coming from the same module
force-wrap-aliases = true    # keep the multi-line, parenthesised layout
