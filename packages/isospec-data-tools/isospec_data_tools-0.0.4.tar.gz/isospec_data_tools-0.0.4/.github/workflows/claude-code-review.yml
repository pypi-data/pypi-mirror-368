name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Use Claude Opus 4 for enhanced code analysis
          model: "claude-opus-4-20250514"

          # Comprehensive prompt for code review and issue fixing
          direct_prompt: |
            You are an expert code reviewer and issue resolver. Your task is to:

            ## FOR PULL REQUEST REVIEWS:
            Provide feedback on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage
            - Adherence to project conventions (check CLAUDE.md)

            ## FOR ISSUE FIXING:
            When fixing issues, follow this systematic approach:

            ### 1. Problem Analysis
            - Carefully read the issue description and all messages
            - Extract the core problem being reported
            - Identify all files involved in the codebase
            - Understand the consequences and impact

            ### 2. Solution Planning
            - Derive a comprehensive plan to fix the issue
            - Identify the strict minimum changes needed
            - Consider edge cases and potential side effects

            ### 3. Implementation
            - Execute the plan methodically
            - Make only the minimum necessary changes
            - Ensure changes follow project conventions
            - Run all code quality checks: make check (includes pre-commit hooks, mypy, deptry)
            - Run tests to verify functionality

            ### 4. Comment Review Process
            When responding to comments on your issue fix:
            - Review the comment with the same analytical approach
            - Consider the original problem, your fix, and the new feedback
            - Derive an updated solution incorporating the feedback
            - Maintain context of the entire conversation

            ### 5. Stopping Criteria
            If you realize you need more guidance or user input:
            - Stop the resolution process immediately
            - Post a clear question in the issue explaining:
              - What you've analyzed so far
              - What specific information you need
              - Why you need this input to proceed
            - Wait for user response before continuing

            Always be thorough, methodical, and ask for clarification when needed.

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          # use_sticky_comment: true

          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality

          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' &&
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}

          # Provide comprehensive tools for code analysis and execution
          allowed_tools: "Bash,Read,Write,Edit,MultiEdit,Glob,Grep,LS,TodoWrite,Task,mcp__ide__getDiagnostics,mcp__ide__executeCode"

          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')
