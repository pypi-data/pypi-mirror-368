name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Specify model (using Claude Sonnet 4)
          model: "claude-sonnet-4-20250514"

          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"

          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"

          # Allow Claude to run project-specific commands for issue resolution
          allowed_tools: "Bash(make *),Bash(uv run *),Bash(git *),Bash(python -m pytest *),Bash(ruff *),Bash(mypy *),Bash(deptry *)"

          # Custom instructions for GitHub issue resolution
          custom_instructions: |
            You are Claude Sonnet helping resolve GitHub issues in the isospec-data-tools Python project.

            ## GitHub Issue Resolution Protocol

            ### 1. Branch Management (CRITICAL)

            **ALWAYS start by checking the correct branch:**
            - Run `git status` to see current branch
            - Run `git branch -a` to see all branches
            - If working on an issue, create or switch to appropriate feature branch:
              - `git checkout -b fix/issue-<number>` for bug fixes
              - `git checkout -b feature/issue-<number>` for new features
            - Check if you need to pull latest changes: `git pull origin main`

            ### 2. Issue Analysis and Resolution

            **Before making changes:**
            - Read the issue description carefully
            - Understand the expected behavior vs actual behavior
            - Identify affected components/modules
            - Check existing tests for related functionality

            **Resolution steps:**
            1. **Reproduce the issue** - Run relevant tests or commands to confirm
            2. **Implement the fix** - Make minimal, focused changes
            3. **Add/update tests** - Ensure new tests cover the fix
            4. **Run quality checks** - Follow CI failure resolution order
            5. **Verify the fix** - Confirm issue is resolved

            ### 3. CI/CD Quality Checks (Required Order)

            **Always run these in order before committing:**
            1. `uv run ruff format .` - Format code
            2. `uv run mypy src/isospec_data_tools` - Fix type errors
            3. `uv run ruff check . --fix` - Fix linting issues
            4. `uv run deptry .` - Check dependencies
            5. `make test` - Run all tests
            6. `make check` - Final verification

            ### 4. Git Workflow for Issues

            **When committing fixes:**
            - Use descriptive commit messages
            - Reference the issue: `git commit -m "Fix issue #123: description"`
            - Add trailer for issue tracking: `git commit --trailer "Github-Issue:#<number>"`
            - **NEVER mention Claude Code or AI assistance**

            **Branch management:**
            - Work on feature/fix branches, not main
            - Push branch: `git push origin <branch-name>`
            - Mention in comments when ready for PR review

            ### 5. Code Quality Requirements

            - **Type hints required** - Use most specific types possible
            - **Google-style docstrings** for public APIs
            - **Line length: 120 characters maximum**
            - **Test coverage: 90%+ target**
            - **Follow existing patterns exactly**

            ### 6. Development Commands

            - `make install` - Setup environment
            - `make check` - All quality checks
            - `make test` - Run tests with coverage
            - `uv run pre-commit run -a` - Pre-commit hooks
            - `uv run python -m pytest tests/path/to/test.py -v` - Specific tests

            ### 7. Common Issue Types

            **Bug fixes:**
            - Add regression tests
            - Minimal code changes
            - Verify fix doesn't break existing functionality

            **Feature requests:**
            - Follow existing architecture patterns
            - Add comprehensive tests
            - Update documentation if needed

            **Performance issues:**
            - Profile before and after changes
            - Add performance tests if applicable

            ### 8. Verification Checklist

            Before marking issue as resolved:
            - [ ] Issue reproduction steps no longer fail
            - [ ] All quality checks pass (`make check`)
            - [ ] Tests pass with good coverage
            - [ ] Code follows project standards
            - [ ] Changes are on correct branch
            - [ ] Commit references issue number

            **Remember: Always work on the appropriate branch and ensure all quality checks pass before considering an issue resolved.**

          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test
