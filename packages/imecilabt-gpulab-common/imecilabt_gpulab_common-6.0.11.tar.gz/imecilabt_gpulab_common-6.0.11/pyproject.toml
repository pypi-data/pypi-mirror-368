[project]
name="imecilabt-gpulab-common"
description="GPULab Common"
readme="README.md"
authors= [
    { name="Thijs Walcarius", email="thijs.walcarius@ugent.be"},
    { name="Wim Van de Meersche", email="wim.vandemeersche@ugent.be"},
    { name="Brecht Vermeulen", email="brecht.vermeulen@ugent.be"}
]
requires-python = ">=3.10"

dynamic=["version", "urls"]

license={file="LICENSE"}

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Operating System :: OS Independent",
]


dependencies = [
    "snakecase",
    "python-dateutil",
    "pyyaml",
    "pydantic[email]>=2.11.7,<3",
    "pydantic-yaml>=1.5.1,<2",
    "pydantic-settings>=2.10.1,<3",
    "imecilabt-utils >=1.5.0, <2",
]

packages = [
    "imecilabt.gpulab.model",
    "imecilabt.gpulab.util"
]

[project_urls]
Homepage = "https://gpulab.ilabt.imec.be"
Repository = "https://gitlab.ilabt.imec.be/ilabt/gpulab/gpulab-common"


[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch]

[tool.hatch.version]
source="vcs"
path="src/imecilabt/gpulab/_version.py"

[tool.hatch.build.targets.wheel]
packages= ["src/imecilabt"]

[project.optional-dependencies]

tests = [
    "pytest",
    "jsondiff"
]

[tool.pyright]
pythonVersion = "3.10"

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "ARG", # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B", # bugbear
    "C", # complexity
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "D", # docstrings
    "DTZ003", # Use datetime.now(tz=) instead of datetime.utcnow()
    "DTZ004", # Use datetime.fromtimestamp(ts, tz=) instead of datetime.utcfromtimestamp(ts)
    "E",  # pycodestyle
    "F", # pyflakes/autoflake
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "INT", # flake8-gettext
    "ISC", # flake8-implicit-str-concat
    "LOG", # flake8-logging
    "PERF", # perflint
    "PIE", # flake8-pie
    "PL", # pylint
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops,
    "T20", # flake8-print
    "UP", # pyupgrade
    "W", # pycodestyle
]

ignore = [
    "D107", # undocumented-public-init
    "D202", # No blank lines allowed after function docstring
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "S101", # allow asserts
    "TRY003", # raise-vanilla-args

    # May conflict with the formatter, https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q",
    "COM812",
    "COM819",
    "ISC001",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "D",
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    # The below are debatable
    "PLR2004", # Magic value used in comparison, ...
    "S105", # hard coded 'passwords' are ok here
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "PLR0915", # tests can have many asserts
    "T201", # allow print in tests (usually handy if they fail)
]
