Metadata-Version: 2.4
Name: clwe
Version: 0.0.0
Summary: Color Lattice Learning with Errors - Post-Quantum Cryptographic Library by CryptoPIX
Home-page: https://cryptopix.in
Author: Siddhu Chelluru
Author-email: Siddhu Chelluru <founder@cryptopix.in>
License: MIT
Project-URL: Homepage, https://cryptopix.in
Project-URL: Repository, https://cryptopix.in
Project-URL: Issues, https://cryptopix.in
Project-URL: Documentation, https://cryptopix.in
Keywords: post-quantum,cryptography,lattice,visual-steganography
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Security :: Cryptography
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.19.0
Requires-Dist: cryptography>=3.4.0
Requires-Dist: pillow>=8.0.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.10; extra == "dev"
Requires-Dist: black>=21.0; extra == "dev"
Requires-Dist: mypy>=0.800; extra == "dev"
Provides-Extra: performance
Requires-Dist: scipy>=1.7.0; extra == "performance"
Requires-Dist: numba>=0.53.0; extra == "performance"
Provides-Extra: visualization
Requires-Dist: matplotlib>=3.3.0; extra == "visualization"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# CLWE - Color Lattice Learning with Errors

**Ultra-optimized post-quantum cryptography with revolutionary visual steganography**

[![Version](https://img.shields.io/pypi/v/clwe.svg)](https://pypi.org/project/clwe/)
[![Python](https://img.shields.io/pypi/pyversions/clwe.svg)](https://pypi.org/project/clwe/)
[![License](https://img.shields.io/pypi/l/clwe.svg)](https://github.com/clwe-dev/clwe/blob/main/LICENSE)

CLWE v0.0.1 is a revolutionary post-quantum cryptographic library featuring unified automatic encryption with intelligent content detection. One method encrypts any content type - text, files, or binary data - into visual images while maintaining 99.9% compression efficiency and post-quantum security.

## Key Features

- **Unified Automatic API**: Single `encrypt_to_image()` method handles all content types automatically
- **Intelligent Content Detection**: Automatically detects text, file paths, and binary data
- **Universal File Support**: Encrypt any file type (documents, images, videos, executables, etc.)
- **Enhanced Variable Encryption**: Each encryption produces different output for same input (security boost)
- **Superior Compression**: 99.9% size reduction using 3-bytes-per-color packing
- **Metadata Preservation**: Maintains filename, size, and file type information
- **Pixel String Layout**: Perfect pixel strings with height=1 and exact width matching
- **Post-Quantum Security**: Resistant to both classical and quantum attacks
- **Visual Steganography**: Encrypt data into colorful visual patterns
- **Ultra-Optimized**: Sub-millisecond operations with intelligent compression selection

## Quick Start

### Installation

```bash
pip install clwe
```

### Basic Usage

```python
import clwe

# Key Encapsulation Mechanism
kem = clwe.ChromaCryptKEM(security_level=128)
public_key, private_key = kem.keygen()
shared_secret, ciphertext = kem.encapsulate(public_key)
recovered_secret = kem.decapsulate(private_key, ciphertext)

# Universal Automatic Encryption - Single Method for Everything
cipher = clwe.ColorCipher()

# Text encryption (automatic detection)
text_encrypted = cipher.encrypt_to_image("Hello World!", "password123")
decrypted_text = cipher.decrypt_from_image(text_encrypted, "password123")

# File encryption (automatic path detection)
file_encrypted = cipher.encrypt_to_image("document.pdf", "password123")
decrypted_file_path = cipher.decrypt_from_image(file_encrypted, "password123", "output/")

# Binary data encryption (automatic type detection)
binary_encrypted = cipher.encrypt_to_image(binary_data, "password123")
decrypted_binary = cipher.decrypt_from_image(binary_encrypted, "password123")

# Each encryption produces different output (security enhancement)
enc1 = cipher.encrypt_to_image("same_content", "password")
enc2 = cipher.encrypt_to_image("same_content", "password")
# enc1 != enc2 (different encrypted images for security)

# Quantum-Resistant Hashing
hasher = clwe.ColorHash()
color_hash = hasher.hash("data to hash")

# Digital Signatures
signer = clwe.ChromaCryptSign(security_level=128)
pub_key, priv_key = signer.keygen()
signature = signer.sign(priv_key, "message")
is_valid = signer.verify(pub_key, "message", signature)
```

## Security Levels

CLWE supports multiple security levels:

- **128-bit**: Fast operations, suitable for most applications
- **192-bit**: Enhanced security for sensitive data
- **256-bit**: Maximum security for critical applications

## Performance

CLWE v0.0.1 achieves industry-competitive performance:

- **Key Generation**: <10ms (128-bit security)
- **Encapsulation**: <5ms average
- **Decapsulation**: <3ms average
- **Visual Encryption**: <1ms for typical messages
- **Public Key Size**: 0.4KB (vs 4MB in basic implementations)

## Advanced Features

### Batch Processing

```python
from clwe.core.batch_operations import batch_color_processor

messages = ["msg1", "msg2", "msg3"]
passwords = ["pwd1", "pwd2", "pwd3"]
encrypted_batch = batch_color_processor.batch_color_encryption(messages, passwords)
```

### Hardware Acceleration

```python
from clwe.core.hardware_acceleration import hardware_manager

# Automatically uses available SIMD and multi-core capabilities
perf_summary = hardware_manager.get_performance_summary()
```

### Side-Channel Protection

```python
from clwe.core.side_channel_protection import side_channel_protection

# Validate security parameters
validation = side_channel_protection.validate_security_hardness(256, 3329, 2)
```

## Documentation

- [Usage Guide](USAGE_GUIDE.md) - Comprehensive usage examples
- [Publishing Guide](PUBLISHING_GUIDE.md) - How to contribute and publish
- [API Reference](docs/api.md) - Complete API documentation
- [Performance Analysis](docs/performance.md) - Detailed benchmarks

## Requirements

- Python 3.8+
- NumPy >= 1.19.0
- cryptography >= 3.0.0
- Pillow >= 8.0.0

## License

MIT License - see [LICENSE](LICENSE) for details.

## Contributing

We welcome contributions! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.

## Citation

If you use CLWE in your research, please cite:

```bibtex
@software{clwe2025,
  title={CLWE: Color Lattice Learning with Errors},
  author={CLWE Development Team},
  year={2025},
  url={https://github.com/clwe-dev/clwe}
}
```
