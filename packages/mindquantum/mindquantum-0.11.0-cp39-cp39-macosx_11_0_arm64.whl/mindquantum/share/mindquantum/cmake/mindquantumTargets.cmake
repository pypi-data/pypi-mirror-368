# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.6)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6...3.20)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget mindquantum::C_mindquantum mindquantum::CXX_mindquantum mindquantum::libm mindquantum::intrin_flag_C mindquantum::intrin_flag_CXX mindquantum::cxx20_compat mindquantum::cmake_config mindquantum::mindquantum_setup mindquantum::mq_base mindquantum::include_lib mindquantum::mqsim_common mindquantum::mqsim_vector_cpu mindquantum::mqsim_densitymatrix_cpu mindquantum::mqsim_stabilizer mindquantum::mqchem_cpu mindquantum::mq_math mindquantum::mq_python_core mindquantum::mqbackend_python_interface mindquantum::bind_lib mindquantum::mq_python_device mindquantum::_math_python_interface)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target mindquantum::C_mindquantum
add_library(mindquantum::C_mindquantum INTERFACE IMPORTED)

set_target_properties(mindquantum::C_mindquantum PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "\$<\$<COMPILE_LANGUAGE:C>:\$<\$<BOOL:ON>:MQ_MINDSPORE_CI>;\$<\$<BOOL:ON>:USE_OPENMP>;\$<\$<BOOL:OFF>:USE_PARALLEL_STL>;\$<\$<BOOL:OFF>:MQ_LOG_ACTIVE_LEVEL=SPDLOG_LEVEL_DEBUG>;\$<\$<BOOL:OFF>:MQ_LOG_ACTIVE_LEVEL=SPDLOG_LEVEL_TRACE>;\$<\$<BOOL:OFF>:ENABLE_LOGGING>;\$<\$<AND:\$<BOOL:OFF>,\$<BOOL:>>:_GLIBCXX_DEBUG>;\$<\$<AND:\$<CONFIG:RELEASE>,\$<COMPILE_LANGUAGE:CXX>>:_FORTIFY_SOURCE=2>>"
  INTERFACE_COMPILE_OPTIONS "\$<\$<AND:\$<COMPILE_LANGUAGE:C>,\$<OR:\$<CONFIG:RELEASE>,\$<CONFIG:RELWITHDEBINFO>>>:-ffast-math>;\$<\$<AND:\$<BOOL:ENABLE_STACK_PROTECTION>,\$<COMPILE_LANGUAGE:C>>:-fstack-protector-all>;\$<\$<AND:\$<BOOL:ENABLE_SANITIZER_ADDRESS>,\$<AND:\$<COMPILE_LANGUAGE:C>,\$<CONFIG:SANITIZER>>>:-fsanitize=address>;\$<\$<AND:\$<BOOL:ENABLE_SANITIZER_ADDRESS>,\$<AND:\$<COMPILE_LANGUAGE:C>,\$<CONFIG:SANITIZER>>>:-fno-omit-frame-pointer;-fno-optimize-sibling-calls>;\$<\$<AND:\$<BOOL:ENABLE_SANITIZER_UNDEFINED>,\$<AND:\$<COMPILE_LANGUAGE:C>,\$<CONFIG:SANITIZER>>>:-fsanitize=undefined>"
  INTERFACE_LINK_OPTIONS "\$<\$<AND:\$<BOOL:ENABLE_SANITIZER_ADDRESS>,\$<AND:\$<LINK_LANGUAGE:C>,\$<CONFIG:SANITIZER>>>:-fsanitize=address>;\$<\$<AND:\$<BOOL:ENABLE_SANITIZER_UNDEFINED>,\$<AND:\$<LINK_LANGUAGE:C>,\$<CONFIG:SANITIZER>>>:-fsanitize=undefined>;\$<\$<AND:\$<BOOL:ENABLE_STACK_PROTECTION>,\$<LINK_LANGUAGE:C>>:-fstack-protector-all>"
)

# Create imported target mindquantum::CXX_mindquantum
add_library(mindquantum::CXX_mindquantum INTERFACE IMPORTED)

set_target_properties(mindquantum::CXX_mindquantum PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "\$<\$<COMPILE_LANGUAGE:CXX>:\$<\$<BOOL:ON>:MQ_MINDSPORE_CI>;\$<\$<BOOL:ON>:USE_OPENMP>;\$<\$<BOOL:OFF>:USE_PARALLEL_STL>;\$<\$<BOOL:OFF>:MQ_LOG_ACTIVE_LEVEL=SPDLOG_LEVEL_DEBUG>;\$<\$<BOOL:OFF>:MQ_LOG_ACTIVE_LEVEL=SPDLOG_LEVEL_TRACE>;\$<\$<BOOL:OFF>:ENABLE_LOGGING>;\$<\$<AND:\$<BOOL:OFF>,\$<BOOL:>>:_GLIBCXX_DEBUG>;\$<\$<AND:\$<CONFIG:RELEASE>,\$<COMPILE_LANGUAGE:CXX>>:_FORTIFY_SOURCE=2>>"
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_COMPILE_OPTIONS "\$<\$<AND:\$<COMPILE_LANGUAGE:CXX>,\$<OR:\$<CONFIG:RELEASE>,\$<CONFIG:RELWITHDEBINFO>>>:-ffast-math>;\$<\$<AND:\$<BOOL:ENABLE_STACK_PROTECTION>,\$<COMPILE_LANGUAGE:CXX>>:-fstack-protector-all>;\$<\$<AND:\$<BOOL:ENABLE_SANITIZER_ADDRESS>,\$<AND:\$<COMPILE_LANGUAGE:CXX>,\$<CONFIG:SANITIZER>>>:-fsanitize=address>;\$<\$<AND:\$<BOOL:ENABLE_SANITIZER_ADDRESS>,\$<AND:\$<COMPILE_LANGUAGE:CXX>,\$<CONFIG:SANITIZER>>>:-fno-omit-frame-pointer;-fno-optimize-sibling-calls>;\$<\$<AND:\$<BOOL:ENABLE_SANITIZER_UNDEFINED>,\$<AND:\$<COMPILE_LANGUAGE:CXX>,\$<CONFIG:SANITIZER>>>:-fsanitize=undefined>"
  INTERFACE_LINK_OPTIONS "\$<\$<AND:\$<BOOL:ENABLE_SANITIZER_ADDRESS>,\$<AND:\$<LINK_LANGUAGE:CXX>,\$<CONFIG:SANITIZER>>>:-fsanitize=address>;\$<\$<AND:\$<BOOL:ENABLE_SANITIZER_UNDEFINED>,\$<AND:\$<LINK_LANGUAGE:CXX>,\$<CONFIG:SANITIZER>>>:-fsanitize=undefined>;\$<\$<AND:\$<BOOL:ENABLE_STACK_PROTECTION>,\$<LINK_LANGUAGE:CXX>>:-fstack-protector-all>"
)

# Create imported target mindquantum::libm
add_library(mindquantum::libm INTERFACE IMPORTED)

set_target_properties(mindquantum::libm PROPERTIES
  INTERFACE_LINK_LIBRARIES "m"
)

# Create imported target mindquantum::intrin_flag_C
add_library(mindquantum::intrin_flag_C INTERFACE IMPORTED)

set_target_properties(mindquantum::intrin_flag_C PROPERTIES
  INTERFACE_COMPILE_OPTIONS "\$<\$<COMPILE_LANGUAGE:C>:-march=armv8.5-a>"
)

# Create imported target mindquantum::intrin_flag_CXX
add_library(mindquantum::intrin_flag_CXX INTERFACE IMPORTED)

set_target_properties(mindquantum::intrin_flag_CXX PROPERTIES
  INTERFACE_COMPILE_OPTIONS "\$<\$<COMPILE_LANGUAGE:CXX>:-march=armv8.5-a>"
)

# Create imported target mindquantum::cxx20_compat
add_library(mindquantum::cxx20_compat INTERFACE IMPORTED)

# Create imported target mindquantum::cmake_config
add_library(mindquantum::cmake_config INTERFACE IMPORTED)

# Create imported target mindquantum::mindquantum_setup
add_library(mindquantum::mindquantum_setup INTERFACE IMPORTED)

set_target_properties(mindquantum::mindquantum_setup PROPERTIES
  INTERFACE_LINK_LIBRARIES "mindquantum::CXX_mindquantum;\$<\$<BOOL:FALSE>:C_mindquantum>"
)

# Create imported target mindquantum::mq_base
add_library(mindquantum::mq_base STATIC IMPORTED)

set_target_properties(mindquantum::mq_base PROPERTIES
  INTERFACE_COMPILE_FEATURES "\$<IF:\$<COMPILE_FEATURES:cxx_std_20>,cxx_std_20,cxx_std_17>"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/mindquantum"
  INTERFACE_LINK_LIBRARIES "OpenMP::OpenMP_CXX;mindquantum::cxx20_compat;mindquantum::cmake_config;fmt::fmt-header-only;nlohmann_json::nlohmann_json;mindquantum::mindquantum_setup;\$<\$<BOOL:OFF>:mindquantum::spdlog>;\$<LINK_ONLY:mindquantum::mq_math>"
)

# Create imported target mindquantum::include_lib
add_library(mindquantum::include_lib INTERFACE IMPORTED)

set_target_properties(mindquantum::include_lib PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/mindquantum"
)

# Create imported target mindquantum::mqsim_common
add_library(mindquantum::mqsim_common STATIC IMPORTED)

set_target_properties(mindquantum::mqsim_common PROPERTIES
  INTERFACE_LINK_LIBRARIES "mindquantum::mq_base"
)

# Create imported target mindquantum::mqsim_vector_cpu
add_library(mindquantum::mqsim_vector_cpu STATIC IMPORTED)

set_target_properties(mindquantum::mqsim_vector_cpu PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "__amd64"
  INTERFACE_LINK_LIBRARIES "mindquantum::mqsim_common;mindquantum::mq_math;mindquantum::intrin_flag_CXX"
)

# Create imported target mindquantum::mqsim_densitymatrix_cpu
add_library(mindquantum::mqsim_densitymatrix_cpu STATIC IMPORTED)

set_target_properties(mindquantum::mqsim_densitymatrix_cpu PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "__amd64"
  INTERFACE_LINK_LIBRARIES "mindquantum::mqsim_common;mindquantum::mq_math;mindquantum::intrin_flag_CXX"
)

# Create imported target mindquantum::mqsim_stabilizer
add_library(mindquantum::mqsim_stabilizer STATIC IMPORTED)

set_target_properties(mindquantum::mqsim_stabilizer PROPERTIES
  INTERFACE_LINK_LIBRARIES "mindquantum::mqsim_common;mindquantum::mq_math;mindquantum::intrin_flag_CXX"
)

# Create imported target mindquantum::mqchem_cpu
add_library(mindquantum::mqchem_cpu STATIC IMPORTED)

set_target_properties(mindquantum::mqchem_cpu PROPERTIES
  INTERFACE_LINK_LIBRARIES "mindquantum::mqsim_common;mindquantum::mq_math;mindquantum::intrin_flag_CXX"
)

# Create imported target mindquantum::mq_math
add_library(mindquantum::mq_math STATIC IMPORTED)

set_target_properties(mindquantum::mq_math PROPERTIES
  INTERFACE_LINK_LIBRARIES "OpenMP::OpenMP_CXX;mindquantum::include_lib;mindquantum::cmake_config;mindquantum::cxx20_compat;mindquantum::mq_base"
)

# Create imported target mindquantum::mq_python_core
add_library(mindquantum::mq_python_core INTERFACE IMPORTED)

set_target_properties(mindquantum::mq_python_core PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/mindquantum"
)

# Create imported target mindquantum::mqbackend_python_interface
add_library(mindquantum::mqbackend_python_interface INTERFACE IMPORTED)

set_target_properties(mindquantum::mqbackend_python_interface PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/mindquantum"
)

# Create imported target mindquantum::bind_lib
add_library(mindquantum::bind_lib INTERFACE IMPORTED)

# Create imported target mindquantum::mq_python_device
add_library(mindquantum::mq_python_device INTERFACE IMPORTED)

set_target_properties(mindquantum::mq_python_device PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/mindquantum"
)

# Create imported target mindquantum::_math_python_interface
add_library(mindquantum::_math_python_interface INTERFACE IMPORTED)

set_target_properties(mindquantum::_math_python_interface PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/mindquantum"
)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/mindquantumTargets-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
