// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkerMachine {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(int64, tag = "2")]
    pub worker_admin_id: i64,
    #[prost(map = "uint32, string", tag = "3")]
    pub gpus: ::std::collections::HashMap<u32, ::prost::alloc::string::String>,
    #[prost(enumeration = "WorkerMachineStatus", tag = "4")]
    pub status: i32,
    #[prost(map = "string, enumeration(WorkerMachineStatus)", tag = "5")]
    pub device_statuses: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        i32,
    >,
    #[prost(string, tag = "6")]
    pub w_to_cn: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub cn_to_w: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum WorkerMachineStatus {
    Available = 0,
    Unavailable = 1,
}
impl WorkerMachineStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Available => "WORKER_MACHINE_STATUS_AVAILABLE",
            Self::Unavailable => "WORKER_MACHINE_STATUS_UNAVAILABLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WORKER_MACHINE_STATUS_AVAILABLE" => Some(Self::Available),
            "WORKER_MACHINE_STATUS_UNAVAILABLE" => Some(Self::Unavailable),
            _ => None,
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWorkerMachineRequest {
    #[prost(map = "uint32, string", tag = "1")]
    pub gpus: ::std::collections::HashMap<u32, ::prost::alloc::string::String>,
    #[prost(enumeration = "WorkerMachineStatus", tag = "2")]
    pub status: i32,
    #[prost(map = "string, enumeration(WorkerMachineStatus)", tag = "3")]
    pub device_statuses: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        i32,
    >,
    #[prost(int64, tag = "4")]
    pub worker_admin_id: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreateWorkerMachineResponse {
    #[prost(int64, tag = "1")]
    pub id: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateWorkerMachineRequest {
    #[prost(int64, tag = "1")]
    pub worker_machine_id: i64,
    #[prost(map = "uint32, string", tag = "2")]
    pub gpus: ::std::collections::HashMap<u32, ::prost::alloc::string::String>,
    #[prost(enumeration = "WorkerMachineStatus", tag = "3")]
    pub status: i32,
    #[prost(map = "string, enumeration(WorkerMachineStatus)", tag = "4")]
    pub device_statuses: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        i32,
    >,
    #[prost(int64, tag = "5")]
    pub worker_admin_id: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateWorkerMachineResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetWorkerMachineRequest {
    #[prost(int64, tag = "1")]
    pub id: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWorkerMachineResponse {
    #[prost(message, optional, tag = "1")]
    pub worker_machine: ::core::option::Option<WorkerMachine>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueueWorkerMachineRequest {
    #[prost(int64, tag = "2")]
    pub worker_machine_id: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueueWorkerMachineResponse {}
/// Generated client implementations.
pub mod worker_machine_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct WorkerMachineServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl WorkerMachineServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> WorkerMachineServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> WorkerMachineServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            WorkerMachineServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn create_worker_machine(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateWorkerMachineRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateWorkerMachineResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/worker_machine.WorkerMachineService/CreateWorkerMachine",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "worker_machine.WorkerMachineService",
                        "CreateWorkerMachine",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_worker_machine(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateWorkerMachineRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateWorkerMachineResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/worker_machine.WorkerMachineService/UpdateWorkerMachine",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "worker_machine.WorkerMachineService",
                        "UpdateWorkerMachine",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn negotiate_peer_connection(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::super::shared::PeerRtcMessage,
            >,
        ) -> std::result::Result<
            tonic::Response<
                tonic::codec::Streaming<super::super::shared::PeerRtcMessage>,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/worker_machine.WorkerMachineService/NegotiatePeerConnection",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "worker_machine.WorkerMachineService",
                        "NegotiatePeerConnection",
                    ),
                );
            self.inner.streaming(req, path, codec).await
        }
        pub async fn queue_worker_machine(
            &mut self,
            request: impl tonic::IntoRequest<super::QueueWorkerMachineRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueueWorkerMachineResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/worker_machine.WorkerMachineService/QueueWorkerMachine",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "worker_machine.WorkerMachineService",
                        "QueueWorkerMachine",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_worker_machine(
            &mut self,
            request: impl tonic::IntoRequest<super::GetWorkerMachineRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetWorkerMachineResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/worker_machine.WorkerMachineService/GetWorkerMachine",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "worker_machine.WorkerMachineService",
                        "GetWorkerMachine",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
