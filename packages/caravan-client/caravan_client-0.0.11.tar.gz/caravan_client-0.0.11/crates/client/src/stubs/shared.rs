// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PeerRtcMessage {
    #[prost(int64, tag = "1")]
    pub peer_id: i64,
    #[prost(enumeration = "RtcEvent", tag = "2")]
    pub event: i32,
    #[prost(bytes = "vec", tag = "3")]
    pub message: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RtcEvent {
    Offer = 0,
    Answer = 1,
    AcceptAnswer = 2,
    IceCandidate = 3,
    LocalIceCandidate = 4,
    Blank = 5,
    Connected = 6,
    Closed = 7,
    Ping = 8,
}
impl RtcEvent {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Offer => "OFFER",
            Self::Answer => "ANSWER",
            Self::AcceptAnswer => "ACCEPT_ANSWER",
            Self::IceCandidate => "ICE_CANDIDATE",
            Self::LocalIceCandidate => "LOCAL_ICE_CANDIDATE",
            Self::Blank => "BLANK",
            Self::Connected => "CONNECTED",
            Self::Closed => "CLOSED",
            Self::Ping => "PING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OFFER" => Some(Self::Offer),
            "ANSWER" => Some(Self::Answer),
            "ACCEPT_ANSWER" => Some(Self::AcceptAnswer),
            "ICE_CANDIDATE" => Some(Self::IceCandidate),
            "LOCAL_ICE_CANDIDATE" => Some(Self::LocalIceCandidate),
            "BLANK" => Some(Self::Blank),
            "CONNECTED" => Some(Self::Connected),
            "CLOSED" => Some(Self::Closed),
            "PING" => Some(Self::Ping),
            _ => None,
        }
    }
}
