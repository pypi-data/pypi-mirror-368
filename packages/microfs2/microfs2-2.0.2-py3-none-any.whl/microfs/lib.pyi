# Copyright (c) 2025 Blackteahamburger <blackteahamburger@outlook.com>
import pathlib
from collections.abc import Iterable
from types import TracebackType
from typing import Final, Self

from _typeshed import ReadableBuffer as ReadableBuffer
from serial import Serial
from serial.tools.list_ports_linux import SysFS as SysFS

class MicroBitError(OSError): ...
class MicroBitIOError(MicroBitError): ...
class MicroBitNotFoundError(MicroBitError): ...

class MicroBitSerial(Serial):
    SERIAL_BAUD_RATE: Final[int]
    DEFAULT_TIMEOUT: Final[int]
    def __init__(
        self,
        port: str | None = None,
        baudrate: int = ...,
        bytesize: int = ...,
        parity: str = ...,
        stopbits: int = ...,
        timeout: int = ...,
        xonxoff: bool = False,
        rtscts: bool = False,
        write_timeout: float | None = None,
        dsrdtr: bool = False,
        inter_byte_timeout: float | None = None,
        exclusive: bool | None = None,
        **kwargs: float,
    ) -> None: ...
    @staticmethod
    def find_microbit() -> SysFS | None: ...
    @classmethod
    def get_serial(cls, timeout: int = 10) -> Self: ...
    def __enter__(self) -> Self: ...
    def __exit__(
        self,
        exc_type: type[BaseException] | None,
        exc_val: BaseException | None,
        exc_tb: TracebackType | None,
    ) -> None: ...
    def close(self) -> None: ...
    def write(self, b: ReadableBuffer) -> int | None: ...
    def flush_to_msg(self, msg: bytes) -> None: ...
    def flush(self) -> None: ...
    def raw_on(self) -> None: ...
    def raw_off(self) -> None: ...
    def write_command(self, command: str) -> bytes: ...
    def write_commands(self, commands: Iterable[str]) -> bytes: ...

def ls(serial: MicroBitSerial) -> list[str]: ...
def cp(serial: MicroBitSerial, src: str, dst: str) -> None: ...
def mv(serial: MicroBitSerial, src: str, dst: str) -> None: ...
def rm(serial: MicroBitSerial, filenames: Iterable[str]) -> None: ...
def cat(serial: MicroBitSerial, filename: str) -> str: ...
def du(serial: MicroBitSerial, filename: str) -> int: ...
def put(
    serial: MicroBitSerial, filename: pathlib.Path, target: str | None = None
) -> None: ...
def get(
    serial: MicroBitSerial, filename: str, target: pathlib.Path | None = None
) -> None: ...
def version(serial: MicroBitSerial) -> dict[str, str]: ...
