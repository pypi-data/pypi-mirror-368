#!/home/twinkle/venv/bin/python

######################################################################
# LIBS

import noopy as np
from noopy import dumpxh

import noopy.lst as lp
from noopy.lst import lispy
import noopy.arr as ap
from noopy.arr import arrpy
import noopy.str as sp
from noopy.str import strpy

######################################################################
# MAIN

#my_lst = lispy([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
#my_arr = arrpy('i', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
#my_str = strpy(sp.flatten([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
# 0123456789
#print(my_str)

moji = strpy("0123456789abcdefghijklmnopqrstuvwxyz")
retu = lispy(lp.flatten(moji))
#gyou = arrpy('L', lp.linspace(100, 136, 36, 'i'))
gyou = arrpy('u', u"0123456789abcdefghijklmnopqrstuvwxyz")

######################################################################
# MAIN

# strpy
print("==============================")
print("[[strpy]]")
print("import noopy.str as sp")
print("from noopy.str import strpy")
print("------------------------------")
print("By the first, this is original [str] array.")
print(moji, 6)
print("------------------------------")
print("[ Transpose (6x6) ]")
print("moji.transpose(6, 6)")
print(moji.transpose(6, 6))
dumpxh(moji.transpose(6, 6), 6)
print("[ Flip LR (6x6) ]")
print("moji.flip(6, 6, \x22x\x22)")
print(moji.flip(6, 6, "x"))
dumpxh(moji.flip(6, 6, "x"), 6)
print("[ Flip UD (6x6) ]")
print("moji.flip(6, 6, \x22y\x22)")
print(moji.flip(6, 6, "y"))
dumpxh(moji.flip(6, 6, "y"), 6)
print("[ Flip XY (6x6) ]")
print("moji.flip(6, 6, \x22z\x22)")
print(moji.flip(6, 6, "z"))
dumpxh(moji.flip(6, 6, "z"), 6)
print("------------------------------")
print("[ Zeros ]")
print("sp.zeros(36)")
print(sp.zeros(36))
print("[ Ones ]")
print("sp.ones(36)")
print(sp.ones(36))
print("[ Linspace ]")
print("sp.linspace(40, 80, 36, \x27f\x27)")
print(sp.linspace(40, 80, 36, 'f'))
print("------------------------------")
print("[ Transpose (3x3) ]")
print("sp.transpose(moji, 3, 3)")
dumpxh(sp.transpose(moji, 3, 3), 3)
print("[ Flip XY (3x3) ]")
print("sp.flip(moji, 3, 3, \x22z\x22)")
print(sp.flip(moji, 3, 3, 'z'))
dumpxh(sp.flip(moji, 3, 3, 'z'), 3)
print("")

# noopy
print("[[noopy fetaures]]")
print("Available split positions.")
print("np.splpos(moji)")
print(np.splpos(moji))
print("Available split to 9(9x4)?")
print("np.is_spl(moji, 9)")
print(np.is_spl(moji, 9))
print("Split to 9(9x4).")
print("splt = np.splist(moji, 9)")
splt = np.splist(moji, 9)
print(splt)
print("(** Str to List)")
print(type(moji), ' -> ', type(splt))
print("------------------------------")
print("[ Flatten (strpy) ]")
print("fltn = sp.flatten(splt)")
fltn = sp.flatten(splt)
print(fltn)
print("(** List to Str")
print(type(splt), ' -> ', type(fltn))
print("[ Flatten (lispy) ]")
print("lp.flatten(splt)")
print(lp.flatten(splt))
print("")

# lispy
print("==============================")
print("[[lispy]]")
print("import noopy.lst as lp")
print("from noopy.lst import lispy")
print("------------------------------")
print("By the first, this is original list.")
dumpxh(retu, 6)
print("------------------------------")
print("[ Transpose (6x6) ]")
print("retu.transpose(6, 6)")
dumpxh(retu.transpose(6, 6), 6)
print("[ Flip LR (6x6) ]")
print("retu.flip(6, 6, \x22x\x22)")
dumpxh(retu.flip(6, 6, "x"), 6)
print("[ Flip UD (6x6) ]")
print("retu.flip(6, 6, \x22y\x22)")
dumpxh(retu.flip(6, 6, "y"), 6)
print("[ Flip XY (6x6) ]")
print("retu.flip(6, 6, \x22z\x22)")
dumpxh(retu.flip(6, 6, "z"), 6)
print("------------------------------")
print("[Zeros]")
print("lp.zeros(36)")
dumpxh(lp.zeros(36), 6)
print("[Ones]")
print("lp.ones(36)")
dumpxh(lp.ones(36), 6)
print("[ Linspace ]")
print("lp.linspace(40, 80, 36, \x27i\x27)")
dumpxh(lp.linspace(40, 80, 36, 'i'), 6)
print("------------------------------")
print("[ Transpose (3x3) ]")
print("lp.transpose(retu, 3, 3)")
dumpxh(lp.transpose(retu, 3, 3), 3)
print("[ Flip LR (3x3) ]")
print("lp.flip(retu, 3, 3, \x22z\x22)")
dumpxh(lp.flip(retu, 3, 3, 'x'), 3)
print("[ Flip UD (3x3) ]")
print("lp.flip(retu, 3, 3, \x22z\x22)")
dumpxh(lp.flip(retu, 3, 3, 'y'), 3)
print("[ Flip XY (3x3) ]")
print("lp.flip(retu, 3, 3, \x22z\x22)")
dumpxh(lp.flip(retu, 3, 3, 'z'), 3)
print("")

# arrpy
print("==============================")
print("[[arrpy]]")
print("import noopy.arr as ap")
print("from noopy.arr import arrpy")
print("------------------------------")
tycd = ap.get_types()
print(f"typecodes: {tycd}")
print("------------------------------")
print("By the first, this is original [unicode 'u'] array.")
dumpxh(gyou, 6)
print("------------------------------")
print("[ Transpose (6x6) ]")
print("gyou.transpose(6, 6)")
dumpxh(gyou.transpose(6, 6), 6)
print("[ Flip LR (6x6) ]")
print("gyou.flip(6, 6, \x22x\x22)")
dumpxh(gyou.flip(6, 6, "x"), 6)
print("[ Flip UD (6x6) ]")
print("gyou.flip(6, 6, \x22y\x22)")
dumpxh(gyou.flip(6, 6, "y"), 6)
print("[ Flip XY (6x6) ]")
print("gyou.flip(6, 6, \x22z\x22)")
dumpxh(gyou.flip(6, 6, "z"), 6)
print("------------------------------")
print("[Zeros]")
print("ap.zeros(36)")
dumpxh(ap.zeros(36, t="i"), 6)
print("[Ones]")
print("ap.ones(36)")
dumpxh(ap.ones(36, t="i"), 6)
print("[ Linspace ]")
print("ap.linspace(40, 80, 36, \x27i\x27)")
dumpxh(ap.linspace(40, 80, 36, 'i'), 6)
print("------------------------------")
print("[ Transpose (3x3) ]")
print("ap.transpose(gyou, 3, 3)")
dumpxh(ap.transpose(gyou, 3, 3), 3)
print("[ Flip LR (3x3) ]")
print("ap.flip(gyou, 3, 3, \x22z\x22)")
dumpxh(ap.flip(gyou, 3, 3, 'x'), 3)
print("[ Flip UD (3x3) ]")
print("ap.flip(gyou, 3, 3, \x22z\x22)")
dumpxh(ap.flip(gyou, 3, 3, 'y'), 3)
print("[ Flip XY (3x3) ]")
print("ap.flip(gyou, 3, 3, \x22z\x22)")
dumpxh(ap.flip(gyou, 3, 3, 'z'), 3)
print("")

#=====================================================================
# ALL - Make it directly accessible from the top level of the package
__all__ = []

""" __DATA__

__END__ """
