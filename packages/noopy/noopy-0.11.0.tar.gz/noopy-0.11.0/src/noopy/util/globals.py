#!/home/twinkle/venv/bin/python
# -*- encoding: utf-8 -*-

# Globals
class __globals__():
    def __init__(self, *args, **kwargs):
        super(__globals__, self).__init__(*args, **kwargs)
        self.builtins = [].__class__.__class__.__subclasses__([].__class__.__class__)[0].register.__builtins__
        print("__init__", type(self), args, kwargs)
        #self.__qualname__ == self.__qualname__
    def __call__(self, *args, **kwargs):
        print("__call__", type(self), args, kwargs)
    # Conflict on Imports Any
    #def __new__(self, *a, **k): print("__new__", type(self), a, k)
    #def __del__(self, *a, **k): print("__del__", type(self), a, k)
    #def __globals__(self, *a, **k): print("__globals__", type(self), a, k)
    #def __closure__(self, *a, **k): print("__closure__", type(self), a, k)
    #def __class__(self, *a, **k): print("__class__", type(self), a, k)
    #def __name__(self, *a, **k): print("__name__", type(self), a, k)
    #def __module__(self, *a, **k): print("__module__", type(self), a, k)
    #def __doc__(self, *a, **k): print("__doc__", type(self), a, k)
    #def __defaults__(self, *a, **k): print("__defaults__", type(self), a, k)
    #def __code__(self, *a, **k): print("__code__", type(self), a, k)
    #def __annotations__(self, *a, **k): print("__annotations__", type(self), a, k)
    #def __kwdefaults__(self, *a, **k): print("__kwdefaults__", type(self), a, k)
    #def __type_params__(self, *a, **k): print("__type_params__", type(self), a, k)
    #def __static_attributes__(self, *a, **k): print("__static_attributes__", type(self), a, k)
    #def __firstlineno__(self, *a, **k): print("__firstlineno__", type(self), a, k)
    #def __slots__(self, *a, **k): print("__slots__", type(self), a, k)
    #def __set_name__(self, *a, **k): print("__set_name__", type(self), a, k)
    #def __objclass__(self, *a, **k): print("__objclass__", type(self), a, k)
    #def __mro__(self, *a, **k): print("__mro__", type(self), a, k)
    #def __mro_entries__(self, *a, **k): print("__mro_entries__", type(self), a, k)
    #def __bases__(self, *a, **k): print("__bases__", type(self), a, k)
    #def __prepare__(self, *a, **k): print("__prepare__", type(self), a, k)
    #def __subclasses__(self, *a, **k): print("__subclasses__", type(self), a, k)
    #def __instancecheck__(self, *a, **k): print("__instancecheck__", type(self), a, k)
    #def __subclasscheck__(self, *a, **k): print("__subclasscheck__", type(self), a, k)
    #def __init_subclass__(self, *a, **k): print("__init_subclass__", type(self), a, k)
    #def __static_attributes__(self, *a, **k): print("__static_attributes__", type(self), a, k)
    #def __class_getitem__(self, *a, **k): print("__class_getitem__", type(self), a, k)
    #def __enter__(self, *a, **k): print("__enter__", type(self), a, k)
    #def __exit__(self, *a, **k): print("__exit__", type(self), a, k)
    #def __match_args__(self, *a, **k): print("__match_args__", type(self), a, k)
    #def __buffer__(self, *a, **k): print("__buffer__", type(self), a, k)
    #def __release_buffer__(self, *a, **k): print("__release_buffer__", type(self), a, k)
    #def __await__(self, *a, **k): print("__await__", type(self), a, k)
    #def __aenter__(self, *a, **k): print("__aenter__", type(self), a, k)
    #def __aexit__(self, *a, **k): print("__aexit__", type(self), a, k)
    ##
    #def __dict__(self, *a, **k): print("__dict__", type(self), a, k)
    ##
    #def __str__(self, *a, **k): print("__str__", type(self), a, k)
    #def __repr__(self, *a, **k): print("__repr__", type(self), a, k)
    #def __bytes__(self, *a, **k): print("__bytes__", type(self), a, k)
    #def __format__(self, *a, **k): print("__format__", type(self), a, k)
    #def __lt__(self, *a, **k): print("__lt__", type(self), a, k)
    #def __le__(self, *a, **k): print("__le__", type(self), a, k)
    #def __eq__(self, *a, **k): print("__eq__", type(self), a, k)
    #def __ne__(self, *a, **k): print("__ne__", type(self), a, k)
    #def __eq__(self, *a, **k): print("__eq__", type(self), a, k)
    #def __gt__(self, *a, **k): print("__gt__", type(self), a, k)
    #def __ge__(self, *a, **k): print("__ge__", type(self), a, k)
    #def __hash__(self, *a, **k): print("__hash__", type(self), a, k)
    #def __bool__(self, *a, **k): print("__bool__", type(self), a, k)
    #def __getattribute__(self, *a, **k): print("__getattribute__", type(self), a, k)
    #def __getattr__(self, *a, **k): print("__getattr__", type(self), a, k)
    #def __setattr__(self, *a, **k): print("__setattr__", type(self), a, k)
    #def __delattr__(self, *a, **k): print("__delattr__", type(self), a, k)
    #def __dir__(self, *a, **k): print("__dir__", type(self), a, k)
    #def __get__(self, *a, **k): print("__get__", type(self), a, k)
    #def __set__(self, *a, **k): print("__set__", type(self), a, k)
    #def __delete__(self, *a, **k): print("__delete__", type(self), a, k)
    ##
    #def __len__(self, *a, **k): print("__len__", type(self), a, k)
    #def __length_hint__(self, *a, **k): print("__length_hint__", type(self), a, k)
    #def __getitem__(self, *a, **k): print("__getitem__", k)
    #def __setitem__(self, *a, **k): print("__setitem__", k, v)
    #def __delitem__(self, *a, **k): print("__delitem__", type(self), a, k)
    #def __missing__(self, *a, **k): print("__missing__", type(self), a, k)
    #def __iter__(self, *a, **k): print("__iter__", type(self), a, k)
    #def __reversed__(self, *a, **k): print("__reversed__", type(self), a, k)
    #def __contains__(self, *a, **k): print("__contains__", type(self), a, k)
    ##
    def __add__(self, *a, **k): print("__add__", type(self), a, k)
    def __sub__(self, *a, **k): print("__sub__", type(self), a, k)
    def __mul__(self, *a, **k): print("__mul__", type(self), a, k)
    def __matmul__(self, *a, **k): print("__matmul__", type(self), a, k)
    def __truediv__(self, *a, **k): print("__truediv__", type(self), a, k)
    def __floordiv__(self, *a, **k): print("__floordiv__", type(self), a, k)
    def __mod__(self, *a, **k): print("__mod__", type(self), a, k)
    def __divmod__(self, *a, **k): print("__divmod__", type(self), a, k)
    def __pow__(self, *a, **k): print("__pow__", type(self), a, k)
    def __lshift__(self, *a, **k): print("__lshift__", type(self), a, k)
    def __rshift__(self, *a, **k): print("__rshift__", type(self), a, k)
    def __and__(self, *a, **k): print("__and__", type(self), a, k)
    def __xor__(self, *a, **k): print("__xor__", type(self), a, k)
    def __or__(self, *a, **k): print("__or__", type(self), a, k)
    def __not__(self, *a, **k): print("__not__", type(self), a, k)
    ##
    def __radd__(self, *a, **k): print("__radd__", type(self), a, k)
    def __rsub__(self, *a, **k): print("__rsub__", type(self), a, k)
    def __rmul__(self, *a, **k): print("__rmul__", type(self), a, k)
    def __rmatmul__(self, *a, **k): print("__rmatmul__", type(self), a, k)
    def __rtruediv__(self, *a, **k): print("__rtruediv__", type(self), a, k)
    def __rfloordiv__(self, *a, **k): print("__rfloordiv__", type(self), a, k)
    def __rmod__(self, *a, **k): print("__rmod__", type(self), a, k)
    def __rdivmod__(self, *a, **k): print("__rdivmod__", type(self), a, k)
    def __rpow__(self, *a, **k): print("__rpow__", type(self), a, k)
    def __rlshift__(self, *a, **k): print("__rlshift__", type(self), a, k)
    def __rrshift__(self, *a, **k): print("__rrshift__", type(self), a, k)
    def __rand__(self, *a, **k): print("__rand__", type(self), a, k)
    def __rxor__(self, *a, **k): print("__rxor__", type(self), a, k)
    def __ror__(self, *a, **k): print("__ror__", type(self), a, k)
    def __rnot__(self, *a, **k): print("__not__", type(self), a, k)
    ##
    def __iadd__(self, *a, **k): print("__iadd__", type(self), a, k)
    def __isub__(self, *a, **k): print("__isub__", type(self), a, k)
    def __imul__(self, *a, **k): print("__imul__", type(self), a, k)
    def __imatmul__(self, *a, **k): print("__imatmul__", type(self), a, k)
    def __itruediv__(self, *a, **k): print("__itruediv__", type(self), a, k)
    def __ifloordiv__(self, *a, **k): print("__ifloordiv__", type(self), a, k)
    def __imod__(self, *a, **k): print("__imod__", type(self), a, k)
    def __idivmod__(self, *a, **k): print("__idivmod__", type(self), a, k)
    def __ipow__(self, *a, **k): print("__ipow__", type(self), a, k)
    def __ilshift__(self, *a, **k): print("__ilshift__", type(self), a, k)
    def __irshift__(self, *a, **k): print("__irshift__", type(self), a, k)
    def __iand__(self, *a, **k): print("__iand__", type(self), a, k)
    def __ixor__(self, *a, **k): print("__ixor__", type(self), a, k)
    def __ior__(self, *a, **k): print("__ior__", type(self), a, k)
    ##
    #def __neg__(self, *a, **k): print("__neg__", type(self), a, k)
    #def __pos__(self, *a, **k): print("__pos__", type(self), a, k)
    #def __abs__(self, *a, **k): print("__abs__", type(self), a, k)
    #def __invert__(self, *a, **k): print("__invert__", type(self), a, k)
    #def __complex__(self, *a, **k): print("__complex__", type(self), a, k)
    #def __int__(self, *a, **k): print("__int__", type(self), a, k)
    #def __float__(self, *a, **k): print("__float__", type(self), a, k)
    #def __index__(self, *a, **k): print("__index__", type(self), a, k)
    #def __round__(self, *a, **k): print("__round__", type(self), a, k)
    #def __trunc__(self, *a, **k): print("__trunc__", type(self), a, k)
    #def __floor__(self, *a, **k): print("__floor__", type(self), a, k)
    #def __ceil__(self, *a, **k): print("__ceil__", type(self), a, k)

######################################################################
# MAIN
if __name__ == "__main__":
    print(f"[{__name__}]")
    print(__doc__)

#=====================================================================
# ALL - Make it directly accessible from the top level of the package
__all__ = ["__globals__"]

""" __DATA__

__END__ """
