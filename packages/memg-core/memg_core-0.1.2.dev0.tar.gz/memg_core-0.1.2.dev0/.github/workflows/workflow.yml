name: MEMG Core CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, dev ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  ##################### Security & Quality Checks ########################
  security-and-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e ".[dev]"
          # Ensure Ruff is available for the next step
          pip install ruff

      - name: Security scan with bandit
        run: |
          echo "Running security scan with bandit..."
          bandit -r src/ -f json -o bandit-report.json || echo "Bandit found issues but continuing..."
          echo "Bandit report summary:"
          bandit -r src/

      - name: Code quality with ruff
        run: |
          echo "Running code quality checks with ruff..."
          ruff check src/ --output-format=json > ruff-report.json || echo "Ruff found issues"
          echo "Running ruff format check..."
          ruff format --check src/
          echo "Running ruff linting (will fail CI on issues)..."
          ruff check src/

      - name: Pylint code quality check
        run: |
          echo "Running pylint quality check..."
          pylint src/ --fail-under=7.0 --score=yes

      - name: Type checking with mypy
        run: |
          echo "Running type checking..."
          mypy src/ --ignore-missing-imports || echo "Type checking completed with warnings"

      - name: Run tests
        run: |
          echo "Running test suite..."
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing || echo "Tests completed"


  ##################### Build MCP Docker Image ########################
  build-mcp-docker:
    needs: publish-to-pypi
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN_PASSWORD }}

      - name: Extract metadata for MCP server (GHCR + Docker Hub)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}-mcp
            docker.io/${{ secrets.DOCKER_HUB_TOKEN_USERNAME }}/memg-core-mcp
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}},enable={{is_tag}}
            type=semver,pattern={{major}}.{{minor}},enable={{is_tag}}
            type=semver,pattern={{major}},enable={{is_tag}}

      - name: Build and push MCP Docker image (to GHCR + Docker Hub)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: dockerfiles/Dockerfile.mcp
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  ##################### PyPI Publishing ########################
  publish-to-pypi:
    needs: security-and-quality
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      id-token: write  # Required for Trusted Publishing
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: |
          echo "Building Python package..."
          python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          skip-existing: true
          attestations: true  # Enable package attestations for better security

  ##################### Deployment ########################
  deploy:
    needs: [build-mcp-docker, publish-to-pypi]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    steps:
      - name: MCP Docker Image Published
        id: deploy
        run: |
          echo "MCP Docker image published to GitHub Container Registry"
          echo "Image: ${{ needs.build-mcp-docker.outputs.image-tag }}"
          echo "Image Digest: ${{ needs.build-mcp-docker.outputs.image-digest }}"
          echo "Ready for deployment"
          echo ""
          echo "Pull command:"
          echo "docker pull ghcr.io/genovo-ai/memg-core-mcp:${{ github.ref_name }}"

      - name: Deployment Instructions
        run: |
          echo "üéâ MEMG Core published successfully!"
          echo ""
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "üì¶ Core Library: pip install memg-core"
            echo "üê≥ MCP Server: docker pull ghcr.io/genovo-ai/memg-core-mcp:latest"
          fi
          echo ""
          echo "üöÄ Deploy MCP Server:"
          echo "1. docker pull ghcr.io/genovo-ai/memg-core-mcp:${{ github.ref_name }}"
          echo "2. cp env.example .env && edit GOOGLE_API_KEY"
          echo "3. docker run --env-file .env -p 8787:8787 ghcr.io/genovo-ai/memg-core-mcp:${{ github.ref_name }}"
          echo ""
          echo "üìö Use Core Library:"
          echo "1. pip install memg-core"
          echo "2. from memory_system import MemorySystem"
