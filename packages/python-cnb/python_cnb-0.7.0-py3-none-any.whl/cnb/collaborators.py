# Code generated by cnb.cool/cnb/sdk/cnb-sdk-generator. DO NOT EDIT.
# versions:
#    cnb-sdk-generator: 1.0.2
# source: https://api.cnb.cool/swagger.json

from typing import Optional
from .models import dto
class CollaboratorsService:    
	def __init__(self, client):
		self._client = client

	# 添加成员。Add members.
	def add_members_of_group(self,
		group: str,
		username: str,
	    body_params: dto.UpdateMembersRequest,
		):
		u = "/%s/-/members/%s" % (group, username, )

		data = self._client.request(
			method="POST", 
			endpoint=u,
			json=body_params.to_dict(),
			)
		return 
		
	# 添加成员。Add members.
	def add_members_of_mission(self,
		mission: str,
		username: str,
	    body_params: dto.UpdateMembersRequest,
		):
		u = "/%s/-/members/%s" % (mission, username, )

		data = self._client.request(
			method="POST", 
			endpoint=u,
			json=body_params.to_dict(),
			)
		return 
		
	# 添加成员。Add members.
	def add_members_of_registry(self,
		registry: str,
		username: str,
	    body_params: dto.UpdateMembersRequest,
		):
		u = "/%s/-/members/%s" % (registry, username, )

		data = self._client.request(
			method="POST", 
			endpoint=u,
			json=body_params.to_dict(),
			)
		return 
		
	# 添加成员。Add members.
	def add_members_of_repo(self,
		repo: str,
		username: str,
	    body_params: dto.UpdateMembersRequest,
		):
		u = "/%s/-/members/%s" % (repo, username, )

		data = self._client.request(
			method="POST", 
			endpoint=u,
			json=body_params.to_dict(),
			)
		return 
		
	# 删除指定组织或仓库的直接成员。Remove direct members from specified organization/repository.
	def delete_members_of_group(self,
		group: str,
		username: str,
	    ):
		u = "/%s/-/members/%s" % (group, username, )

		data = self._client.request(
			method="DELETE", 
			endpoint=u,
			)
		return 
		
	# 删除指定组织或仓库的直接成员。Remove direct members from specified organization/repository.
	def delete_members_of_repo(self,
		repo: str,
		username: str,
	    ):
		u = "/%s/-/members/%s" % (repo, username, )

		data = self._client.request(
			method="DELETE", 
			endpoint=u,
			)
		return 
		
	# 删除指定仓库的外部贡献者。Removes external contributors from specified repository.
	def delete_outside_collaborators(self,
		repo: str,
		username: str,
	    ):
		u = "/%s/-/outside-collaborators/%s" % (repo, username, )

		data = self._client.request(
			method="DELETE", 
			endpoint=u,
			)
		return 
		
	# 获取指定仓库内的有效成员列表，包含继承成员。List active members in specified repository including inherited members.
	def list_all_members(self,
		repo: str,
	    page: Optional[int] = None,
		page_size: Optional[int] = None,
		role: Optional[str] = None,
		search: Optional[str] = None,
		names: Optional[str] = None,
		order_by: Optional[str] = None,
		desc: Optional[bool] = None,
		) -> list[dto.UsersWithAccessLevelInSlug]:
		u = "/%s/-/list-members" % (repo, )

		query_params = {
			"page": page,
			"page_size": page_size,
			"role": role,
			"search": search,
			"names": names,
			"order_by": order_by,
			"desc": desc,
			}
		data = self._client.request(
			method="GET", 
			endpoint=u,
			params=query_params,
			)
		return [dto.UsersWithAccessLevelInSlug.safe_parse(item) for item in data]
		
	# 获取指定组织或仓库内的继承成员。List inherited members within specified organization or repository。
	def list_inherit_members_of_group(self,
		group: str,
	    search: Optional[str] = None,
		role: Optional[str] = None,
		page: Optional[int] = None,
		page_size: Optional[int] = None,
		) -> list[dto.ListInheritMembers]:
		u = "/%s/-/inherit-members" % (group, )

		query_params = {
			"search": search,
			"role": role,
			"page": page,
			"page_size": page_size,
			}
		data = self._client.request(
			method="GET", 
			endpoint=u,
			params=query_params,
			)
		return [dto.ListInheritMembers.safe_parse(item) for item in data]
		
	# 获取指定组织或仓库内的继承成员。List inherited members within specified organization or repository。
	def list_inherit_members_of_repo(self,
		repo: str,
	    search: Optional[str] = None,
		role: Optional[str] = None,
		page: Optional[int] = None,
		page_size: Optional[int] = None,
		) -> list[dto.ListInheritMembers]:
		u = "/%s/-/inherit-members" % (repo, )

		query_params = {
			"search": search,
			"role": role,
			"page": page,
			"page_size": page_size,
			}
		data = self._client.request(
			method="GET", 
			endpoint=u,
			params=query_params,
			)
		return [dto.ListInheritMembers.safe_parse(item) for item in data]
		
	# 获取指定组织或仓库内的所有直接成员。List all direct members within specified organization or repository.
	def list_members_of_group(self,
		group: str,
	    page: Optional[int] = None,
		page_size: Optional[int] = None,
		role: Optional[str] = None,
		search: Optional[str] = None,
		) -> list[dto.UsersWithAccessLevelInSlug]:
		u = "/%s/-/members" % (group, )

		query_params = {
			"page": page,
			"page_size": page_size,
			"role": role,
			"search": search,
			}
		data = self._client.request(
			method="GET", 
			endpoint=u,
			params=query_params,
			)
		return [dto.UsersWithAccessLevelInSlug.safe_parse(item) for item in data]
		
	# 获取指定组织或仓库内的所有直接成员。List all direct members within specified organization or repository.
	def list_members_of_repo(self,
		repo: str,
	    page: Optional[int] = None,
		page_size: Optional[int] = None,
		role: Optional[str] = None,
		search: Optional[str] = None,
		) -> list[dto.UsersWithAccessLevelInSlug]:
		u = "/%s/-/members" % (repo, )

		query_params = {
			"page": page,
			"page_size": page_size,
			"role": role,
			"search": search,
			}
		data = self._client.request(
			method="GET", 
			endpoint=u,
			params=query_params,
			)
		return [dto.UsersWithAccessLevelInSlug.safe_parse(item) for item in data]
		
	# 获取指定仓库内的外部贡献者。List external contributors in specified repository.
	def list_outside_collaborators(self,
		repo: str,
	    page: Optional[int] = None,
		page_size: Optional[int] = None,
		role: Optional[str] = None,
		search: Optional[str] = None,
		) -> list[dto.OutsideCollaboratorInRepo]:
		u = "/%s/-/outside-collaborators" % (repo, )

		query_params = {
			"page": page,
			"page_size": page_size,
			"role": role,
			"search": search,
			}
		data = self._client.request(
			method="GET", 
			endpoint=u,
			params=query_params,
			)
		return [dto.OutsideCollaboratorInRepo.safe_parse(item) for item in data]
		
	# 获取 top 贡献用户。List the top contributing users
	def top_contributors(self,
		repo: str,
	    top: Optional[int] = None,
		) -> list[dto.UsersResult]:
		u = "/%s/-/top-activity-users" % (repo, )

		query_params = {
			"top": top,
			}
		data = self._client.request(
			method="GET", 
			endpoint=u,
			params=query_params,
			)
		return [dto.UsersResult.safe_parse(item) for item in data]
		
	# 更新指定组织或仓库内的直接成员权限信息。Update permission information for direct members in specified organization/repository.
	def update_members_of_group(self,
		group: str,
		username: str,
	    body_params: dto.UpdateMembersRequest,
		):
		u = "/%s/-/members/%s" % (group, username, )

		data = self._client.request(
			method="PUT", 
			endpoint=u,
			json=body_params.to_dict(),
			)
		return 
		
	# 更新指定组织或仓库内的直接成员权限信息。Update permission information for direct members in specified organization/repository.
	def update_members_of_repo(self,
		repo: str,
		username: str,
	    body_params: dto.UpdateMembersRequest,
		):
		u = "/%s/-/members/%s" % (repo, username, )

		data = self._client.request(
			method="PUT", 
			endpoint=u,
			json=body_params.to_dict(),
			)
		return 
		
	# 更新指定仓库的外部贡献者权限信息。 Update permission information for external contributors in specified repository.
	def update_outside_collaborators(self,
		repo: str,
		username: str,
	    role: Optional[str] = None,
		):
		u = "/%s/-/outside-collaborators/%s" % (repo, username, )

		query_params = {
			"role": role,
			}
		data = self._client.request(
			method="PUT", 
			endpoint=u,
			params=query_params,
			)
		return 
		
	