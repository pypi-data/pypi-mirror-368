# AUTO-GENERATED by src/rd_cdm/utils/gen_pydantic.py
# Schema: /Users/adam/Documents/git/rd-cdm/src/rd_cdm/schema/rd_cdm.yaml

from __future__ import annotations 

import re
import sys
from datetime import (
    date,
    datetime,
    time
)
from decimal import Decimal 
from enum import Enum 
from typing import (
    Any,
    ClassVar,
    Literal,
    Optional,
    Union
)

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    field_validator
)


metamodel_version = "None"
version = "None"


class ConfiguredBaseModel(BaseModel):
    model_config = ConfigDict(
        validate_assignment = True,
        validate_default = True,
        extra = "forbid",
        arbitrary_types_allowed = True,
        use_enum_values = True,
        strict = False,
    )
    pass




class LinkMLMeta(RootModel):
    root: dict[str, Any] = {}
    model_config = ConfigDict(frozen=True)

    def __getattr__(self, key:str):
        return getattr(self.root, key)

    def __getitem__(self, key:str):
        return self.root[key]

    def __setitem__(self, key:str, value):
        self.root[key] = value

    def __contains__(self, key:str) -> bool:
        return key in self.root


linkml_meta = LinkMLMeta({'default_prefix': 'https://github.com/BIH-CEI/rd-cdm/linkml/rd_cdm.schema.yaml/',
     'id': 'https://github.com/BIH-CEI/rd-cdm/linkml/rd_cdm.schema.yaml',
     'imports': ['linkml:types'],
     'license': 'CC0',
     'name': 'rd_cdm.schema.yaml',
     'prefixes': {'linkml': {'prefix_prefix': 'linkml',
                             'prefix_reference': 'https://w3id.org/linkml/'},
                  'rdcdm': {'prefix_prefix': 'rdcdm',
                            'prefix_reference': 'https://github.com/BIH-CEI/rd-cdm/'},
                  'xsd': {'prefix_prefix': 'xsd',
                          'prefix_reference': 'http://www.w3.org/2001/XMLSchema#'}},
     'source_file': '/Users/adam/Documents/git/rd-cdm/src/rd_cdm/schema/rd_cdm.yaml'} )


class RdCdm(ConfiguredBaseModel):
    """
    Root class for the Rare Disease Common Data Model (RD-CDM)
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://github.com/BIH-CEI/rd-cdm/linkml/rd_cdm.schema.yaml',
         'tree_root': True})

    code_systems: Optional[list[CodeSystem]] = Field(default=None, json_schema_extra = { "linkml_meta": {'alias': 'code_systems', 'domain_of': ['RdCdm']} })
    data_elements: Optional[list[DataElement]] = Field(default=None, json_schema_extra = { "linkml_meta": {'alias': 'data_elements', 'domain_of': ['RdCdm']} })
    value_sets: Optional[list[ValueSet]] = Field(default=None, json_schema_extra = { "linkml_meta": {'alias': 'value_sets', 'domain_of': ['RdCdm']} })


class CodeSystem(ConfiguredBaseModel):
    """
    Metadata for an ontology or code system
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://github.com/BIH-CEI/rd-cdm/linkml/rd_cdm.schema.yaml'})

    id: str = Field(default=..., description="""The CURIE prefix used for terms in this code system (e.g. “ncbitaxon”, “snomedct”, “icd10cm”).
""", json_schema_extra = { "linkml_meta": {'alias': 'id', 'domain_of': ['CodeSystem', 'ValueSet']} })
    namespace_iri: str = Field(default=..., description="""The base namespace IRI for this ontology, used by OAKlib to expand CURIEs and load the adapter.
""", json_schema_extra = { "linkml_meta": {'alias': 'namespace_iri', 'domain_of': ['CodeSystem']} })
    version: str = Field(default=..., description="""The release version or publication date of the ontology""", json_schema_extra = { "linkml_meta": {'alias': 'version', 'domain_of': ['CodeSystem']} })
    title: Optional[str] = Field(default=None, description="""A human-readable title for this code system""", json_schema_extra = { "linkml_meta": {'alias': 'title', 'domain_of': ['CodeSystem']} })
    homepage: Optional[str] = Field(default=None, description="""A URL for human browsing or documentation""", json_schema_extra = { "linkml_meta": {'alias': 'homepage', 'domain_of': ['CodeSystem']} })


class Coding(ConfiguredBaseModel):
    """
    A code + code system reference
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://github.com/BIH-CEI/rd-cdm/linkml/rd_cdm.schema.yaml'})

    system: str = Field(default=..., description="""CURIE for the code system""", json_schema_extra = { "linkml_meta": {'alias': 'system', 'domain_of': ['Coding']} })
    code: str = Field(default=..., description="""The code within the system""", json_schema_extra = { "linkml_meta": {'alias': 'code', 'domain_of': ['Coding']} })
    label: Optional[str] = Field(default=None, description="""Preferred label for the code""", json_schema_extra = { "linkml_meta": {'alias': 'label', 'domain_of': ['Coding', 'ValueSet']} })


class ValueSet(ConfiguredBaseModel):
    """
    A set of permitted codes for a data element
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://github.com/BIH-CEI/rd-cdm/linkml/rd_cdm.schema.yaml'})

    id: str = Field(default=..., description="""Unique identifier for the value set""", json_schema_extra = { "linkml_meta": {'alias': 'id', 'domain_of': ['CodeSystem', 'ValueSet']} })
    label: str = Field(default=..., description="""Human-readable name""", json_schema_extra = { "linkml_meta": {'alias': 'label', 'domain_of': ['Coding', 'ValueSet']} })
    codes: Optional[list[Coding]] = Field(default=None, description="""List of allowed codes""", json_schema_extra = { "linkml_meta": {'alias': 'codes', 'domain_of': ['ValueSet']} })


class DataElement(ConfiguredBaseModel):
    """
    A single data field in the RD-CDM
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://github.com/BIH-CEI/rd-cdm/linkml/rd_cdm.schema.yaml'})

    ordinal: str = Field(default=..., description="""Position within the form or section""", json_schema_extra = { "linkml_meta": {'alias': 'ordinal', 'domain_of': ['DataElement']} })
    section: Optional[str] = Field(default=None, description="""Logical grouping or heading""", json_schema_extra = { "linkml_meta": {'alias': 'section', 'domain_of': ['DataElement']} })
    elementName: str = Field(default=..., description="""Human-readable name of the element""", json_schema_extra = { "linkml_meta": {'alias': 'elementName', 'domain_of': ['DataElement']} })
    elementCode: Coding = Field(default=..., description="""Primary code describing the element""", json_schema_extra = { "linkml_meta": {'alias': 'elementCode', 'domain_of': ['DataElement']} })
    elementCodeSystem: str = Field(default=..., description="""Identifier of the code system (matches one of the `CodeSystem.id` values, e.g. “SNOMEDCT”, “LOINC”, “CustomCode”).""", json_schema_extra = { "linkml_meta": {'alias': 'elementCodeSystem', 'domain_of': ['DataElement']} })
    dataType: Optional[str] = Field(default=None, description="""Data type (e.g., string, integer, identifier)""", json_schema_extra = { "linkml_meta": {'alias': 'dataType', 'domain_of': ['DataElement']} })
    dataSpecification: Optional[list[str]] = Field(default=None, description="""Reference or link to specification""", json_schema_extra = { "linkml_meta": {'alias': 'dataSpecification', 'domain_of': ['DataElement']} })
    valueSet: Optional[str] = Field(default=None, description="""Value set CURIE if applicable""", json_schema_extra = { "linkml_meta": {'alias': 'valueSet', 'domain_of': ['DataElement']} })
    fhirExpression_v4_0_1: Optional[str] = Field(default=None, description="""FHIRPath expression for FHIR mapping""", json_schema_extra = { "linkml_meta": {'alias': 'fhirExpression_v4_0_1', 'domain_of': ['DataElement']} })
    recommendedDataSpec_fhir: Optional[str] = Field(default=None, description="""Recommendations for FHIR profiling""", json_schema_extra = { "linkml_meta": {'alias': 'recommendedDataSpec_fhir', 'domain_of': ['DataElement']} })
    phenopacketSchemaElement_v2_0: Optional[str] = Field(default=None, description="""Phenopacket schema path""", json_schema_extra = { "linkml_meta": {'alias': 'phenopacketSchemaElement_v2_0', 'domain_of': ['DataElement']} })
    recommendedDataSpec_phenopackets: Optional[str] = Field(default=None, description="""Recommended Phenopacket datatype or format""", json_schema_extra = { "linkml_meta": {'alias': 'recommendedDataSpec_phenopackets', 'domain_of': ['DataElement']} })
    description: Optional[str] = Field(default=None, description="""Full textual description of the element""", json_schema_extra = { "linkml_meta": {'alias': 'description', 'domain_of': ['DataElement']} })


# Model rebuild
# see https://pydantic-docs.helpmanual.io/usage/models/#rebuilding-a-model
RdCdm.model_rebuild()
CodeSystem.model_rebuild()
Coding.model_rebuild()
ValueSet.model_rebuild()
DataElement.model_rebuild()
