#!/usr/bin/env python3
"""
Generate Pydantic models from the LinkML schema into:
  src/rd_cdm/python_classes/rd_cdm_pydantic.py

This uses the LinkML Python API only (no CLI flags), so it’s stable across
LinkML versions. It does NOT generate any versioned models.
"""
from __future__ import annotations
from pathlib import Path
import sys
import re


def _rewrite_pydantic_config_to_v2(src: str) -> str:
    """
    Replace Pydantic v1 `class Config:` blocks with v2 `model_config = ConfigDict(...)`.
    """
    # Ensure ConfigDict is imported
    if "ConfigDict" not in src:
        src = src.replace(
            "from pydantic import BaseModel",
            "from pydantic import BaseModel, ConfigDict"
        )

    # Match a Config class definition with indented attributes
    pattern = re.compile(r"(?ms)^class\s+Config:\n((?:\s+.+\n)+)")

    def repl(m: re.Match) -> str:
        body = m.group(1)
        kwargs = []
        for line in body.splitlines():
            stripped = line.strip()
            if not stripped or stripped.startswith("#"):
                continue
            if "=" in stripped:
                k, v = stripped.split("=", 1)
                kwargs.append(f"{k.strip()}={v.strip()}")
        return f"model_config = ConfigDict({', '.join(kwargs)})\n" if kwargs else ""

    return re.sub(pattern, repl, src)


def main() -> int:
    # utils/ -> repo root
    repo_root = Path(__file__).resolve().parents[3]
    schema = repo_root / "src" / "rd_cdm" / "schema" / "rd_cdm.yaml"
    out_file = repo_root / "src" / "rd_cdm" / "python_classes" / "rd_cdm_pydantic.py"

    if not schema.exists():
        print(f"ERROR: schema not found at {schema}", file=sys.stderr)
        return 2

    try:
        from linkml.generators.pydanticgen import PydanticGenerator
    except Exception as e:
        print("ERROR: Could not import PydanticGenerator (is 'linkml' installed?)", file=sys.stderr)
        print(f"Details: {e}", file=sys.stderr)
        return 1

    try:
        gen = PydanticGenerator(str(schema))
        code_str = gen.serialize()  # Python source as a string
        code_str = _rewrite_pydantic_config_to_v2(code_str)  # Patch for Pydantic v2
    except Exception as e:
        print("ERROR: Failed to generate Pydantic code from schema.", file=sys.stderr)
        print(f"Details: {e}", file=sys.stderr)
        return 1

    header = (
        "# AUTO-GENERATED by src/rd_cdm/utils/gen_pydantic.py\n"
        f"# Schema: {schema}\n\n"
    )
    try:
        out_file.parent.mkdir(parents=True, exist_ok=True)
        out_file.write_text(header + code_str, encoding="utf-8")
    except Exception as e:
        print(f"ERROR: Failed to write {out_file}", file=sys.stderr)
        print(f"Details: {e}", file=sys.stderr)
        return 1

    print(f"✅ Pydantic models written to {out_file}")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
