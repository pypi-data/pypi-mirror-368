[project]
name = "snakestack"
version = "0.14.1"
description = "Uma coleção de utilitários para acelerar o desenvolvimento backend em Python com padrões reutilizáveis e produtivos"
authors = [
    {name = "Bruno Segato",email = "brunosegatoit@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.13,<4.0"
include = ["snakestack/py.typed"]

[tool.poetry.extras]
mongodb = ["motor"]
redis = ["redis"]
pubsub = ["google-cloud-pubsub"]
telemetry = [
    "opentelemetry-api",
    "opentelemetry-instrumentation-logging",
    "opentelemetry-exporter-otlp",
    "opentelemetry-instrumentation-grpc",
    "opentelemetry-instrumentation-httpx"
]
all = [
    "redis",
    "google-cloud-pubsub",
    "opentelemetry-api",
    "opentelemetry-instrumentation-logging",
    "opentelemetry-exporter-otlp",
    "opentelemetry-instrumentation-grpc",
    "opentelemetry-instrumentation-httpx",
    "motor"
]

[tool.poetry.dependencies]
pydantic = ">=2.11.7"
google-cloud-pubsub = { version = "^2.31.0", optional = true }
pydantic-settings = "^2.10.1"
opentelemetry-api = { version = "^1.36.0", optional = true }
opentelemetry-instrumentation-logging = { version = "^0.57b0", optional = true }
opentelemetry-exporter-otlp = { version = "^1.36.0", optional = true }
opentelemetry-instrumentation-grpc = { version = "^0.57b0", optional = true }
opentelemetry-instrumentation-httpx = { version = "^0.57b0", optional = true }
httpx = "^0.28.1"
motor = { version = "^3.7.1", optional = true }
orjson = "^3.11.1"
redis = { version = "^6.4.0", optional = true }

[tool.poetry.group.test.dependencies]
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
pytest-mock = "^3.14.1"
freezegun = "^1.5.3"
pytest-env = "^1.1.5"
pytest-asyncio = "^1.1.0"
pytest-faker = "^2.0.0"
factory-boy = "^3.3.3"


[tool.poetry.group.lint.dependencies]
ruff = "^0.12.5"
mypy = "^1.17.0"
pre-commit = "^4.2.0"


[tool.poetry.group.dev.dependencies]
commitizen = "^4.8.3"

[tool.pytest.ini_options]
asyncio_mode = "auto"
env = [
    "SNAKESTACK_LOG_LEVEL=DEBUG",
    "PUBSUB_PROJECT_ID=snakestack-project",
    "PUBSUB_EMULATOR_HOST=localhost:8085",
    "SNAKESTACK_MONGODB_URL=mongodb://",
    "SNAKESTACK_MONGODB_DBNAME=test",
]
markers = [
    "unit: Unit tests with mocks",
    "integration: Integration tests without mocks",
    "logging: Logging domain tests",
    "cache: Cache domain tests",
    "pubsub: Pubsub domain tests",
    "telemetry: Telemetry domain tests",
    "httpx: Httpx domain tests",
    "mongodb: MongoDB domain tests",
    "model: Model domain tests",
    "healthz: HealthCheck domain tests",
    "config: Config domain tests"
]
testpaths = ["tests"]

[tool.ruff]
exclude = ["examples"]
line-length = 88
target-version = "py311"
lint.extend-select = [
    "I",    # isort — ordenação de imports
    "S",    # flake8-bandit - regras de segurança estáticas
    "ANN",  # flake8-annotations - regras de annotations
    "E4",   # pycodestyle - error
    "E7",   # pycodestyle - error
    "E9",   # pycodestyle - error
    "F",    # pyflakes — erros estáticos simples (variáveis não usadas, etc.)
    "W",    # pycodestyle - warning
    "C901"  # mccabe
]
fix = true
lint.ignore = ["ANN401"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "ANN", "S108"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.format]
quote-style = "preserve"

[tool.mypy]
exclude = ['^examples/', '^tests/']
strict = true
show_error_codes = true
ignore_missing_imports = true
check_untyped_defs = true
allow_untyped_calls = true
packages = "snakestack"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
