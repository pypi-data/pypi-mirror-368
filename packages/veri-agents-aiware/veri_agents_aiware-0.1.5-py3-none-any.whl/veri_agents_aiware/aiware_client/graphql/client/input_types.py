# Generated by ariadne-codegen
# Source: https://api.us-1.veritone.com/v3/graphql

from datetime import datetime
from typing import Annotated, Any, List, Optional

from pydantic import Field, PlainSerializer

from veri_agents_aiware.aiware_client.graphql.schemas import (
    JSONData,
    serialize_jsondata,
)

from .base_model import BaseModel
from .enums import (
    AlwaysUpFlowStatus,
    ApplicationComponentType,
    ApplicationConfigLevelEnum,
    ApplicationConfigValueEnum,
    ApplicationDateTimeField,
    ApplicationOrderField,
    ApplicationStatus,
    ApplicationViewerBuildOrderByField,
    ApplicationViewerBuildStatus,
    ApplicationViewerOrderField,
    ApplicationViewerType,
    ApplicationWorkflowAction,
    AssetCreationMode,
    AuditLogOrderByField,
    AuthGroupMemberType,
    AuthObjectClass,
    AuthPermissionType,
    AuthResourceType,
    BatchProcessDateTimeField,
    BatchProcessOrderField,
    BatchProcessStatus,
    BuildUpdateAction,
    BundleCategory,
    ClusterDateTimeField,
    ClusterOrderByField,
    ClusterStatus,
    ClusterType,
    CollaboratorStatus,
    CollectionMentionOrderField,
    ContextMenuExtensionType,
    CreateTriggerTarget,
    CredentialType,
    DataRetentionActionEnum,
    DatasetActionType,
    DayOfWeek,
    DeploymentModel,
    EmailProvider,
    EngineBuildOrderByField,
    EngineDateTimeField,
    EngineDistributionType,
    EngineFieldType,
    EngineMode,
    EngineOrderField,
    EngineSchemaIOType,
    EngineState,
    EngineTypeFilter,
    EngineWorkflowAction,
    EntityIdentifierDataType,
    EntityTagType,
    EventAction,
    EventActionTemplateActionType,
    EventActionTemplateInputType,
    EventCustomRuleStatus,
    EventDeliveryType,
    EventNameEnum,
    EventSubscriptionScope,
    ExportRequestStatus,
    FolderOrderByField,
    GPUSupported,
    InstanceAuditLogOrderByField,
    IntervalUnit,
    IoFolderMode,
    IoFolderType,
    JobDateTimeField,
    JobOrderField,
    JobStatus,
    JobTemplateEnumType,
    LibraryEngineModelTrainStatus,
    MediaStorageOption,
    MentionDateTimeField,
    MentionOrderByField,
    ModuleRepo,
    NodeModuleStatus,
    NotificationDateTimeField,
    NotificationDeliveryType,
    NotificationFlag,
    OrderDirection,
    OrganizationInviteAction,
    OrganizationStatus,
    OrganizationType,
    OrgDocumentType,
    OrgFileResourceStatus,
    OrgRegistrationStatus,
    PackageGrantAction,
    PackageGrantType,
    PackageResourceAction,
    PackageResourceType,
    PackageStatus,
    PriceDimension,
    RootFolderType,
    RunMode,
    ScheduledJobDateTimeField,
    ScheduledJobOrderField,
    ScheduledJobPartTimeField,
    SchemaOrderFields,
    SchemaStatus,
    SdoDateTimeField,
    SearchIndex,
    SetClusterPermission,
    SetEntityProfileImage,
    SetScheduledJobPermission,
    SetSourcePermission,
    SharedCollectionHistoryStatus,
    SourceAccessType,
    SourceOrderField,
    StorageProviderType,
    StringMatch,
    StructuredDataOrderByField,
    SubscriptionFrequency,
    SubscriptionObjectType,
    TaskDateTimeField,
    TaskFailureReason,
    TaskOrderField,
    TaskStatus,
    TemplateLanguage,
    TemporalDataObjectDateTimeField,
    UpdateApplicationComponentAction,
    UpdateJobsStatus,
    UpdateOrganizationClusterAction,
    UpdateTDOFlag,
    UsersDateTimeField,
    UserStatus,
    filterCombineOperator,
)


class AuthRoleRequirement(BaseModel):
    permissions: List[AuthPermissionType]
    resourceType: AuthResourceType
    resourceIdFieldPath: str
    parentPath: Optional[str] = None
    parentType: Optional[AuthResourceType] = None


class AuthResource(BaseModel):
    resourceType: AuthResourceType
    resourceIdFieldPath: str


class PackageGrantFilter(BaseModel):
    grantType: Optional[PackageGrantType] = None
    isLatest: Optional[bool] = None
    status: Optional[PackageStatus] = None
    nameRegex: Optional[str] = None
    distributionType: Optional[EngineDistributionType] = None


class NotificationDateTimeFilter(BaseModel):
    fromDateTime: Optional[datetime] = None
    toDateTime: Optional[datetime] = None
    field: NotificationDateTimeField


class AuditLogOrderBy(BaseModel):
    field: Optional[AuditLogOrderByField] = None
    direction: Optional[OrderDirection] = None


class TaskDateTimeFilter(BaseModel):
    toDateTime: Optional[datetime] = None
    fromDateTime: Optional[datetime] = None
    field: TaskDateTimeField


class JobDateTimeFilter(BaseModel):
    toDateTime: Optional[datetime] = None
    fromDateTime: Optional[datetime] = None
    field: JobDateTimeField


class EngineDateTimeFilter(BaseModel):
    toDateTime: Optional[datetime] = None
    fromDateTime: Optional[datetime] = None
    field: EngineDateTimeField


class TemporalDataObjectDateTimeFilter(BaseModel):
    toDateTime: Optional[datetime] = None
    toDateTimeExclusive: Optional[bool] = None
    fromDateTime: Optional[datetime] = None
    fromDateTimeExclusive: Optional[bool] = None
    field: TemporalDataObjectDateTimeField


class UsersDateTimeFilter(BaseModel):
    toDateTime: Optional[datetime] = None
    toDateTimeExclusive: Optional[bool] = None
    fromDateTime: Optional[datetime] = None
    fromDateTimeExclusive: Optional[bool] = None
    field: Optional[UsersDateTimeField] = None
    fallbackField: Optional[UsersDateTimeField] = None


class PackageFilter(BaseModel):
    organizationId: Optional[str] = None
    primaryResourceType: Optional[PackageResourceType] = None
    isLatest: Optional[bool] = None
    name: Optional[str] = None
    nameMatch: Optional[StringMatch] = None
    caseSensitive: Optional[bool] = None


class PackageCreateInput(BaseModel):
    id: Optional[str] = None
    organizationId: Optional[str] = None
    name: str
    description: Optional[str] = None
    icon: Optional[str] = None
    distributionType: Optional[EngineDistributionType] = None
    version: str
    resources: Optional[List[Optional["PackageResourceInput"]]] = None
    primaryResourceId: Optional[str] = None
    sourceOriginId: Optional[str] = None
    sourcePackageId: Optional[str] = None
    aiwareVersion: Optional[str] = None
    status: Optional[PackageStatus] = None
    installDate: Optional[datetime] = None
    deleted: Optional[bool] = None
    packageCreatedDate: Optional[datetime] = None
    autoGenerated: Optional[bool] = None


class PackageUpdateInput(BaseModel):
    id: str
    name: Optional[str] = None
    description: Optional[str] = None
    icon: Optional[str] = None
    distributionType: Optional[EngineDistributionType] = None
    version: Optional[str] = None
    resources: Optional[List[Optional["PackageResourceInput"]]] = None
    primaryResourceId: Optional[str] = None
    deprecated: Optional[bool] = None
    aiwareVersion: Optional[str] = None
    status: Optional[PackageStatus] = None
    installDate: Optional[datetime] = None


class UpdateApplicationViewerInput(BaseModel):
    name: str
    icon: Optional[str] = None
    description: Optional[str] = None
    isPublic: Optional[bool] = None


class UpdateApplicationEventEndpoint(BaseModel):
    id: str
    eventEndpoint: str


class GetApplicationJWT(BaseModel):
    appId: str
    orgId: Optional[str] = None
    roleIds: Optional[List[Optional[str]]] = None


class EnableOpenIdProviderForOrg(BaseModel):
    connectId: str
    organizationGuid: str


class DisableOpenIdProviderForOrg(BaseModel):
    connectId: str
    organizationGuid: str


class CreateOpenIdProvider(BaseModel):
    name: str
    description: Optional[str] = None
    websiteUrl: Optional[str] = None
    clientId: str
    clientSecret: str
    issuerUrl: str
    btnText: Optional[str] = None
    btnLogo: Optional[str] = None
    btnColor: Optional[str] = None
    btnTextColor: Optional[str] = None
    isGlobal: Optional[bool] = None
    allowedRedirectTargets: Optional[List[str]] = None


class UpdateOpenIdProvider(BaseModel):
    id: str
    name: Optional[str] = None
    description: Optional[str] = None
    websiteUrl: Optional[str] = None
    clientSecret: Optional[str] = None
    issuerUrl: Optional[str] = None
    btnText: Optional[str] = None
    btnLogo: Optional[str] = None
    btnColor: Optional[str] = None
    btnTextColor: Optional[str] = None
    allowedRedirectTargets: Optional[List[str]] = None


class UpdateUserSetting(BaseModel):
    reset: Optional[bool] = None
    userId: Optional[str] = None
    application: Optional[str] = None
    key: str
    value: Optional[str] = None


class SetNotificationFlag(BaseModel):
    notificationId: str
    setFlags: Optional[List[Optional[NotificationFlag]]] = None
    unsetFlags: Optional[List[Optional[NotificationFlag]]] = None


class AddNotificationAction(BaseModel):
    eventName: str
    eventType: str
    actionName: Optional[str] = None
    icon: Optional[str] = None
    urlTemplate: str
    application: Optional[str] = None
    mailboxId: Optional[str] = None


class AddNotificationTemplate(BaseModel):
    eventName: str
    eventType: str
    title: str
    body: str
    application: Optional[str] = None
    mailboxId: Optional[str] = None


class NotificaionPostInput(BaseModel):
    mailboxIds: Optional[List[Optional[str]]] = None
    title: Optional[str] = None
    body: str
    contentType: str
    application: Optional[str] = None
    flags: Optional[List[NotificationFlag]] = None
    eventName: Optional[str] = None
    eventType: Optional[str] = None
    ephemeral: Optional[bool] = None


class NotificationMailboxInput(BaseModel):
    name: str
    eventFilter: "EventFilterInput"
    notificationTemplate: str
    limit: Optional[int] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    userId: Optional[str] = None
    orgId: Optional[str] = None


class EventFilterInput(BaseModel):
    eventNames: List[str]
    eventType: str
    applicationId: Optional[str] = None
    delivery: "notificationDelivery"
    conditions: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )


class notificationDelivery(BaseModel):
    deliveryType: Optional[NotificationDeliveryType] = None
    params: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class RemoveTaskReplacementEngine(BaseModel):
    sourceEngineId: str
    replacementEngineId: str
    organizationId: Optional[str] = None


class AddTaskReplacementEngine(BaseModel):
    sourceEngineId: str
    replacementEngineId: str
    organizationId: Optional[str] = None
    payloadFunc: Optional[str] = None


class CreateFlowExecution(BaseModel):
    flowExecutionId: Optional[str] = None
    flowId: str
    flowRevisionId: Optional[str] = None
    flowExecutionStatus: Optional[str] = None
    flowExecutionResult: Optional[str] = None
    flowExecutionLog: Optional[str] = None
    flowExecutionInput: Optional[str] = None
    runMode: Optional[str] = None


class UpdateFlowExecution(BaseModel):
    flowExecutionId: str
    flowExecutionStatus: Optional[str] = None
    flowExecutionResult: Optional[str] = None
    flowExecutionLog: Optional[str] = None
    flowExecutionInput: Optional[str] = None


class SetOrganizationIntegrationConfig(BaseModel):
    organizationId: str
    integrationId: str
    userVisible: bool
    config: Annotated[JSONData, PlainSerializer(serialize_jsondata)]


class DeleteOrganizationIntegrationConfig(BaseModel):
    organizationId: str
    integrationId: str


class AddMediaSegment(BaseModel):
    containerId: str
    details: Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    url: str
    segmentGroupId: Optional[str] = None


class AddMediaSegments(BaseModel):
    details: Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    url: str


class EmitSystemEvent(BaseModel):
    topic: str
    payload: Annotated[JSONData, PlainSerializer(serialize_jsondata)]


class EmitAuditEvent(BaseModel):
    application: Optional[str] = None
    payload: Annotated[JSONData, PlainSerializer(serialize_jsondata)]


class CreateProcessTemplate(BaseModel):
    name: str
    taskList: Annotated[JSONData, PlainSerializer(serialize_jsondata)]


class UpdateProcessTemplate(BaseModel):
    id: str
    taskList: Annotated[JSONData, PlainSerializer(serialize_jsondata)]


class UpdateJobs(BaseModel):
    ids: Optional[List[str]] = None
    status: Optional[UpdateJobsStatus] = None
    requiredCurrentStatus: Optional[JobStatus] = None
    taskOutput: Optional["UpdateJobOutput"] = None
    notificationUris: Optional[List[Optional[str]]] = None


class UpdateJobOutput(BaseModel):
    failureType: Optional[TaskFailureReason] = None
    failureMessage: Optional[str] = None


class CreateMentions(BaseModel):
    mentions: Optional[List["CreateMention"]] = None
    flags: Optional[List[Optional[str]]] = None
    watchlistUpdatingTimestamp: Optional[int] = None


class CreateFolderContentTempate(BaseModel):
    folderId: str
    sdoId: str
    schemaId: str
    data: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class CreateFolderContentTemplate(BaseModel):
    folderId: str
    sdoId: str
    schemaId: str
    data: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class UpdateFolderContentTempate(BaseModel):
    id: str
    folderId: Optional[str] = None
    sdoId: Optional[str] = None
    schemaId: Optional[str] = None
    data: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class UpdateFolderContentTemplate(BaseModel):
    id: str
    folderId: Optional[str] = None
    sdoId: Optional[str] = None
    schemaId: Optional[str] = None
    data: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class CreateSavedSearch(BaseModel):
    name: str
    sharedWithOrganization: Optional[bool] = None
    csp: Annotated[JSONData, PlainSerializer(serialize_jsondata)]


class ReplaceSavedSearch(BaseModel):
    id: str
    name: str
    sharedWithOrganization: Optional[bool] = None
    csp: Annotated[JSONData, PlainSerializer(serialize_jsondata)]


class getEngineJWT(BaseModel):
    engineId: Optional[str] = None
    resource: "GetEngineJWTResource"


class GetEngineJWTResource(BaseModel):
    tdoId: Optional[str] = None
    jobId: Optional[str] = None
    taskId: Optional[str] = None
    userId: Optional[str] = None
    schemaId: Optional[str] = None


class ChangePassword(BaseModel):
    oldPassword: str
    newPassword: str


class CreateSubscription(BaseModel):
    targetId: str
    objectType: Optional[SubscriptionObjectType] = None
    contact: "CreateSubscriptionContact"
    frequency: Optional[SubscriptionFrequency] = None
    scheduledDay: Optional[DayOfWeek] = None
    scheduledTime: Optional[Any] = None
    scheduledTimeZone: Optional[str] = None


class CreateSubscriptionInWatchlist(BaseModel):
    objectType: Optional[SubscriptionObjectType] = None
    contact: "CreateSubscriptionContact"
    frequency: Optional[SubscriptionFrequency] = None
    scheduledDay: Optional[DayOfWeek] = None
    scheduledTime: Optional[Any] = None
    scheduledTimeZone: Optional[str] = None


class CreateSubscriptionContact(BaseModel):
    emailAddress: Optional[str] = None
    phoneNumber: Optional[str] = None
    webhookUri: Optional[str] = None


class UpdateSubscription(BaseModel):
    id: str


class FileWatchlist(BaseModel):
    watchlistId: str
    folderId: str
    orderIndex: Optional[int] = None


class UnfileWatchlist(BaseModel):
    watchlistId: str
    folderId: str


class FileApplication(BaseModel):
    appId: str
    folderId: str
    orderIndex: Optional[int] = None


class UnfileApplication(BaseModel):
    appId: str
    folderId: str


class ShareFolderInput(BaseModel):
    folderId: Optional[str] = None
    readOrganizationIds: Optional[List[Optional[int]]] = None
    writeOrganizationIds: Optional[List[Optional[int]]] = None


class CreateTDOWithAsset(BaseModel):
    status: Optional[str] = None
    name: Optional[str] = None
    startDateTime: datetime
    stopDateTime: Optional[datetime] = None
    updateStopDateTimeFromAsset: Optional[bool] = None
    sourceId: Optional[str] = None
    contentType: Optional[str] = None
    uri: Optional[str] = None
    file: Optional[Any] = None
    scheduledJobId: Optional[str] = None
    isPublic: Optional[bool] = None
    parentFolderId: Optional[str] = None
    assetType: Optional[str] = None
    sourceData: Optional["SetTDOSourceData"] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    contentTemplates: Optional[List["CreateTDOContentTemplateWithTDO"]] = None
    addToIndex: Optional[bool] = None
    thumbnailUrl: Optional[str] = None
    previewUrl: Optional[str] = None
    sourceImageUrl: Optional[str] = None
    launchProgram: Optional[bool] = None


class FileTemporalDataObject(BaseModel):
    tdoId: str
    folderId: str
    orderIndex: Optional[int] = None


class UnfileTemporalDataObject(BaseModel):
    tdoId: str
    folderId: str


class MoveTemporalDataObject(BaseModel):
    tdoId: str
    oldFolderId: str
    newFolderId: str


class UploadEngineResult(BaseModel):
    taskId: str
    outputString: Optional[str] = None
    output: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    file: Optional[Any] = None
    uri: Optional[str] = None
    filename: Optional[str] = None
    assetType: Optional[str] = None
    contentType: Optional[str] = None
    completeTask: Optional[bool] = None
    outputJsonKey: Optional[str] = None
    fileData: Optional["SetAssetFileData"] = None
    setAsPrimary: Optional[bool] = None
    skipIndexing: Optional[bool] = None
    setTaskOutput: Optional[bool] = None
    isAccumulatedResult: Optional[bool] = None
    clientTimestamp: Optional[datetime] = None


class UserLogin(BaseModel):
    userName: str
    password: str
    organizationGuid: Optional[str] = None
    allowVanityDomain: Optional[bool] = None


class CreateFolder(BaseModel):
    name: str
    description: str
    parentId: str
    rootFolderType: Optional[RootFolderType] = None
    orderIndex: Optional[int] = None
    userId: Optional[str] = None
    entityTags: Optional[List[Optional["EntityTagInput"]]] = None


class UpdateFolder(BaseModel):
    id: str
    name: str
    entityTags: Optional[List[Optional["EntityTagInput"]]] = None


class MoveFolder(BaseModel):
    folderId: Optional[str] = None
    fromFolderId: Optional[str] = None
    toFolderId: Optional[str] = None
    rootFolderType: Optional[RootFolderType] = None


class MoveFolders(BaseModel):
    folderIds: List[str]
    newParentFolderId: str
    rootFolderType: Optional[RootFolderType] = None


class DeleteFolder(BaseModel):
    id: str
    orderIndex: int


class PlatformVersionInput(BaseModel):
    id: Optional[str] = None
    version: str
    manifestUrl: Optional[str] = None
    changeLogUrl: Optional[str] = None
    highlightsUrl: Optional[str] = None


class ApplicationFilter(BaseModel):
    status: Optional[ApplicationStatus] = None
    name: Optional[str] = None
    nameMatch: Optional[StringMatch] = None
    isPublic: Optional[bool] = None
    entityTags: Optional[List["EntityTagFilter"]] = None
    dateTimeFilter: Optional[List["ApplicationDateTimeFilter"]] = None
    urlRegex: Optional[str] = None


class ApplicationDateTimeFilter(BaseModel):
    toDateTime: Optional[datetime] = None
    fromDateTime: Optional[datetime] = None
    field: ApplicationDateTimeField


class CreateTDO(BaseModel):
    startDateTime: datetime
    stopDateTime: datetime
    source: Optional[str] = None
    status: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    isPublic: Optional[bool] = None
    parentFolderId: Optional[str] = None
    sourceData: Optional["SetTDOSourceData"] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    applicationId: Optional[str] = None
    contentTemplates: Optional[List["CreateTDOContentTemplateWithTDO"]] = None
    addToIndex: Optional[bool] = None
    thumbnailUrl: Optional[str] = None
    previewUrl: Optional[str] = None
    sourceImageUrl: Optional[str] = None
    assets: Optional[List["CreateAssetInTDO"]] = None
    launchProgram: Optional[bool] = None


class CreateTDOInJob(BaseModel):
    startDateTime: Optional[datetime] = None
    stopDateTime: Optional[datetime] = None
    status: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    isPublic: Optional[bool] = None
    parentFolderId: Optional[str] = None
    sourceData: Optional["SetTDOSourceData"] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    contentTemplates: Optional[List["CreateTDOContentTemplateWithTDO"]] = None
    addToIndex: Optional[bool] = None
    thumbnailUrl: Optional[str] = None
    previewUrl: Optional[str] = None
    sourceImageUrl: Optional[str] = None
    assets: Optional[List["CreateAssetInTDO"]] = None


class UpdateTDO(BaseModel):
    id: str
    startDateTime: Optional[datetime] = None
    stopDateTime: Optional[datetime] = None
    source: Optional[str] = None
    status: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    primaryAsset: Optional[List["SetPrimaryAsset"]] = None
    isPublic: Optional[bool] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    contentTemplates: Optional[List["CreateTDOContentTemplateWithTDO"]] = None
    thumbnailUrl: Optional[str] = None
    previewUrl: Optional[str] = None
    sourceImageUrl: Optional[str] = None
    addToIndex: Optional[bool] = None
    flags: Optional[List[Optional[UpdateTDOFlag]]] = None


class CreateTDOContentTemplateWithTDO(BaseModel):
    schemaId: str
    sdoId: Optional[str] = None
    data: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class SetPrimaryAsset(BaseModel):
    id: str
    assetType: str


class RequestClone(BaseModel):
    sourceApplicationId: str
    destinationApplicationId: str
    cloneBlobs: Optional[bool] = None


class CreateWidget(BaseModel):
    collectionId: str
    folderId: Optional[str] = None
    name: Optional[str] = None
    adScript: Optional[str] = None
    width: Optional[int] = None
    numberOfMentionsToShow: Optional[int] = None
    displayLogo: Optional[bool] = None
    displayCollectionName: Optional[bool] = None
    displayMentionIntro: Optional[bool] = None
    displayTranscription: Optional[bool] = None
    displayCollectionDescription: Optional[bool] = None
    displayMentionDescription: Optional[bool] = None
    seoTags: Optional[List[Optional[str]]] = None
    backgroundColor: Optional[str] = None
    borderColor: Optional[str] = None
    textColor: Optional[str] = None
    nextButtonColor: Optional[str] = None


class UpdateWidget(BaseModel):
    id: str
    name: Optional[str] = None
    adScript: Optional[str] = None
    width: Optional[int] = None
    numberOfMentionsToShow: Optional[int] = None
    displayLogo: Optional[bool] = None
    displayCollectionName: Optional[bool] = None
    displayMentionIntro: Optional[bool] = None
    displayTranscription: Optional[bool] = None
    displayCollectionDescription: Optional[bool] = None
    displayMentionDescription: Optional[bool] = None
    seoTags: Optional[List[Optional[str]]] = None
    backgroundColor: Optional[str] = None
    borderColor: Optional[str] = None
    textColor: Optional[str] = None
    createdDateTime: Optional[datetime] = None
    nextButtonColor: Optional[str] = None


class ApplicationResourceInput(BaseModel):
    resourceIds: Optional[List[str]] = None
    resourceType: PackageResourceType


class ApplicationResourceUpdate(BaseModel):
    resourceIds: Optional[List[str]] = None
    resourceType: PackageResourceType
    action: PackageResourceAction


class NodeModuleInput(BaseModel):
    moduleId: Optional[str] = None
    moduleRepo: ModuleRepo
    isPrivateRepo: Optional[bool] = None
    isPrivateRegistry: Optional[bool] = None
    moduleName: Optional[str] = None
    moduleVersion: Optional[str] = None
    scope: Optional[str] = None
    accessToken: Optional[str] = None
    registryUrl: Optional[str] = None
    sshUrl: Optional[str] = None
    status: Optional[NodeModuleStatus] = None


class CreateApplicationRole(BaseModel):
    id: Optional[str] = None
    name: str
    description: str
    permissions: List[AuthPermissionType]
    isPrivate: bool
    isAppEventRole: bool


class UpdateApplicationRole(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    permissions: Optional[List[Optional[AuthPermissionType]]] = None
    isPrivate: Optional[bool] = None
    isAppEventRole: Optional[bool] = None


class CreateApplication(BaseModel):
    id: Optional[str] = None
    isPublic: Optional[bool] = None
    name: str
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    category: Optional[str] = None
    description: Optional[str] = None
    iconUrl: Optional[str] = None
    iconSvg: Optional[str] = None
    url: Optional[str] = None
    eventSubscriptions: Optional[List[Optional["EventSubscriptionInput"]]] = None
    metadataVersion: Optional[int] = None
    oauth2RedirectUrls: Optional[List[str]] = None
    checkPermissions: bool
    permissionsRequired: Optional[List[Optional[str]]] = None
    deploymentModel: Optional[DeploymentModel] = None
    contextMenuExtensions: Optional["AppCreateContextMenuExtensions"] = None
    eventEndpoint: Optional[str] = None
    packageDistributionType: Optional[EngineDistributionType] = None
    applicationRoles: Optional[List["CreateApplicationRole"]] = None
    entityTags: Optional[List[Optional["EntityTagInput"]]] = None
    headerbarEnabled: Optional[bool] = None
    headerbar: Optional["ApplicationHeaderbarInput"] = None
    applicationConfigDefinition: Optional[
        List[Optional["ApplicationConfigDefinitionInput"]]
    ] = None
    events: Optional[List[Optional["CreateAppEventInput"]]] = None
    status: Optional[ApplicationStatus] = None
    disableAutoPackageCreation: Optional[bool] = None


class UpdateApplication(BaseModel):
    id: str
    isPublic: Optional[bool] = None
    name: Optional[str] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    status: Optional[ApplicationStatus] = None
    category: Optional[str] = None
    description: Optional[str] = None
    iconUrl: Optional[str] = None
    iconSvg: Optional[str] = None
    url: Optional[str] = None
    events: Optional[List["UpsertEvent"]] = None
    metadataVersion: Optional[int] = None
    oauth2RedirectUrls: Optional[List[str]] = None
    checkPermissions: Optional[bool] = None
    permissionsRequired: Optional[List[str]] = None
    deploymentModel: Optional[DeploymentModel] = None
    contextMenuExtensions: Optional["UpdateContextMenuExtensions"] = None
    eventEndpoint: Optional[str] = None
    eventSubscriptions: Optional[List[Optional["EventSubscriptionInput"]]] = None
    packageDistributionType: Optional[EngineDistributionType] = None
    applicationRoles: Optional[List["UpdateApplicationRole"]] = None
    entityTags: Optional[List[Optional["EntityTagInput"]]] = None
    applicationConfigDefinition: Optional[
        List[Optional["ApplicationConfigDefinitionUpdateApp"]]
    ] = None
    headerbarEnabled: Optional[bool] = None
    headerbar: Optional["ApplicationHeaderbarUpdate"] = None


class ApplicationWorkflow(BaseModel):
    id: str
    action: ApplicationWorkflowAction


class UpdateApplicationComponent(BaseModel):
    id: str
    componentIds: List[str]
    type: ApplicationComponentType
    action: UpdateApplicationComponentAction


class SetAssetFileData(BaseModel):
    md5sum: Optional[str] = None
    sha256: Optional[str] = None
    fileSize: Optional[Any] = None
    originalFileUri: Optional[str] = None
    mode: Optional[AssetCreationMode] = None
    mediaDurationMs: Optional[int] = None


class SetAssetSourceData(BaseModel):
    name: Optional[str] = None
    taskId: Optional[str] = None
    engineId: Optional[str] = None
    sourceId: Optional[str] = None
    scheduledJobId: Optional[str] = None
    assetId: Optional[str] = None


class SetTDOSourceData(BaseModel):
    taskId: Optional[str] = None
    sourceId: Optional[str] = None
    scheduledJobId: Optional[str] = None
    clusterId: Optional[str] = None


class CreateTaskLog(BaseModel):
    taskId: str
    file: Optional[Any] = None


class CreateAsset(BaseModel):
    containerId: str
    contentType: Optional[str] = None
    description: Optional[str] = None
    file: Optional[Any] = None
    md5sum: Optional[str] = None
    sha256: Optional[str] = None
    assetType: Optional[str] = None
    uri: Optional[str] = None
    fileData: Optional["SetAssetFileData"] = None
    sourceData: Optional["SetAssetSourceData"] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    name: Optional[str] = None
    jsondata: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    setAsPrimary: Optional[bool] = None
    isUserEdited: Optional[bool] = None
    updateContainerStopDateTime: Optional[bool] = None
    storeAsReference: Optional[bool] = None


class CreateAssetInTDO(BaseModel):
    contentType: Optional[str] = None
    description: Optional[str] = None
    assetType: str
    uri: str
    fileData: Optional["SetAssetFileData"] = None
    sourceData: Optional["SetAssetSourceData"] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    name: Optional[str] = None
    setAsPrimary: Optional[bool] = None
    storeAsReference: Optional[bool] = None


class UpdateAsset(BaseModel):
    id: str
    description: Optional[str] = None
    name: Optional[str] = None
    fileData: Optional["SetAssetFileData"] = None
    sourceData: Optional["SetAssetSourceData"] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class CreateEntity(BaseModel):
    name: str
    description: Optional[str] = None
    libraryId: str
    profileImageUrl: Optional[str] = None
    jsondata: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    jsonstring: Optional[str] = None
    isPublished: Optional[bool] = None


class UpdateEntity(BaseModel):
    id: str
    name: Optional[str] = None
    description: Optional[str] = None
    profileImageUrl: Optional[str] = None
    jsondata: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    jsonstring: Optional[str] = None


class CreateEntityIdentifierType(BaseModel):
    label: str
    labelPlural: str
    iconClass: Optional[str] = None
    description: Optional[str] = None
    dataType: EntityIdentifierDataType
    id: str


class UpdateEntityIdentifierType(BaseModel):
    id: str
    label: Optional[str] = None
    labelPlural: Optional[str] = None
    iconClass: Optional[str] = None
    description: Optional[str] = None
    dataType: Optional[EntityIdentifierDataType] = None


class CreateEntityIdentifier(BaseModel):
    entityId: str
    identifierTypeId: str
    title: Optional[str] = None
    isPriority: Optional[bool] = None
    url: Optional[str] = None
    jsondata: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    jsonstring: Optional[str] = None
    contentType: str
    file: Optional[Any] = None
    entityType: Optional["CreateEntityType"] = None
    profileUpdateMode: Optional[SetEntityProfileImage] = None
    storeReference: Optional[bool] = None


class UpdateEntityIdentifier(BaseModel):
    id: str
    title: Optional[str] = None
    isPriority: Optional[bool] = None
    url: Optional[str] = None
    jsondata: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    jsonstring: Optional[str] = None


class CreateLibraryType(BaseModel):
    id: str
    label: str
    iconClass: Optional[str] = None
    entityIdentifierTypeIds: Optional[List[str]] = None
    entityType: "CreateEntityType"


class UpdateLibraryType(BaseModel):
    id: str
    label: str
    iconClass: Optional[str] = None
    entityIdentifierTypeIds: Optional[List[str]] = None
    entityType: Optional["UpdateEntityType"] = None


class CreateEntityType(BaseModel):
    name: str
    namePlural: str
    schema_: Annotated[JSONData, PlainSerializer(serialize_jsondata)] = Field(
        alias="schema"
    )


class UpdateEntityType(BaseModel):
    name: Optional[str] = None
    namePlural: Optional[str] = None
    schema_: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = Field(
        alias="schema", default=None
    )


class CreateLibrary(BaseModel):
    name: str
    applicationId: Optional[str] = None
    organizationId: Optional[str] = None
    libraryTypeId: str
    coverImageUrl: Optional[str] = None
    description: Optional[str] = None


class UpdateLibrary(BaseModel):
    id: str
    name: Optional[str] = None
    coverImageUrl: Optional[str] = None
    description: Optional[str] = None
    libraryTypeId: Optional[str] = None
    version: Optional[int] = None


class CreateLibraryEngineModel(BaseModel):
    engineId: str
    libraryId: str
    trainJobId: Optional[str] = None
    trainStatus: Optional[LibraryEngineModelTrainStatus] = None
    dataUrl: Optional[str] = None
    jsondata: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    accuracy: Optional[int] = None
    configurationId: Optional[str] = None


class UpdateLibraryEngineModel(BaseModel):
    id: str
    trainJobId: Optional[str] = None
    trainStatus: Optional[LibraryEngineModelTrainStatus] = None
    dataUrl: Optional[str] = None
    jsondata: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    contentType: Optional[str] = None
    file: Optional[Any] = None
    accuracy: Optional[int] = None
    configurationId: Optional[str] = None


class CreateLibraryCollaborator(BaseModel):
    libraryId: str
    organizationId: int
    permissions: List[str]
    status: Optional[CollaboratorStatus] = None


class UpdateLibraryCollaborator(BaseModel):
    libraryId: str
    organizationId: int
    permissions: Optional[List[Optional[str]]] = None
    status: Optional[CollaboratorStatus] = None


class CreateLibraryConfiguration(BaseModel):
    libraryId: str
    engineCategoryId: str
    targetEngineIds: List[str]
    rankedSourceEngineIds: Optional[List[Optional[str]]] = None
    confidence: Optional["CreateDatasetConfidence"] = None


class CreateDatasetConfidence(BaseModel):
    min: Optional[float] = None
    max: Optional[float] = None
    allowNull: Optional[bool] = None


class UpdateLibraryConfiguration(BaseModel):
    id: str
    targetEngineIds: Optional[List[Optional[str]]] = None
    rankedSourceEngineIds: Optional[List[Optional[str]]] = None
    confidence: Optional["UpdateDatasetConfidence"] = None


class UpdateDatasetConfidence(BaseModel):
    min: Optional[float] = None
    max: Optional[float] = None
    allowNull: Optional[bool] = None


class AddLibraryDataset(BaseModel):
    libraryId: str
    tdoIds: List[str]


class DeleteLibraryDataset(BaseModel):
    libraryId: str
    tdoIds: List[str]


class EntityTagInput(BaseModel):
    tagKey: str
    tagValue: Optional[str] = None
    entityType: Optional[EntityTagType] = None
    entityId: Optional[str] = None
    organizationId: Optional[str] = None


class MatchEntityTagInput(BaseModel):
    tagKey: str
    entityType: Optional[EntityTagType] = None


class EntityTagFilter(BaseModel):
    key: Optional[str] = None
    value: Optional[str] = None


class CreateEngineJobTemplate(BaseModel):
    type: JobTemplateEnumType
    template: str
    templateLanguage: Optional[TemplateLanguage] = None
    supportedInputTypes: Optional[List[str]] = None


class CreateEngineDependency(BaseModel):
    dependencyType: str
    assetType: Optional[str] = None


class UpdateEngineDependency(BaseModel):
    dependencyType: Optional[str] = None
    assetType: Optional[str] = None


class AutomateFlowInput(BaseModel):
    name: str
    linkedApplicationId: Optional[str] = None
    templateId: Optional[str] = None


class CreateEngine(BaseModel):
    id: Optional[str] = None
    isPublic: Optional[bool] = None
    name: Optional[str] = None
    description: Optional[str] = None
    categoryId: str
    deploymentModel: DeploymentModel
    price: Optional[int] = None
    priceDimension: Optional[PriceDimension] = None
    edgeVersion: Optional[int] = None
    fields: Optional[List["CreateEngineField"]] = None
    schemas: Optional[List[Optional["EngineSchema"]]] = None
    iconPath: Optional[str] = None
    logoPath: Optional[str] = None
    libraryRequired: Optional[bool] = None
    createsTDO: Optional[bool] = None
    useCases: Optional[List[str]] = None
    industries: Optional[List[str]] = None
    manifest: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    testingDetails: Optional["TestingDetailsField"] = None
    jwtRights: Optional["JWTRightsField"] = None
    standaloneJobTemplates: Optional[List["CreateEngineJobTemplate"]] = None
    cpuResourceMcpu: Optional[int] = None
    gpuSupported: Optional[GPUSupported] = None
    website: Optional[str] = None
    distributionType: Optional[EngineDistributionType] = None
    entityTags: Optional[List[Optional["EntityTagInput"]]] = None
    metadataVersion: Optional[int] = None


class JWTRightsField(BaseModel):
    roles: Optional[List["JWTRolesField"]] = None


class JWTRolesField(BaseModel):
    roleName: str
    taskRights: Optional[List[Optional[str]]] = None
    assetRights: Optional[List[Optional[str]]] = None


class TestingDetailsField(BaseModel):
    email: str
    mediaFileUri: str
    customFields: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )
    isCertified: Optional[bool] = None
    buildIdCertified: Optional[str] = None
    dataCertified: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None


class UpdateEngine(BaseModel):
    id: str
    isPublic: Optional[bool] = None
    name: Optional[str] = None
    description: Optional[str] = None
    categoryId: Optional[str] = None
    deploymentModel: Optional[DeploymentModel] = None
    price: Optional[int] = None
    priceDimension: Optional[PriceDimension] = None
    edgeVersion: Optional[int] = None
    fields: Optional[List["CreateEngineField"]] = None
    schemas: Optional[List[Optional["EngineSchema"]]] = None
    iconPath: Optional[str] = None
    logoPath: Optional[str] = None
    libraryRequired: Optional[bool] = None
    useCases: Optional[List[str]] = None
    industries: Optional[List[str]] = None
    manifest: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    testingDetails: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None
    jwtRights: Optional["JWTRightsField"] = None
    standaloneJobTemplates: Optional[List[Optional["CreateEngineJobTemplate"]]] = None
    cpuResourceMcpu: Optional[int] = None
    gpuSupported: Optional[GPUSupported] = None
    website: Optional[str] = None
    distributionType: Optional[EngineDistributionType] = None
    entityTags: Optional[List[Optional["EntityTagInput"]]] = None
    metadataVersion: Optional[int] = None


class EngineWorkflow(BaseModel):
    id: str
    action: EngineWorkflowAction


class CreateEngineField(BaseModel):
    max: Optional[float] = None
    min: Optional[float] = None
    step: Optional[float] = None
    type: EngineFieldType
    info: Optional[str] = None
    name: str
    label: str
    options: Optional[List["CreateEngineFieldPicklistOption"]] = None
    defaultValue: Optional[str] = None
    defaultValues: Optional[List[str]] = None
    required: Optional[bool] = None


class CreateEngineFieldPicklistOption(BaseModel):
    key: str
    value: str


class UpdateTask(BaseModel):
    id: str
    status: TaskStatus
    jobId: Optional[str] = None
    output: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    outputString: Optional[str] = None
    outputJsonKey: Optional[str] = None
    taskOutput: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )
    payload: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    executionLocationData: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None
    clientTimestamp: Optional[datetime] = None
    failureReason: Optional[TaskFailureReason] = None
    failureMessage: Optional[str] = None
    notificationUris: Optional[List[Optional[str]]] = None


class PollTask(BaseModel):
    id: str
    jobId: str
    pollPayload: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )


class AddTask(BaseModel):
    id: str
    jobId: str
    engineId: str
    buildId: str
    status: TaskStatus
    createdDateTime: datetime
    payload: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    parentTaskId: Optional[str] = None


class AddTasksToJobs(BaseModel):
    tasks: Optional[List["AddTask"]] = None


class EngineFilter(BaseModel):
    name: Optional[str] = None
    nameMatch: Optional[StringMatch] = None
    state: Optional[List[EngineState]] = None
    category: Optional[List[str]] = None
    libraryRequired: Optional[bool] = None
    type: Optional[List[EngineTypeFilter]] = None
    rating: Optional[List[Optional[int]]] = None
    deploymentModel: Optional[DeploymentModel] = None
    deploymentModels: Optional[List[DeploymentModel]] = None
    distributionTypes: Optional[List[EngineDistributionType]] = None
    priceMin: Optional[int] = None
    priceMax: Optional[int] = None
    mode: Optional[List[EngineMode]] = None
    manifestRuntime: Optional[List[Optional[str]]] = None
    supportedInputFormats: Optional[List[str]] = None
    isCertified: Optional[bool] = None
    isPublic: Optional[bool] = None
    dateTimeFilter: Optional[List["EngineDateTimeFilter"]] = None
    entityTagOperation: Optional[filterCombineOperator] = None
    entityTags: Optional[List[Optional["EntityTagFilter"]]] = None
    engineTemplateInputTypes: Optional["EngineTemplateInputTypes"] = None


class EngineTemplateInputTypes(BaseModel):
    inputTypes: Optional[List[str]] = None
    matchAny: Optional[bool] = None


class EngineSortField(BaseModel):
    field: EngineOrderField
    direction: Optional[OrderDirection] = None


class ApplicationSortField(BaseModel):
    field: ApplicationOrderField
    direction: Optional[OrderDirection] = None


class UpdateBuild(BaseModel):
    id: str
    engineId: str
    action: BuildUpdateAction
    dockerImage: Optional[str] = None
    taskRuntime: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )
    dataCertified: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None
    releaseNotes: Optional[str] = None
    disableAutoPackageCreation: Optional[bool] = None


class CreateBuild(BaseModel):
    id: Optional[str] = None
    engineId: str
    taskRuntime: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )
    dockerImage: Optional[str] = None
    manifest: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    releaseNotes: Optional[str] = None


class DeleteBuild(BaseModel):
    id: str
    engineId: str


class JobSortField(BaseModel):
    field: JobOrderField
    direction: Optional[OrderDirection] = None


class TaskSortField(BaseModel):
    field: TaskOrderField
    direction: Optional[OrderDirection] = None


class CreateJob(BaseModel):
    status: Optional[str] = None
    targetId: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    tasks: Optional[List["CreateTask"]] = None
    retries: Optional[int] = None
    jobTemplateId: Optional[str] = None
    skipDecider: Optional[bool] = None
    clusterId: Optional[str] = None
    jobConfig: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    scheduledJobId: Optional[str] = None
    isReprocessJob: Optional[bool] = None
    target: Optional["CreateTDOInJob"] = None
    routes: Optional[List[Optional["CreateRoute"]]] = None
    notificationUris: Optional[List[Optional[str]]] = None
    dagTemplateId: Optional[str] = None
    uploadUrl: Optional[str] = None


class LaunchDAGTemplateInput(BaseModel):
    dagTemplateId: str
    dagTemplateFields: Optional[List[Optional["EngineFieldValue"]]] = None
    targetId: Optional[str] = None
    uploadUrl: Optional[str] = None
    notificationUris: Optional[List[Optional[str]]] = None
    clusterId: Optional[str] = None


class CreateTask(BaseModel):
    taskType: Optional[str] = None
    engineId: Optional[str] = None
    payloadString: Optional[str] = None
    payload: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    isClone: Optional[bool] = None
    buildId: Optional[str] = None
    testTask: Optional[bool] = None
    executionPreferences: Optional["CreateExecutionPreferences"] = None
    ioFolders: Optional[List[Optional["CreateIoFolder"]]] = None
    standbyTask: Optional["CreateTask"] = None
    notificationUris: Optional[List[Optional[str]]] = None


class CreateRoute(BaseModel):
    parentIoFolderReferenceId: Optional[str] = None
    childIoFolderReferenceId: Optional[str] = None
    endpoint: Optional[str] = None
    options: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class CreateIoFolder(BaseModel):
    referenceId: str
    mode: IoFolderMode
    type: IoFolderType
    options: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class CreateExecutionPreferences(BaseModel):
    maxRetries: Optional[int] = None
    parallelProcessing: Optional[bool] = None
    maxEngines: Optional[int] = None
    parentCompleteBeforeStarting: Optional[bool] = None
    dueDateTime: Optional[datetime] = None
    priority: Optional[int] = None


class SingleEngineJobInput(BaseModel):
    engineId: str
    targetId: Optional[str] = None
    uploadUrl: Optional[str] = None
    clusterId: Optional[str] = None
    priority: Optional[int] = None
    fields: Optional[List[Optional["EngineFieldValue"]]] = None


class EngineFieldValue(BaseModel):
    fieldName: str
    fieldValue: str


class ApplicationConfigInput(BaseModel):
    configKey: str
    configValue: Optional[str] = None
    configJSON: Optional[str] = None


class ApplicationConfigValueInput(BaseModel):
    configKey: str
    configValue: Optional[str] = None
    configJSON: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )


class ApplicationConfigSetConfigInput(BaseModel):
    orgId: Optional[str] = None
    appId: str
    configs: List["ApplicationConfigValueInput"]


class ApplicationConfigDefinitionCreate(BaseModel):
    appId: str
    orgId: Optional[str] = None
    packageId: Optional[str] = None
    configKey: str
    configType: ApplicationConfigValueEnum
    configLevel: ApplicationConfigLevelEnum
    required: bool
    secured: bool
    description: str
    defaultValue: Optional[str] = None
    defaultValueJSON: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None


class ApplicationConfigDefinitionInput(BaseModel):
    packageId: Optional[str] = None
    configKey: str
    configType: ApplicationConfigValueEnum
    configLevel: ApplicationConfigLevelEnum
    required: bool
    secured: bool
    description: str
    defaultValue: Optional[str] = None
    defaultValueJSON: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None


class ApplicationConfigDefinitionUpdate(BaseModel):
    orgId: Optional[str] = None
    configKey: Optional[str] = None
    packageId: Optional[str] = None
    configType: Optional[ApplicationConfigValueEnum] = None
    configLevel: Optional[ApplicationConfigLevelEnum] = None
    required: Optional[bool] = None
    secured: Optional[bool] = None
    description: Optional[str] = None
    defaultValue: Optional[str] = None
    defaultValueJSON: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None


class ApplicationConfigDefinitionUpdateApp(BaseModel):
    configKey: str
    update: Optional["ApplicationConfigDefinitionUpdate"] = None


class ApplicationConfigDefinitionUpdateInput(BaseModel):
    filter: Optional["ApplicationConfigDefinitionFilter"] = None
    update: Optional["ApplicationConfigDefinitionUpdate"] = None


class ApplicationConfigDefinitionDelete(BaseModel):
    appId: str
    orgId: Optional[str] = None
    configKey: str


class ApplicationConfigDelete(BaseModel):
    appId: str
    orgId: Optional[str] = None
    userId: Optional[str] = None
    configKey: str


class ApplicationConfigDefinitionFilter(BaseModel):
    appId: str
    orgId: Optional[str] = None
    configKey: str


class AppCreateContextMenuExtension(BaseModel):
    id: Optional[str] = None
    label: str
    url: Optional[str] = None
    type: ContextMenuExtensionType


class CreateContextMenuExtension(BaseModel):
    id: str
    label: str
    url: Optional[str] = None
    type: ContextMenuExtensionType


class UpdateContextMenuExtension(BaseModel):
    id: str
    label: str
    url: Optional[str] = None


class DeleteContextMenuExtension(BaseModel):
    id: str


class AppCreateContextMenuExtensions(BaseModel):
    mentions: Optional[List[Optional["AppCreateContextMenuExtension"]]] = None
    tdos: Optional[List[Optional["AppCreateContextMenuExtension"]]] = None
    watchlists: Optional[List[Optional["AppCreateContextMenuExtension"]]] = None
    collections: Optional[List[Optional["AppCreateContextMenuExtension"]]] = None


class CreateContextMenuExtensions(BaseModel):
    mentions: Optional[List[Optional["CreateContextMenuExtension"]]] = None
    tdos: Optional[List[Optional["CreateContextMenuExtension"]]] = None
    watchlists: Optional[List[Optional["CreateContextMenuExtension"]]] = None
    collections: Optional[List[Optional["CreateContextMenuExtension"]]] = None


class UpdateContextMenuExtensions(BaseModel):
    mentions: Optional[List[Optional["UpdateContextMenuExtension"]]] = None
    tdos: Optional[List[Optional["UpdateContextMenuExtension"]]] = None
    watchlists: Optional[List[Optional["UpdateContextMenuExtension"]]] = None
    collections: Optional[List[Optional["UpdateContextMenuExtension"]]] = None


class BulkDeleteContextMenuExtensions(BaseModel):
    ids: Optional[List[str]] = None


class CreateOrganization(BaseModel):
    guid: Optional[str] = None
    name: str
    applications: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )
    metadata: Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    adminSeatLimit: Optional[int] = None
    seatLimit: Optional[int] = None
    status: Optional[OrganizationStatus] = None
    maxAiwareNodes: Optional[int] = None
    maxAiwareClusters: Optional[int] = None
    businessUnit: str
    integrations: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )
    types: Optional[List[Optional[OrganizationType]]] = None
    remainingBudget: Optional[int] = None
    isLimitEnforced: Optional[bool] = None
    isHubManaged: Optional[bool] = None
    loginConfiguration: Optional["SetLoginConfiguration"] = None
    dataRetentionPolicies: Optional[List["DataRetentionPolicyInput"]] = None


class DataRetentionPolicyInput(BaseModel):
    action: Optional[DataRetentionActionEnum] = None
    days: int


class CreateUser(BaseModel):
    name: str
    jsondata: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    requestorId: Optional[str] = None
    password: Optional[str] = None
    passwordHash: Optional[str] = None
    organizationId: str
    sendNewUserEmail: Optional[bool] = None
    email: Optional[str] = None
    roleIds: Optional[List[str]] = None
    acls: Optional[List["UserACLInput"]] = None
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    userId: Optional[str] = None
    authGroupIds: Optional[List[str]] = None


class UserACLAccessRightsInput(BaseModel):
    owner: Optional[bool] = None


class UserACLInput(BaseModel):
    applicationId: Optional[str] = None
    organizationId: Optional[str] = None
    objectType: Optional[str] = None
    objectId: Optional[str] = None
    access: Optional["UserACLAccessRightsInput"] = None
    userId: Optional[str] = None


class UpdateUser(BaseModel):
    id: str
    name: Optional[str] = None
    jsondata: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    roleIds: Optional[List[str]] = None
    acls: Optional[List["UserACLInput"]] = None
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    email: Optional[str] = None
    title: Optional[str] = None
    developerType: Optional[str] = None
    imageUrl: Optional[str] = None
    organizationId: Optional[str] = None
    authGroupIds: Optional[List[str]] = None


class CreatePasswordUpdateRequest(BaseModel):
    id: str
    skipPasswordResetEmail: Optional[bool] = None


class CreatePasswordResetRequest(BaseModel):
    skipPasswordResetEmail: Optional[bool] = None
    userName: str


class UpdateCurrentUser(BaseModel):
    passwordToken: Optional[str] = None
    mfaInfo: Optional["UpdateMFAInfo"] = None
    userSetting: Optional["UserSettingInfo"] = None
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    title: Optional[str] = None
    developerType: Optional[str] = None
    imageUrl: Optional[str] = None


class UserSettingInfo(BaseModel):
    key: Optional[str] = None
    value: Optional[str] = None


class UpdateMFAInfo(BaseModel):
    phoneNumber: Optional[str] = None


class GetCurrentUserPasswordToken(BaseModel):
    password: Optional[str] = None


class UpdateOrganization(BaseModel):
    id: str
    name: Optional[str] = None
    type: Optional[str] = None
    seatLimit: Optional[int] = None
    status: Optional[str] = None
    applications: Optional[List[str]] = None
    businessUnit: Optional[str] = None
    indexTDOsByDefault: Optional[bool] = None
    metadata: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    blacklist: Optional["SetEngineBlacklist"] = None
    whitelist: Optional["SetEngineWhitelist"] = None
    oktaConfiguration: Optional["SetOktaConfiguration"] = None
    loginConfiguration: Optional["SetLoginConfiguration"] = None
    remainingBudget: Optional[int] = None
    isLimitEnforced: Optional[bool] = None
    applicationAccess: Optional[List["SetOrganizationApplicationAccess"]] = None
    requireOpenId: Optional[bool] = None
    isHubManaged: Optional[bool] = None
    dataRetentionPolicies: Optional[List["DataRetentionPolicyInput"]] = None


class SetOktaConfiguration(BaseModel):
    oktaAuthenticationEnabled: Optional[bool] = None
    clientSecret: Optional[str] = None
    clientId: Optional[str] = None
    oktaDomain: Optional[str] = None
    loginAlias: Optional[str] = None


class SetEngineBlacklist(BaseModel):
    organizationId: Optional[str] = None
    engineIds: Optional[List[str]] = None
    engineCategoryIds: Optional[List[str]] = None


class SetEngineWhitelist(BaseModel):
    organizationId: Optional[str] = None
    engineIds: Optional[List[str]] = None


class SetOrganizationApplicationAccess(BaseModel):
    applicationId: str
    enable: bool


class SearchInput(BaseModel):
    offset: Optional[int] = None
    limit: Optional[int] = None
    index: List[str]
    query: Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    select: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class MentionDateTimeFilter(BaseModel):
    toDateTime: Optional[datetime] = None
    fromDateTime: Optional[datetime] = None
    field: MentionDateTimeField


class MentionOrderBy(BaseModel):
    field: MentionOrderByField
    direction: Optional[OrderDirection] = None


class CreateMention(BaseModel):
    mediaId: str
    programId: str
    mentionDateTime: datetime
    mentionHitCount: int
    mentionStatusId: Optional[int] = None
    watchlistId: Optional[str] = None
    cognitiveEngineResultsString: Optional[str] = None
    cognitiveEngineResults: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None
    snippetsString: Optional[str] = None
    snippets: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    hitStartDateTime: Optional[datetime] = None
    hitEndDateTime: Optional[datetime] = None
    mentionEndDateTime: Optional[datetime] = None
    metadata: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    queryTerm: Optional[str] = None
    audience: Optional["AudienceData"] = None
    watchlistUpdatingTimestamp: Optional[int] = None


class AudienceData(BaseModel):
    audienceTotal: int
    audienceDemographics: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None
    sourceCount: Optional[int] = None
    marketCount: Optional[int] = None
    metadata: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class UpdateMention(BaseModel):
    id: str
    privateNote: Optional[str] = None
    publicNote: Optional[str] = None
    complianceStatusId: Optional[str] = None
    spotTypeId: Optional[str] = None
    statusId: Optional[str] = None
    adCreative: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )
    userSnippets: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )


class UpdateMentions(BaseModel):
    ids: List[str]
    statusId: Optional[str] = None


class CreateMentionComment(BaseModel):
    mentionId: str
    commentText: str


class UpdateMentionComment(BaseModel):
    mentionId: str
    commentId: str
    commentText: str


class DeleteMentionComment(BaseModel):
    mentionId: str
    commentId: str


class CreateMentionRating(BaseModel):
    mentionId: str
    ratingValue: int


class UpdateMentionRating(BaseModel):
    mentionId: str
    ratingId: str
    ratingValue: int


class DeleteMentionRating(BaseModel):
    mentionId: str
    ratingId: str


class FolderOrderBy(BaseModel):
    field: FolderOrderByField
    direction: Optional[OrderDirection] = None


class CreateCollection(BaseModel):
    name: str
    folderDescription: Optional[str] = None
    image: Optional[str] = None
    parentFolderId: str


class UpdateCollection(BaseModel):
    folderId: str
    name: Optional[str] = None
    folderDescription: Optional[str] = None
    image: Optional[str] = None
    parentFolderId: Optional[str] = None


class CollectionMentionInput(BaseModel):
    folderId: str
    mentionId: str


class CreateCollectionMentions(BaseModel):
    folderIds: List[str]
    mentionIds: List[str]


class UpdateCollectionMention(BaseModel):
    folderId: str
    mentionId: str
    description: str


class UpdateCognitiveSearch(BaseModel):
    id: str
    profile: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    jsonstring: Optional[str] = None
    mentionStatusId: Optional[str] = None


class CreateCognitiveSearchInWatchlist(BaseModel):
    profile: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    jsonstring: Optional[str] = None
    mentionStatusId: str


class CreateCognitiveSearch(BaseModel):
    profile: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    jsonstring: Optional[str] = None
    mentionStatusId: str
    watchlistId: str


class CreateCognitiveSearchProfile(BaseModel):
    and_: Optional[List[Optional["CreateCognitiveSearchProfile"]]] = Field(
        alias="and", default=None
    )
    or_: Optional[List[Optional["CreateCognitiveSearchProfile"]]] = Field(
        alias="or", default=None
    )
    condition: Optional["CreateCognitiveSearchCondition"] = None


class CreateCognitiveSearchCondition(BaseModel):
    engineCategoryId: str
    state: Annotated[JSONData, PlainSerializer(serialize_jsondata)]


class CreateWatchlist(BaseModel):
    startDateTime: Optional[datetime] = None
    stopDateTime: datetime
    cognitiveSearches: Optional[List["CreateCognitiveSearchInWatchlist"]] = None
    name: str
    sourceTypeIds: Optional[List[str]] = None
    parentFolderId: Optional[str] = None
    sourceIds: Optional[List[str]] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    searchIndex: Optional[SearchIndex] = None
    subscriptions: Optional[List["CreateSubscriptionInWatchlist"]] = None
    enableExpirationNotification: Optional[bool] = None
    watchlistType: Optional[str] = None


class UpdateWatchlist(BaseModel):
    id: str
    startDateTime: Optional[datetime] = None
    stopDateTime: Optional[datetime] = None
    name: Optional[str] = None
    sourceTypeIds: Optional[List[str]] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    searchIndex: Optional[SearchIndex] = None
    parentFolderId: Optional[str] = None
    sourceIds: Optional[List[str]] = None
    subscriptions: Optional[List["CreateSubscriptionInWatchlist"]] = None
    cognitiveSearches: Optional[List["CreateCognitiveSearchInWatchlist"]] = None
    isDisabled: Optional[bool] = None
    enableExpirationNotification: Optional[bool] = None
    regenerateExistingMentions: Optional[bool] = None


class BulkUpdateWatchlist(BaseModel):
    stopDate: Optional[datetime] = None
    enableExpirationNotification: Optional[bool] = None


class BulkUpdateWatchlistFilter(BaseModel):
    ids: Optional[List[str]] = None


class BulkCreateWatchlist(BaseModel):
    watchlists: Optional[List["CreateWatchlist"]] = None


class ShareCollection(BaseModel):
    folderId: str
    shareMessage: Optional[str] = None
    recipients: Optional[List[Optional[str]]] = None
    shareOptions: Optional["ShareOptions"] = None


class ShareMentionFromCollection(BaseModel):
    mentionId: str
    folderId: str
    shareMessage: Optional[str] = None
    recipients: Optional[List[Optional[str]]] = None
    shareOptions: Optional["ShareOptions"] = None


class ShareMention(BaseModel):
    mentionId: str
    shareMessage: Optional[str] = None
    recipients: Optional[List[Optional[str]]] = None
    shareOptions: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )
    organizationId: Optional[str] = None
    userId: Optional[str] = None


class ShareMentionInBulk(BaseModel):
    mentionIds: List[str]
    shareMessage: Optional[str] = None
    recipients: Optional[List[Optional[str]]] = None
    shareOptions: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )


class ShareOptions(BaseModel):
    showImage: Optional[bool] = None
    showComments: Optional[bool] = None
    showRating: Optional[bool] = None
    showHeader: Optional[bool] = None
    showOrganizationLogo: Optional[bool] = None
    organizationLogoUrl: Optional[bool] = None
    showEngineResults: Optional[bool] = None
    showHits: Optional[bool] = None
    showAffiliateStripdown: Optional[bool] = None
    showDownload: Optional[bool] = None
    showDescription: Optional[bool] = None
    mentionPrePaddingSeconds: Optional[float] = None
    mentionPostPaddingSeconds: Optional[float] = None
    generateAccessToken: Optional[bool] = None


class CreateMediaShare(BaseModel):
    mediaType: str
    sourceId: Optional[str] = None
    tdoId: Optional[str] = None
    scheduledJobId: Optional[str] = None
    startDateTime: Optional[datetime] = None
    stopDateTime: Optional[datetime] = None
    startOffsetMs: Optional[int] = None
    stopOffsetMs: Optional[int] = None
    expireDateTime: Optional[datetime] = None
    settings: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class SchemaOrder(BaseModel):
    field: SchemaOrderFields
    direction: Optional[OrderDirection] = None


class EngineSchema(BaseModel):
    schemaId: str
    ioType: EngineSchemaIOType


class CreateDataRegistry(BaseModel):
    id: Optional[str] = None
    name: str
    description: str
    source: str
    isSystem: Optional[bool] = None
    isPublic: Optional[bool] = None


class UpdateDataRegistry(BaseModel):
    id: str
    name: str
    description: str
    source: str


class CreateSchema(BaseModel):
    id: str
    dataRegistryId: str
    definition: Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    majorVersion: int
    minorVersion: int
    status: SchemaStatus


class UpsertSchemaDraft(BaseModel):
    dataRegistryId: str
    majorVersion: Optional[int] = None
    schema_: Annotated[JSONData, PlainSerializer(serialize_jsondata)] = Field(
        alias="schema"
    )
    encryptedProperties: Optional[List[Optional[str]]] = None
    queryExcludedProperties: Optional[List[Optional[str]]] = None


class UpdateSchemaState(BaseModel):
    id: str
    status: SchemaStatus
    breakingChanges: Optional[bool] = None


class StructuredDataOrderBy(BaseModel):
    field: StructuredDataOrderByField
    direction: Optional[OrderDirection] = None


class CreateStructuredData(BaseModel):
    id: Optional[str] = None
    schemaId: str
    data: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    dataString: Optional[str] = None


class DeleteStructuredData(BaseModel):
    id: str
    schemaId: str


class DataRegistryVersion(BaseModel):
    id: str
    majorVersion: int


class UploadStatusInput(BaseModel):
    key: str


class SendEmail(BaseModel):
    from_: str = Field(alias="from")
    to: str
    cc: Optional[str] = None
    bcc: Optional[str] = None
    subject: str
    message: str
    replyTo: str


class CreateTriggers(BaseModel):
    events: Optional[str] = None
    types: Optional[str] = None
    targets: Optional[List[Optional["CreateTriggerType"]]] = None


class CreateExportRequestForTDO(BaseModel):
    tdoId: Optional[str] = None
    mentionId: Optional[str] = None
    startOffsetMs: Optional[int] = None
    stopOffsetMs: Optional[int] = None
    startDate: Optional[datetime] = None
    stopDate: Optional[datetime] = None


class CreateExportRequestFormatConfig(BaseModel):
    extension: str
    options: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class CreateExportRequestOutputConfig(BaseModel):
    engineId: Optional[str] = None
    categoryId: Optional[str] = None
    formats: List["CreateExportRequestFormatConfig"]


class CreateExportRequest(BaseModel):
    includeMedia: Optional[bool] = None
    includeAllEngineAssets: Optional[bool] = None
    tdoData: List["CreateExportRequestForTDO"]
    outputConfigurations: Optional[List["CreateExportRequestOutputConfig"]] = None


class UpdateExportRequest(BaseModel):
    id: str
    status: Optional[ExportRequestStatus] = None
    assetUri: Optional[str] = None


class CreateTriggerType(BaseModel):
    name: CreateTriggerTarget
    params: Annotated[JSONData, PlainSerializer(serialize_jsondata)]


class EventDelivery(BaseModel):
    name: EventDeliveryType
    params: Annotated[JSONData, PlainSerializer(serialize_jsondata)]


class CreateAppEventInput(BaseModel):
    id: Optional[str] = None
    eventName: str
    eventType: str
    public: bool
    description: Optional[str] = None
    schemaData: Optional[str] = None


class CreateEvent(BaseModel):
    id: Optional[str] = None
    eventName: str
    eventType: str
    application: str
    public: bool
    description: Optional[str] = None
    schemaData: Optional[str] = None


class UpdateEvent(BaseModel):
    id: str
    description: Optional[str] = None


class UpsertEvent(BaseModel):
    id: Optional[str] = None
    eventName: Optional[str] = None
    eventType: Optional[str] = None
    public: Optional[bool] = None
    description: Optional[str] = None
    schemaData: Optional[str] = None


class SubscribeEvent(BaseModel):
    eventName: Optional[str] = None
    eventType: Optional[str] = None
    application: str
    delivery: "EventDelivery"
    conditions: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )
    scope: Optional[EventSubscriptionScope] = None


class EventSubscriptionInput(BaseModel):
    id: Optional[str] = None
    action: Optional[EventAction] = None
    eventName: Optional[str] = None
    eventType: Optional[str] = None
    delivery: Optional["EventDelivery"] = None
    conditions: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )
    scope: Optional[EventSubscriptionScope] = None


class EmitEvent(BaseModel):
    eventName: str
    eventType: str
    application: str
    payload: str
    orgId: Optional[str] = None


class CreateEventCustomRule(BaseModel):
    name: str
    status: Optional[EventCustomRuleStatus] = None
    eventType: str
    eventName: str
    description: Optional[str] = None
    actions: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    params: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class UpdateEventCustomRule(BaseModel):
    id: str
    name: Optional[str] = None
    status: Optional[EventCustomRuleStatus] = None
    description: Optional[str] = None
    actions: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    params: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class CreateEventActionTemplate(BaseModel):
    name: str
    ownerApplicationId: Optional[str] = None
    inputType: EventActionTemplateInputType
    inputValidation: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None
    inputAttributes: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None
    actionType: EventActionTemplateActionType
    actionValidation: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None
    actionDestination: str
    actionAttributes: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None


class UpdateEventActionTemplate(BaseModel):
    id: str
    name: Optional[str] = None
    inputValidation: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None
    inputAttributes: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None
    actionValidation: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None
    actionDestination: Optional[str] = None
    actionAttributes: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None


class CreateMentionExportRequest(BaseModel):
    mentionFilters: "CreateMentionExportRequestFilter"
    userTimeZone: Optional[str] = None


class CreateMentionExportRequestFilter(BaseModel):
    programIds: Optional[List[Optional[str]]] = None
    marketIds: Optional[List[Optional[str]]] = None
    mediaSourceIds: Optional[List[Optional[str]]] = None
    mediaSourceTypeIds: Optional[List[Optional[str]]] = None
    statusIds: Optional[List[Optional[str]]] = None
    spotTypeList: Optional[List[Optional[str]]] = None
    date: Optional["CreateMentionExportRequestFilterDate"] = None
    watchlistIds: Optional[List[Optional[str]]] = None


class CreateMentionExportRequestFilterDate(BaseModel):
    from_: Optional[datetime] = Field(alias="from", default=None)
    to: Optional[datetime] = None


class UpdateMentionExportRequest(BaseModel):
    id: str
    status: Optional[ExportRequestStatus] = None
    assetUri: Optional[str] = None
    sqlQueries: Optional[str] = None


class CreateCreative(BaseModel):
    name: str
    keywords: Optional[str] = None
    brandId: Optional[str] = None
    advertiserId: Optional[str] = None


class UpdateCreative(BaseModel):
    id: str
    name: Optional[str] = None
    keywords: Optional[str] = None
    brandId: Optional[str] = None
    advertiserId: Optional[str] = None


class UpdateSharedCollectionHistory(BaseModel):
    id: str
    status: SharedCollectionHistoryStatus
    statusNote: Optional[str] = None
    retryCount: Optional[int] = None


class UpdateUserStatus(BaseModel):
    id: str
    status: Optional[UserStatus] = None


class CollectionMentionOrderBy(BaseModel):
    field: CollectionMentionOrderField
    direction: Optional[OrderDirection] = None


class EngineBuildOrderBy(BaseModel):
    field: EngineBuildOrderByField
    direction: Optional[OrderDirection] = None


class CreateCustomDashboard(BaseModel):
    hostAppId: str
    name: str
    description: Optional[str] = None
    data: Annotated[JSONData, PlainSerializer(serialize_jsondata)]


class UpdateCustomDashboard(BaseModel):
    id: str
    hostAppId: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    data: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class DatasetTags(BaseModel):
    name: str
    value: str


class DatasetActionInput(BaseModel):
    action: Optional[DatasetActionType] = None
    data: Optional[List["DatasetRowInput"]] = None


class DatasetRowInput(BaseModel):
    id: str
    data: Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    storeUriContents: Optional[List[str]] = None


class DatasetInput(BaseModel):
    name: str
    description: str
    schemaId: str
    tags: Optional[List[Optional["DatasetTags"]]] = None


class DatasetFilter(BaseModel):
    operation: Optional[filterCombineOperator] = None
    tags: Optional[List["DatasetTags"]] = None


class CreateDatasetSchema(BaseModel):
    name: str
    description: Optional[str] = None
    schema_: Annotated[JSONData, PlainSerializer(serialize_jsondata)] = Field(
        alias="schema"
    )
    tags: Optional[List[Optional["DatasetTags"]]] = None


class ApplicationInviteRoleInput(BaseModel):
    applicationId: str
    roleId: str


class CreateOrganizationInviteInput(BaseModel):
    organizationId: str
    email: str
    message: Optional[str] = None
    applicationRoles: List["ApplicationInviteRoleInput"]
    authGroupIds: Optional[List[Optional[str]]] = None
    userDetails: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )
    disableAutoApproval: Optional[bool] = None


class UpdateOrganizationInviteInput(BaseModel):
    organizationInviteId: str
    message: Optional[str] = None
    applicationRoles: List["ApplicationInviteRoleInput"]
    action: Optional[OrganizationInviteAction] = None


class PackageResourceInput(BaseModel):
    resourceType: PackageResourceType
    resourceId: str
    resourceAlias: Optional[str] = None
    action: Optional[PackageResourceAction] = None


class BulkPackageResourceInput(BaseModel):
    packageId: str
    packageResources: Optional[List[Optional["PackageResourceInput"]]] = None


class PackageGrantInput(BaseModel):
    organizationId: str
    grantType: PackageGrantType
    action: Optional[PackageGrantAction] = None


class BulkPackageGrantInput(BaseModel):
    packageId: str
    packageGrants: List["PackageGrantInput"]


class ApplicationHeaderbarConfigInput(BaseModel):
    backgroundColor: Optional[str] = None
    help: Optional[bool] = None
    notification: Optional[bool] = None
    logoSrc: Optional[str] = None


class ApplicationHeaderbarInput(BaseModel):
    name: str
    config: Optional["ApplicationHeaderbarConfigInput"] = None


class ApplicationHeaderbarUpdate(BaseModel):
    name: Optional[str] = None
    config: Optional["ApplicationHeaderbarConfigInput"] = None


class ApiTokenUpdateInput(BaseModel):
    rights: Optional[List[Optional[AuthPermissionType]]] = None
    isRevoked: Optional[bool] = None


class ApplicationViewerBuildOrderBy(BaseModel):
    field: ApplicationViewerBuildOrderByField
    direction: Optional[OrderDirection] = None


class ApplicationViewerSortField(BaseModel):
    field: ApplicationViewerOrderField
    direction: Optional[OrderDirection] = None


class CreateApplicationViewer(BaseModel):
    name: str
    description: Optional[str] = None
    icon: Optional[str] = None
    mimetype: Optional[str] = None
    viewerType: Optional[ApplicationViewerType] = None
    isPublic: Optional[bool] = None


class CreateApplicationViewerBuild(BaseModel):
    viewerId: str
    sourceUrl: str
    accessUrl: str
    status: Optional[ApplicationViewerBuildStatus] = None


class SetLoginConfiguration(BaseModel):
    enabled: Optional[bool] = None
    hideVeritoneBranding: Optional[bool] = None
    name: Optional[str] = None
    slug: Optional[str] = None
    logo: Optional[str] = None
    buttonColor: Optional[str] = None
    buttonTextColor: Optional[str] = None


class CreateInstanceLoginConfiguration(BaseModel):
    enabled: Optional[bool] = None
    hideVeritoneBranding: Optional[bool] = None
    name: str
    slug: str
    logo: Optional[str] = None
    buttonColor: Optional[str] = None
    buttonTextColor: Optional[str] = None


class OrgFileResourceInput(BaseModel):
    name: Optional[str] = None
    url: str
    type: OrgDocumentType
    status: Optional[OrgFileResourceStatus] = None


class OrgUISettingsInput(BaseModel):
    logo: Optional[str] = None
    veritoneBranding: Optional[bool] = None
    customRegistrationFields: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None
    registrationButtonStyle: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None


class OrgDomainSettingsInput(BaseModel):
    domainName: Optional[str] = None
    authGroupId: Optional[str] = None
    applicationRoleIds: List[str]


class CreateRegistrationConfigurationInput(BaseModel):
    organizationGuid: Optional[str] = None
    name: str
    slug: str
    files: Optional[List[Optional["OrgFileResourceInput"]]] = None
    openRegistrationStatus: Optional[OrgRegistrationStatus] = None
    adminApprovalRequired: Optional[bool] = None
    uiSettings: Optional["OrgUISettingsInput"] = None
    domainSettings: List["OrgDomainSettingsInput"]


class UpdateRegistrationConfiguration(BaseModel):
    organizationGuid: Optional[str] = None
    name: Optional[str] = None
    slug: Optional[str] = None
    files: Optional[List[Optional["OrgFileResourceInput"]]] = None
    openRegistrationStatus: Optional[OrgRegistrationStatus] = None
    allowlistDomains: Optional[List[Optional[str]]] = None
    adminApprovalRequired: Optional[bool] = None
    uiSettings: Optional["OrgUISettingsInput"] = None
    domainSettings: List["OrgDomainSettingsInput"]


class SdoDateTimeFilter(BaseModel):
    toDateTime: Optional[datetime] = None
    fromDateTime: Optional[datetime] = None
    field: SdoDateTimeField


class InitiateMultipartUploadInput(BaseModel):
    fileName: str
    contentType: str
    fileSize: float
    numberOfParts: int
    bucket: Optional[str] = None
    folderName: Optional[str] = None


class UploadedPartInput(BaseModel):
    PartNumber: str
    ETag: str


class CompleteMultipartUploadInput(BaseModel):
    key: str
    uploadId: str
    parts: List["UploadedPartInput"]
    bucket: Optional[str] = None


class CancelMultipartUploadInput(BaseModel):
    key: str
    uploadId: str
    bucket: Optional[str] = None


class EmailProviderConfigInput(BaseModel):
    fromAddress: str
    provider: EmailProvider
    connectionString: Optional[str] = None
    apiKey: Optional[str] = None
    encryptionKey: Optional[str] = None


class EmailTemplateInput(BaseModel):
    id: str
    code: str
    lang: Optional[TemplateLanguage] = None
    defaultFromName: Optional[str] = None
    defaultSubject: Optional[str] = None
    defaultArgs: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )
    organizationGuid: Optional[str] = None


class CreateProgramAffiliate(BaseModel):
    sourceId: str
    scheduledDay: DayOfWeek
    startDateTime: datetime
    stopDateTime: datetime
    startTime: Any
    stopTime: Any


class ScheduledJobOrderBy(BaseModel):
    field: ScheduledJobOrderField
    direction: Optional[OrderDirection] = None


class CreateScheduledJobCollaborator(BaseModel):
    organizationId: str
    permission: SetScheduledJobPermission


class CreateRecurringSchedulePart(BaseModel):
    repeatIntervalUnit: IntervalUnit
    repeatInterval: int
    durationSeconds: Optional[int] = None
    startTime: Optional[Any] = None


class CreateWeeklySchedulePart(BaseModel):
    scheduledDay: Optional[DayOfWeek] = None
    startTime: Optional[Any] = None
    stopTime: Optional[Any] = None


class CreateScheduledJob(BaseModel):
    jobTemplateIds: Optional[List[str]] = None
    jobTemplates: Optional[List["CreateJobTemplate"]] = None
    dagTemplates: Optional["ScheduledJobDagTemplateConfig"] = None
    weeklyScheduleParts: Optional[List["CreateWeeklySchedulePart"]] = None
    recurringScheduleParts: Optional[List["CreateRecurringSchedulePart"]] = None
    name: str
    description: Optional[str] = None
    runMode: Optional[RunMode] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    detailsSchemaId: Optional[str] = None
    isActive: Optional[bool] = None
    startDateTime: Optional[datetime] = None
    stopDateTime: Optional[datetime] = None
    contentTemplates: Optional[
        List["CreateScheduledJobContentTemplateWithScheduledJob"]
    ] = None
    organizationId: Optional[str] = None
    applicationId: Optional[str] = None
    isPublic: Optional[bool] = None
    affiliates: Optional[List["CreateProgramAffiliate"]] = None


class CloneScheduledJob(BaseModel):
    id: str
    organizationId: Optional[str] = None


class RevertScheduledJob(BaseModel):
    id: str


class UpdateScheduledJob(BaseModel):
    id: str
    jobTemplateIds: Optional[List[str]] = None
    jobTemplates: Optional[List["CreateJobTemplate"]] = None
    dagTemplates: Optional["ScheduledJobDagTemplateConfig"] = None
    weeklyScheduleParts: Optional[List["CreateWeeklySchedulePart"]] = None
    recurringScheduleParts: Optional[List["CreateRecurringSchedulePart"]] = None
    name: Optional[str] = None
    description: Optional[str] = None
    runMode: Optional[RunMode] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    detailsSchemaId: Optional[str] = None
    isActive: Optional[bool] = None
    startDateTime: Optional[datetime] = None
    stopDateTime: Optional[datetime] = None
    contentTemplates: Optional[
        List["CreateScheduledJobContentTemplateWithScheduledJob"]
    ] = None
    isPublic: Optional[bool] = None
    affiliates: Optional[List["CreateProgramAffiliate"]] = None
    migrateIfLegacy: Optional[bool] = None


class CreateClusterSubscription(BaseModel):
    userId: str
    isActive: Optional[bool] = None


class UpdateClusterSubscription(BaseModel):
    userId: str
    isActive: Optional[bool] = None


class CreateCluster(BaseModel):
    name: str
    allowedEngines: List[str]
    dockerCredentials: Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    type: Optional[ClusterType] = None
    edgeVersion: Optional[int] = None
    containerTag: Optional[str] = None
    paused: Optional[bool] = None
    memorySize: Optional[str] = None
    storageSize: Optional[str] = None
    bypassAllowedEngines: Optional[bool] = None
    collaborators: Optional[List["CreateClusterCollaborator"]] = None
    subscriptions: Optional[List[Optional["CreateClusterSubscription"]]] = None
    tags: Optional[List[Optional[str]]] = None
    status: Optional[ClusterStatus] = None
    clusterConfig: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None
    mediaStorage: Optional[MediaStorageOption] = None
    mediaStoragePath: Optional[str] = None
    restartTimeUTC: Optional[Any] = None
    serviceToken: Optional[str] = None
    organizationId: Optional[str] = None
    isGroup: Optional[bool] = None
    clusterGroupId: Optional[str] = None
    coreId: Optional[str] = None


class UpdateCluster(BaseModel):
    id: str
    name: Optional[str] = None
    allowedEngines: Optional[List[Optional[str]]] = None
    dockerCredentials: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None
    edgeVersion: Optional[int] = None
    containerTag: Optional[str] = None
    memorySize: Optional[int] = None
    storageSize: Optional[int] = None
    bypassAllowedEngines: Optional[bool] = None
    collaborators: Optional[List["CreateClusterCollaborator"]] = None
    tags: Optional[List[Optional[str]]] = None
    status: Optional[ClusterStatus] = None
    clusterConfig: Optional[
        Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    ] = None
    mediaStoragePath: Optional[str] = None
    managementNodeID: Optional[str] = None
    restartTimeUTC: Optional[Any] = None
    subscriptions: Optional[List[Optional["UpdateClusterSubscription"]]] = None
    serviceToken: Optional[str] = None
    controllerUrl: Optional[str] = None
    coreId: Optional[str] = None
    setAsDefaultForOrganization: Optional[str] = None
    setAsEnvironmentDefaultCluster: Optional[bool] = None
    setAsDefaultForBUs: Optional[List[str]] = None


class CreateClusterCollaborator(BaseModel):
    organizationId: str
    permission: SetClusterPermission


class PauseCluster(BaseModel):
    id: str


class UnpauseCluster(BaseModel):
    id: str


class CreateClusterNode(BaseModel):
    name: Optional[str] = None
    clusterId: Optional[str] = None
    metrics: Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    containerTag: Optional[str] = None
    offlineBrowsing: Optional[bool] = None
    storagePresent: Optional[bool] = None
    nodeConfig: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )
    role: Optional[str] = None


class UpdateClusterNode(BaseModel):
    id: str
    name: Optional[str] = None
    nodeConfig: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )
    metrics: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class CreateEngineConfiguration(BaseModel):
    sourceId: str
    credentialIds: Optional[List[str]] = None


class UpdateEngineConfiguration(BaseModel):
    id: str
    credentialIds: Optional[List[str]] = None


class CreateExternalCredential(BaseModel):
    sourceTypeId: Optional[str] = None
    dataId: Optional[str] = None


class UpdateExternalCredential(BaseModel):
    id: str
    dataId: Optional[str] = None


class CreateSourceCollaborator(BaseModel):
    organizationId: str
    permission: SetSourcePermission


class CreateSource(BaseModel):
    sourceTypeId: str
    name: str
    isPublic: Optional[bool] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    thumbnailUrl: Optional[str] = None
    contentTemplates: Optional[List["CreateSourceContentTemplateWithSource"]] = None
    correlationSchemaId: Optional[str] = None
    correlationSDOId: Optional[str] = None
    collaborators: Optional[List["CreateSourceCollaborator"]] = None
    state: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    storageConfig: Optional["StorageConfigInput"] = None


class UpdateSource(BaseModel):
    id: str
    name: Optional[str] = None
    isPublic: Optional[bool] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    thumbnailUrl: Optional[str] = None
    contentTemplates: Optional[List["CreateSourceContentTemplateWithSource"]] = None
    correlationSchemaId: Optional[str] = None
    correlationSDOId: Optional[str] = None
    collaborators: Optional[List["CreateSourceCollaborator"]] = None
    state: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    storageConfig: Optional["StorageConfigInput"] = None


class CreateSourceContentTemplate(BaseModel):
    sourceId: str
    schemaId: str
    sdoId: Optional[str] = None
    data: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class CreateSourceContentTemplateWithSource(BaseModel):
    schemaId: str
    sdoId: Optional[str] = None
    data: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class CreateScheduledJobContentTemplate(BaseModel):
    scheduledJobId: str
    schemaId: str
    sdoId: Optional[str] = None
    data: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class CreateScheduledJobContentTemplateWithScheduledJob(BaseModel):
    schemaId: str
    sdoId: Optional[str] = None
    data: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class CreateSourceType(BaseModel):
    sourceSchemaId: Optional[str] = None
    credentialSchemaId: Optional[str] = None
    name: str
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    credentialType: Optional[CredentialType] = None
    isPublic: Optional[bool] = None
    isLive: Optional[bool] = None
    requiresScanPipeline: Optional[bool] = None
    categoryId: str


class UpdateSourceType(BaseModel):
    id: str
    name: Optional[str] = None
    sourceSchemaId: Optional[str] = None
    credentialSchemaId: Optional[str] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    credentialType: Optional[CredentialType] = None
    isPublic: Optional[bool] = None
    isLive: Optional[bool] = None
    requiresScanPipeline: Optional[bool] = None
    categoryId: Optional[str] = None


class CreateJobTemplate(BaseModel):
    taskTemplates: Optional[List["CreateTaskTemplate"]] = None
    skipDecider: Optional[bool] = None
    jobConfig: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    applicationId: Optional[str] = None
    clusterId: Optional[str] = None
    routes: Optional[List[Optional["CreateRoute"]]] = None
    notificationUris: Optional[List[Optional[str]]] = None


class UpdateJobTemplate(BaseModel):
    id: str
    skipDecider: Optional[bool] = None
    jobConfig: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    notificationUris: Optional[List[Optional[str]]] = None


class CreateTaskTemplate(BaseModel):
    engineId: Optional[str] = None
    engineConfigId: Optional[str] = None
    executionLocationId: Optional[str] = None
    jobTemplateId: Optional[str] = None
    payload: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    payloadString: Optional[str] = None
    parentTaskId: Optional[str] = None
    executionPreferences: Optional["CreateExecutionPreferences"] = None
    ioFolders: Optional[List[Optional["CreateIoFolder"]]] = None
    notificationUris: Optional[List[Optional[str]]] = None


class UpdateTaskTemplate(BaseModel):
    id: str
    payload: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    payloadString: Optional[str] = None
    parentTaskId: Optional[str] = None
    notificationUris: Optional[List[Optional[str]]] = None


class ClusterOrderBy(BaseModel):
    field: ClusterOrderByField
    direction: Optional[OrderDirection] = None


class ClusterDateTimeFilter(BaseModel):
    toDateTime: Optional[datetime] = None
    fromDateTime: Optional[datetime] = None
    field: ClusterDateTimeField


class SourceSortField(BaseModel):
    field: SourceOrderField
    direction: Optional[OrderDirection] = None


class ScheduledJobDateTimeFilter(BaseModel):
    toDateTime: Optional[datetime] = None
    fromDateTime: Optional[datetime] = None
    field: ScheduledJobDateTimeField
    includeEmpty: Optional[bool] = None


class ScheduledJobPartTimeFilter(BaseModel):
    toTime: Optional[Any] = None
    fromTime: Optional[Any] = None
    field: ScheduledJobPartTimeField


class UpdateOrganizationCluster(BaseModel):
    clusterId: str
    organizationId: str
    action: Optional[UpdateOrganizationClusterAction] = None


class RemoveDagFromOrganization(BaseModel):
    dagTemplateId: str
    organizationId: str


class AddDagTemplateToOrganization(BaseModel):
    organizationId: str
    dagTemplateId: str


class UpdateDagTemplate(BaseModel):
    id: str
    name: Optional[str] = None
    description: Optional[str] = None
    cognitiveCategoryId: Optional[str] = None
    mimeType: Optional[str] = None
    dag: Optional[str] = None
    dagTemplateLanguage: Optional[str] = None
    tags: Optional[List[str]] = None


class CreateDagTemplate(BaseModel):
    name: str
    targetOrganizationId: Optional[str] = None
    description: Optional[str] = None
    dag: str
    dagTemplateLanguage: Optional[str] = None
    mimeType: Optional[str] = None
    cognitiveCategoryId: Optional[str] = None
    tags: Optional[List[str]] = None


class PingClusterNode(BaseModel):
    nodeId: str
    nodeMetrics: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )


class PairClusterNode(BaseModel):
    id: str
    nodePair: "NodePair"


class NodePair(BaseModel):
    clusterId: str
    displayName: str
    role: str
    offlineBrowsing: bool


class CreateBundle(BaseModel):
    clusterId: str
    nodeId: Optional[str] = None
    name: str
    externalCredentialId: Optional[str] = None
    testRun: Optional[bool] = None
    selectDetail: "CreateBundleSelectDetail"
    selectCategory: BundleCategory
    scheduleDefinition: "CreateBundleScheduleDefinition"


class CreateBundleSelectDetail(BaseModel):
    category: str
    select: Optional[List[str]] = None
    paths: Optional[List[str]] = None
    files: Optional[List[Optional[str]]] = None
    tasks: Optional[List[Optional["CreateBundleSelectDetailTask"]]] = None
    afterTime: Optional[datetime] = None
    beforeTime: Optional[datetime] = None
    recursiveDescent: bool
    service: Optional["CreateBundleService"] = None


class CreateBundleSelectDetailTask(BaseModel):
    engineId: str


class CreateBundleScheduleDefinition(BaseModel):
    recurringStartTime: Optional[datetime] = None
    recurringEndTime: Optional[datetime] = None
    repeatDaysTimeInMinutes: Optional[int] = None
    repeatDaysOfWeek: Optional[List[Optional[int]]] = None
    repeatDaysOfMonth: Optional[List[Optional[int]]] = None
    repeatMinutes: Optional[int] = None


class CreateBundleService(BaseModel):
    serviceType: Optional[str] = None
    region: Optional[str] = None
    bucketName: Optional[str] = None


class UpdateClusterState(BaseModel):
    nodes: Optional[List[Optional["ClusterNodeUpdate"]]] = None
    id: str
    state: Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    targetStatus: Optional[ClusterStatus] = None


class ClusterNodeUpdate(BaseModel):
    nodeId: str
    metrics: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class PauseClusterNode(BaseModel):
    id: str


class UnpauseClusterNode(BaseModel):
    id: str


class LaunchScheduledJobs(BaseModel):
    targetInfo: Optional["CreateAllPipelineJobsTargetInfo"] = None
    createTargetInfo: Optional["CreateTDOForJob"] = None
    payload: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    scheduledJobId: Optional[str] = None


class CreateTDOForJob(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    isPublic: Optional[bool] = None
    parentFolderId: Optional[str] = None
    applicationId: Optional[str] = None
    status: Optional[str] = None
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    contentTemplates: Optional[List["CreateTDOContentTemplateWithTDO"]] = None
    addToIndex: Optional[bool] = None
    thumbnailUrl: Optional[str] = None
    previewUrl: Optional[str] = None
    sourceImageUrl: Optional[str] = None


class LaunchJobTemplates(BaseModel):
    ids: List[str]
    scheduledJobId: Optional[str] = None
    payload: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    createTargetInfo: Optional["CreateTDOForJob"] = None
    targetInfo: Optional["LaunchJobTemplatesTargetInfo"] = None


class CreateNextPipelineJobsTargetInfo(BaseModel):
    targetId: str
    startOffsetMs: Optional[int] = None
    endOffsetMs: Optional[int] = None


class CreateAllPipelineJobsTargetInfo(BaseModel):
    targetId: str
    startOffsetMs: Optional[int] = None
    endOffsetMs: Optional[int] = None


class LaunchJobTemplatesTargetInfo(BaseModel):
    targetId: str
    startOffsetMs: Optional[int] = None
    endOffsetMs: Optional[int] = None


class ScheduledJobDagTemplateConfig(BaseModel):
    dagTemplateIds: Optional[List[str]] = None
    params: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    jobConfig: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class StorageConfigInput(BaseModel):
    type: StorageProviderType
    bucket: str
    region: Optional[str] = None
    keyPrefix: Optional[str] = None
    signedUrlExpiresInSeconds: int
    credentials: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = (
        None
    )
    details: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class StorageConfigFilter(BaseModel):
    url: Optional[str] = None
    bucket: Optional[str] = None
    key: Optional[str] = None
    region: Optional[str] = None
    type: StorageProviderType
    returnAllMatching: Optional[bool] = None


class GetStorageSignedUrlInput(BaseModel):
    url: Optional[str] = None
    key: Optional[str] = None
    access: Optional[SourceAccessType] = None
    expiresInSeconds: Optional[int] = None


class pauseFlow(BaseModel):
    flowId: str


class DeleteFlow(BaseModel):
    flowId: str


class CopyFlow(BaseModel):
    flowId: Optional[str] = None
    name: Optional[str] = None
    flowRevisionId: Optional[str] = None


class DeployFlowRevision(BaseModel):
    flowRevisionId: Optional[str] = None
    flowId: Optional[str] = None
    disableAutoPackageCreation: Optional[bool] = None


class CreateFlowFromTemplate(BaseModel):
    name: Optional[str] = None
    categoryId: Optional[str] = None
    flowTemplateId: str


class CreateFlow(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    categoryId: Optional[str] = None
    linkedApplicationId: Optional[str] = None
    templateId: Optional[str] = None
    deploymentModel: Optional[str] = None
    jwtRights: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    packageIds: Optional[List[Optional[str]]] = None
    clusterId: Optional[str] = None


class CreateNotebook(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    categoryId: Optional[str] = None
    linkedApplicationId: Optional[str] = None
    templateId: Optional[str] = None
    deploymentModel: Optional[str] = None
    jwtRights: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None
    packageIds: Optional[List[Optional[str]]] = None


class UpdateFlowRevisionHead(BaseModel):
    flowId: str
    runtime: Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    preserveHead: Optional[bool] = None


class UpdateFlowRevision(BaseModel):
    flowRevisionId: str
    flowRevisionNumb: Optional[int] = None
    buildId: Optional[str] = None
    engineId: Optional[str] = None
    flowId: Optional[str] = None
    description: Optional[str] = None
    runtime: Optional[Annotated[JSONData, PlainSerializer(serialize_jsondata)]] = None


class CreateFlowRevision(BaseModel):
    flowRevisionId: Optional[str] = None
    flowId: str
    runtime: Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    forceCreate: Optional[bool] = None
    isHead: Optional[bool] = None
    description: Optional[str] = None


class UpdateFlowTemplate(BaseModel):
    id: str
    title: Optional[str] = None
    subtitle: Optional[str] = None
    description: Optional[str] = None
    tags: Optional[List[Optional[str]]] = None
    learnMoreLink: Optional[str] = None
    image: Optional[str] = None
    organizationId: Optional[str] = None
    screenshots: Optional[List[Optional[str]]] = None
    categories: Optional[List[Optional[str]]] = None
    author: Optional[str] = None
    public: Optional[bool] = None
    flow: Optional[str] = None
    package: Optional[str] = None


class CreateFlowTemplate(BaseModel):
    id: Optional[str] = None
    title: str
    subtitle: str
    description: str
    tags: Optional[List[Optional[str]]] = None
    learnMoreLink: Optional[str] = None
    image: Optional[str] = None
    organizationId: Optional[str] = None
    screenshots: Optional[List[Optional[str]]] = None
    categories: List[str]
    author: str
    public: Optional[bool] = None
    flow: str
    package: Optional[str] = None


class CreateWorkflowRuntimeStorageData(BaseModel):
    storageKey: str
    storageData: str
    storageMetadata: Optional[str] = None


class AlwaysUpFlowInput(BaseModel):
    alwaysUpFlowId: Optional[str] = None
    organizationId: Optional[str] = None
    engineId: str
    buildId: Optional[str] = None
    schedule: Optional[str] = None
    updateSchedule: Optional[str] = None
    status: Optional[AlwaysUpFlowStatus] = None
    restart: Optional[bool] = None
    dateModified: Optional[datetime] = None
    dateCreated: Optional[datetime] = None
    createdBy: Optional[str] = None
    modifiedBy: Optional[str] = None


class AuditDateTimeFilter(BaseModel):
    toDateTime: Optional[datetime] = None
    fromDateTime: Optional[datetime] = None


class AuthGroupCreateInput(BaseModel):
    name: str
    description: str
    ownerOrganization: Optional[str] = None
    members: Optional[List[Optional["AuthGroupMemberInput"]]] = None
    authClass: Optional[AuthObjectClass] = None
    roleID: Optional[str] = None


class AuthEnforcementEnableInput(BaseModel):
    ownerOrganization: Optional[str] = None
    enable: bool


class AuthGroupUpdateInput(BaseModel):
    id: str
    name: Optional[str] = None
    description: Optional[str] = None
    ownerOrganization: Optional[str] = None


class AuthResourceMemberInput(BaseModel):
    id: str
    memberType: Optional[AuthResourceType] = None


class AuthGroupMemberInput(BaseModel):
    id: str
    memberType: Optional[AuthGroupMemberType] = None


class AuthPermissionSetInput(BaseModel):
    name: str
    description: str
    permissions: List[AuthPermissionType]
    organizationID: Optional[str] = None
    applicationID: Optional[str] = None
    roleID: Optional[str] = None
    authClass: Optional[AuthObjectClass] = None
    isProtected: Optional[bool] = None


class AuthPermissionSetUpdateInput(BaseModel):
    id: str
    name: Optional[str] = None
    description: Optional[str] = None
    permissions: Optional[List[AuthPermissionType]] = None
    isProtected: Optional[bool] = None
    ownerOrganization: Optional[str] = None


class AuthACEPermissionInput(BaseModel):
    member: "AuthGroupMemberInput"
    permissionSetID: str


class InputResourceIdentifier(BaseModel):
    resourceType: AuthResourceType
    resourceId: str


class CreateApplicationRoleInput(BaseModel):
    id: Optional[str] = None
    name: str
    description: str
    applicationId: str
    permissions: List[AuthPermissionType]
    isPrivate: bool
    isAppEventRole: bool


class UpdateApplicationRoleInput(BaseModel):
    id: str
    name: Optional[str] = None
    description: Optional[str] = None
    permissions: Optional[List[Optional[AuthPermissionType]]] = None
    isPrivate: Optional[bool] = None
    isAppEventRole: Optional[bool] = None


class BatchTDOInput(BaseModel):
    name: str
    batchSelector: Annotated[JSONData, PlainSerializer(serialize_jsondata)]
    orgId: str
    createdBy: Optional[str] = None
    modifiedBy: Optional[str] = None
    skipTdosAfterEventCreation: Optional[bool] = None


class BatchJobTemplateInput(BaseModel):
    modifiedBy: Optional[str] = None
    concurrency: Optional[int] = None
    processDefinition: Annotated[JSONData, PlainSerializer(serialize_jsondata)]


class TDOBatchProcessesInput(BaseModel):
    id: Optional[str] = None
    status: Optional[List[BatchProcessStatus]] = None
    tdoId: Optional[str] = None
    dateTimeFilter: Optional[List["BatchProcessDateTimeFilter"]] = None
    orderBy: Optional[List["BatchProcessSortField"]] = None
    offset: Optional[int] = None
    limit: Optional[int] = None


class BatchProcessDateTimeFilter(BaseModel):
    toDateTime: Optional[datetime] = None
    fromDateTime: Optional[datetime] = None
    field: BatchProcessDateTimeField


class BatchProcessSortField(BaseModel):
    field: BatchProcessOrderField
    direction: Optional[OrderDirection] = None


class InstanceAuditLogInput(BaseModel):
    id: Optional[List[str]] = None
    userName: Optional[str] = None
    userId: Optional[str] = None
    eventNames: Optional[List[Optional[EventNameEnum]]] = None
    toDateTime: Optional[datetime] = None
    fromDateTime: Optional[datetime] = None
    offset: Optional[int] = None
    limit: Optional[int] = None
    orderBy: Optional[List["InstanceAuditLogOrderBy"]] = None
    organizationId: Optional[str] = None


class InstanceAuditLogOrderBy(BaseModel):
    field: Optional[InstanceAuditLogOrderByField] = None
    direction: Optional[OrderDirection] = None


class InstanceAuditLogConfigInput(BaseModel):
    addAuditEvents: Optional[List[EventNameEnum]] = None
    removeAuditEvents: Optional[List[EventNameEnum]] = None


class AuditLogDateTimeFilterInput(BaseModel):
    toDateTime: datetime
    fromDateTime: datetime


class AuditLogExportRequestFilterInput(BaseModel):
    organizationId: Optional[str] = None
    dateTimeFilter: Optional["AuditLogDateTimeFilterInput"] = None
    eventNames: Optional[List[Optional[EventNameEnum]]] = None
    userNames: Optional[List[Optional[str]]] = None


PackageCreateInput.model_rebuild()
PackageUpdateInput.model_rebuild()
NotificationMailboxInput.model_rebuild()
EventFilterInput.model_rebuild()
UpdateJobs.model_rebuild()
CreateMentions.model_rebuild()
getEngineJWT.model_rebuild()
CreateSubscription.model_rebuild()
CreateSubscriptionInWatchlist.model_rebuild()
CreateTDOWithAsset.model_rebuild()
UploadEngineResult.model_rebuild()
CreateFolder.model_rebuild()
UpdateFolder.model_rebuild()
ApplicationFilter.model_rebuild()
CreateTDO.model_rebuild()
CreateTDOInJob.model_rebuild()
UpdateTDO.model_rebuild()
CreateApplication.model_rebuild()
UpdateApplication.model_rebuild()
CreateAsset.model_rebuild()
CreateAssetInTDO.model_rebuild()
UpdateAsset.model_rebuild()
CreateEntityIdentifier.model_rebuild()
CreateLibraryType.model_rebuild()
UpdateLibraryType.model_rebuild()
CreateLibraryConfiguration.model_rebuild()
UpdateLibraryConfiguration.model_rebuild()
CreateEngine.model_rebuild()
JWTRightsField.model_rebuild()
UpdateEngine.model_rebuild()
CreateEngineField.model_rebuild()
AddTasksToJobs.model_rebuild()
EngineFilter.model_rebuild()
CreateJob.model_rebuild()
LaunchDAGTemplateInput.model_rebuild()
CreateTask.model_rebuild()
SingleEngineJobInput.model_rebuild()
ApplicationConfigSetConfigInput.model_rebuild()
ApplicationConfigDefinitionUpdateApp.model_rebuild()
ApplicationConfigDefinitionUpdateInput.model_rebuild()
AppCreateContextMenuExtensions.model_rebuild()
CreateContextMenuExtensions.model_rebuild()
UpdateContextMenuExtensions.model_rebuild()
CreateOrganization.model_rebuild()
CreateUser.model_rebuild()
UserACLInput.model_rebuild()
UpdateUser.model_rebuild()
UpdateCurrentUser.model_rebuild()
UpdateOrganization.model_rebuild()
CreateMention.model_rebuild()
CreateCognitiveSearchProfile.model_rebuild()
CreateWatchlist.model_rebuild()
UpdateWatchlist.model_rebuild()
BulkCreateWatchlist.model_rebuild()
ShareCollection.model_rebuild()
ShareMentionFromCollection.model_rebuild()
CreateTriggers.model_rebuild()
CreateExportRequestOutputConfig.model_rebuild()
CreateExportRequest.model_rebuild()
SubscribeEvent.model_rebuild()
EventSubscriptionInput.model_rebuild()
CreateMentionExportRequest.model_rebuild()
CreateMentionExportRequestFilter.model_rebuild()
DatasetActionInput.model_rebuild()
DatasetInput.model_rebuild()
DatasetFilter.model_rebuild()
CreateDatasetSchema.model_rebuild()
CreateOrganizationInviteInput.model_rebuild()
UpdateOrganizationInviteInput.model_rebuild()
BulkPackageResourceInput.model_rebuild()
BulkPackageGrantInput.model_rebuild()
ApplicationHeaderbarInput.model_rebuild()
ApplicationHeaderbarUpdate.model_rebuild()
CreateRegistrationConfigurationInput.model_rebuild()
UpdateRegistrationConfiguration.model_rebuild()
CompleteMultipartUploadInput.model_rebuild()
CreateScheduledJob.model_rebuild()
UpdateScheduledJob.model_rebuild()
CreateCluster.model_rebuild()
UpdateCluster.model_rebuild()
CreateSource.model_rebuild()
UpdateSource.model_rebuild()
CreateJobTemplate.model_rebuild()
CreateTaskTemplate.model_rebuild()
PairClusterNode.model_rebuild()
CreateBundle.model_rebuild()
CreateBundleSelectDetail.model_rebuild()
UpdateClusterState.model_rebuild()
LaunchScheduledJobs.model_rebuild()
CreateTDOForJob.model_rebuild()
LaunchJobTemplates.model_rebuild()
AuthGroupCreateInput.model_rebuild()
AuthACEPermissionInput.model_rebuild()
TDOBatchProcessesInput.model_rebuild()
InstanceAuditLogInput.model_rebuild()
AuditLogExportRequestFilterInput.model_rebuild()
