# Generated by ariadne-codegen
# Source: https://api.us-1.veritone.com/v3/graphql

from enum import Enum


class AuthPermissionType(str, Enum):
    NO_ACCESS = "NO_ACCESS"
    ADMIN_ACCESS = "ADMIN_ACCESS"
    ADMIN_CREATE_APPLICATION_JWT = "ADMIN_CREATE_APPLICATION_JWT"
    ADMIN_GROUP_CREATE = "ADMIN_GROUP_CREATE"
    ADMIN_GROUP_DELETE = "ADMIN_GROUP_DELETE"
    ADMIN_GROUP_READ = "ADMIN_GROUP_READ"
    ADMIN_GROUP_UPDATE = "ADMIN_GROUP_UPDATE"
    ADMIN_ORG_CREATE = "ADMIN_ORG_CREATE"
    ADMIN_ORG_READ = "ADMIN_ORG_READ"
    ADMIN_ORG_UPDATE = "ADMIN_ORG_UPDATE"
    ADMIN_PROFILE_READ = "ADMIN_PROFILE_READ"
    ADMIN_PROFILE_UPDATE = "ADMIN_PROFILE_UPDATE"
    ADMIN_ROLES_CREATE = "ADMIN_ROLES_CREATE"
    ADMIN_ROLES_DELETE = "ADMIN_ROLES_DELETE"
    ADMIN_ROLES_READ = "ADMIN_ROLES_READ"
    ADMIN_ROLES_UPDATE = "ADMIN_ROLES_UPDATE"
    ADMIN_USER_CREATE = "ADMIN_USER_CREATE"
    ADMIN_USER_DELETE = "ADMIN_USER_DELETE"
    ADMIN_USER_READ = "ADMIN_USER_READ"
    ADMIN_USER_UPDATE = "ADMIN_USER_UPDATE"
    ADMIN_UI_LEGACY_ACCESS = "ADMIN_UI_LEGACY_ACCESS"
    ADVERTISER_ACCESS = "ADVERTISER_ACCESS"
    AIWARE_ADMIN_ADMIN = "AIWARE_ADMIN_ADMIN"
    AIWARE_ADMIN_CREATE_APPLICATION_JWT = "AIWARE_ADMIN_CREATE_APPLICATION_JWT"
    AIWARE_ADMIN_SUPERADMIN = "AIWARE_ADMIN_SUPERADMIN"
    AIWARE_ADMIN_INSTANCE_ADMIN = "AIWARE_ADMIN_INSTANCE_ADMIN"
    AIWARE_FLOW_CREATE = "AIWARE_FLOW_CREATE"
    AIWARE_FLOW_DELETE = "AIWARE_FLOW_DELETE"
    AIWARE_FLOW_READ = "AIWARE_FLOW_READ"
    AIWARE_FLOW_UPDATE = "AIWARE_FLOW_UPDATE"
    AIWARE_FOLDER_CREATE = "AIWARE_FOLDER_CREATE"
    AIWARE_FOLDER_DELETE = "AIWARE_FOLDER_DELETE"
    AIWARE_FOLDER_FILE = "AIWARE_FOLDER_FILE"
    AIWARE_FOLDER_READ = "AIWARE_FOLDER_READ"
    AIWARE_FOLDER_UPDATE = "AIWARE_FOLDER_UPDATE"
    AIWARE_GROUP_CREATE = "AIWARE_GROUP_CREATE"
    AIWARE_GROUP_DELETE = "AIWARE_GROUP_DELETE"
    AIWARE_JOB_CREATE = "AIWARE_JOB_CREATE"
    AIWARE_JOB_DELETE = "AIWARE_JOB_DELETE"
    AIWARE_JOB_READ = "AIWARE_JOB_READ"
    AIWARE_JOB_UPDATE = "AIWARE_JOB_UPDATE"
    AIWARE_SCHEDULED_JOB_CREATE = "AIWARE_SCHEDULED_JOB_CREATE"
    AIWARE_SCHEDULED_JOB_DELETE = "AIWARE_SCHEDULED_JOB_DELETE"
    AIWARE_SCHEDULED_JOB_READ = "AIWARE_SCHEDULED_JOB_READ"
    AIWARE_SCHEDULED_JOB_UPDATE = "AIWARE_SCHEDULED_JOB_UPDATE"
    AIWARE_SCHEMA_CREATE = "AIWARE_SCHEMA_CREATE"
    AIWARE_SCHEMA_DELETE = "AIWARE_SCHEMA_DELETE"
    AIWARE_SCHEMA_READ = "AIWARE_SCHEMA_READ"
    AIWARE_SCHEMA_SEARCH = "AIWARE_SCHEMA_SEARCH"
    AIWARE_SCHEMA_UPDATE = "AIWARE_SCHEMA_UPDATE"
    AIWARE_SDO_CREATE = "AIWARE_SDO_CREATE"
    AIWARE_SDO_DELETE = "AIWARE_SDO_DELETE"
    AIWARE_SDO_READ = "AIWARE_SDO_READ"
    AIWARE_SDO_UPDATE = "AIWARE_SDO_UPDATE"
    AIWARE_SOURCES_CREATE = "AIWARE_SOURCES_CREATE"
    AIWARE_SOURCES_DELETE = "AIWARE_SOURCES_DELETE"
    AIWARE_SOURCES_READ = "AIWARE_SOURCES_READ"
    AIWARE_SOURCES_UPDATE = "AIWARE_SOURCES_UPDATE"
    AIWARE_TASK_CREATE = "AIWARE_TASK_CREATE"
    AIWARE_TASK_DELETE = "AIWARE_TASK_DELETE"
    AIWARE_TASK_READ = "AIWARE_TASK_READ"
    AIWARE_TASK_UPDATE = "AIWARE_TASK_UPDATE"
    AIWARE_TDO_CREATE = "AIWARE_TDO_CREATE"
    AIWARE_TDO_DELETE = "AIWARE_TDO_DELETE"
    AIWARE_TDO_READ = "AIWARE_TDO_READ"
    AIWARE_TDO_SEARCH = "AIWARE_TDO_SEARCH"
    AIWARE_TDO_UPDATE = "AIWARE_TDO_UPDATE"
    AIWARE_USER_CREATE = "AIWARE_USER_CREATE"
    AIWARE_USER_DELETE = "AIWARE_USER_DELETE"
    AIWARE_USER_UPDATE = "AIWARE_USER_UPDATE"
    AIWARE_USER_READ = "AIWARE_USER_READ"
    ANALYTICS_ACCESS = "ANALYTICS_ACCESS"
    ANALYTICS_DASHBOARD_UPDATE = "ANALYTICS_DASHBOARD_UPDATE"
    ANALYTICS_DASHBOARD_VIEW = "ANALYTICS_DASHBOARD_VIEW"
    ASSET_ALL = "ASSET_ALL"
    ASSET_URI = "ASSET_URI"
    BROADCASTER_ACCESS = "BROADCASTER_ACCESS"
    CMS_JOB_CREATE = "CMS_JOB_CREATE"
    CMS_JOB_READ = "CMS_JOB_READ"
    CMS_JOB_UPDATE = "CMS_JOB_UPDATE"
    CMS_JOB_DELETE = "CMS_JOB_DELETE"
    CMS_MEDIA_CREATE = "CMS_MEDIA_CREATE"
    CMS_MEDIA_READ = "CMS_MEDIA_READ"
    CMS_MEDIA_UPDATE = "CMS_MEDIA_UPDATE"
    CMS_MEDIA_DELETE = "CMS_MEDIA_DELETE"
    CMS_RECORDING_CREATE = "CMS_RECORDING_CREATE"
    CMS_RECORDING_DELETE = "CMS_RECORDING_DELETE"
    CMS_RECORDING_READ = "CMS_RECORDING_READ"
    CMS_RECORDING_UPDATE = "CMS_RECORDING_UPDATE"
    CMS_SOURCES_DELETE = "CMS_SOURCES_DELETE"
    CMS_SOURCES_READ = "CMS_SOURCES_READ"
    CMS_SOURCES_UPDATE = "CMS_SOURCES_UPDATE"
    CMS_TASK_CREATE = "CMS_TASK_CREATE"
    CMS_TASK_DELETE = "CMS_TASK_DELETE"
    CMS_TASK_READ = "CMS_TASK_READ"
    CMS_TASK_UPDATE = "CMS_TASK_UPDATE"
    CMS_WORKFLOWS_CREATE = "CMS_WORKFLOWS_CREATE"
    CMS_WORKFLOWS_READ = "CMS_WORKFLOWS_READ"
    CMS_WORKFLOWS_UPDATE = "CMS_WORKFLOWS_UPDATE"
    CMS_WORKFLOWS_DELETE = "CMS_WORKFLOWS_DELETE"
    CMS_ACCESS = "CMS_ACCESS"
    CMS_ANALYTICS_READ = "CMS_ANALYTICS_READ"
    CMS_CUSTOMERSERVICE = "CMS_CUSTOMERSERVICE"
    CMS_CONTENTTEMPLATE_CREATE = "CMS_CONTENTTEMPLATE_CREATE"
    CMS_CONTENTTEMPLATE_DELETE = "CMS_CONTENTTEMPLATE_DELETE"
    CMS_CONTENTTEMPLATE_READ = "CMS_CONTENTTEMPLATE_READ"
    CMS_CONTENTTEMPLATE_UPDATE = "CMS_CONTENTTEMPLATE_UPDATE"
    CMS_MEDIA_DOWNLOAD = "CMS_MEDIA_DOWNLOAD"
    CMS_MEDIA_SHARE = "CMS_MEDIA_SHARE"
    CMS_REPORT_CREATE = "CMS_REPORT_CREATE"
    COLLECTIONS_ACCESS = "COLLECTIONS_ACCESS"
    COLLECTIONS_COLLECTIONS_CREATE = "COLLECTIONS_COLLECTIONS_CREATE"
    COLLECTIONS_COLLECTIONS_DELETE = "COLLECTIONS_COLLECTIONS_DELETE"
    COLLECTIONS_COLLECTIONS_READ = "COLLECTIONS_COLLECTIONS_READ"
    COLLECTIONS_COLLECTIONS_SHARE = "COLLECTIONS_COLLECTIONS_SHARE"
    COLLECTIONS_COLLECTIONS_UPDATE = "COLLECTIONS_COLLECTIONS_UPDATE"
    COLLECTIONS_MENTIONS_CREATE = "COLLECTIONS_MENTIONS_CREATE"
    COLLECTIONS_MENTIONS_DELETE = "COLLECTIONS_MENTIONS_DELETE"
    COLLECTIONS_MENTIONS_DOWNLOAD = "COLLECTIONS_MENTIONS_DOWNLOAD"
    COLLECTIONS_MENTIONS_READ = "COLLECTIONS_MENTIONS_READ"
    COLLECTIONS_MENTIONS_SHARE = "COLLECTIONS_MENTIONS_SHARE"
    COLLECTIONS_MENTIONS_UPDATE = "COLLECTIONS_MENTIONS_UPDATE"
    COLLECTIONS_USERS_READ = "COLLECTIONS_USERS_READ"
    DEVELOPER_ACCESS = "DEVELOPER_ACCESS"
    DEVELOPER_BUILD_APPROVE = "DEVELOPER_BUILD_APPROVE"
    DEVELOPER_BUILD_CREATE = "DEVELOPER_BUILD_CREATE"
    DEVELOPER_BUILD_DELETE = "DEVELOPER_BUILD_DELETE"
    DEVELOPER_BUILD_DEPLOY = "DEVELOPER_BUILD_DEPLOY"
    DEVELOPER_BUILD_DISAPPROVE = "DEVELOPER_BUILD_DISAPPROVE"
    DEVELOPER_BUILD_INVALIDATE = "DEVELOPER_BUILD_INVALIDATE"
    DEVELOPER_BUILD_PAUSE = "DEVELOPER_BUILD_PAUSE"
    DEVELOPER_BUILD_READ = "DEVELOPER_BUILD_READ"
    DEVELOPER_BUILD_SUBMIT = "DEVELOPER_BUILD_SUBMIT"
    DEVELOPER_BUILD_UNPAUSE = "DEVELOPER_BUILD_UNPAUSE"
    DEVELOPER_BUILD_UPDATE = "DEVELOPER_BUILD_UPDATE"
    DEVELOPER_BUILD_UPLOAD = "DEVELOPER_BUILD_UPLOAD"
    DEVELOPER_DOCKER_ADMIN = "DEVELOPER_DOCKER_ADMIN"
    DEVELOPER_DOCKER_ORG_PUSH = "DEVELOPER_DOCKER_ORG_PUSH"
    DEVELOPER_DOCKER_ORG_PULL = "DEVELOPER_DOCKER_ORG_PULL"
    DEVELOPER_DOCKER_ORG_USER_PUSH = "DEVELOPER_DOCKER_ORG_USER_PUSH"
    DEVELOPER_DOCKER_ORG_USER_PULL = "DEVELOPER_DOCKER_ORG_USER_PULL"
    DEVELOPER_ENGINE_CREATE = "DEVELOPER_ENGINE_CREATE"
    DEVELOPER_ENGINE_DELETE = "DEVELOPER_ENGINE_DELETE"
    DEVELOPER_ENGINE_DISABLE = "DEVELOPER_ENGINE_DISABLE"
    DEVELOPER_ENGINE_ENABLE = "DEVELOPER_ENGINE_ENABLE"
    DEVELOPER_ENGINE_READ = "DEVELOPER_ENGINE_READ"
    DEVELOPER_ENGINE_UPDATE = "DEVELOPER_ENGINE_UPDATE"
    DEVELOPER_TASK_CREATE = "DEVELOPER_TASK_CREATE"
    DEVELOPER_TASK_READ = "DEVELOPER_TASK_READ"
    DEVELOPER_TASK_UPDATE = "DEVELOPER_TASK_UPDATE"
    DISCOVERY_ACCESS = "DISCOVERY_ACCESS"
    DISCOVERY_ANALYTICS_DOWNLOAD = "DISCOVERY_ANALYTICS_DOWNLOAD"
    DISCOVERY_ANALYTICS_READ = "DISCOVERY_ANALYTICS_READ"
    DISCOVERY_ANALYTICS_SHARE = "DISCOVERY_ANALYTICS_SHARE"
    DISCOVERY_FOLDER_CREATE = "DISCOVERY_FOLDER_CREATE"
    DISCOVERY_FOLDER_DELETE = "DISCOVERY_FOLDER_DELETE"
    DISCOVERY_FOLDER_READ = "DISCOVERY_FOLDER_READ"
    DISCOVERY_FOLDER_SHARE = "DISCOVERY_FOLDER_SHARE"
    DISCOVERY_FOLDER_UPDATE = "DISCOVERY_FOLDER_UPDATE"
    DISCOVERY_MENTIONS_CREATE = "DISCOVERY_MENTIONS_CREATE"
    DISCOVERY_MENTIONS_DELETE = "DISCOVERY_MENTIONS_DELETE"
    DISCOVERY_MENTIONS_DOWNLOAD = "DISCOVERY_MENTIONS_DOWNLOAD"
    DISCOVERY_MENTIONS_READ = "DISCOVERY_MENTIONS_READ"
    DISCOVERY_MENTIONS_SHARE = "DISCOVERY_MENTIONS_SHARE"
    DISCOVERY_MENTIONS_UPDATE = "DISCOVERY_MENTIONS_UPDATE"
    DISCOVERY_RESULTS_DOWNLOAD = "DISCOVERY_RESULTS_DOWNLOAD"
    DISCOVERY_RESULTS_READ = "DISCOVERY_RESULTS_READ"
    DISCOVERY_RESULTS_SHARE = "DISCOVERY_RESULTS_SHARE"
    INTERNAL_LOGINBYEMAIL = "INTERNAL_LOGINBYEMAIL"
    JOB_CREATE = "JOB_CREATE"
    JOB_DELETE = "JOB_DELETE"
    JOB_READ = "JOB_READ"
    JOB_UPDATE = "JOB_UPDATE"
    MENTIONS_CREATE = "MENTIONS_CREATE"
    MENTIONS_DELETE = "MENTIONS_DELETE"
    MENTIONS_DOWNLOAD = "MENTIONS_DOWNLOAD"
    MENTIONS_READ = "MENTIONS_READ"
    MENTIONS_SHARE = "MENTIONS_SHARE"
    MENTIONS_UPDATE = "MENTIONS_UPDATE"
    POLITICS_ACCESS = "POLITICS_ACCESS"
    RECORDING_CREATE = "RECORDING_CREATE"
    RECORDING_DELETE = "RECORDING_DELETE"
    RECORDING_READ = "RECORDING_READ"
    RECORDING_UPDATE = "RECORDING_UPDATE"
    SOURCE_UPDATE = "SOURCE_UPDATE"
    SUPERADMIN = "SUPERADMIN"
    TASK_CREATE = "TASK_CREATE"
    TASK_DELETE = "TASK_DELETE"
    TASK_READ = "TASK_READ"
    TASK_UPDATE = "TASK_UPDATE"
    VERITONE_FINANCEADMIN = "VERITONE_FINANCEADMIN"
    VERITONE_SUPERADMIN = "VERITONE_SUPERADMIN"
    AIWARE_PACKAGE_CREATE = "AIWARE_PACKAGE_CREATE"
    AIWARE_PACKAGE_READ = "AIWARE_PACKAGE_READ"
    AIWARE_PACKAGE_UPDATE = "AIWARE_PACKAGE_UPDATE"
    AIWARE_PACKAGE_DELETE = "AIWARE_PACKAGE_DELETE"
    AIWARE_PROCESSING_CENTER_ACCESS = "AIWARE_PROCESSING_CENTER_ACCESS"
    AIWARE_RESOURCE_CENTER_ACCESS = "AIWARE_RESOURCE_CENTER_ACCESS"
    AIWARE_AUDIT_LOG_READ = "AIWARE_AUDIT_LOG_READ"
    WORKFLOW_CREATE = "WORKFLOW_CREATE"


class AuditAction(str, Enum):
    Create = "Create"
    Update = "Update"
    Delete = "Delete"


class TokenType(str, Enum):
    API = "API"
    User = "User"


class ScopeRequirement(str, Enum):
    Any = "Any"
    All = "All"


class AuthObjectType(str, Enum):
    TemporalDataObject = "TemporalDataObject"
    Job = "Job"
    Task = "Task"
    Folder = "Folder"
    AuthorizationGroup = "AuthorizationGroup"


class AuthResourceType(str, Enum):
    NONE = "NONE"
    TDO = "TDO"
    SDO = "SDO"
    SDOSchema = "SDOSchema"
    Folder = "Folder"
    Source = "Source"
    Organization = "Organization"
    Engine = "Engine"
    Library = "Library"
    Dataset = "Dataset"
    Application = "Application"


class OrderDirection(str, Enum):
    asc = "asc"
    desc = "desc"


class NotificationFlag(str, Enum):
    unread = "unread"
    read = "read"
    actionPending = "actionPending"
    actionDone = "actionDone"
    seen = "seen"
    unseen = "unseen"
    starred = "starred"


class NotificationDateTimeField(str, Enum):
    createdDateTime = "createdDateTime"
    readDateTime = "readDateTime"
    actionDateTime = "actionDateTime"


class AuditLogOrderByField(str, Enum):
    id = "id"
    objectId = "objectId"
    objectType = "objectType"
    createdDateTime = "createdDateTime"
    eventType = "eventType"
    userName = "userName"
    clientIpAddress = "clientIpAddress"
    clientUserAgent = "clientUserAgent"
    success = "success"


class SavedSearchOrderBy(str, Enum):
    name = "name"
    createdDateTime = "createdDateTime"
    sharedWithOrganization = "sharedWithOrganization"


class TaskDateTimeField(str, Enum):
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"


class SchemaOwnership(str, Enum):
    mine = "mine"
    others = "others"
    all = "all"


class ViewerOwnership(str, Enum):
    mine = "mine"
    all = "all"


class JobDateTimeField(str, Enum):
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"


class EngineDateTimeField(str, Enum):
    modifiedDateTime = "modifiedDateTime"


class EngineDistributionType(str, Enum):
    private = "private"
    org_locked = "org_locked"
    sharable = "sharable"
    public = "public"
    marketplace = "marketplace"
    instance_locked = "instance_locked"


class TemporalDataObjectOrderBy(str, Enum):
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"
    startDateTime = "startDateTime"
    stopDateTime = "stopDateTime"


class TemporalDataObjectDateTimeField(str, Enum):
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"
    startDateTime = "startDateTime"
    stopDateTime = "stopDateTime"


class UsersDateTimeField(str, Enum):
    lastLoginDateTime = "lastLoginDateTime"
    createdDateTime = "createdDateTime"


class WatchlistOrderBy(str, Enum):
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"
    stopDateTime = "stopDateTime"
    startDateTime = "startDateTime"
    name = "name"


class PackageStatus(str, Enum):
    draft = "draft"
    pending = "pending"
    approved = "approved"
    published = "published"
    deactivated = "deactivated"


class NotificationDeliveryType(str, Enum):
    NotificationMailbox = "NotificationMailbox"


class UpdateJobsStatus(str, Enum):
    queued = "queued"
    failed = "failed"
    aborted = "aborted"


class TDOCleanupOption(str, Enum):
    storage = "storage"
    searchIndex = "searchIndex"
    engineResults = "engineResults"


class PlatformVersionOrderBy(str, Enum):
    version = "version"
    createdAt = "createdAt"
    installedAt = "installedAt"


class ApplicationStatus(str, Enum):
    active = "active"
    draft = "draft"
    deleted = "deleted"
    pending = "pending"
    rejected = "rejected"
    approved = "approved"
    disabled = "disabled"


class ApplicationDateTimeField(str, Enum):
    modifiedDateTime = "modifiedDateTime"
    createdDateTime = "createdDateTime"


class DeploymentModel(str, Enum):
    FullyNetworkIsolated = "FullyNetworkIsolated"
    MostlyNetworkIsolated = "MostlyNetworkIsolated"
    NonNetworkIsolated = "NonNetworkIsolated"
    HumanReview = "HumanReview"


class UpdateTDOFlag(str, Enum):
    preventTrim = "preventTrim"


class ModuleRepo(str, Enum):
    npm = "npm"
    github = "github"


class NodeModuleStatus(str, Enum):
    active = "active"
    deleted = "deleted"


class ApplicationWorkflowAction(str, Enum):
    submit = "submit"
    approve = "approve"
    reject = "reject"
    deploy = "deploy"
    enable = "enable"
    disable = "disable"
    undelete = "undelete"


class ApplicationComponentType(str, Enum):
    engines = "engines"
    dataRegistries = "dataRegistries"


class UpdateApplicationComponentAction(str, Enum):
    add = "add"
    remove = "remove"


class AssetOrderBy(str, Enum):
    createdDateTime = "createdDateTime"
    assetType = "assetType"
    contentType = "contentType"


class AssetCreationMode(str, Enum):
    create = "create"
    append = "append"
    replace = "replace"


class EntityIdentifierDataType(str, Enum):
    image = "image"
    audio = "audio"
    video = "video"
    text = "text"
    pdf = "pdf"
    tdo = "tdo"
    objectbox = "objectbox"


class SetEntityProfileImage(str, Enum):
    none = "none"
    ifNotSet = "ifNotSet"
    always = "always"


class LibraryOrderBy(str, Enum):
    id = "id"
    name = "name"
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"
    version = "version"


class LibraryEntityOrderBy(str, Enum):
    id = "id"
    name = "name"
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"


class LibraryEngineModelTrainStatus(str, Enum):
    pending = "pending"
    queued = "queued"
    complete = "complete"
    failed = "failed"
    running = "running"


class EntityTagType(str, Enum):
    engine = "engine"
    schema = "schema"
    events = "events"
    cluster = "cluster"
    flow = "flow"
    app = "app"
    folder = "folder"


class TemplateLanguage(str, Enum):
    Handlebars = "Handlebars"


class JobTemplateEnumType(str, Enum):
    Reprocess = "Reprocess"
    Upload = "Upload"


class EngineMode(str, Enum):
    Chunk = "Chunk"
    Stream = "Stream"
    Batch = "Batch"


class EngineScheduleType(str, Enum):
    Now = "Now"
    OnDemand = "OnDemand"
    Recurring = "Recurring"
    Continuous = "Continuous"


class EngineStateAction(str, Enum):
    edit = "edit"
    delete = "delete"
    disable = "disable"
    enable = "enable"
    undelete = "undelete"


class CollaboratorStatus(str, Enum):
    active = "active"
    rejected = "rejected"
    revoked = "revoked"


class EngineState(str, Enum):
    active = "active"
    disabled = "disabled"
    pending = "pending"
    deleted = "deleted"
    draft = "draft"
    ready = "ready"


class GPUSupported(str, Enum):
    none = "none"
    aws_p2 = "aws_p2"
    aws_p3 = "aws_p3"


class GPUModel(str, Enum):
    V100 = "V100"
    A100 = "A100"
    M60 = "M60"
    T4 = "T4"
    A10G = "A10G"
    L4 = "L4"
    K80 = "K80"


class EngineWorkflowAction(str, Enum):
    enable = "enable"
    disable = "disable"


class EngineFieldType(str, Enum):
    Number = "Number"
    Picklist = "Picklist"
    MultiPicklist = "MultiPicklist"
    Text = "Text"
    SchemaSelection = "SchemaSelection"


class IoFolderType(str, Enum):
    input = "input"
    output = "output"


class IoFolderMode(str, Enum):
    chunk = "chunk"
    stream = "stream"


class JobStatus(str, Enum):
    pending = "pending"
    complete = "complete"
    running = "running"
    cancelled = "cancelled"
    queued = "queued"
    failed = "failed"


class JobStatusFilter(str, Enum):
    pending = "pending"
    running = "running"
    complete = "complete"
    cancelled = "cancelled"
    queued = "queued"
    failed = "failed"


class TaskStatus(str, Enum):
    pending = "pending"
    running = "running"
    complete = "complete"
    queued = "queued"
    accepted = "accepted"
    failed = "failed"
    cancelled = "cancelled"
    standby_pending = "standby_pending"
    waiting = "waiting"
    resuming = "resuming"
    aborted = "aborted"
    paused = "paused"


class UpdateTaskStatus(str, Enum):
    running = "running"
    failed = "failed"
    complete = "complete"
    waiting = "waiting"


class TaskFailureReason(str, Enum):
    internal_error = "internal_error"
    unknown = "unknown"
    url_not_found = "url_not_found"
    url_not_allowed = "url_not_allowed"
    url_timeout = "url_timeout"
    url_connection_refused = "url_connection_refused"
    url_error = "url_error"
    invalid_data = "invalid_data"
    rate_limited = "rate_limited"
    api_not_allowed = "api_not_allowed"
    api_authentication_error = "api_authentication_error"
    api_not_found = "api_not_found"
    api_error = "api_error"
    file_write_error = "file_write_error"
    stream_read_error = "stream_read_error"
    system_dependency_missing = "system_dependency_missing"
    system_error = "system_error"
    heartbeat_timeout = "heartbeat_timeout"
    chunk_timeout = "chunk_timeout"
    other = "other"
    external_error = "external_error"
    connection = "connection"
    unauthorized = "unauthorized"
    api = "api"
    resources = "resources"
    not_found = "not_found"
    core_api = "core_api"
    bad_data = "bad_data"
    scheduling = "scheduling"
    task_validation = "task_validation"


class EngineTypeFilter(str, Enum):
    Cognition = "Cognition"
    Ingestion = "Ingestion"
    Aggregator = "Aggregator"


class ApplicationOrderField(str, Enum):
    name = "name"
    status = "status"
    url = "url"
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"


class EngineOrderField(str, Enum):
    name = "name"
    id = "id"
    state = "state"
    price = "price"
    rating = "rating"
    order = "order"
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"
    runtimeType = "runtimeType"
    category = "category"
    type = "type"
    deploymentModel = "deploymentModel"
    mode = "mode"
    libraryRequired = "libraryRequired"
    buildCreatedDateTime = "buildCreatedDateTime"
    clusterSize = "clusterSize"
    gpuSupported = "gpuSupported"
    maxMediaLengthMs = "maxMediaLengthMs"


class ClusterSize(str, Enum):
    small = "small"
    medium = "medium"
    large = "large"


class SupportedGPU(str, Enum):
    G2 = "G2"
    G3 = "G3"
    P2 = "P2"


class BuildStatus(str, Enum):
    approved = "approved"
    available = "available"
    deleted = "deleted"
    deploying = "deploying"
    deployed = "deployed"
    fetching = "fetching"
    invalid = "invalid"
    paused = "paused"
    pending = "pending"
    uploaded = "uploaded"
    deployFailed = "deployFailed"
    disapproved = "disapproved"


class BuildUpdateAction(str, Enum):
    deploy = "deploy"
    pause = "pause"
    unpause = "unpause"
    approve = "approve"
    disapprove = "disapprove"
    invalidate = "invalidate"
    submit = "submit"
    upload = "upload"
    delete = "delete"
    update = "update"
    certification = "certification"


class JobOrderField(str, Enum):
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"


class TaskOrderField(str, Enum):
    createdDateTime = "createdDateTime"
    queuedDateTime = "queuedDateTime"
    modifiedDateTime = "modifiedDateTime"
    completedDateTime = "completedDateTime"


class ApplicationStateAction(str, Enum):
    approve = "approve"
    edit = "edit"
    delete = "delete"
    deploy = "deploy"
    disable = "disable"
    enable = "enable"
    reject = "reject"
    submit = "submit"
    undelete = "undelete"


class ApplicationConfigValueEnum(str, Enum):
    String = "String"
    Boolean = "Boolean"
    Date = "Date"
    Integer = "Integer"
    JSON = "JSON"
    Float = "Float"


class ApplicationConfigLevelEnum(str, Enum):
    Instance = "Instance"
    Organization = "Organization"
    User = "User"


class ContextMenuExtensionType(str, Enum):
    mention = "mention"
    watchlist = "watchlist"
    collection = "collection"
    tdo = "tdo"


class UserStatus(str, Enum):
    active = "active"
    suspended = "suspended"
    deleted = "deleted"
    deactivated = "deactivated"
    inactive = "inactive"


class DataRetentionActionEnum(str, Enum):
    PURGE = "PURGE"
    SOFT_DELETE = "SOFT_DELETE"
    ARCHIVE = "ARCHIVE"


class OrganizationType(str, Enum):
    agency = "agency"
    broadcaster = "broadcaster"


class OrganizationStatus(str, Enum):
    active = "active"
    deleted = "deleted"


class MentionDateTimeField(str, Enum):
    mentionDate = "mentionDate"
    endDateTime = "endDateTime"
    hitStartDateTime = "hitStartDateTime"
    hitStopDateTime = "hitStopDateTime"


class MentionOrderByField(str, Enum):
    id = "id"
    mentionDate = "mentionDate"
    hitStartDateTime = "hitStartDateTime"
    hitEndDateTime = "hitEndDateTime"
    endDateTime = "endDateTime"


class RootFolderType(str, Enum):
    watchlist = "watchlist"
    collection = "collection"
    cms = "cms"
    application = "application"
    resource = "resource"


class FolderStatus(str, Enum):
    active = "active"
    inactive = "inactive"


class FolderOrderByField(str, Enum):
    name = "name"
    createdDateTime = "createdDateTime"


class SearchIndex(str, Enum):
    mine = "mine"
    global_ = "global"


class SubscriptionFrequency(str, Enum):
    immediate = "immediate"
    daily = "daily"
    weekly = "weekly"
    never = "never"


class SubscriptionObjectType(str, Enum):
    mention = "mention"


class DayOfWeek(str, Enum):
    Sunday = "Sunday"
    Monday = "Monday"
    Tuesday = "Tuesday"
    Wednesday = "Wednesday"
    Thursday = "Thursday"
    Friday = "Friday"
    Saturday = "Saturday"


class ShareType(str, Enum):
    collection = "collection"
    mention = "mention"


class DataRegistryOrderBy(str, Enum):
    name = "name"
    source = "source"
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"


class SchemaOrderFields(str, Enum):
    majorVersion = "majorVersion"
    minorVersion = "minorVersion"
    status = "status"
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"


class SchemaStatus(str, Enum):
    published = "published"
    deleted = "deleted"
    draft = "draft"
    inactive = "inactive"


class SchemaAction(str, Enum):
    view = "view"
    edit = "edit"
    publish = "publish"
    deactivate = "deactivate"
    delete = "delete"


class EngineSchemaIOType(str, Enum):
    input = "input"
    output = "output"
    both = "both"


class StructuredDataOrderByField(str, Enum):
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"


class TransformFunction(str, Enum):
    XML2JSON = "XML2JSON"
    Transcript2JSON = "Transcript2JSON"
    JSON = "JSON"


class StringMatch(str, Enum):
    startsWith = "startsWith"
    endsWith = "endsWith"
    contains = "contains"
    exact = "exact"


class ExportRequestStatus(str, Enum):
    incomplete = "incomplete"
    complete = "complete"
    downloaded = "downloaded"
    failed = "failed"


class ExportRequestEvent(str, Enum):
    exportRequest = "exportRequest"
    mentionExportRequest = "mentionExportRequest"


class CreateTriggerTarget(str, Enum):
    Webhook = "Webhook"
    SMS = "SMS"
    Email = "Email"


class EventDeliveryType(str, Enum):
    Webhook = "Webhook"
    SMS = "SMS"
    Email = "Email"
    CreateJob = "CreateJob"


class EventSubscriptionScope(str, Enum):
    Organization = "Organization"
    Application = "Application"


class EventActionTemplateInputType(str, Enum):
    event = "event"


class EventActionTemplateActionType(str, Enum):
    job = "job"
    sms = "sms"
    email = "email"
    webhook = "webhook"
    gql = "gql"


class EventCustomRuleStatus(str, Enum):
    active = "active"
    inactive = "inactive"


class EventAction(str, Enum):
    SUBSCRIBE = "SUBSCRIBE"
    UNSUBSCRIBE = "UNSUBSCRIBE"


class SharedCollectionUpdateType(str, Enum):
    AddMentions = "AddMentions"
    RemoveMentions = "RemoveMentions"
    UpdateMentions = "UpdateMentions"


class SharedCollectionHistoryStatus(str, Enum):
    New = "New"
    InProgress = "InProgress"
    Complete = "Complete"
    Failed = "Failed"


class CollectionMentionOrderField(str, Enum):
    mentionDate = "mentionDate"


class EngineBuildOrderByField(str, Enum):
    version = "version"
    modifiedDateTime = "modifiedDateTime"
    createdDateTime = "createdDateTime"


class DatasetClassTypeEnum(str, Enum):
    audio = "audio"
    text = "text"
    benchmark = "benchmark"


class DataSetFeatureDataTypeEnum(str, Enum):
    integer = "integer"
    text = "text"
    integer_range = "integer_range"
    geo_point = "geo_point"


class filterCombineOperator(str, Enum):
    AND = "AND"
    OR = "OR"


class DatasetActionType(str, Enum):
    ADD = "ADD"
    UPDATE = "UPDATE"
    DELETE = "DELETE"


class OrganizationInviteAction(str, Enum):
    submit = "submit"
    approve = "approve"
    complete = "complete"
    reject = "reject"
    request = "request"
    delete = "delete"
    resend = "resend"


class OrganizationInviteStatus(str, Enum):
    submitted = "submitted"
    approved = "approved"
    completed = "completed"
    rejected = "rejected"
    expired = "expired"
    deleted = "deleted"


class OrganizationInviteType(str, Enum):
    userInvite = "userInvite"
    selfSignup = "selfSignup"


class PackageResourceType(str, Enum):
    application = "application"
    applicationContentMenuExtension = "applicationContentMenuExtension"
    applicationViewer = "applicationViewer"
    dataset = "dataset"
    engine = "engine"
    engineBuild = "engineBuild"
    eventDefinition = "eventDefinition"
    eventListener = "eventListener"
    eventListenerMapping = "eventListenerMapping"
    automateFlowRevision = "automateFlowRevision"
    library = "library"
    libraryType = "libraryType"
    schema = "schema"
    service = "service"
    package = "package"
    sdo = "sdo"
    tdo = "tdo"
    folder = "folder"
    scheduledJob = "scheduledJob"
    dagTemplate = "dagTemplate"
    nodeRedPalette = "nodeRedPalette"
    automateNode = "automateNode"
    automateTemplate = "automateTemplate"
    automatePalette = "automatePalette"
    applicationConfigDefinition = "applicationConfigDefinition"


class PackageGrantType(str, Enum):
    GRANT = "GRANT"
    VIEW = "VIEW"
    DENY = "DENY"


class PackageResourceAction(str, Enum):
    ADD = "ADD"
    REMOVE = "REMOVE"


class PackageGrantAction(str, Enum):
    ADD = "ADD"
    REMOVE = "REMOVE"


class ApplicationViewerBuildStatus(str, Enum):
    approved = "approved"
    deleted = "deleted"
    deployed = "deployed"
    draft = "draft"


class ApplicationViewerBuildOrderByField(str, Enum):
    version = "version"


class ApplicationViewerOrderField(str, Enum):
    name = "name"
    id = "id"
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"


class ApplicationViewerType(str, Enum):
    external = "external"
    container = "container"
    upload = "upload"


class AccessScope(str, Enum):
    public = "public"
    owned = "owned"
    granted = "granted"
    any = "any"


class JobAction(str, Enum):
    create = "create"
    update = "update"


class PriceDimension(str, Enum):
    PRICE_PER_TASK = "PRICE_PER_TASK"
    PRICE_PER_CHUNK = "PRICE_PER_CHUNK"
    PRICE_PER_PROCESSED_GB = "PRICE_PER_PROCESSED_GB"
    PRICE_PER_MEDIA_HOUR = "PRICE_PER_MEDIA_HOUR"
    PRICE_PER_CPU_HOUR = "PRICE_PER_CPU_HOUR"


class OrgDocumentType(str, Enum):
    privacyPolicy = "privacyPolicy"
    termsOfService = "termsOfService"


class OrgRegistrationStatus(str, Enum):
    open = "open"
    restricted = "restricted"


class OrgFileResourceStatus(str, Enum):
    active = "active"
    inactive = "inactive"


class SdoDateTimeField(str, Enum):
    createdAt = "createdAt"
    modifiedAt = "modifiedAt"


class EmailProvider(str, Enum):
    SES = "SES"
    Mandrill = "Mandrill"
    ECS = "ECS"


class ScheduledJobOrderField(str, Enum):
    id = "id"
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"
    startDateTime = "startDateTime"
    stopDateTime = "stopDateTime"
    name = "name"
    runMode = "runMode"
    isActive = "isActive"


class SetScheduledJobPermission(str, Enum):
    viewer = "viewer"
    editor = "editor"
    none = "none"


class ScheduledJobPermission(str, Enum):
    editor = "editor"
    viewer = "viewer"
    owner = "owner"


class RunMode(str, Enum):
    Continuous = "Continuous"
    Recurring = "Recurring"
    Once = "Once"
    Now = "Now"


class ScheduleType(str, Enum):
    Weekly = "Weekly"
    Interval = "Interval"


class IntervalUnit(str, Enum):
    Months = "Months"
    Weeks = "Weeks"
    Days = "Days"
    Hours = "Hours"
    Minutes = "Minutes"
    Seconds = "Seconds"


class IngestionStatus(str, Enum):
    RECORD = "RECORD"
    RECORD_AND_TRANSCRIBE = "RECORD_AND_TRANSCRIBE"
    INACTIVE = "INACTIVE"
    METRICS_ONLY = "METRICS_ONLY"


class ClusterStatus(str, Enum):
    pending = "pending"
    active = "active"
    deploying = "deploying"
    online = "online"
    paused = "paused"
    terminated = "terminated"
    failure = "failure"


class MediaStorageOption(str, Enum):
    edge = "edge"
    core = "core"


class ClusterType(str, Enum):
    ami = "ami"
    RT = "RT"
    OnPrem = "OnPrem"


class ClusterPermission(str, Enum):
    owner = "owner"
    viewer = "viewer"


class SetClusterPermission(str, Enum):
    viewer = "viewer"
    none = "none"


class ClusterNodeStatus(str, Enum):
    anonymous = "anonymous"
    running = "running"
    offline = "offline"
    decomissioned = "decomissioned"
    paused = "paused"


class SourceCollaboratorOrderBy(str, Enum):
    organizationId = "organizationId"
    permission = "permission"


class SetSourcePermission(str, Enum):
    viewer = "viewer"
    editor = "editor"
    none = "none"


class SourcePermission(str, Enum):
    editor = "editor"
    viewer = "viewer"
    owner = "owner"


class CredentialType(str, Enum):
    None_ = "None"
    Any = "Any"
    APIKey = "APIKey"
    Username = "Username"


class ClusterOrderByField(str, Enum):
    name = "name"
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"
    stateLastUpdatedDateTime = "stateLastUpdatedDateTime"


class ClusterDateTimeField(str, Enum):
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"
    stateLastUpdatedDateTime = "stateLastUpdatedDateTime"


class SourceOrderField(str, Enum):
    createdDateTime = "createdDateTime"
    modifiedDateTime = "modifiedDateTime"
    id = "id"
    name = "name"
    sourceTypeId = "sourceTypeId"


class ScheduledJobDateTimeField(str, Enum):
    startDateTime = "startDateTime"
    stopDateTime = "stopDateTime"
    dateCreated = "dateCreated"
    dateModified = "dateModified"


class ScheduledJobPartTimeField(str, Enum):
    startTime = "startTime"
    endTime = "endTime"


class UpdateOrganizationClusterAction(str, Enum):
    setDefault = "setDefault"
    removeDefault = "removeDefault"
    setOverride = "setOverride"
    removeOverride = "removeOverride"


class BundleCategory(str, Enum):
    category = "category"
    extension = "extension"
    file = "file"


class StorageProviderType(str, Enum):
    aws_s3 = "aws_s3"


class SourceAccessType(str, Enum):
    GET = "GET"
    PUT = "PUT"


class AlwaysUpFlowStatus(str, Enum):
    active = "active"
    inactive = "inactive"
    deleted = "deleted"


class AuthGroupSourceType(str, Enum):
    API = "API"
    Integration = "Integration"
    AppRole = "AppRole"


class AuthGroupMemberType(str, Enum):
    User = "User"
    Group = "Group"


class AuthObjectClass(str, Enum):
    Internal = "Internal"
    System = "System"
    Application = "Application"
    Standard = "Standard"


class PermissionGrantType(str, Enum):
    Direct = "Direct"
    GroupMembership = "GroupMembership"
    OrganizationRole = "OrganizationRole"
    ParentResource = "ParentResource"


class BatchProcessDateTimeField(str, Enum):
    dateModified = "dateModified"
    dateCreated = "dateCreated"


class BatchProcessOrderField(str, Enum):
    dateModified = "dateModified"
    dateCreated = "dateCreated"


class BatchProcessStatus(str, Enum):
    creating = "creating"
    pending = "pending"
    running = "running"
    completed = "completed"
    canceling = "canceling"
    canceled = "canceled"
    failed = "failed"
    aborted = "aborted"


class BatchProcessItemStatus(str, Enum):
    pending = "pending"
    complete = "complete"
    running = "running"
    cancelled = "cancelled"
    queued = "queued"
    failed = "failed"
    aborted = "aborted"


class InstanceAuditLogOrderByField(str, Enum):
    id = "id"
    eventId = "eventId"
    objectId = "objectId"
    targetType = "targetType"
    createdDateTime = "createdDateTime"
    eventName = "eventName"
    event = "event"
    userName = "userName"
    userId = "userId"
    clientIpAddress = "clientIpAddress"
    clientUserAgent = "clientUserAgent"
    actionResult = "actionResult"
    actionName = "actionName"
    impersonatorUserId = "impersonatorUserId"
    impersonatorUserName = "impersonatorUserName"
    originatorApplication = "originatorApplication"
    originatorService = "originatorService"
    organizationId = "organizationId"
    organizationName = "organizationName"
    sendEmail = "sendEmail"


class TargetTypeEnum(str, Enum):
    tt_TDO = "tt_TDO"
    tt_Job = "tt_Job"
    tt_Asset = "tt_Asset"
    tt_User = "tt_User"
    tt_Organization = "tt_Organization"
    tt_Application = "tt_Application"
    tt_Engine = "tt_Engine"
    tt_Cluster = "tt_Cluster"
    tt_Library = "tt_Library"
    tt_Source = "tt_Source"
    tt_SDO = "tt_SDO"
    tt_Watchlist = "tt_Watchlist"
    tt_Folder = "tt_Folder"
    tt_ScheduledJob = "tt_ScheduledJob"
    tt_Authentication = "tt_Authentication"
    tt_Platform = "tt_Platform"
    tt_Package = "tt_Package"
    tt_Task = "tt_Task"
    tt_Build = "tt_Build"
    tt_Media = "tt_Media"


class ActionNameEnum(str, Enum):
    create = "create"
    read = "read"
    update = "update"
    delete = "delete"
    unknown = "unknown"


class EventNameEnum(str, Enum):
    LoginSucceeded = "LoginSucceeded"
    LoginFailed = "LoginFailed"
    LoginAttemptsExceeded = "LoginAttemptsExceeded"
    Impersonated = "Impersonated"
    PasswordChange = "PasswordChange"
    Logout = "Logout"
    PasswordToken = "PasswordToken"
    LoginVerifyMFAToken = "LoginVerifyMFAToken"
    RegisterMFA = "RegisterMFA"
    UnregisterMFA = "UnregisterMFA"
    AuditConfigChange = "AuditConfigChange"
    EngineBuildSubmit = "EngineBuildSubmit"
    EngineBuildApprove = "EngineBuildApprove"
    EngineBuildDisapprove = "EngineBuildDisapprove"
    EngineBuildCreate = "EngineBuildCreate"
    EngineBuildUpload = "EngineBuildUpload"
    EngineBuildInvalidate = "EngineBuildInvalidate"
    EngineBuildPause = "EngineBuildPause"
    EngineBuildUnpause = "EngineBuildUnpause"
    EngineBuildDelete = "EngineBuildDelete"
    EngineBuildUpdate = "EngineBuildUpdate"
    EngineBuildDeploy = "EngineBuildDeploy"
    EngineCreate = "EngineCreate"
    EngineUpdate = "EngineUpdate"
    EngineDisable = "EngineDisable"
    EngineEnable = "EngineEnable"
    IntegrationSettings = "IntegrationSettings"
    OrganizationCreate = "OrganizationCreate"
    OrganizationUpdate = "OrganizationUpdate"
    OrganizationDelete = "OrganizationDelete"
    OrganizationInvitation = "OrganizationInvitation"
    OrganizationRequest = "OrganizationRequest"
    OrganizationRequestRejected = "OrganizationRequestRejected"
    OrganizationRequestApproved = "OrganizationRequestApproved"
    OrganizationInvitationRejected = "OrganizationInvitationRejected"
    OrganizationInvitationAccepted = "OrganizationInvitationAccepted"
    TrialSignUp = "TrialSignUp"
    BenchmarkSignUp = "BenchmarkSignUp"
    VoiceSignUp = "VoiceSignUp"
    SportxSignUp = "SportxSignUp"
    VerisafeSignUp = "VerisafeSignUp"
    DeveloperTrialSignUp = "DeveloperTrialSignUp"
    AutomateStudioSignUp = "AutomateStudioSignUp"
    AwsReferralSignUp = "AwsReferralSignUp"
    RedactSelfServiceSignUp = "RedactSelfServiceSignUp"
    UserCreate = "UserCreate"
    UserUpdate = "UserUpdate"
    UserDelete = "UserDelete"
    Unknown = "Unknown"
    RecordingDelete = "RecordingDelete"
    RecordingCreate = "RecordingCreate"
    RecordingUpdate = "RecordingUpdate"
    WatchListCreated = "WatchListCreated"
    WatchListUpdated = "WatchListUpdated"
    AssetUpload = "AssetUpload"
    AssetMetadataUpdate = "AssetMetadataUpdate"
    PlatformNewVersionAvailable = "PlatformNewVersionAvailable"
    PlatformNewVersionInstalled = "PlatformNewVersionInstalled"
    PackageCreated = "PackageCreated"
    PackageDeleted = "PackageDeleted"
    PackageApproved = "PackageApproved"
    PackageRejected = "PackageRejected"
    PackageInstalled = "PackageInstalled"
    PackageGrantSet = "PackageGrantSet"
    PackageGrantRemoved = "PackageGrantRemoved"
    AccessMedia = "AccessMedia"
    ApplicationCreate = "ApplicationCreate"
    ApplicationUpdate = "ApplicationUpdate"
    ApplicationDelete = "ApplicationDelete"
    ClusterCreate = "ClusterCreate"
    ClusterDelete = "ClusterDelete"
    ClusterUpdate = "ClusterUpdate"
    FolderCreate = "FolderCreate"
    FolderUpdate = "FolderUpdate"
    FolderDelete = "FolderDelete"
    MediaSourceCreate = "MediaSourceCreate"
    MediaSourceUpdate = "MediaSourceUpdate"
    MediaSourceDelete = "MediaSourceDelete"
    LibraryTrainingComplete = "LibraryTrainingComplete"
    StructuredDataCreate = "StructuredDataCreate"
    StructuredDataDelete = "StructuredDataDelete"
    StructuredDataRegistryCreate = "StructuredDataRegistryCreate"
    StructuredDataRegistryUpdate = "StructuredDataRegistryUpdate"
    StructuredDataRegistryDelete = "StructuredDataRegistryDelete"
    JobCreated = "JobCreated"
    CreateAuditLogExport = "CreateAuditLogExport"
    CancelAuditLogExport = "CancelAuditLogExport"
    QueryAuditLogExport = "QueryAuditLogExport"
    UserPermissionsUpdate = "UserPermissionsUpdate"
    SendEmail = "SendEmail"
    AuditLogAccess = "AuditLogAccess"


class EventTypeEnum(str, Enum):
    authentication = "authentication"
    organization = "organization"
    organizationInvite = "organizationInvite"
    signup = "signup"
    user = "user"
    unknown = "unknown"
    recording = "recording"
    structuredData = "structuredData"
    structured_data = "structured_data"
    watchlist = "watchlist"
    job = "job"
    engine = "engine"
    library = "library"
    application = "application"
    cluster = "cluster"
    folder = "folder"
    media_source = "media_source"
    media = "media"
    task = "task"
    asset = "asset"
    platformEvent = "platformEvent"
    package = "package"
    platform = "platform"
    export = "export"


class ActionResultEnum(str, Enum):
    success = "success"
    failure = "failure"


class AuditExportRequestStatus(str, Enum):
    PENDING = "PENDING"
    IN_PROGRESS = "IN_PROGRESS"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"
    CANCELLED = "CANCELLED"
