[project]
name = "kioto"
version = "v0.1.13"
description = "Async utilities library inspired by Tokio"
readme = "README.md"
authors = [{name="Brandon Ogle", email="oglebrandon@gmail.com"}]
requires-python = ">=3.8"

# Runtime Dependencies
dependencies = [
    "aiofiles==24.1.0",
    "ruff>=0.7.1",
]

# Developer Dependencies
[project.optional-dependencies]
dev = [
    "ruff",                    # Fast linter and formatter
    "mypy",                    # Static type checker
    "pytest",                  # Testing framework
    "pytest-asyncio",          # Asynchronous support for pytest
    "pytest-cov==5.0.0",       # Coverage plugin for pytest
    "coverage[toml]==7.3.2",   # Coverage tool with TOML support
]

# Build
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Tool Configurations

[tool.ruff]
exclude = [
   ".git",
   ".env"
]

line-length = 90
indent-width = 4

# Assume python version
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.mypy]
# Enable strict type checking to enforce rigorous type annotations
strict = true

[tool.pytest.ini_options]
# Define the directories where pytest should look for tests
testpaths = ["tests"]
pythonpath = "."

asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"

# Enable coverage reporting within pytest
addopts = "--cov=kioto --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
# Measure branch coverage in addition to statement
branch = true

# Define where coverage data files are stored
data_file = ".coverage"

[tool.coverage.report]

# Show missing lines in the terminal report
show_missing = true

# Specify the precision of the coverage percentages
precision = 2

# Exclude specific files or directories from the report
exclude_lines = [
    "#pragma: no cover",
    "if __name__ == .__main__.:",
]
