from .control.async_base_control_api import Activate as Activate, ActivateForever as ActivateForever, ActivateMinutes as ActivateMinutes, AuthenticationError as AuthenticationError, Deactivate as Deactivate
from .control.async_control_api import AsyncControlAPI as AsyncControlAPI
from .control.interactive_async_control_api import InteractiveAsyncControlAPI as InteractiveAsyncControlAPI
from .control.lazy_async_control_api import LazyAsyncControlAPI as LazyAsyncControlAPI
from .control.utils import APIError as APIError, ValidationError as ValidationError
from anyio.abc import BlockingPortal
from collections.abc import Collection, Generator, Sequence
from contextlib import contextmanager
from dataclasses import dataclass
from pydantic import UUID4
from radkit_client.sync.device import Device
from radkit_common.types import CustomSecretStr, DeviceType as DeviceType
from radkit_service.control.transports._types import RequestContent
from radkit_service.webserver.connectors.catalyst_center.utils import CatalystCenterImportSettings as CatalystCenterImportSettings
from radkit_service.webserver.connectors.cisco_apic.utils import CiscoAPICImportSettings as CiscoAPICImportSettings
from radkit_service.webserver.connectors.cspc.utils import CSPCImportSettings as CSPCImportSettings
from radkit_service.webserver.connectors.cucm.utils import CUCMImportSettings as CUCMImportSettings
from radkit_service.webserver.connectors.fmc.utils import FMCImportSettings as FMCImportSettings
from radkit_service.webserver.connectors.vmanage.utils import VManageImportSettings as VManageImportSettings
from radkit_service.webserver.connectors.wlc.utils import WLCImportSettings as WLCImportSettings
from radkit_service.webserver.fastapi_endpoints import devices as devices_endpoints
from radkit_service.webserver.models.base import APIResult as APIResult, BulkResult as BulkResult, DontUpdate as DontUpdate, Error as Error
from radkit_service.webserver.models.device_template import device_template as device_template, update_device_template as update_device_template
from radkit_service.webserver.models.device_templates import NewDeviceTemplate, StoredDeviceTemplate
from radkit_service.webserver.models.devices import DeviceSummary as DeviceSummary, DeviceUUIDs as DeviceUUIDs, NewDevice as NewDevice, NewDevices as NewDevices, NewHTTP as NewHTTP, NewNetconf as NewNetconf, NewSNMP as NewSNMP, NewSwagger as NewSwagger, NewTerminal as NewTerminal, StoredDevice as StoredDevice, StoredDeviceWithMetadata as StoredDeviceWithMetadata, StoredDevices as StoredDevices, StoredDevicesWithMetadata as StoredDevicesWithMetadata, StoredHTTP as StoredHTTP, StoredNetconf as StoredNetconf, StoredSNMP as StoredSNMP, StoredSwagger as StoredSwagger, StoredTerminal as StoredTerminal, UpdateDevice as UpdateDevice, UpdateDevices as UpdateDevices, UpdateHTTP as UpdateHTTP, UpdateMetaDataSet as UpdateMetaDataSet, UpdateNetconf as UpdateNetconf, UpdateSNMP as UpdateSNMP, UpdateSwagger as UpdateSwagger, UpdateTerminal as UpdateTerminal
from radkit_service.webserver.models.external_sources import NewExternalSource, StoredExternalSources
from radkit_service.webserver.models.labels import DeleteLabels as DeleteLabels, NewLabel as NewLabel, NewLabels as NewLabels, StoredLabel as StoredLabel, UpdateLabel as UpdateLabel, UpdateLabelSet as UpdateLabelSet, UpdateLabels as UpdateLabels
from radkit_service.webserver.models.settings import APISettingInfo as APISettingInfo, SettingChange as SettingChange
from radkit_service.webserver.models.status import Status
from radkit_service.webserver.models.support_package import ServiceSupportPackage
from radkit_service.webserver.models.users import ChangeAdminPassword as ChangeAdminPassword, DeleteAdmins as DeleteAdmins, DeleteRemoteUsers as DeleteRemoteUsers, NewAdmin as NewAdmin, NewAdmins as NewAdmins, NewRemoteUser as NewRemoteUser, NewRemoteUsers as NewRemoteUsers, StoredAdmin as StoredAdmin, StoredRemoteUser as StoredRemoteUser, UpdateAdmin as UpdateAdmin, UpdateAdmins as UpdateAdmins, UpdateRemoteUser as UpdateRemoteUser, UpdateRemoteUsers as UpdateRemoteUsers
from typing import Any
from typing_extensions import Self

__all__ = ['AuthenticationError', 'APIError', 'Activate', 'ActivateForever', 'ActivateMinutes', 'Deactivate', 'ValidationError', 'device_template', 'update_device_template', 'AsyncControlAPI', 'ControlAPI', 'LazyAsyncControlAPI', 'InteractiveAsyncControlAPI', 'DeviceType', 'APIResult', 'BulkResult', 'DontUpdate', 'Error', 'DeviceUUIDs', 'NewDevice', 'NewDevices', 'StoredDevice', 'StoredDevices', 'StoredDeviceWithMetadata', 'StoredDevicesWithMetadata', 'DeviceSummary', 'NewTerminal', 'StoredTerminal', 'NewHTTP', 'StoredHTTP', 'NewSNMP', 'StoredSNMP', 'NewSwagger', 'StoredSwagger', 'NewNetconf', 'StoredNetconf', 'UpdateDevice', 'UpdateDevices', 'UpdateHTTP', 'UpdateNetconf', 'UpdateSNMP', 'UpdateSwagger', 'UpdateTerminal', 'UpdateMetaDataSet', 'NewLabel', 'NewLabels', 'StoredLabel', 'UpdateLabel', 'UpdateLabels', 'UpdateLabelSet', 'DeleteLabels', 'SettingChange', 'APISettingInfo', 'DeleteAdmins', 'DeleteRemoteUsers', 'NewRemoteUser', 'NewRemoteUsers', 'StoredRemoteUser', 'UpdateRemoteUser', 'UpdateRemoteUsers', 'NewAdmin', 'NewAdmins', 'StoredAdmin', 'UpdateAdmin', 'UpdateAdmins', 'ChangeAdminPassword', 'CatalystCenterImportSettings', 'CiscoAPICImportSettings', 'CSPCImportSettings', 'CUCMImportSettings', 'FMCImportSettings', 'VManageImportSettings', 'WLCImportSettings']

@dataclass
class ControlAPI:
    blocking_portal: BlockingPortal
    async_control_api: AsyncControlAPI
    @classmethod
    @contextmanager
    def create(cls, base_url: str, admin_name: str | None = None, admin_password: str | None = None, request_timeout: float | None = 5.0, http_client_kwargs: dict[str, Any] | None = None, proxy_url: str | None = None, proxy_username: str | None = None, proxy_password: str | None = None) -> Generator[Self, None, None]: ...
    @classmethod
    def from_radkit_client_device(cls, device: Device) -> Self: ...
    def get_remote_user(self, username: str) -> APIResult[list[StoredRemoteUser]]: ...
    def list_remote_users(self) -> APIResult[list[StoredRemoteUser]]: ...
    def create_remote_user(self, username: str, full_name: str = '', description: str = '', labels: Sequence[int | str] | None = None, activate: Activate = ..., connection_mode_cloud_active: bool = True, connection_mode_direct_active: bool = True, connection_mode_direct_sso_active: bool = True) -> APIResult[StoredRemoteUser]: ...
    def create_remote_users(self, users: Sequence[NewRemoteUser]) -> BulkResult[StoredRemoteUser]: ...
    def update_remote_user(self, username: str, new_username: str | DontUpdate = ..., full_name: str | DontUpdate = ..., description: str | DontUpdate = ..., replace_labels: Sequence[int | str] | None = None, add_labels: Sequence[int | str] | None = None, remove_labels: Sequence[int | str] | None = None, activate: Activate | DontUpdate = ..., connection_mode_cloud_active: bool | DontUpdate = ..., connection_mode_direct_active: bool | DontUpdate = ..., connection_mode_direct_sso_active: bool | DontUpdate = ...) -> APIResult[StoredRemoteUser]: ...
    def update_remote_users(self, users: Sequence[UpdateRemoteUser]) -> BulkResult[StoredRemoteUser]: ...
    def delete_remote_user(self, username: str) -> APIResult[str]: ...
    def delete_remote_users(self, usernames: Collection[str]) -> BulkResult[str]: ...
    def list_devices(self, exclude_metadata: bool = False) -> APIResult[list[StoredDeviceWithMetadata] | list[StoredDevice]]: ...
    def list_devices_csv(self, exclude_metadata: bool = False) -> str: ...
    def get_device(self, device_uuid: str) -> APIResult[list[StoredDeviceWithMetadata] | list[StoredDevice]]: ...
    def create_device(self, device: NewDevice) -> APIResult[StoredDeviceWithMetadata]: ...
    def create_devices(self, devices: Sequence[NewDevice]) -> BulkResult[StoredDeviceWithMetadata]: ...
    def create_devices_csv(self, devices_csv: RequestContent) -> BulkResult[StoredDeviceWithMetadata]: ...
    def update_device(self, device: UpdateDevice) -> APIResult[StoredDeviceWithMetadata]: ...
    def update_devices(self, devices: Sequence[UpdateDevice]) -> BulkResult[StoredDeviceWithMetadata | StoredDevice]: ...
    def duplicate_devices(self, device_uuids: Collection[UUID4]) -> BulkResult[StoredDeviceWithMetadata]: ...
    def delete_device(self, device_uuid: UUID4 | str) -> APIResult[UUID4]: ...
    def delete_devices(self, device_ids: Collection[UUID4]) -> BulkResult[UUID4]: ...
    def import_devices(self, device_uuid: UUID4 | str, tag: str | None = None) -> APIResult[int]: ...
    def list_device_types(self) -> APIResult[devices_endpoints.DeviceTypes]: ...
    def list_labels(self) -> APIResult[list[StoredLabel]]: ...
    def create_labels(self, labels: Sequence[NewLabel]) -> BulkResult[StoredLabel]: ...
    def update_labels(self, labels: Sequence[UpdateLabel]) -> BulkResult[StoredLabel]: ...
    def delete_labels(self, label_ids: Collection[int]) -> BulkResult[StoredLabel]: ...
    def get_settings(self, settings: Collection[str] = (), ui_visible: bool = False) -> APIResult[list[APISettingInfo]]: ...
    def set_settings(self, settings: Sequence[SettingChange]) -> BulkResult[APISettingInfo]: ...
    def init_bootstrap_admin(self, password: CustomSecretStr) -> APIResult[StoredAdmin]: ...
    def system_reset_service(self) -> APIResult[str]: ...
    def list_admins(self) -> APIResult[list[StoredAdmin]]: ...
    def get_admin(self, admin_name: str) -> APIResult[list[StoredAdmin]]: ...
    def change_password(self, username: str, new_password: CustomSecretStr, old_password: CustomSecretStr) -> APIResult[StoredAdmin]: ...
    def create_admin(self, enabled: bool, admin_name: str, password: CustomSecretStr, email: str, full_name: str, description: str) -> APIResult[StoredAdmin]: ...
    def create_admins(self, admins: Sequence[NewAdmin]) -> BulkResult[StoredAdmin]: ...
    def update_admin(self, admin_name: str, email: str | DontUpdate = ..., full_name: str | DontUpdate = ..., description: str | DontUpdate = ...) -> APIResult[StoredAdmin]: ...
    def update_admins(self, admins: Sequence[UpdateAdmin]) -> BulkResult[StoredAdmin]: ...
    def delete_admin(self, admin_name: str) -> APIResult[str]: ...
    def delete_admins(self, usernames: Collection[str]) -> BulkResult[str]: ...
    def enroll_service(self, otp: str, timeout: int = 30) -> APIResult[str]: ...
    def get_service_status(self) -> APIResult[Status]: ...
    def stop_service(self) -> APIResult[str]: ...
    def stop_service_unauthenticated(self) -> APIResult[str]: ...
    def get_service_version(self) -> APIResult[str]: ...
    def get_support_package(self) -> APIResult[ServiceSupportPackage]: ...
    def create_external_source(self, new_external_source: NewExternalSource) -> APIResult[StoredExternalSources]: ...
    def create_device_template(self, new_device_template: NewDeviceTemplate) -> APIResult[StoredDeviceTemplate]: ...
