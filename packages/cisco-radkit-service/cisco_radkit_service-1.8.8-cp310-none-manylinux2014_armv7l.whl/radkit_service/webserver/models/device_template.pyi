from .base import BulkResult as BulkResult, DONT_UPDATE as DONT_UPDATE, DontUpdate as DontUpdate, Error as Error
from .devices import NewDevice as NewDevice, NewHTTP as NewHTTP, NewNetconf as NewNetconf, NewSNMP as NewSNMP, NewSwagger as NewSwagger, NewTerminal as NewTerminal, UpdateDevice as UpdateDevice, UpdateHTTP as UpdateHTTP, UpdateNetconf as UpdateNetconf, UpdateSNMP as UpdateSNMP, UpdateSwagger as UpdateSwagger, UpdateTerminal as UpdateTerminal
from .labels import UpdateLabelSet as UpdateLabelSet
from _typeshed import Incomplete
from collections.abc import Callable, Sequence
from enum import Enum
from io import StringIO
from pydantic import BaseModel
from pydantic.fields import FieldInfo as FieldInfo
from radkit_common.types import ConnectionMethod as ConnectionMethod, CustomSecretStr, DeviceType as DeviceType, TerminalCapabilities as TerminalCapabilities
from typing import Any
from typing_extensions import Literal

class CSVModel(Enum):
    terminal = NewTerminal
    http = NewHTTP
    netconf = NewNetconf
    swagger = NewSwagger
    snmp = NewSNMP

JSON_EXCLUDED_FIELDS: Incomplete

def device_template(name: str, host: str, type: DeviceType, description: str | None = None, labels: Sequence[int | str] = (), enabled: bool | None = True, jumphost_UUID: str | None = None, terminal_port: int | None = None, terminal_connection_method: str | None = None, terminal_username: str | None = None, terminal_password: CustomSecretStr | None = None, terminal_enable_set: bool | None = None, terminal_enable_password: CustomSecretStr | None = None, terminal_private_key: CustomSecretStr | None = None, terminal_private_key_password: CustomSecretStr | None = None, terminal_use_insecure_algorithms: bool | None = None, terminal_jumphost: bool | None = None, terminal_use_tunneling_if_jumphost: bool | None = None, terminal_provisioning_variant: str | None = None, terminal_capabilities: set[TerminalCapabilities] | None = None, netconf_username: str | None = None, netconf_password: CustomSecretStr | None = None, netconf_port: int | None = None, netconf_use_insecure_algorithms: bool | None = None, snmp_version: int | None = None, snmp_port: int | None = None, snmp_community: CustomSecretStr | None = None, swagger_username: str | None = None, swagger_password: CustomSecretStr | None = None, swagger_schema_path: str | None = None, swagger_port: int | None = None, swagger_verify: bool | None = None, swagger_use_insecure_algorithms: bool | None = None, http_username: str | None = None, http_password: CustomSecretStr | None = None, http_port: int | None = None, http_protocol: str | None = None, http_verify: bool | None = None, http_use_insecure_algorithms: bool | None = None, http_authentication_extra: str | None = None, forwarded_tcp_ports: str | None = None, prompt_for_passwords: bool = False) -> NewDevice: ...
def update_device_template(uuid: str, name: str | DontUpdate = ..., host: str | DontUpdate = ..., type: DeviceType | DontUpdate = ..., description: str | DontUpdate = ..., replace_labels: Sequence[int | str] | None = None, add_labels: Sequence[int | str] = (), remove_labels: Sequence[int | str] = (), enabled: bool | DontUpdate = ..., jumphost_UUID: str | None | DontUpdate = ..., terminal_port: int | DontUpdate = ..., terminal_connection_method: Literal[ConnectionMethod.SSH, ConnectionMethod.TELNET, ConnectionMethod.SSHPUBKEY, ConnectionMethod.TELNET_NO_AUTH] | DontUpdate = ..., terminal_username: str | DontUpdate = ..., terminal_password: CustomSecretStr | DontUpdate = ..., terminal_enable_set: bool | DontUpdate = ..., terminal_enable_password: CustomSecretStr | DontUpdate = ..., terminal_private_key: CustomSecretStr | DontUpdate = ..., terminal_private_key_password: CustomSecretStr = ..., terminal_use_insecure_algorithms: bool | DontUpdate = ..., terminal_jumphost: bool | DontUpdate = ..., terminal_use_tunneling_if_jumphost: bool | DontUpdate = ..., terminal_provisioning_variant: str | DontUpdate = ..., terminal_capabilities: frozenset[TerminalCapabilities] | DontUpdate = ..., netconf_username: str | DontUpdate = ..., netconf_password: CustomSecretStr | DontUpdate = ..., netconf_port: int | DontUpdate = ..., netconf_use_insecure_algorithms: bool | DontUpdate = ..., snmp_version: int | DontUpdate = ..., snmp_port: int | DontUpdate = ..., snmp_community: CustomSecretStr | DontUpdate = ..., swagger_username: str | DontUpdate = ..., swagger_password: CustomSecretStr | DontUpdate = ..., swagger_schema_path: str | DontUpdate = ..., swagger_port: int | DontUpdate = ..., swagger_verify: bool | DontUpdate = ..., swagger_use_insecure_algorithms: bool | DontUpdate = ..., http_username: str | DontUpdate = ..., http_password: CustomSecretStr | DontUpdate = ..., http_port: int | DontUpdate = ..., http_protocol: str | DontUpdate = ..., http_verify: bool | DontUpdate = ..., http_use_insecure_algorithms: bool | DontUpdate = ..., http_authentication_extra: str | DontUpdate = ..., forwarded_tcp_ports: str | DontUpdate = ..., delete_netconf: bool = False, delete_snmp: bool = False, delete_http: bool = False, delete_terminal: bool = False, delete_swagger: bool = False) -> UpdateDevice: ...
def bulk_validate(raw_devices: list[Any], row_validator: type[_RowValidatorT], bulk_validator: _BulkValidatorT[_RowValidatorT] | None = None, error_action: Callable[[dict[str, Any]], str] | None = None) -> BulkResult[_RowValidatorT]: ...
def csv_to_json(csv_input: StringIO) -> tuple[list[str], list[dict[str, Any]]]: ...
def json_to_csv(headers: list[str], data: list[dict[str, Any]]) -> str: ...
def row_col_to_cell_name(row: int, col: int) -> str: ...
def add_rows_cols_to_errors(row: int, field_map: dict[str, int], errors: list[dict[str, Any]]) -> None: ...
def csv_headers_for_models(models: Sequence[CSVModel] = ...) -> list[str]: ...
def get_model_field_examples(model: type[BaseModel]) -> dict[str, Any]: ...
def get_field_model(field: FieldInfo) -> type[BaseModel] | None: ...
def create_model_from_field_examples(model: type[_RowValidatorT]) -> _RowValidatorT: ...
def create_model_from_example(model: type[_RowValidatorT], index: int = 0) -> _RowValidatorT: ...
def get_submodel_field_names(model: BaseModel | type[BaseModel]) -> set[str]: ...
def add_submodel_examples(instance: _RowValidatorT, submodels: set[str]) -> _RowValidatorT: ...
def generate_examples(model: type[_RowValidatorT], submodels_to_add: tuple[str, ...] | None = None) -> tuple[_RowValidatorT, set[str]]: ...
