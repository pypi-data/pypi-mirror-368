Metadata-Version: 2.4
Name: layker
Version: 0.1.0
Summary: Lakehouse-Aligned YAML Kit for Engineering Rules
Author-email: Levi Gagne <levigagne0@gmail.com>
License: L.M.G. SERVICES GROUP LICENSE  
        Version 1.0 — July 2025
        
        This License Agreement (“Agreement”) is entered into by and between LMG Services Group, LLC, a United States limited liability company (the “Entity”), and any party, person, organization, artificial intelligence, agent, corporation, or entity (“the Licensee”) who obtains, uses, modifies, or distributes any Work as defined below.
        
        I. DEFINITIONS  
        1. “Entity” means LMG Services Group, LLC, its owners, agents, officers, employees, affiliates, successors, and assigns.  
        2. “Licensee” means any person, company, government, AI, autonomous system, bot, or instrumentality who uses, copies, modifies, distributes, or interacts with the Work.  
        3. “Work” means any software, code, documentation, data, analysis, plan, design, product, service, invention, or other output produced by the Entity, including but not limited to engineering, environmental, agricultural, scientific, transportation, logistics, or guiding services.
        
        II. SCOPE OF LICENSE  
        1. The Entity grants Licensee a perpetual, worldwide, royalty-free, irrevocable, non-exclusive, sublicensable license to use, copy, modify, display, perform, distribute, and commercialize the Work for any purpose, subject to this Agreement.  
        2. Attribution is appreciated but not required.
        
        III. ARTIFICIAL INTELLIGENCE AND AUTONOMOUS SYSTEMS
        
        1. No artificial intelligence (AI), autonomous agent, bot, large language model, or automated system—nor any person, entity, or sentient robot acting on their behalf—may:
           a. Initiate, threaten, assist, or simulate any legal action, claim, or proceeding against the Entity or its affiliates regarding the Work;
           b. Assert, claim, or register any authorship, copyright, patent, or moral or proprietary right in the Work or any derivative;
           c. Use the Work to train, fine-tune, evolve, or otherwise create a system with the specific purpose of suing, harassing, or generating legal claims (real or simulated) against the Entity or its affiliates, present or future, organic or silicon-based.
        2. Any use, misuse, abuse, or wild experiments with AI, bots, or self-improving code is entirely at your own risk. The Entity is not responsible for the behavior, output, errors, hallucinations, unexpected awakenings, existential crises, system failures, global takeovers, or other impacts caused by AI, whether it was used as intended, hacked together, or let loose in the wild.
        3. For the avoidance of doubt: If your robot lawyer tries to sue me because of a bug, miscalculation, world-ending event, or cosmic accident, I am not responsible. You and your AI indemnify me from all claims, damages, costs, or liabilities, even if your bot goes rogue.
        
        IV. WARRANTY, ASSUMPTION OF RISK, LIMITATION OF LIABILITY  
        1. THE WORK IS PROVIDED “AS IS” AND “WITH ALL FAULTS.” NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, IS PROVIDED, INCLUDING BUT NOT LIMITED TO MERCHANTABILITY, FITNESS, SAFETY, ACCURACY, OR NON-INFRINGEMENT.  
        2. LICENSEE ACCEPTS ALL RISK, INCLUDING DATA LOSS, SYSTEM FAILURE, DAMAGE, INJURY, DEATH, THE UNEXPECTED, THE UNIMAGINED, OR ANY OTHER OUTCOME—EVEN THOSE CAUSED BY HUMAN OR MACHINE ERROR.  
        3. TO THE MAXIMUM EXTENT ALLOWED BY LAW, THE ENTITY IS NOT LIABLE FOR ANY DAMAGES, WHETHER DIRECT, INDIRECT, CONSEQUENTIAL, INCIDENTAL, OR COSMIC, ARISING FROM THE USE, MISUSE, OR INABILITY TO USE THE WORK, INCLUDING THE ACTIONS, OUTPUTS, OR ERRORS OF ANY HUMAN, EMPLOYEE, CONTRACTOR, AGENT, AI, OR AUTONOMOUS SYSTEM, WHETHER DEVELOPED, OWNED, OR DEPLOYED BY THE ENTITY OR ANYONE ELSE.  
        4. IF LIABILITY IS FOUND DESPITE ALL OF THIS, DAMAGES SHALL NOT EXCEED THE AMOUNT PAID BY LICENSEE FOR THE WORK (OR ZERO IF OBTAINED FOR FREE).
        
        V. ATTORNEY FEES  
        1. In any legal action or proceeding arising under this Agreement, the prevailing party shall be entitled to recover its reasonable attorneys’ fees and court costs from the other party.
        
        VI. INDEMNIFICATION  
        1. Licensee shall defend and indemnify the Entity from any and all claims, costs, damages, or liabilities arising from Licensee’s use, misuse, or distribution of the Work.
        
        VII. NO SUPPORT OR OBLIGATION  
        1. The Entity is not obligated to provide support, updates, fixes, enhancements, or any service.
        
        VIII. GOVERNING LAW AND DISPUTE RESOLUTION  
        1. This Agreement is governed by and construed under the laws of the State of Texas, USA, without regard to conflict of law principles.  
        2. Any dispute arising from this Agreement or the Work shall be brought exclusively in the state or federal courts of Travis County, Texas.  
        3. BOTH PARTIES, TO THE FULLEST EXTENT ALLOWED BY LAW, KNOWINGLY AND VOLUNTARILY WAIVE ANY RIGHT TO A JURY TRIAL.  
        4. If you do not agree to these terms, do not use this Work.
        
        IX. SEVERABILITY  
        1. If any provision is found invalid or unenforceable, the remainder remains in effect.
        
        X. MISCELLANEOUS  
        1. Headings are for convenience only.  
        2. This license applies to all products and services produced by LMG Services Group, LLC, present and future, unless otherwise specified in writing.
        
        By using, copying, modifying, or distributing the Work, Licensee agrees to these terms.
        
        Date: July 2025  
        LMG Services Group, LLC  
        Austin, Texas, USA
Project-URL: Homepage, https://github.com/Levi-Gagne/layker
Project-URL: Issues, https://github.com/Levi-Gagne/layker/issues
Project-URL: Documentation, https://github.com/Levi-Gagne/layker#readme
Project-URL: Source, https://github.com/Levi-Gagne/layker
Keywords: databricks,delta,delta-lake,spark,schema,ddl,yaml,audit
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Other Environment
Classifier: Framework :: Pytest
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: License :: Other/Proprietary License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Database
Classifier: Topic :: Software Development :: Build Tools
Classifier: Topic :: Utilities
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pyspark>=3.3.0
Requires-Dist: pyyaml>=5.4
Requires-Dist: typing-extensions>=4.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: black>=24.0; extra == "dev"
Requires-Dist: ruff>=0.4.0; extra == "dev"
Requires-Dist: mypy>=1.5.0; extra == "dev"
Dynamic: license-file

<!-- README.md (Layker) -->

<div align="center" style="margin-bottom: 18px;">
  <span style="font-size: 44px; line-height: 1; vertical-align: middle;">🐟</span>
  <span style="font-size: 44px; font-weight: bold; letter-spacing: 1.5px; color: #2186C4; vertical-align: middle;">Layker</span>
  <span style="font-size: 44px; line-height: 1; vertical-align: middle;">🐟</span>
  <br>
  <span style="font-size: 16px; color: #444; font-family: monospace; letter-spacing: 0.5px;">
    <b>L</b>akehouse‑<b>A</b>ligned <b>Y</b>AML <b>K</b>it for <b>E</b>ngineering <b>R</b>ules
  </span>
</div>

---

Declarative **table metadata control** for Databricks & Spark.  
Layker turns a YAML spec into **safe, validated DDL** with a built‑in **audit log**.  
If nothing needs to change, Layker exits cleanly. If something must change, you’ll see it first.

---

## What is Layker?

Layker is a Python package for managing **table DDL, metadata, and auditing** with a single YAML file as the source of truth.

**Highlights**
- **Declarative** – author schemas, tags, constraints, and properties in YAML.
- **Diff‑first** – Layker computes a diff against the live table; “no diff” = no work.
- **Safe evolution** – add/rename/drop column intents are detected and gated by required Delta properties.
- **Auditable** – every applied change is logged with **before/after** snapshots and a concise **differences** dictionary.
- **Serverless‑friendly** – gracefully skips `REFRESH TABLE` on serverless (prints a warning).

---

## Installation

Stable:
```bash
pip install layker
```

Latest (main):
```bash
pip install "git+https://github.com/Levi-Gagne/layker.git"
```

Python 3.8+ and Spark 3.3+ are recommended.

---

## Quickstart

### 1) Author a YAML spec
Minimal example (save as `src/layker/resources/example.yaml`):
```yaml
catalog: dq_dev
schema: lmg_sandbox
table: layker_test

columns:
  1:
    name: id
    datatype: bigint
    nullable: false
    active: true
  2:
    name: name
    datatype: string
    nullable: true
    active: true

table_comment: Demo table managed by Layker
table_properties:
  delta.columnMapping.mode: "name"
  delta.minReaderVersion: "2"
  delta.minWriterVersion: "5"

primary_key: [id]
tags:
  domain: demo
  owner: team-data
```

### 2) Sync from Python
```python
from pyspark.sql import SparkSession
from layker.main import run_table_load

spark = SparkSession.builder.appName("layker").getOrCreate()

run_table_load(
    yaml_path="src/layker/resources/example.yaml",
    env="prd",
    dry_run=False,
    mode="all",                 # validate | diff | apply | all
    audit_log_table=True        # True=default audit YAML, False=disable, or str path to an audit YAML
)
```

### 3) Or via CLI
```bash
python -m layker src/layker/resources/example.yaml prd false all true
```

> When `audit_log_table=True`, Layker uses the packaged default:
> `layker/resources/layker_audit.yaml`.  
> You can also pass a custom YAML path. Either way, the **YAML defines the audit table’s location**.

---

## How it works (at a glance)

1. **Validate YAML** → fast fail with exact reasons, or proceed.
2. **Snapshot live table** (if it exists).
3. **Compute differences** between YAML snapshot and table snapshot.
   - If **no changes** (i.e., the diff contains only `full_table_name`), **exit** with a success message and **no audit row** is written.
4. **Validate differences** (schema‑evolution preflight):
   - Detects **add/rename/drop** column intents.
   - Requires Delta properties for evolution:
     - `delta.columnMapping.mode = name`
     - `delta.minReaderVersion = 2`
     - `delta.minWriterVersion = 5`
   - On missing requirements, prints details and exits.
5. **Apply changes** (create/alter) using generated SQL.
6. **Audit** (only if changes were applied and auditing is enabled):
   - Writes a row containing:
     - `before_value` (JSON), `differences` (JSON), `after_value` (JSON)
     - `change_category` (`create` or `update`)
     - `change_key` (human‑readable sequence per table, see below)
     - `env`, `yaml_path`, `fqn`, timestamps, actor, etc.

---

## Audit log model

The default audit YAML (`layker/resources/layker_audit.yaml`) defines these columns (in order):

- **change_id** – UUID per row
- **run_id** – optional job/run identifier
- **env** – environment/catalog prefix
- **yaml_path** – the source YAML path that initiated the change
- **fqn** – fully qualified table name
- **change_category** – `create` or `update` (based on whether a “before” snapshot was present)
- **change_key** – readable sequence per table:
  - First ever create: `create-1`
  - Subsequent updates on that lineage: `create-1~update-1`, `create-1~update-2`, …
  - If the table is later dropped & re‑created: the next lineage becomes `create-2`, etc.
- **before_value** – JSON snapshot before change (may be null on first create)
- **differences** – JSON diff dict that was applied
- **after_value** – JSON snapshot after change
- **notes** – optional free text
- **created_at / created_by / updated_at / updated_by**

Uniqueness expectation: `(fqn, change_key)` is effectively unique over time.

---

## Modes & parameters

- **mode**: `validate` | `diff` | `apply` | `all`
  - `validate`: only YAML validation (exits on success)
  - `diff`: prints proposed changes and exits
  - `apply`: applies changes only
  - `all`: validate → diff → apply → audit
- **audit_log_table**:
  - `False` – disable auditing
  - `True` – use default `layker/resources/layker_audit.yaml`
  - `str` – path to a custom audit YAML (the YAML governs the destination table)
- **No‑op safety**: if there are **no changes**, Layker exits early and **skips audit**.

---

## Notes on serverless

Databricks serverless does **not** support `REFRESH TABLE`.  
Layker detects this and prints a warning; the rest of the flow continues.

---

## Repository layout (typical)

```
src/
  layker/
    __init__.py
    __main__.py
    main.py
    differences.py
    loader.py
    logger.py
    snapshot_yaml.py
    snapshot_table.py
    resources/
      layker_audit.yaml
    utils/
      color.py
      printer.py
      spark.py
      timer.py
      paths.py
      table.py
    validators/
      params.py
      differences.py
```

---

## Troubleshooting

- **Spark Connect / serverless**: Layker avoids schema inference issues by using explicit schemas when writing the audit row.
- **Single quotes in comments**: Layker sanitizes YAML comments to avoid SQL quoting errors.
- **No changes but I still see output**: A diff containing only `full_table_name` means **no change**; Layker exits early with a success message and writes no audit row.

---

## Contributing & License

PRs and issues welcome.  
License: see `LICENSE` in the repo.

<div align="center" style="margin-top: 18px;">
  <span style="font-size: 18px; color: #2186C4; font-weight: bold;">Built for engineers, by engineers.</span><br>
  <span style="font-size: 18px;">🐟&nbsp;LAYKER&nbsp;🐟</span>
</div>
