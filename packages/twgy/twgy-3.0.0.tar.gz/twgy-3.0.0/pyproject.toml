[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "twgy"
version = "3.0.0"
description = "Taiwan Mandarin Phonetic Similarity Processor - 台灣國語語音相似性處理系統"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "TWGY Development Team", email = "twgy.dev@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.20.0",
    "pandas>=1.3.0",
    "pypinyin>=0.44.0",
    "dimsim>=0.2.0",
    "tqdm>=4.60.0",
    "scikit-learn>=1.0.0",
    "requests>=2.25.0",
    "pyyaml>=5.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.812",
    "jupyter>=1.0"
]
full = [
    "sentence-transformers>=2.0",
    "faiss-cpu>=1.7.0",
    "torch>=1.9.0",
]
api = [
    "fastapi>=0.68.0",
    "uvicorn>=0.15.0",
    "pydantic>=1.8.0",
]

[project.urls]
Homepage = "https://github.com/twgy-team/twgy-v3"
Repository = "https://github.com/twgy-team/twgy-v3.git"
Documentation = "https://twgy-v3.readthedocs.io/"
"Bug Tracker" = "https://github.com/twgy-team/twgy-v3/issues"

[project.scripts]
twgy = "twgy.cli:main"
twgy-test = "twgy.testing:run_tests"
twgy-benchmark = "twgy.benchmark:run_benchmark"

[tool.setuptools.packages.find]
where = ["."]
include = ["twgy*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
twgy = [
    "data/super_dicts/*.json",
    "data/phonetic_data/*.json",
    "data/training_logs/*.json",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
testpaths = ["test"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pypinyin.*",
    "opencc.*",
    "jieba.*",
    "ckip_transformers.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]