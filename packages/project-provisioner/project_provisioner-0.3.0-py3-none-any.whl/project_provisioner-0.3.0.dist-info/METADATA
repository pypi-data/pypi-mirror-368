Metadata-Version: 2.4
Name: project-provisioner
Version: 0.3.0
Summary: Uma ferramenta CLI para provisionar automaticamente novos projetos de dados no Azure DevOps e Databricks com integra√ß√£o completa ao Azure CLI.
Home-page: https://github.com/joseamaro/project-provisioner
Author: Jose Amaro
Author-email: jose.amarodev@gmail.com
Project-URL: Bug Reports, https://github.com/joseamaro/project-provisioner/issues
Project-URL: Source, https://github.com/joseamaro/project-provisioner
Keywords: databricks azure devops cli automation azure-cli
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Systems Administration
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: click
Requires-Dist: PyYAML
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: pytest-mock>=3.10.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: project-url
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Project Provisioner CLI

Uma ferramenta de linha de comando para automatizar o provisionamento de novos projetos de dados no Azure DevOps e Databricks.

## üöÄ Instala√ß√£o

```bash
pip install project-provisioner
```

## üìñ Uso Simplificado

### Modo Interativo (Recomendado)
```bash
project-provisioner create-project --interactive
```

### Com Arquivo de Configura√ß√£o
```bash
# 1. Criar arquivo de configura√ß√£o
project-provisioner init

# 2. Editar o arquivo project-config.yaml

# 3. Executar provisionamento
project-provisioner create-project --config project-config.yaml
```

### Comando R√°pido
```bash
project-provisioner create-project --project-name "meu-projeto" --organization "https://dev.azure.com/minha-org"
```

## üéØ Principais Melhorias

### ‚úÖ **Antes (Complexo)**
```bash
project-provisioner create-project \
    --project-name "my-new-data-project" \
    --azure-devops-organization-url "https://dev.azure.com/your_organization" \
    --azure-devops-project-name "YourExistingAzureDevOpsProject" \
    --azure-devops-pat "YOUR_AZURE_DEVOPS_PAT" \
    --azure-devops-username "your_azure_devops_username" \
    --resource-group-name "rg-databricks-projects" \
    --location "eastus" \
    --databricks-workspace-name "dbr-ws-new-project" \
    --databricks-sku "premium" \
    --databricks-pat "YOUR_DATABRICKS_PAT" \
    --scaffold-source-path "/path/to/your/scaffold/template"
```

### ‚úÖ **Agora (Simples)**
```bash
project-provisioner create-project --interactive
```

## üîß Funcionalidades

### Modo Interativo
- ‚úÖ Perguntas guiadas para configura√ß√£o
- ‚úÖ Valores padr√£o inteligentes
- ‚úÖ Valida√ß√£o autom√°tica
- ‚úÖ Interface amig√°vel

### Arquivo de Configura√ß√£o
- ‚úÖ Template YAML gerado automaticamente
- ‚úÖ Configura√ß√£o reutiliz√°vel
- ‚úÖ F√°cil edi√ß√£o e versionamento

### Valores Padr√£o Inteligentes
- ‚úÖ Nomes gerados automaticamente
- ‚úÖ Regi√£o padr√£o: `brazilsouth`
- ‚úÖ SKU padr√£o: `premium`
- ‚úÖ Usu√°rio detectado automaticamente

## üìã Exemplo de Arquivo de Configura√ß√£o

```yaml
project_name: meu-projeto-dados
azure_devops_organization_url: https://dev.azure.com/sua-organizacao
azure_devops_project_name: DataProjects
azure_devops_pat: SEU_PAT_AQUI
azure_devops_username: seu-usuario
resource_group_name: rg-meu-projeto-dados
location: brazilsouth
databricks_workspace_name: dbr-meu-projeto-dados
databricks_sku: premium
databricks_pat: SEU_DATABRICKS_PAT_AQUI
scaffold_source_path: /caminho/para/seu/scaffold
```

## üéØ Comandos Dispon√≠veis

```bash
# Inicializar novo projeto com estrutura scaffold
project-provisioner init

# Inicializar apenas arquivo de configura√ß√£o 
project-provisioner init --config-only

# Pular verifica√ß√£o e configura√ß√£o do Azure CLI
project-provisioner init --skip-azure-cli

# Mostrar informa√ß√µes do Azure CLI
project-provisioner show-azure-info

# Mostrar informa√ß√µes e salvar no arquivo YAML
project-provisioner show-azure-info --save-config

# Criar projeto (modo interativo)
project-provisioner create-project --interactive

# Criar projeto com arquivo de configura√ß√£o
project-provisioner create-project --config config.yaml

# Criar projeto com par√¢metros m√≠nimos
project-provisioner create-project --project-name "meu-projeto"

# Criar projeto usando dados do Azure CLI
project-provisioner create-project --interactive --user-id "user@domain.com"

# Ver ajuda
project-provisioner --help
```

## üîß Verifica√ß√£o Autom√°tica do Azure CLI

A partir da vers√£o **0.3.0**, o comando `init` inclui verifica√ß√£o e configura√ß√£o autom√°tica do Azure CLI:

### ‚úÖ **O que √© verificado automaticamente:**
- üîç **Instala√ß√£o**: Detecta se o Azure CLI est√° instalado na m√°quina
- üì¶ **Instala√ß√£o Autom√°tica**: Oferece instalar automaticamente se n√£o estiver presente
- üîê **Login**: Verifica se o usu√°rio est√° logado no Azure CLI
- üåê **Login Autom√°tico**: Oferece fazer login via navegador se necess√°rio

### üñ•Ô∏è **Suporte Multi-Plataforma:**
- **macOS**: Instala√ß√£o via Homebrew ou script oficial
- **Linux**: Detec√ß√£o autom√°tica de distribui√ß√£o (Ubuntu/Debian, CentOS/RHEL/Fedora)
- **Windows**: Instru√ß√µes para instala√ß√£o manual ou via winget

### üìã **Exemplo de Fluxo Autom√°tico:**
```bash
$ project-provisioner init

üöÄ Inicializando Novo Projeto
========================================

üîç Verificando Azure CLI...
‚ùå Azure CLI n√£o est√° instalado
Deseja instalar o Azure CLI agora? [Y/n]: y

üîÑ Instalando Azure CLI...
üì¶ Instalando via Homebrew...
‚úÖ Azure CLI instalado com sucesso!

üîê √â necess√°rio fazer login no Azure CLI
Deseja fazer login agora? [Y/n]: y
üîÑ Abrindo navegador para login...
‚úÖ Login realizado com sucesso!

üìÅ Projeto: meu-projeto
üìç Local: /Users/user/meu-projeto
...
```

### ‚öôÔ∏è **Op√ß√µes de Controle:**
```bash
# Comportamento padr√£o (com verifica√ß√£o do Azure CLI)
project-provisioner init

# Pular verifica√ß√£o do Azure CLI (se necess√°rio)
project-provisioner init --skip-azure-cli

# Outros comandos existentes continuam funcionando
project-provisioner init --project-name "meu-projeto" --config-only
```

### üö® **Tratamento de Erros:**
- ‚úÖ Continua o processo mesmo se a instala√ß√£o do Azure CLI falhar
- ‚úÖ Funciona normalmente sem Azure CLI (usando configura√ß√£o padr√£o)
- ‚úÖ Mensagens informativas sobre o status e pr√≥ximos passos
- ‚úÖ Graceful fallback para configura√ß√£o manual quando necess√°rio

## üîç Integra√ß√£o com Azure CLI

A ferramenta agora pode obter automaticamente dados do Azure CLI para preencher configura√ß√µes:

### ‚úÖ **Dados Obtidos Automaticamente**
- **Azure Account**: Tenant ID, Subscription ID, usu√°rio logado
- **Azure DevOps**: Organiza√ß√£o padr√£o, projetos dispon√≠veis
- **Databricks**: Workspaces existentes, localiza√ß√µes, SKUs
- **Resource Groups**: Grupos de recursos dispon√≠veis

### ‚úÖ **Como Usar**
```bash
# 1. Inicializar novo projeto (NOVO!)
project-provisioner init

# 2. Verificar e salvar dados do Azure CLI (NOVO!)
project-provisioner show-azure-info --save-config

# 3. Criar projeto usando configura√ß√£o
project-provisioner create-project --config project-config.yaml

# OU modo interativo com dados do Azure CLI
project-provisioner create-project --interactive

# Com usu√°rio espec√≠fico
project-provisioner create-project --interactive --user-id "user@domain.com"
```

### ‚úÖ **Benef√≠cios**
- ‚úÖ **Scaffold Autom√°tico**: Cria√ß√£o de estrutura completa de pastas
- ‚úÖ **Preenchimento Autom√°tico**: Dados do Azure CLI salvos no YAML
- ‚úÖ **Fluxo Simplificado**: `init` ‚Üí `show-azure-info --save-config` ‚Üí `create-project`
- ‚úÖ Lista de projetos Azure DevOps dispon√≠veis
- ‚úÖ Lista de workspaces Databricks existentes
- ‚úÖ Detec√ß√£o autom√°tica de localiza√ß√£o e SKU
- ‚úÖ Valida√ß√£o de permiss√µes e recursos

## üöÄ **Novo Fluxo de Trabalho Simplificado**

### **1. Inicializa√ß√£o do Projeto**
```bash
project-provisioner init
```
**O que faz:**
- Pergunta o nome do projeto interativamente
- Cria estrutura completa de pastas scaffold:
  - `src/` (databricks, python, sql)
  - `tests/` (unit, integration)
  - `config/` (ambientes)
  - `docs/`, `scripts/`, `infrastructure/`
- Gera arquivos essenciais (README.md, requirements.txt, .gitignore)
- Tenta obter dados do Azure CLI automaticamente
- Cria arquivo `project-config.yaml` pr√©-preenchido

### **2. Configura√ß√£o Autom√°tica com Azure CLI**
```bash
project-provisioner show-azure-info --save-config
```
**O que faz:**
- Obt√©m dados da conta Azure logada
- Lista projetos Azure DevOps dispon√≠veis
- Lista workspaces Databricks existentes
- **Salva tudo automaticamente no project-config.yaml**
- Mostra quais dados ainda precisam ser configurados

### **3. Provisionamento Final**
```bash
project-provisioner create-project --config project-config.yaml
```
**O que faz:**
- Usa configura√ß√£o pr√©-preenchida
- Cria reposit√≥rio no Azure DevOps
- Configura workspace Databricks
- Faz deploy do scaffold criado

### **üìã Exemplo Completo de Uso**
```bash
# 1. Inicializar novo projeto
$ project-provisioner init
üöÄ Inicializando Novo Projeto
========================================
Nome do projeto [data-project-amaro]: meu-projeto-analise

üìÅ Projeto: meu-projeto-analise
üìç Local: /Users/amaro/meu-projeto-analise

üîç Tentando obter dados do Azure CLI...
‚úÖ Dados do Azure CLI obtidos com sucesso!
‚úÖ Arquivo de configura√ß√£o criado: project-config.yaml

Deseja criar a estrutura de pastas do projeto scaffold? [Y/n]: Y
üìÅ Criando estrutura do projeto em: /Users/amaro/meu-projeto-analise
   ‚úÖ src/
   ‚úÖ src/databricks/
   ‚úÖ src/databricks/notebooks/
   ‚úÖ src/python/
   ‚úÖ tests/
   ‚úÖ config/
   ‚úÖ docs/
   ‚úÖ infrastructure/terraform/
   ... (estrutura completa criada)

üéâ Projeto 'meu-projeto-analise' inicializado com sucesso!

# 2. Verificar e salvar dados do Azure
$ project-provisioner show-azure-info --save-config
üîç Informa√ß√µes do Azure CLI
========================================
‚úÖ Dados do Azure CLI obtidos com sucesso!
   Tenant ID: 37cd273a-1cec-4aae-a297-41480ea54f8d
   Organiza√ß√£o DevOps: arcelormittal-corp
   Projetos dispon√≠veis: 3

‚úÖ Configura√ß√£o salva em: project-config.yaml
üìù Dados preenchidos automaticamente:
   - Localiza√ß√£o: brazilsouth
   - Usu√°rio: amaro
   - Organiza√ß√£o Azure DevOps: https://dev.azure.com/arcelormittal-corp

üîë Ainda √© necess√°rio configurar:
   - Personal Access Token do Azure DevOps
   - Personal Access Token do Databricks

# 3. Editar tokens no arquivo YAML
$ nano project-config.yaml  # Adicionar PATs

# 4. Executar provisionamento
$ project-provisioner create-project --config project-config.yaml
üîß Provisionando projeto: meu-projeto-analise
üì¶ Criando reposit√≥rio no Azure DevOps...
üìä Configurando workspace Databricks...
‚úÖ Provisionamento conclu√≠do com sucesso!
```

## üîê Vari√°veis de Ambiente

Os PATs podem ser fornecidos via vari√°veis de ambiente:
- `AZURE_DEVOPS_PAT` - Personal Access Token do Azure DevOps
- `DATABRICKS_PAT` - Personal Access Token do Databricks

## üß™ Testes

### Execu√ß√£o R√°pida
```bash
# Executar todos os testes
./run_tests.sh

# Ou executar manualmente
pytest tests/ -v
```

### Executar Testes Espec√≠ficos
```bash
# Instalar depend√™ncias de desenvolvimento
pip install -e ".[dev]"

# Executar todos os testes
pytest

# Executar testes com cobertura
pytest --cov=project_provisioner --cov-report=term-missing

# Executar testes espec√≠ficos
pytest tests/test_cli.py
pytest tests/test_core.py
pytest tests/test_config.py

# Executar testes com relat√≥rio HTML
pytest --cov=project_provisioner --cov-report=html
```

### Qualidade do C√≥digo
```bash
# Formata√ß√£o autom√°tica
black project_provisioner/ tests/

# Verifica√ß√£o de estilo
flake8 project_provisioner/ tests/

# Verifica√ß√£o de tipos
mypy project_provisioner/
```

### Estrutura de Testes
```
tests/
‚îú‚îÄ‚îÄ __init__.py
‚îú‚îÄ‚îÄ conftest.py          # Configura√ß√µes e fixtures do pytest
‚îú‚îÄ‚îÄ test_cli.py          # Testes do CLI (36 testes)
‚îú‚îÄ‚îÄ test_core.py         # Testes da l√≥gica principal (6 testes)
‚îî‚îÄ‚îÄ test_config.py       # Testes de configura√ß√£o (16 testes)
```

### Cobertura de Testes
- **Total**: 82% de cobertura
- **CLI**: 75% de cobertura
- **Core**: 97% de cobertura
- **36 testes** executando com sucesso

### Tipos de Testes
- ‚úÖ **Testes Unit√°rios**: Fun√ß√µes individuais
- ‚úÖ **Testes de Integra√ß√£o**: Fluxos completos
- ‚úÖ **Testes de Configura√ß√£o**: Valida√ß√£o de YAML
- ‚úÖ **Testes de CLI**: Comandos e op√ß√µes
- ‚úÖ **Testes de Mock**: Simula√ß√£o de depend√™ncias externas

## üìù Pr√≥ximos Passos

Ap√≥s o provisionamento:
1. Navegue para o diret√≥rio do projeto: `cd nome-do-projeto`
2. Configure seu ambiente de desenvolvimento
3. Comece a desenvolver!

## ü§ù Contribui√ß√£o

Para contribuir com melhorias:

1. **Fork o projeto**
2. **Crie uma branch para sua feature**
   ```bash
   git checkout -b feature/nova-funcionalidade
   ```
3. **Commit suas mudan√ßas**
   ```bash
   git commit -m "Adiciona nova funcionalidade"
   ```
4. **Push para a branch**
   ```bash
   git push origin feature/nova-funcionalidade
   ```
5. **Abra um Pull Request**

### Diretrizes de Contribui√ß√£o

- ‚úÖ Escreva testes para novas funcionalidades
- ‚úÖ Mantenha a compatibilidade com vers√µes anteriores
- ‚úÖ Documente mudan√ßas no README
- ‚úÖ Siga o padr√£o de c√≥digo existente
- ‚úÖ Execute `./run_tests.sh` antes de submeter

### Desenvolvimento Local

```bash
# Clone o reposit√≥rio
git clone https://github.com/joseamaro/project-provisioner.git
cd project-provisioner

# Instale em modo desenvolvimento
pip install -e ".[dev]"

# Execute os testes
./run_tests.sh

# Fa√ßa suas altera√ß√µes e teste novamente
pytest tests/ -v
```

## üìä Status do Projeto

- **Vers√£o**: 0.3.0
- **Status**: Alpha
- **Python**: >=3.8
- **Depend√™ncias**: click, PyYAML
- **Cobertura de Testes**: 82%
- **Testes**: 36 testes passando
- **Nova Funcionalidade**: Verifica√ß√£o e instala√ß√£o autom√°tica do Azure CLI

## üêõ Reportar Bugs

Se encontrar algum problema:

1. Verifique se n√£o foi reportado antes
2. Crie uma issue com:
   - Descri√ß√£o detalhada do problema
   - Passos para reproduzir
   - Vers√£o do Python e sistema operacional
   - Logs de erro (se aplic√°vel)

## üìÑ Licen√ßa

Este projeto est√° licenciado sob a Licen√ßa MIT - veja o arquivo [LICENSE](LICENSE) para detalhes.


