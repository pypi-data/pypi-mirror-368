---
name: Docker Build and Push

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [closed]
    branches:
      - main
      - develop
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to tag (leave empty to use latest git tag)'
        required: false
        type: string
      push:
        description: 'Push images to registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false  # Continue building other images even if one fails
      matrix:
        include:
          - dockerfile: Dockerfile
            target: cli
            suffix: ""
            platforms: linux/amd64,linux/arm64
          - dockerfile: Dockerfile.nvidia
            target: gpu-cli
            suffix: "-gpu"
            platforms: linux/amd64
    steps:
      - name: Check if build should run
        id: should_build
        run: |
          # Check if this matrix job should run based on the condition
          if [[ "${{ matrix.dockerfile }}" == "Dockerfile.nvidia" ]]; then
            # GPU builds only for releases and manual workflow dispatch
            if [[ "${{ github.event_name }}" == "release" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              echo "should_run=true" >> $GITHUB_OUTPUT
            else
              echo "should_run=false" >> $GITHUB_OUTPUT
              echo "⏭️ Skipping GPU build for feature branch" >> $GITHUB_STEP_SUMMARY
            fi
          else
            # Always build standard CLI
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        if: steps.should_build.outputs.should_run == 'true'
        uses: actions/checkout@v4

      - name: Check disk space before cleanup
        if: steps.should_build.outputs.should_run == 'true' && matrix.dockerfile == 'Dockerfile.nvidia'
        run: |
          echo "Disk space before cleanup:"
          df -h
          echo ""
          echo "Docker images:"
          docker images || true
          echo ""
          echo "Docker disk usage:"
          docker system df || true

      - name: Free Disk Space (Ubuntu)
        if: steps.should_build.outputs.should_run == 'true' && matrix.dockerfile == 'Dockerfile.nvidia'
        uses: jlumbroso/free-disk-space@main
        with:
          # This might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false

          # All of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Check disk space after cleanup
        if: steps.should_build.outputs.should_run == 'true' && matrix.dockerfile == 'Dockerfile.nvidia'
        run: |
          echo "Disk space after cleanup:"
          df -h
          echo ""
          echo "Available space on root:"
          df -h / | tail -1

      - name: Set up QEMU
        if: steps.should_build.outputs.should_run == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.should_build.outputs.should_run == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          # Use docker driver for GPU builds to reduce disk usage
          driver: ${{ matrix.dockerfile == 'Dockerfile.nvidia' && 'docker' || 'docker-container' }}

      - name: Log in to GitHub Container Registry
        if: steps.should_build.outputs.should_run == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version
        id: version
        if: steps.should_build.outputs.should_run == 'true'
        run: |
          # Use input version if provided, otherwise determine based on event
          if [[ -n "${{ inputs.version }}" ]]; then
            VERSION="${{ inputs.version }}"
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            # For releases, use the release tag
            VERSION="${{ github.event.release.tag_name }}"
          elif [[ "${{ github.event_name }}" == "push" ]] || [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            # Get base version from pyproject.toml
            BASE_VERSION=$(grep -E '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/' || echo "0.0.0")
            SHORT_SHA="${{ github.sha }}"
            SHORT_SHA="${SHORT_SHA:0:7}"

            if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.base_ref }}" == "main" ]]; then
              # Main branch: use semantic version
              VERSION="v${BASE_VERSION}"
            elif [[ "${{ github.ref }}" == "refs/heads/develop" ]] || [[ "${{ github.base_ref }}" == "develop" ]]; then
              # Develop branch: use dev tag with SHA
              VERSION="${BASE_VERSION}-dev.${SHORT_SHA}"
            else
              # Should not reach here with new trigger rules
              VERSION="dev"
            fi
          else
            # Fallback
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "dev")
          fi

          # Docker tags format:
          # - Main branch: v0.15.3
          # - Develop branch: 0.15.3-dev.abc1234
          # - Release: v0.15.3 (from release tag)

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"
      - name: Extract metadata
        id: meta
        if: steps.should_build.outputs.should_run == 'true'
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            suffix=${{ matrix.suffix }},onlatest=true
          tags: |
            # Use the exact version as Docker tag
            type=raw,value=${{ steps.version.outputs.version }}
            # For develop branch, also tag as 'develop' for latest develop build
            type=raw,value=develop,enable=${{ contains(steps.version.outputs.version, '-dev.') }}
            # For main branch, also tag as 'latest' when it's a stable version
            type=raw,value=latest,enable=${{ startsWith(steps.version.outputs.version, 'v') && !contains(steps.version.outputs.version, '-') && github.ref == 'refs/heads/main' }}
            # For RC releases, also tag as 'rc' for latest RC
            type=raw,value=rc,enable=${{ contains(steps.version.outputs.version, 'rc') }}

      - name: Build and push Docker image
        if: steps.should_build.outputs.should_run == 'true'
        timeout-minutes: 30  # Prevent hanging builds (especially for large GPU images)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          target: ${{ matrix.target }}
          platforms: ${{ matrix.platforms }}
          push: ${{ github.event_name == 'release' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Use inline cache for GPU builds to save disk space
          cache-from: ${{ matrix.dockerfile == 'Dockerfile.nvidia' && 'type=inline' || 'type=gha' }}
          cache-to: ${{ matrix.dockerfile == 'Dockerfile.nvidia' && 'type=inline' || 'type=gha,mode=max' }}
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ github.event.release.created_at || github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}
            GIT_URL=${{ github.server_url }}/${{ github.repository }}

      - name: Generate image summary
        if: success() && steps.should_build.outputs.should_run == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          SUFFIX="${{ matrix.suffix }}"
          TARGET="${{ matrix.target }}"

          echo "## 🐳 Docker Image Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: \`$TARGET\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: \`${{ env.IMAGE_NAME }}$SUFFIX\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Command" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}$SUFFIX:$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          if [[ "$VERSION" == *"rc"* ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "ℹ️ **Note**: This is a release candidate image." >> $GITHUB_STEP_SUMMARY
          elif [[ "$VERSION" == *"-dev."* ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🚧 **Note**: This is a development image from the develop branch." >> $GITHUB_STEP_SUMMARY
            echo "You can also pull the latest develop build with: \`docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}$SUFFIX:develop\`" >> $GITHUB_STEP_SUMMARY
          elif [[ "$VERSION" == v* ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Note**: This is a stable release image." >> $GITHUB_STEP_SUMMARY
            echo "You can also pull this as: \`docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}$SUFFIX:latest\`" >> $GITHUB_STEP_SUMMARY
          fi

  publish-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always() && needs.build-and-push.result != 'cancelled'  # Run even if some builds fail
    permissions:
      packages: write
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multi-arch manifest for RC
        if: contains(github.event.release.tag_name, 'rc')
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"

          # Create manifest for standard image
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION-arm64

          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION

          # Also tag as 'rc' for latest RC
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rc \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION-arm64

          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rc

      - name: Summary
        run: |
          echo "## ✅ Docker Images Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" == refs/heads/feature/* || "${{ github.ref }}" == refs/heads/feat/* ]]; then
            echo "Feature branch build completed. Only the standard CLI image was built." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Available Image" >> $GITHUB_STEP_SUMMARY
            echo "- \`ghcr.io/${{ github.repository }}\` - Standard CLI image" >> $GITHUB_STEP_SUMMARY
          else
            echo "All images have been successfully built and pushed to GitHub Container Registry." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Available Images" >> $GITHUB_STEP_SUMMARY
            echo "- \`ghcr.io/${{ github.repository }}\` - Standard CLI image" >> $GITHUB_STEP_SUMMARY
            echo "- \`ghcr.io/${{ github.repository }}-gpu\` - GPU-accelerated CLI image" >> $GITHUB_STEP_SUMMARY
          fi
