name: Publish Formula Fantasy to PyPI

# Trigger on version tags (v1.0.0, v1.1.0, etc.)
on:
  push:
    tags:
      - 'v*'  # More flexible - matches v1.0.0, v1.0.0-test, etc.
  # Also allow manual triggering
  workflow_dispatch:

permissions:
  contents: write  # Needed to create releases and push to repo
  pages: write     # Needed for GitHub Pages
  id-token: write  # Needed for OIDC

jobs:
  # Debug information
  debug:
    runs-on: ubuntu-latest
    steps:
    - name: Debug workflow trigger
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Ref type: ${{ github.ref_type }}"
        echo "Tag check: ${{ startsWith(github.ref, 'refs/tags/') }}"
        echo "Manual trigger: ${{ github.event_name == 'workflow_dispatch' }}"

  # Update version numbers automatically
  update-version:
    needs: debug
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Extract version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # For manual triggers, use current version or prompt user
          VERSION="1.0.0"
          TAG="v1.0.0"
          echo "Manual trigger - using default version: $VERSION"
        else
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "Tag trigger - extracted version: $VERSION from tag: $TAG"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
    
    - name: Update version in files
      run: |
        echo "Updating version to ${{ steps.version.outputs.version }} in all files..."
        
        # Update pyproject.toml
        if [ -f "pyproject.toml" ]; then
          sed -i 's/version = "[^"]*"/version = "${{ steps.version.outputs.version }}"/' pyproject.toml
          echo "‚úÖ Updated pyproject.toml"
        fi
        
        # Update setup.py  
        if [ -f "setup.py" ]; then
          sed -i 's/version="[^"]*"/version="${{ steps.version.outputs.version }}"/' setup.py
          echo "‚úÖ Updated setup.py"
        fi
        
        # Update __init__.py
        if [ -f "formula_fantasy/__init__.py" ]; then
          sed -i 's/__version__ = "[^"]*"/__version__ = "${{ steps.version.outputs.version }}"/' formula_fantasy/__init__.py
          echo "‚úÖ Updated __init__.py"
        fi
        
        echo "Version update completed!"
    
    - name: Verify version updates
      run: |
        echo "Verifying version updates..."
        echo "pyproject.toml version:"
        grep 'version = ' pyproject.toml || echo "No version found in pyproject.toml"
        echo "setup.py version:"  
        grep 'version=' setup.py || echo "No version found in setup.py"
        echo "__init__.py version:"
        grep '__version__' formula_fantasy/__init__.py || echo "No version found in __init__.py"

  # Test the package before publishing
  test:
    needs: update-version
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Extract and apply version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="1.0.0"
        else
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
        fi
        echo "Applying version $VERSION for testing..."
        
        # Update version files for testing
        sed -i 's/version = "[^"]*"/version = "'$VERSION'"/' pyproject.toml
        sed -i 's/version="[^"]*"/version="'$VERSION'"/' setup.py
        sed -i 's/__version__ = "[^"]*"/__version__ = "'$VERSION'"/' formula_fantasy/__init__.py
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e .
    
    - name: Test package imports
      run: |
        python -c "from formula_fantasy import get_driver_points, get_constructor_points"
        python -c "from formula_fantasy import list_drivers, list_constructors, get_latest_round"
        echo "‚úÖ All imports successful"
    
    - name: Test CLI functionality
      run: |
        python -m formula_fantasy.cli --drivers
        echo "‚úÖ CLI test successful"

  # Build and publish to PyPI
  publish-pypi:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Extract version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="1.0.0"
          TAG="v1.0.0"
          echo "Manual trigger - using default version: $VERSION"
        else
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "Tag trigger - extracted version: $VERSION from tag: $TAG"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Publishing version: $VERSION"
    
    - name: Update version in files for publishing
      run: |
        echo "Updating version to ${{ steps.version.outputs.version }} for publishing..."
        
        # Update pyproject.toml
        if [ -f "pyproject.toml" ]; then
          sed -i 's/version = "[^"]*"/version = "${{ steps.version.outputs.version }}"/' pyproject.toml
          echo "‚úÖ Updated pyproject.toml"
        fi
        
        # Update setup.py  
        if [ -f "setup.py" ]; then
          sed -i 's/version="[^"]*"/version="${{ steps.version.outputs.version }}"/' setup.py
          echo "‚úÖ Updated setup.py"
        fi
        
        # Update __init__.py
        if [ -f "formula_fantasy/__init__.py" ]; then
          sed -i 's/__version__ = "[^"]*"/__version__ = "${{ steps.version.outputs.version }}"/' formula_fantasy/__init__.py
          echo "‚úÖ Updated __init__.py"
        fi
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Verify version consistency
      run: |
        echo "Checking version consistency..."
        grep 'version = "${{ steps.version.outputs.version }}"' pyproject.toml || echo "‚ö†Ô∏è pyproject.toml version mismatch"
        grep 'version="${{ steps.version.outputs.version }}"' setup.py || echo "‚ö†Ô∏è setup.py version mismatch"
        grep '__version__ = "${{ steps.version.outputs.version }}"' formula_fantasy/__init__.py || echo "‚ö†Ô∏è __init__.py version mismatch"
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
    
    - name: Update README badges
      run: |
        echo "Updating README badges with version ${{ steps.version.outputs.version }}..."
        
        # Update PyPI version badge to show specific version
        sed -i 's|https://badge.fury.io/py/formula-fantasy.svg|https://img.shields.io/badge/PyPI-v${{ steps.version.outputs.version }}-blue|g' README.md
        
        # Also update the generic PyPI badge as backup
        sed -i 's|https://img.shields.io/pypi/v/formula-fantasy|https://img.shields.io/badge/PyPI-v${{ steps.version.outputs.version }}-blue|g' README.md
        
        echo "‚úÖ Updated README badges"
    
    - name: Commit README updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        if git diff --cached --quiet; then
          echo "No README changes to commit"
        else
          git commit -m "üì¶ Update README badges for v${{ steps.version.outputs.version }}
          
          ü§ñ Generated with [Claude Code](https://claude.ai/code)"
          
          # Push changes back to main
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main || echo "Failed to push README updates"
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Formula Fantasy v${{ steps.version.outputs.version }}
        body: |
          ## Formula Fantasy v${{ steps.version.outputs.version }}
          
          **ü§ñ Automated release with auto-versioning**
          
          ### üì¶ Installation
          ```bash
          pip install --upgrade formula-fantasy==${{ steps.version.outputs.version }}
          ```
          
          ### ‚ú® What's New
          - Version automatically updated in all files
          - README badges updated with new version
          - Package available at: https://pypi.org/project/formula-fantasy/
          - Check commit history for detailed changes
          
          ### üß™ Verification
          ```python
          from formula_fantasy import get_driver_points, __version__
          print(f"Version: {__version__}")
          print(f"VER latest: {get_driver_points('VER', 'latest')}")
          ```
          
          ### üìä CLI Usage
          ```bash
          formula-fantasy --drivers
          formula-fantasy VER latest
          ```
        draft: false
        prerelease: false
        files: |
          dist/*.whl
          dist/*.tar.gz

  # Test installation from PyPI
  test-installation:
    needs: publish-pypi
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Wait for PyPI propagation
      run: sleep 60
    
    - name: Test installation from PyPI
      run: |
        pip install formula-fantasy
        python -c "from formula_fantasy import get_driver_points; print('‚úÖ Installation successful')"
        formula-fantasy --drivers
        echo "‚úÖ Package successfully published and tested"