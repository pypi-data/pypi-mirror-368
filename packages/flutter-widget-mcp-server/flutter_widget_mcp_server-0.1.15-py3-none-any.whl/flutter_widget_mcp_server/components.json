[
  {
    "id": "YLAnimatedSegmentSwitch",
    "name": "YLAnimatedSegmentSwitch 动画分段切换",
    "category": "基础组件",
    "maintainer": "JoyCoder",
    "stability": "稳定",
    "description": "YLAnimatedSegmentSwitch（动画分段切换）是一款支持自定义选项、宽高、颜色、圆角、文字样式及切换动画的分段切换按钮组件。适用于需要多状态切换的业务场景，如运单筛选、仓库状态切换、配送方式切换等，交互流畅，体验友好，兼容响应式布局。",
    "preview": "../assets/images/ylanimatedsegmentswitch_preview.png",
    "scenarios": [
      "运单筛选、多状态切换的业务入口",
      "多种类型的切换如：仓库类型或配送方式切换",
      "任何需要分段按钮切换的界面"
    ],
    "import_code": null,
    "basic_usage": "YLAnimatedSegmentSwitch(\n  options: ['待提货', '运输中', '已送达'],\n  initialIndex: 0,\n  onChanged: (index) {\n    print('选中了索引: \\$index');\n  },\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础用法",
        "code": "YLAnimatedSegmentSwitch(\n  options: ['待提货', '运输中', '已送达'],\n  onChanged: (index) {},\n)",
        "description": null
      },
      {
        "title": "自定义颜色样式",
        "code": "YLAnimatedSegmentSwitch(\n  options: ['A', 'B'],\n  indicatorColor: Colors.orange,\n  backgroundColor: Colors.grey.shade200,\n  selectedTextColor: Colors.white,\n  unselectedTextColor: Colors.black54,\n  onChanged: (i) {},\n)",
        "description": null
      },
      {
        "title": "响应式布局使用",
        "code": "Expanded(\n  child: YLAnimatedSegmentSwitch(\n    options: ['1', '2', '3'],\n    width: double.infinity,\n    onChanged: (idx) {},\n  ),\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何动态更新选项？",
        "answer": "只需传递新的 `options` 数组并重建组件即可，组件会自动根据新选项渲染。"
      },
      {
        "question": "组件支持多少个切换项？",
        "answer": "理论上支持任意数量，但建议不超过5项以保证良好的UI体验。"
      },
      {
        "question": "如何实现禁用或不可切换状态？",
        "answer": "当前版本未内置禁用属性，可通过不传递`onChanged`回调或外部逻辑控制禁用。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/button/yl_animated_segment_switch.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_button_page.dart",
    "methods": []
  },
  {
    "id": "YLTextButton",
    "name": "YLTextButton 文本按钮",
    "category": "基础组件",
    "maintainer": "chenuxheng3",
    "stability": "稳定",
    "description": "YLTextButton是一个自定义通用文本按钮组件，封装了Flutter原生TextButton的常用属性，提供了更便捷的使用方式。具有可自定义文本颜色、背景颜色、圆角半径等特性，适用于各种需要文本按钮的场景。",
    "preview": "../assets/images/yltextbutton_preview.png",
    "scenarios": [
      "需要简洁文本按钮的界面",
      "表单提交、取消等操作按钮",
      "对话框中的确认、取消按钮",
      "需要自定义按钮样式的场景"
    ],
    "import_code": null,
    "basic_usage": "YLTextButton(\n  child: Text(\"确认\"),\n  onPressed: () {\n    // 处理点击事件\n    print('按钮被点击');\n  },\n)",
    "properties": [
      {
        "name": "child",
        "description": "按钮内容",
        "type": "Widget",
        "default": null,
        "required": true
      },
      {
        "name": "onPressed",
        "description": "按钮点击回调函数",
        "type": "VoidCallback?",
        "default": null,
        "required": true
      },
      {
        "name": "textColor",
        "description": "按钮文本颜色",
        "type": "Color?",
        "default": "Colors.black",
        "required": false
      },
      {
        "name": "backgroundColor",
        "description": "按钮背景颜色",
        "type": "Color?",
        "default": "null",
        "required": false
      },
      {
        "name": "pressedColor",
        "description": "按钮按下时的背景颜色",
        "type": "Color?",
        "default": "null",
        "required": false
      },
      {
        "name": "borderRadius",
        "description": "按钮圆角半径",
        "type": "double",
        "default": "0.0",
        "required": false
      },
      {
        "name": "padding",
        "description": "按钮内边距",
        "type": "EdgeInsetsGeometry?",
        "default": "EdgeInsets.symmetric(horizontal: 16, vertical: 6)",
        "required": false
      },
      {
        "name": "disabledColor",
        "description": "按钮禁用时的颜色",
        "type": "Color?",
        "default": "Colors.grey",
        "required": false
      },
      {
        "name": "enable",
        "description": "按钮是否启用",
        "type": "bool",
        "default": "true",
        "required": false
      },
      {
        "name": "elevation",
        "description": "按钮阴影高度",
        "type": "double?",
        "default": "0",
        "required": false
      },
      {
        "name": "textStyle",
        "description": "按钮文本样式",
        "type": "TextStyle?",
        "default": "null",
        "required": false
      }
    ],
    "events": [
      {
        "name": "onPressed",
        "description": "按钮点击事件",
        "params": "无"
      }
    ],
    "examples": [
      {
        "title": "基础文本按钮",
        "code": "YLTextButton(\n  child: Text(\"基础按钮\"),\n  onPressed: () {},\n)",
        "description": null
      },
      {
        "title": "自定义样式按钮",
        "code": "YLTextButton(\n    child: Text(\"自定义按钮\"),\n    onPressed: () {},\n    textColor: Colors.black,\n    pressedColor: Colors.grey,\n    borderRadius: 8.0,\n    elevation: 2.0,\n),",
        "description": null
      },
      {
        "title": "禁用状态按钮",
        "code": "YLTextButton(\n  child: Text(\"禁用按钮\"),\n  onPressed: () {},\n  enable: false,\n)",
        "description": null
      }
    ],
    "faq": [],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/button/yl_text_button.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_button_page.dart",
    "methods": []
  },
  {
    "id": "TextCopyWidget",
    "name": "TextCopyWidget 文本复制组件",
    "category": "基础组件",
    "maintainer": "zhangwanyu12",
    "stability": "稳定",
    "description": "TextCopyWidget 是一个文本复制组件，用于展示文本并提供一键复制功能。点击组件可将指定文本复制到剪贴板并弹出提示，常用于WMS系统订单号、运单号等需要快速复制文本的场景。",
    "preview": "../assets/images/textcopywidget_preview.png",
    "scenarios": [
      "需要可复制文本内容,例如复制订单号、运单号等信息的场景",
      "需要复制参考编号、ID等信息的场景",
      "任何需要便捷复制文本内容的界面"
    ],
    "import_code": null,
    "basic_usage": "TextCopyWidget(\n  text: 'JD123456789',\n  textStyle: TextStyle(fontSize: 16, color: Colors.blue),\n)",
    "properties": [
      {
        "name": "text",
        "description": "需要展示和复制的文本内容",
        "type": "String?",
        "default": "''",
        "required": false
      },
      {
        "name": "textStyle",
        "description": "展示文本的样式",
        "type": "TextStyle?",
        "default": "TextStyle(fontSize: 14, color: Color(0xff525765))",
        "required": false
      }
    ],
    "events": [
      {
        "name": "onTap",
        "description": "点击时触发复制操作",
        "params": "无"
      }
    ],
    "examples": [
      {
        "title": "基础用法",
        "code": "TextCopyWidget(\n  text: 'JD123456789',\n)",
        "description": null
      },
      {
        "title": "自定义样式",
        "code": "TextCopyWidget(\n  text: '运单号：WL987654321',\n  textStyle: TextStyle(\n    fontSize: 16,\n    color: Colors.red,\n    fontWeight: FontWeight.bold,\n  ),\n)",
        "description": null
      },
      {
        "title": "在列表项中使用",
        "code": "ListTile(\n  title: Text('订单信息'),\n  subtitle: TextCopyWidget(\n    text: 'ORDER20250613001',\n    textStyle: TextStyle(fontSize: 14, color: Colors.grey[700]),\n  ),\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何修改复制成功的提示文本？",
        "answer": "当前版本的组件使用固定的\"复制成功\"提示文本。如需自定义提示文本，可以通过修改源码或向维护者提出功能需求。"
      },
      {
        "question": "组件是否支持长文本？",
        "answer": "组件支持任意长度的文本，但建议在UI设计时考虑长文本的展示效果，可能需要配合其他布局组件使用。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/button/txt_copy.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_button_page.dart",
    "methods": []
  },
  {
    "id": "CustomSwitch",
    "name": "CustomSwitch 自定义开关",
    "category": "基础组件",
    "maintainer": "daihang",
    "stability": "稳定",
    "description": "CustomSwitch 是一个支持自定义宽高、颜色、动画的通用开关组件，适用于需要个性化样式和动画过渡的场景。开关状态变化带有平滑动画，支持回调、主题色定制，易于集成到表单、设置页等业务界面。",
    "preview": "../assets/images/customswitch_preview.png",
    "scenarios": [
      "表单或设置页中的状态切换",
      "业务自定义开关（如功能开关、权限设置等）",
      "替代原生Switch控件以适配品牌样式"
    ],
    "import_code": null,
    "basic_usage": "bool _switchValue = false;\n\nCustomSwitch(\n  value: _switchValue,\n  onChanged: (bool newValue) {\n    setState(() {\n      _switchValue = newValue;\n    });\n  },\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础开关用法",
        "code": "CustomSwitch(\n  value: true,\n  onChanged: (v) {},\n)",
        "description": null
      },
      {
        "title": "设置主题色与大小",
        "code": "CustomSwitch(\n  value: false,\n  activeColor: Colors.blue,\n  inactiveColor: Colors.black12,\n  width: 80,\n  height: 32,\n  onChanged: (v) {},\n)",
        "description": null
      },
      {
        "title": "动画切换效果",
        "code": "CustomSwitch(\n  value: flag,\n  onChanged: (v) => setState(() => flag = v),\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何禁用CustomSwitch？",
        "answer": "暂未内置禁用属性，可以通过不传递 onChanged 或用IgnorePointer包裹实现禁用效果。"
      },
      {
        "question": "如何自定义开关尺寸或圆角？",
        "answer": "通过传递 width、height 参数调整整体尺寸，圆角自动根据高度自适应。"
      },
      {
        "question": "是否支持动画切换？",
        "answer": "是的，开关切换时自带平滑动画，无需额外配置。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/button/custom_switch_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_button_page.dart",
    "methods": []
  },
  {
    "id": "基础组件索引",
    "name": "基础组件索引",
    "category": "",
    "maintainer": null,
    "stability": null,
    "description": "",
    "preview": null,
    "scenarios": [],
    "import_code": null,
    "basic_usage": null,
    "properties": [],
    "events": [],
    "examples": [],
    "faq": [],
    "source_path": null,
    "demo_path": null,
    "methods": []
  },
  {
    "id": "YLDivider",
    "name": "YLDivider 自定义分割线",
    "category": "基础组件",
    "maintainer": "chenxuheng3",
    "stability": "稳定",
    "description": "YLDivider 是一个灵活的自定义分割线组件，支持水平和垂直方向，可以使用实线或虚线样式，并且能够添加文本或自定义 widget。这个组件适用于各种需要分隔内容的场景，提供了丰富的自定义选项以满足不同的设计需求。",
    "preview": "../assets/images/yldivider_preview.png",
    "scenarios": [
      "列表项之间的分隔",
      "页面内容的分段",
      "带有文字说明的分割线",
      "需要特殊样式（如虚线）的分隔符",
      "垂直分割不同区域的内容"
    ],
    "import_code": null,
    "basic_usage": "YLDivider()",
    "properties": [
      {
        "name": "color",
        "description": "分割线颜色",
        "type": "Color?",
        "default": "Colors.grey[300]",
        "required": false
      },
      {
        "name": "margin",
        "description": "分割线外边距",
        "type": "EdgeInsetsGeometry?",
        "default": null,
        "required": false
      },
      {
        "name": "width",
        "description": "分割线宽度",
        "type": "double?",
        "default": "1.0 (垂直方向)",
        "required": false
      },
      {
        "name": "height",
        "description": "分割线高度",
        "type": "double?",
        "default": "1.0 (水平方向)",
        "required": false
      },
      {
        "name": "text",
        "description": "分割线文本",
        "type": "String?",
        "default": null,
        "required": false
      },
      {
        "name": "textStyle",
        "description": "文本样式",
        "type": "TextStyle?",
        "default": null,
        "required": false
      },
      {
        "name": "widget",
        "description": "自定义widget",
        "type": "Widget?",
        "default": null,
        "required": false
      },
      {
        "name": "gapPadding",
        "description": "文本或widget与分割线的间距",
        "type": "double?",
        "default": "16.0",
        "required": false
      },
      {
        "name": "hideLine",
        "description": "是否隐藏分割线",
        "type": "bool",
        "default": "false",
        "required": false
      },
      {
        "name": "isDashed",
        "description": "是否使用虚线样式",
        "type": "bool",
        "default": "false",
        "required": false
      },
      {
        "name": "alignment",
        "description": "文本对齐方式",
        "type": "TextAlignment",
        "default": "TextAlignment.center",
        "required": false
      },
      {
        "name": "direction",
        "description": "分割线方向",
        "type": "Axis",
        "default": "Axis.horizontal",
        "required": false
      }
    ],
    "events": [],
    "examples": [
      {
        "title": "基础水平分割线",
        "code": "YLDivider()",
        "description": null
      },
      {
        "title": "自定义颜色和高度的分割线",
        "code": "YLDivider(\n  color: Colors.blue,\n  height: 2.0,\n  margin: EdgeInsets.symmetric(vertical: 10.0),\n)",
        "description": null
      },
      {
        "title": "带文本的分割线",
        "code": "YLDivider(\n  text: '标题文本',\n  textStyle: TextStyle(\n    color: Colors.black54,\n    fontSize: 14.0,\n  ),\n)",
        "description": null
      },
      {
        "title": "虚线样式",
        "code": "YLDivider(\n  isDashed: true,\n  color: Colors.grey,\n)",
        "description": null
      },
      {
        "title": "垂直分割线",
        "code": "YLDivider(\n  direction: Axis.vertical,\n  height: 100.0,\n  width: 1.0,\n)",
        "description": null
      },
      {
        "title": "带自定义Widget的分割线",
        "code": "YLDivider(\n  widget: Icon(Icons.star, color: Colors.amber),\n  gapPadding: 8.0,\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何改变分割线的粗细？",
        "answer": "对于水平分割线，使用 `height` 参数；对于垂直分割线，使用 `width` 参数。"
      },
      {
        "question": "如何在分割线中添加文字？",
        "answer": "使用 `text` 参数添加文字，并可以通过 `textStyle` 自定义文字样式。"
      },
      {
        "question": "如何创建虚线样式的分割线？",
        "answer": "将 `isDashed` 参数设置为 `true`。"
      },
      {
        "question": "如何调整文字或自定义widget与分割线之间的距离？",
        "answer": "使用 `gapPadding` 参数调整间距。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/divider/yl_divider.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_divider_page.dart",
    "methods": []
  },
  {
    "id": "YLElevatedButton",
    "name": "YLElevatedButton 通用凸起按钮",
    "category": "基础组件",
    "maintainer": "chenxuheng3",
    "stability": "稳定",
    "description": "YLElevatedButton 是一个基于 Material Design 3 的自定义通用凸起按钮组件。支持文本、图标、加载中、禁用、尺寸多种配置，适用于页面重要操作、表单提交、工具栏主要操作等高亮场景。支持灵活样式扩展，满足物流业务多种需求，具备良好交互体验和可访问性。",
    "preview": "../assets/images/yl_elevated_button_preview.png",
    "scenarios": [
      "页面操作按钮，如提交表单、确认操作等",
      "需要突出显示的重要功能入口"
    ],
    "import_code": null,
    "basic_usage": "YLElevatedButton(\n  child: Text(\"确认\"),\n  onPressed: () {\n    print(\"按钮被点击\");\n  },\n)",
    "properties": [
      {
        "name": "child",
        "description": "按钮内容",
        "type": "Widget",
        "default": null,
        "required": true
      },
      {
        "name": "onPressed",
        "description": "点击回调",
        "type": "VoidCallback?",
        "default": null,
        "required": true
      },
      {
        "name": "style",
        "description": "按钮样式",
        "type": "ButtonStyle?",
        "default": null,
        "required": false
      },
      {
        "name": "textColor",
        "description": "文本颜色",
        "type": "Color?",
        "default": "Colors.black",
        "required": false
      },
      {
        "name": "enable",
        "description": "按钮是否启用",
        "type": "bool",
        "default": "true",
        "required": false
      },
      {
        "name": "backgroundColor",
        "description": "按钮背景色",
        "type": "Color?",
        "default": null,
        "required": false
      },
      {
        "name": "pressedColor",
        "description": "按钮按下时的背景颜色",
        "type": "Color?",
        "default": null,
        "required": false
      },
      {
        "name": "borderRadius",
        "description": "圆角半径",
        "type": "double?",
        "default": null,
        "required": false
      },
      {
        "name": "padding",
        "description": "内边距",
        "type": "EdgeInsetsGeometry?",
        "default": "EdgeInsets.symmetric(horizontal: 22, vertical: 6)",
        "required": false
      },
      {
        "name": "elevation",
        "description": "阴影高度",
        "type": "double?",
        "default": "2.0",
        "required": false
      }
    ],
    "events": [
      {
        "name": "onPressed",
        "description": "点击按钮时触发",
        "params": "() => void"
      }
    ],
    "examples": [
      {
        "title": "基础按钮",
        "code": "YLElevatedButton(\n  child: Text(\"确认\"),\n  onPressed: () {\n    print(\"按钮被点击\");\n  },\n)",
        "description": null
      },
      {
        "title": "自定义样式",
        "code": "YLElevatedButton(\n  child: const Text(\"自定义样式\"),\n  style: ButtonStyle(\n    backgroundColor: MaterialStateProperty.all(Colors.green),\n    foregroundColor: MaterialStateProperty.all(Colors.white),\n    padding: MaterialStateProperty.all(EdgeInsets.all(16)),\n  ),\n  onPressed: () {\n    print(\"自定义样式按钮被点击\");\n  },\n)",
        "description": null
      },
      {
        "title": "禁用状态",
        "code": "YLElevatedButton(\n  child: Text(\"禁用按钮\"),\n  enable: false,\n  onPressed: () {\n    // 此回调不会被触发\n  },\n)",
        "description": null
      },
      {
        "title": "红色全宽按钮样式",
        "code": "YLElevatedButton(\n  style: YLElevatedButtonStyle.redFullWidth(),\n  child: const Text('红色全宽按钮'),\n  onPressed: () {},\n)",
        "description": null
      },
      {
        "title": "红色自适应按钮样式",
        "code": "YLElevatedButton(\n  style: YLElevatedButtonStyle.redAutoWidth(),\n  child: const Text('红色圆角按钮'),\n  onPressed: () {},\n)",
        "description": null
      },
      {
        "title": "自定义宽高圆角按钮样式",
        "code": "YLElevatedButton(\n  style: YLElevatedButtonStyle.customSize(width: 100, height: 40),\n  child: const Text('宽100 高40 圆角按钮'),\n  onPressed: () {},\n),",
        "description": null
      },
      {
        "title": "完全自定义内容",
        "code": "YLElevatedButton(\n  child: Row(\n    mainAxisSize: MainAxisSize.min,\n    children: [\n      Icon(Icons.favorite, color: Colors.red),\n      SizedBox(width: 4),\n      Text(\"喜欢\"),\n    ],\n  ),\n  onPressed: () {},\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何调整按钮的大小？",
        "answer": "可以通过自定义 `style` 属性，通过 `YLElevatedButtonStyle.customSize(width: 100, height: 40)` 控制 width、height 属性。"
      },
      {
        "question": "按钮的样式如何自定义？",
        "answer": "通过 `style` 属性传入自定义 `ButtonStyle` 可修改外观，包括背景色、文本颜色、边框等。"
      },
      {
        "question": "如何在按钮中添加图标？",
        "answer": "使用 `child` 属性自定义内容，可以灵活地组合图标和文本。"
      },
      {
        "question": "禁用状态时是否可点击？",
        "answer": "当 `enable` 为 false 时，按钮不可点击且 `onPressed` 回调不会触发。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/button/yl_elevated_button.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_button_page.dart",
    "methods": []
  },
  {
    "id": "ComRoundWidget",
    "name": "ComRoundWidget 圆角渐变卡片组件",
    "category": "基础组件",
    "maintainer": "zhangwanyu12",
    "stability": "稳定",
    "description": "ComRoundWidget 是一个通用的圆角渐变卡片组件，支持自定义内容、圆角半径、边框、背景色及渐变色。可作为业务页面中信息展示、模块分组、卡片容器的基础UI单元，支持灵活配置以满足不同展示需求。",
    "preview": "../assets/images/comroundwidget_preview.png",
    "scenarios": [
      "信息展示卡片、数据块、统计面板",
      "作为功能模块或表单项的容器",
      "需要自定义圆角、背景、边框样式的UI区域"
    ],
    "import_code": null,
    "basic_usage": "ComRoundWidget(\n  child: Text('内容'),\n  margin: EdgeInsets.all(12),\n  padding: EdgeInsets.symmetric(vertical: 16, horizontal: 20),\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础圆角卡片",
        "code": "ComRoundWidget(\n  child: Text('基础圆角卡片'),\n)",
        "description": null
      },
      {
        "title": "渐变背景及自定义圆角卡片",
        "code": "ComRoundWidget(\n  child: Text('渐变背景'),\n  gradientColors: [Colors.blue, Colors.purple],\n  radius: 16,\n  padding: EdgeInsets.all(18),\n)",
        "description": null
      },
      {
        "title": "自定义宽高边框卡片",
        "code": "ComRoundWidget(\n  child: Text('宽高边框卡片'),\n  width: 240,\n  height: 80,\n  side: BorderSide(color: Colors.blue, width: 1.5),\n  radius: 14,\n  margin: EdgeInsets.only(top: 24, left: 16, right: 16),\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何设置为无圆角或直角卡片？",
        "answer": "将 `radius` 参数设置为 0，即为直角样式：\n\n```dart\nComRoundWidget(\n  child: Text('直角卡片'),\n  radius: 0,\n)\n```"
      },
      {
        "question": "如何自定义渐变色方向？",
        "answer": "通过 `begin` 和 `end` 参数指定渐变起止方向，例如：\n\n```dart\nComRoundWidget(\n  gradientColors: [Colors.orange, Colors.yellow],\n  begin: Alignment.topLeft,\n  end: Alignment.bottomRight,\n)\n```"
      },
      {
        "question": "如何只使用纯色背景？",
        "answer": "不传递 `gradientColors` 参数，仅用 `color` 指定背景色，默认为白色。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/button/card_round_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_card_round_page.dart",
    "methods": []
  },
  {
    "id": "GalleryWidget",
    "name": "GalleryWidget 轮播图组件",
    "category": "数据展示组件",
    "maintainer": "zhangwanyu12",
    "stability": "稳定",
    "description": "GalleryWidget 是一个通用轮播图组件，支持自定义数据、内容、指示器与回调。它适用于 WMS 场景下的图片、广告等轮播展示。该组件提供了灵活的配置选项，包括轮播内容高度、视口占比和指示器颜色等，以满足不同的展示需求。",
    "preview": "../assets/images/gallerywidget_preview.png",
    "scenarios": [
      "图片轮播展示",
      "广告轮播展示",
      "产品展示轮播",
      "任何需要循环展示多个内容项的场景"
    ],
    "import_code": null,
    "basic_usage": "GalleryWidget<String>(\n  dataList: ['图片1', '图片2'],\n  imageSliders: [Image.asset('img1.png'), Image.asset('img2.png')],\n  changeCallback: (index, data) {\n    print('当前索引: $index, 当前数据: $data');\n  },\n)",
    "properties": [
      {
        "name": "dataList",
        "description": "轮播数据列表",
        "type": "List<T>",
        "default": null,
        "required": true
      },
      {
        "name": "imageSliders",
        "description": "轮播项Widget列表",
        "type": "List<Widget>",
        "default": null,
        "required": true
      },
      {
        "name": "changeCallback",
        "description": "轮播变化监听回调",
        "type": "OnGalleryWidgetChangeCallback<T>?",
        "default": "null",
        "required": false
      },
      {
        "name": "contentHeight",
        "description": "轮播内容高度",
        "type": "double?",
        "default": "348.w",
        "required": false
      },
      {
        "name": "viewportFraction",
        "description": "视口占比",
        "type": "double?",
        "default": "0.9",
        "required": false
      },
      {
        "name": "selectColor",
        "description": "指示器颜色",
        "type": "Color?",
        "default": "null",
        "required": false
      }
    ],
    "events": [
      {
        "name": "changeCallback",
        "description": "轮播项变化时触发",
        "params": "(int index, T data) -> void"
      }
    ],
    "examples": [
      {
        "title": "基础轮播图",
        "code": "GalleryWidget<String>(\n  dataList: ['图片1', '图片2', '图片3'],\n  imageSliders: [\n    Image.asset('assets/img1.png'),\n    Image.asset('assets/img2.png'),\n    Image.asset('assets/img3.png'),\n  ],\n  changeCallback: (index, data) {\n    print('当前轮播项: $data');\n  },\n)",
        "description": null
      },
      {
        "title": "自定义轮播图",
        "code": "GalleryWidget<Map<String, String>>(\n  dataList: [\n    {'title': '标题1', 'image': 'assets/img1.png'},\n    {'title': '标题2', 'image': 'assets/img2.png'},\n  ],\n  imageSliders: [\n    Stack(\n      children: [\n        Image.asset('assets/img1.png'),\n        Text('标题1'),\n      ],\n    ),\n    Stack(\n      children: [\n        Image.asset('assets/img2.png'),\n        Text('标题2'),\n      ],\n    ),\n  ],\n  contentHeight: 200,\n  viewportFraction: 1.0,\n  selectColor: Colors.red,\n  changeCallback: (index, data) {\n    print('当前标题: ${data['title']}');\n  },\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何实现自动轮播？",
        "answer": "GalleryWidget 默认不自动轮播。如果需要自动轮播功能，可以使用 Timer 定期调用 CarouselSliderController 的方法来切换轮播项。"
      },
      {
        "question": "如何自定义指示器样式？",
        "answer": "当前 GalleryWidget 使用 ScrollCommonBottom 作为指示器。如果需要自定义指示器样式，可以修改 ScrollCommonBottom 组件或创建新的指示器组件来替换它。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/window/gallery_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_banner_page.dart",
    "methods": []
  },
  {
    "id": "OperateUploadItemWidget",
    "name": "OperateUploadItemWidget 上传操作项组件",
    "category": "业务组件/操作项",
    "maintainer": "zhangwanyu12",
    "stability": "稳定",
    "description": "OperateUploadItemWidget 是一款item条目上传操作项组件,支持左侧标题展示，右侧显示上传状态（已上传/未上传）、可选开关、箭头等，具备点击和状态切换回调能力。",
    "preview": "../assets/images/operateuploaditemwidget_preview.png",
    "scenarios": [
      "物流任务详情页的上传状态显示的操作项",
      "任何需要展示上传状态、支持开关且点击跳转的操作项"
    ],
    "import_code": null,
    "basic_usage": "OperateUploadItemWidget(\n  title: '上传凭证',\n  isUploaded: true,\n  onTap: () {\n    // 跳转上传详情\n  },\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "典型上传入口用法",
        "code": "OperateUploadItemWidget(\n  title: '上传任务单',\n  isUploaded: false,\n  onTap: () {\n    // 跳转上传页面\n  },\n)",
        "description": null
      },
      {
        "title": "带开关的业务场景",
        "code": "OperateUploadItemWidget(\n  title: '上传收货凭证',\n  showSwitch: true,\n  initialSwitchState: true,\n  onSwitchChange: (value) {\n    // 控制是否必传\n  },\n)",
        "description": null
      },
      {
        "title": "自定义状态颜色",
        "code": "OperateUploadItemWidget(\n  title: '上传装车照片',\n  isUploaded: true,\n  uploadedColor: Colors.blue,\n  unUploadedColor: Colors.orange,\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何自定义右侧箭头图片资源？",
        "answer": "当前组件内置箭头图片，如有需求可通过源码自定义图片路径或扩展参数。"
      },
      {
        "question": "开关与上传状态如何联动？",
        "answer": "仅当开关为开或未显示开关时，右侧才显示“已上传/未上传”文字，逻辑已在组件内部处理。"
      },
      {
        "question": "如何国际化上传状态文字？",
        "answer": "可通过封装intl库，传入本地化后的字符串值实现国际化支持。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/item/operate_upload_item_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_Item_page.dart",
    "methods": []
  },
  {
    "id": "RatingBar",
    "name": "RatingBar 评分条组件",
    "category": "数据展示",
    "maintainer": "wangzhonghao13",
    "stability": "稳定",
    "description": "RatingBar 是一款灵活的评分组件，支持星级、图片、表情等多种评分样式，兼容横向、竖向、RTL文本方向，可自定义评分项、支持半星评分、评分拖动、发光动画、只读展示等。",
    "preview": "../assets/images/ratingbar_preview.png",
    "scenarios": [
      "商品/服务的用户评价",
      "司机/配送员满意度评分",
      "任务完成度打分",
      "物流环节质量反馈"
    ],
    "import_code": null,
    "basic_usage": "RatingBar.builder(\n  initialRating: 3,\n  minRating: 1,\n  direction: Axis.horizontal,\n  allowHalfRating: true,\n  itemCount: 5,\n  itemPadding: EdgeInsets.symmetric(horizontal: 4.0),\n  itemBuilder: (context, _) => Icon(\n    Icons.star,\n    color: Colors.amber,\n  ),\n  onRatingUpdate: (rating) {\n    // 评分值变更回调\n  },\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础星级评分",
        "code": "RatingBar.builder(\n  initialRating: 3,\n  minRating: 1,\n  direction: Axis.horizontal,\n  allowHalfRating: true,\n  itemCount: 5,\n  itemPadding: EdgeInsets.symmetric(horizontal: 4.0),\n  itemBuilder: (context, _) => Icon(\n    Icons.star,\n    color: Colors.amber,\n  ),\n  onRatingUpdate: (rating) {\n    // 评分值变更回调\n  },\n)",
        "description": null
      },
      {
        "title": "图片评分",
        "code": "RatingBar(\n  initialRating: 3,\n  allowHalfRating: true,\n  itemCount: 5,\n  ratingWidget: RatingWidget(\n    full: Image.asset('assets/heart.png'),\n    half: Image.asset('assets/heart_half.png'),\n    empty: Image.asset('assets/heart_border.png'),\n  ),\n  itemPadding: EdgeInsets.symmetric(horizontal: 4.0),\n  onRatingUpdate: (rating) {\n    // 评分值变更回调\n  },\n)",
        "description": null
      },
      {
        "title": "表情评分",
        "code": "RatingBar.builder(\n  initialRating: 3,\n  itemCount: 5,\n  itemPadding: EdgeInsets.symmetric(horizontal: 4.0),\n  itemBuilder: (context, index) {\n    switch (index) {\n      case 0: return Icon(Icons.sentiment_very_dissatisfied, color: Colors.red);\n      case 1: return Icon(Icons.sentiment_dissatisfied, color: Colors.redAccent);\n      case 2: return Icon(Icons.sentiment_neutral, color: Colors.amber);\n      case 3: return Icon(Icons.sentiment_satisfied, color: Colors.lightGreen);\n      case 4: return Icon(Icons.sentiment_very_satisfied, color: Colors.green);\n      default: return Container();\n    }\n  },\n  onRatingUpdate: (rating) {\n    // 评分值变更回调\n  },\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何设置半星评分？",
        "answer": "将 `allowHalfRating` 设置为 `true`，即可支持半星评分。"
      },
      {
        "question": "如何只读显示评分结果？",
        "answer": "使用 `RatingBarIndicator`，可任意显示小数分数且不响应交互。"
      },
      {
        "question": "如何自定义评分项图标或图片？",
        "answer": "使用 `RatingBar.builder` 搭配自定义Widget，或传入 `RatingWidget` 并指定 full/half/empty 三种状态的 Widget。"
      },
      {
        "question": "如何设置评分方向为竖直或RTL？",
        "answer": "分别设置 `direction: Axis.vertical`，或 `textDirection: TextDirection.rtl`。"
      },
      {
        "question": "评分变化时如何响应？",
        "answer": "实现 `onRatingUpdate` 回调，获取评分结果并处理业务逻辑。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/rating/rating_bar.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/rating_bar_page.dart",
    "methods": []
  },
  {
    "id": "BottomSheetListDialog",
    "name": "BottomSheetListDialog 底部弹出列表对话框",
    "category": "数据展示组件",
    "maintainer": "zhuxiaoan1",
    "stability": "稳定",
    "description": "BottomSheetListDialog 是一个通用的底部弹出列表对话框组件，支持自定义标题、内容、分割线、头部和尾部区域，适用于快递物流、仓储管理等业务场景下的数据选择、参数批量选择、操作提示等弹窗。具备高扩展性、良好弹窗交互体验和灵活自定义能力。",
    "preview": "../assets/images/bottomsheetlistdialog_preview.jpg",
    "scenarios": [
      "仓库、类型、参数、业务选项批量选择弹窗",
      "数据选择、操作提示、分组选择的底部弹窗",
      "需要自定义头部、尾部、分割线、内容的批量交互场景"
    ],
    "import_code": null,
    "basic_usage": "BottomSheetListDialog<String>(\n  title: '选择仓库',\n  createItemWidget: (context, data, index) => ListTile(title: Text(data)),\n).show(context, ['A仓', 'B仓', 'C仓']);",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础仓库选择弹窗",
        "code": "BottomSheetListDialog<String>(\n  title: '仓库选择',\n  createItemWidget: (ctx, data, idx) => ListTile(title: Text(data)),\n).show(context, ['A仓', 'B仓', 'C仓']);",
        "description": null
      },
      {
        "title": "自定义头/尾区域",
        "code": "BottomSheetListDialog<String>(\n  title: '参数弹窗',\n  createItemWidget: (ctx, data, idx) => ListTile(title: Text(data)),\n  headerBuilder: (ctx) => Text('顶部说明'),\n  footerBuilder: (ctx) => ElevatedButton(onPressed: () {}, child: Text('确定')),\n).show(context, ['A', 'B', 'C']);",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何复用同一个弹窗实例？",
        "answer": "支持多次调用 show(context, data) 复用，推荐弹窗关闭后再调用。"
      },
      {
        "question": "如何自定义列表项、头部、尾部内容？",
        "answer": "通过 createItemWidget、headerBuilder、footerBuilder 分别自定义内容。"
      },
      {
        "question": "如何控制弹窗最大高度、滚动区域？",
        "answer": "通过 maxLines 参数自定义最大高度，内容超出时自动滚动。"
      },
      {
        "question": "如何外部主动关闭弹窗？",
        "answer": "调用 dialog.dismiss() 即可关闭当前弹窗。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/dialog/bottom_sheet_list_dialog.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_popup_page.dart",
    "methods": [
      {
        "name": "show",
        "description": "显示弹窗",
        "parameters": [
          "BuildContext",
          "List<T>"
        ],
        "return_type": "void"
      },
      {
        "name": "dismiss",
        "description": "关闭弹窗",
        "parameters": [
          "无"
        ],
        "return_type": "void"
      }
    ]
  },
  {
    "id": "YLExpandableNotifier",
    "name": "YLExpandableNotifier 可折叠联动控制器",
    "category": "数据展示组件",
    "maintainer": "wangzhonghao13",
    "stability": "稳定",
    "description": "YLExpandableNotifier 是一个用于在 Widget 子树中提供统一折叠/展开控制的高阶组件。它用于管理和同步多个可折叠内容块（如 YLExpandablePanel、YLExpandable 等），实现批量内容的展开/收起联动，适用于业务详情、分组面板、批次明细等典型物流场景。通过该组件，可灵活实现控制器自动或手动驱动的内容折叠、同步动画、批量状态管理等能力。",
    "preview": "../assets/images/ylexpandablenotifier_preview.png",
    "scenarios": [
      "多个折叠内容板块的同步展开/收起",
      "运单、业务表单的批量明细分组",
      "业务详情折叠、批量信息展示",
      "复杂交互页面的折叠联动控制"
    ],
    "import_code": null,
    "basic_usage": "YLExpandableNotifier(\n  child: YLExpandablePanel(\n    header: Text('订单详情'),\n    collapsed: Text('点击展开查看更多信息'),\n    expanded: Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Text('客户名称：京东物流'),\n        Text('订单编号：JD12345678'),\n        Text('配送地址：北京市朝阳区xxx街道xxx号'),\n        // 更多详细信息...\n      ],\n    ),\n  ),\n)",
    "properties": [],
    "events": [],
    "examples": [],
    "faq": [
      {
        "question": "如何实现多个 YLExpandablePanel 的联动展开/收起？",
        "answer": "将多个 YLExpandablePanel 包裹在同一个 YLExpandableNotifier 内即可实现联动。YLExpandableNotifier 会自动管理其子树中所有 YLExpandablePanel 的状态, 但绝不能用动态组件例如ListView,可以使用Column 。"
      },
      {
        "question": "如何在外部控制 YLExpandablePanel 的展开/收起？",
        "answer": "创建一个 YLExpandableController 实例，并将其传递给 YLExpandableNotifier 的 controller 参数。然后可以通过控制器的 toggle()、expanded 属性等方法来控制展开状态。"
      },
      {
        "question": "切换展开时内容不在屏幕上，如何自动滚动到可见？",
        "answer": "使用 YLScrollOnExpand 组件包裹 YLExpandablePanel，当面板展开或收起时自动滚动到屏幕可视区域，无需手动处理。"
      },
      {
        "question": "YLExpandableNotifier 的生命周期是怎样的？",
        "answer": "YLExpandableNotifier 是一个 StatefulWidget，它会在整个子树的生命周期内保持状态。当 YLExpandableNotifier 被销毁时，它会自动清理相关的监听器和控制器。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/expand/yl_expandable.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_expandable_page.dart",
    "methods": []
  },
  {
    "id": "DefaultTabSelectorWidget",
    "name": "DefaultTabSelectorWidget 默认标签选择器组件",
    "category": "基础组件",
    "maintainer": "zhuxiaoan1",
    "stability": "稳定",
    "description": "DefaultTabSelectorWidget 是一个支持单选和多选模式的通用标签选择器组件，适用于标签筛选、业务偏好选择、多项切换等场景。支持自定义标签项、布局间距、回调控制、样式灵活扩展，便于适配多样化业务需求。",
    "preview": "../assets/images/defaulttabselectorwidget_preview.png",
    "scenarios": [
      "标签筛选（如订单/状态/偏好选择）",
      "多条件筛选（如业务参数批量选择）",
      "多项切换、业务配置项、偏好设置",
      "需要自定义标签风格、单/多选模式的UI区域"
    ],
    "import_code": null,
    "basic_usage": "final tabs = [\n  TabItem(1, '标签1', selectState: true),\n  TabItem(2, '标签2'),\n  TabItem(3, '标签3'),\n];\nfinal controller = TabSelectorController(tabs);\n\nDefaultTabSelectorWidget(\n  controller,\n  title: '选择标签',\n  spacing: 18,\n  runSpacing: 15,\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础用法",
        "code": "final tabs = [\n  TabItem(1, '待处理', selectState: true),\n  TabItem(2, '已完成'),\n  TabItem(3, '已取消'),\n];\nfinal controller = TabSelectorController(tabs);\n\nDefaultTabSelectorWidget(\n  controller,\n  title: '订单状态',\n)",
        "description": null
      },
      {
        "title": "多选模式下动态获取选择结果",
        "code": "final controller = TabSelectorController(tabList, multipleChoice: true);\n\nDefaultTabSelectorWidget(controller);\n\nfinal selectedTabs = controller.selectedTabs;",
        "description": null
      },
      {
        "title": "单选模式下支持取消",
        "code": "final controller = TabSelectorController(tabList, supportSingleChoiceCancellation: true);\nDefaultTabSelectorWidget(controller);",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何切换单选/多选模式？",
        "answer": "创建 TabSelectorController 时传 multipleChoice: true 即为多选，false 为单选。"
      },
      {
        "question": "如何自定义选中/未选中样式？",
        "answer": "可通过继承 DefaultTabSelectorWidget 或自定义子类重写 itemWidget 构建相关样式。"
      },
      {
        "question": "如何在外部获取当前所有选中标签？",
        "answer": "使用 controller.selectedTabs 或 controller.selectedSignList 获取。"
      },
      {
        "question": "控制器如何实现标签动态刷新？",
        "answer": "调用 controller.updateTabs(newTabs)，自动保持之前选中状态并刷新UI。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/tag/default_tab_selector_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_tag_page.dart",
    "methods": []
  },
  {
    "id": "EmptyView",
    "name": "EmptyView 空页面组件",
    "category": "数据展示组件",
    "maintainer": "zhangruixuan.9",
    "stability": "稳定",
    "description": "EmptyView 是一个通用的空页面/空状态组件，适用于物流、管理等业务中无数据、异常或临时页面展示。支持自定义图片、提示文本、按钮、刷新回调和额外内容，具备响应式布局能力，便于跨端适配和复用，有助于提升整体用户体验一致性。",
    "preview": "../assets/images/emptyview_preview.png",
    "scenarios": [
      "列表无数据、搜索无结果",
      "网络请求失败、加载异常",
      "系统维护、升级提示、临时下线页面",
      "业务流程暂未开放、权限受限等特殊状态"
    ],
    "import_code": null,
    "basic_usage": "EmptyView(\n  imagePath: 'assets/images/delivery_empty_view_icon.png',\n  text: '暂无运单记录',\n  buttonText: '刷新数据',\n  onRefresh: () {\n    // 重新加载业务数据\n  },\n)",
    "properties": [],
    "events": [
      {
        "name": "onRefresh",
        "description": "按钮点击时触发",
        "params": "无"
      }
    ],
    "examples": [
      {
        "title": "标准页面无数据",
        "code": "EmptyView(\n  text: '暂无订单信息',\n  onRefresh: () => fetchData(),\n)",
        "description": null
      },
      {
        "title": "显示自定义图片和按钮文案",
        "code": "EmptyView(\n  imagePath: 'assets/images/empty_order.png',\n  text: '暂时没有订单',\n  buttonText: '重新加载',\n  onRefresh: () => reloadData(),\n)",
        "description": null
      },
      {
        "title": "只展示提示文本，无交互",
        "code": "EmptyView(\n  text: '无权限查看本页面',\n  showButton: false,\n)",
        "description": null
      },
      {
        "title": "结合额外内容",
        "code": "EmptyView(\n  text: '没有找到相关车队，请检查搜索条件',\n  extraWidget: Text(\n    '如有疑问请联系客服',\n    style: TextStyle(color: Colors.blue),\n  ),\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何在不显示按钮的情况下添加自定义操作？",
        "answer": "将 `showButton` 设置为 `false`，通过 `extraWidget` 添加自定义操作区域（如按钮、帮助信息等）。"
      },
      {
        "question": "如何调整图片与文本之间的间距？",
        "answer": "使用 `spacing` 参数自定义图片与文本的垂直间距。"
      },
      {
        "question": "如何修改整体样式或适配深色主题？",
        "answer": "通过 `textColor`、`fontSize`、`imagePath` 等参数自定义各部分样式，支持自定义图片资源以适配不同主题。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/empty_widget/empty_view.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_empty_page.dart",
    "methods": []
  },
  {
    "id": "TagWrapWidget",
    "name": "TagWrapWidget 标签包裹组件",
    "category": "基础组件",
    "maintainer": "zhangwanyu12",
    "stability": "稳定",
    "description": "TagWrapWidget 是一个用于横向/自动换行展示标签列表的流式标签包裹组件。支持自定义标签样式、间距、背景、字体等，适合属性标签、分类状态、批量展示等多标签业务需求，兼容不同终端并易于自定义扩展。",
    "preview": "../assets/images/tagwrapwidget_preview.png",
    "scenarios": [
      "WMS 属性、分类、状态等批量标签展示",
      "列表页、卡片、详情页批量标签流",
      "业务参数集合、搜索条件、偏好标签",
      "多标签分组展示与自定义风格需求"
    ],
    "import_code": null,
    "basic_usage": "TagWrapWidget(\n  tags: ['冷链', '普货', '大件'],\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "批量标签流展示",
        "code": "TagWrapWidget(\n  tags: ['已签收', '冷链', '加急', '大件'],\n)",
        "description": null
      },
      {
        "title": "强调风格标签",
        "code": "TagWrapWidget(\n  tags: ['重要', '超时', '投诉'],\n  tagBgColor: Colors.red,\n  tagFontColor: Colors.yellow,\n  tagRadius: 8,\n  tagFontSize: 15,\n)",
        "description": null
      },
      {
        "title": "自定义间距与圆角",
        "code": "TagWrapWidget(\n  tags: ['A', 'B', 'C'],\n  widgetSpacing: 20,\n  widgetRunSpacing: 14,\n  tagRadius: 10,\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "支持动态数据渲染吗？",
        "answer": "支持。tags 参数可传任意 List<String>，数据源可来自接口、状态管理等。"
      },
      {
        "question": "如何防止标签内容过长导致布局错乱？",
        "answer": "建议单个标签内容简洁。若内容较长，可增加 tagHorizontalPadding 或设置标签最大宽度并截断。"
      },
      {
        "question": "如何自定义标签字体或背景色？",
        "answer": "通过 tagFontColor、tagBgColor、tagFontSize、tagRadius 等参数自由定制。"
      },
      {
        "question": "标签太多会自动换行吗？",
        "answer": "会。组件基于 Wrap 流式布局，超出一行自动换行。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/tag/tag_wrap_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_tag_page.dart",
    "methods": []
  },
  {
    "id": "YLSlidingAdWidget",
    "name": "YLSlidingAdWidget 滑动广告切换组件",
    "category": "数据展示组件",
    "maintainer": "zhangruixuan.9",
    "stability": "稳定",
    "description": "YLSlidingAdWidget 是一个支持自动轮播和淡入淡出动画的广告/消息切换组件。可自定义展示任意广告内容（文本、图标、复杂Widget），支持自定义高度、背景装饰、切换间隔和动画时长。适用于首页公告、活动提示、榜单播报等连续信息展示场景，提升用户关注度与页面活跃度。",
    "preview": "../assets/images/ylslidingadwidget_preview.png",
    "scenarios": [
      "首页、列表页顶部的广告/公告/消息轮播",
      "用户榜单、活动奖励等动态信息滑动展示",
      "需要展示多条内容并自动切换的区域",
      "任何需要淡入淡出轮播效果的信息提示栏"
    ],
    "import_code": null,
    "basic_usage": "YLSlidingAdWidget(\n  adWidgets: [\n    Text(\"张*刚刚完成了一单，赚了100元~\"),\n    Text(\"李*今天已经完成5单，收入500元~\"),\n    Text(\"王*本周累计收入已达2000元~\"),\n  ],\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "完整示例",
        "code": "YLSlidingAdWidget(\n  adWidgets: [\n    Row(\n      children: [\n        Image.asset('assets/images/fire_icon.png', width: 16, height: 16),\n        SizedBox(width: 5),\n        Expanded(\n          child: Text(\n            \"张*刚刚完成了一单，赚了100元~\",\n            style: TextStyle(fontSize: 14, color: Colors.red),\n            maxLines: 1,\n            overflow: TextOverflow.ellipsis,\n          ),\n        ),\n      ],\n    ),\n    Row(\n      children: [\n        Image.asset('assets/images/fire_icon.png', width: 16, height: 16),\n        SizedBox(width: 5),\n        Expanded(\n          child: Text(\n            \"李*今天已经完成5单，收入500元~\",\n            style: TextStyle(fontSize: 14, color: Colors.red),\n            maxLines: 1,\n            overflow: TextOverflow.ellipsis,\n          ),\n        ),\n      ],\n    ),\n  ],\n  height: 48,\n  decoration: BoxDecoration(\n    color: Colors.grey[200],\n    borderRadius: BorderRadius.circular(8),\n  ),\n  switchDuration: Duration(seconds: 5),\n  fadeDuration: Duration(milliseconds: 500),\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "内容Widget可以是复杂布局吗？",
        "answer": "可以。adWidgets 支持任意Widget组合（如Row、图标、富文本等），不限于简单文本。"
      },
      {
        "question": "如何暂停/手动切换轮播？",
        "answer": "当前为自动轮播，暂停/手动切换可通过自行包裹控制逻辑实现（可参考源码自定义扩展）。"
      },
      {
        "question": "切换数量较少时会有问题吗？",
        "answer": "建议 adWidgets 至少包含2项，否则轮播无意义。单条内容不会自动切换。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/advertisement/yl_sliding_ad_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_banner_page.dart",
    "methods": []
  },
  {
    "id": "ListWheelsWidget",
    "name": "ListWheelsWidget 单列滚轮选择器",
    "category": "数据展示组件",
    "maintainer": "daihang",
    "stability": "稳定",
    "description": "ListWheelsWidget 是一个支持标题、单列滚轮选择、初始值、颜色、间距自定义的单项选择器组件。适用于城市、类型、参数等单列快速选择场景。支持确定/取消回调和自定义高度，所有内容为一维滚轮列表。",
    "preview": "../assets/images/listwheelswidget_preview.png",
    "scenarios": [
      "城市、类型、单个参数等单列选择弹窗",
      "数量、单位、仓库等一维滚轮选择",
      "需要自定义主题色、高度、初始值的单项选择",
      "弹窗/表单的单列数据快速选择"
    ],
    "import_code": null,
    "basic_usage": "ListWheelsWidget<String>(\n  title: '选择城市',\n  mDatas: ['北京', '上海', '广州', '深圳'],\n  tapSure: (result, idx) {\n    print('选中: $result');\n  },\n  tapCancel: () {\n    print('取消选择');\n  },\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "数量快速选择",
        "code": "ListWheelsWidget<int>(\n  title: '选择数量',\n  mDatas: [1, 2, 3, 4, 5],\n  initialValue: 3,\n  tapSure: (val, idx) => print('选中: $val'),\n)",
        "description": null
      },
      {
        "title": "城市选择",
        "code": "ListWheelsWidget<String>(\n  title: '选择城市',\n  mDatas: ['北京', '上海', '深圳'],\n  tapCancel: () => print('取消'),\n  tapSure: (val, idx) => print('选择: $val'),\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "是否支持多列、多级、分组等复杂滚轮？",
        "answer": "不支持。仅支持单列一维滚轮列表。"
      },
      {
        "question": "如何自定义初始选中项？",
        "answer": "通过 initialValue 参数指定，若传入值在 mDatas 中则自动高亮。"
      },
      {
        "question": "如何设置选中/未选中颜色？",
        "answer": "通过 activeColor 和 inactiveColor 参数自定义。"
      },
      {
        "question": "如何关闭弹窗？",
        "answer": "点击“取消”或“确定”按钮后自动关闭，也可用 Navigator.pop(context)。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/dialog/list_wheels_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/demo_widget.dart",
    "methods": []
  },
  {
    "id": "BottomSheetCascadeDialog",
    "name": "BottomSheetCascadeDialog 底部弹出级联选择器",
    "category": "业务组件",
    "maintainer": "zhuxiaoan1",
    "stability": "稳定",
    "description": "BottomSheetCascadeDialog 是一个底部弹出的多级异步级联选择器弹窗，支持路径回显、最小选择级数限制。适用于仓库、物流园区、行政区域等多层级业务弹窗选择场景，支持动态加载、自动高亮回显、顶部自定义标题与确认按钮。",
    "preview": "../assets/images/bottomsheetcascadedialog_preview.png",
    "scenarios": [
      "仓库、物流园区、园区分区等多级节点弹窗选择",
      "行政区域（省/市/区）多级联动弹窗",
      "多级组织、部门、品类、项目等分组弹窗选择",
      "需要路径回显、最小选择级数、动态数据加载的多级弹窗"
    ],
    "import_code": null,
    "basic_usage": "final dialog = BottomSheetCascadeDialog(\n  title: '请选择库区',\n  onLoadData: (level, parentId) async {\n    // 根据level和parentId异步加载数据\n    return [\n      CascadeSelectItem(id: 1, name: 'A库'),\n      CascadeSelectItem(id: 2, name: 'B库'),\n    ];\n  },\n  onChanged: (selectedPath) {\n    print('已选择: ${selectedPath.map((e) => e.name).join('/')}');\n  },\n  cascadeHeight: 320,\n);\ndialog.show(context, selectedIds: [1]);",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础弹窗选择",
        "code": "final dialog = BottomSheetCascadeDialog(\n  title: '选择区域',\n  onLoadData: (level, parentId) async { /* ... */ },\n  onChanged: (path) => print('选中: $path'),\n);\ndialog.show(context);",
        "description": null
      },
      {
        "title": "限制最小级数并回显",
        "code": "final dialog = BottomSheetCascadeDialog(\n  title: '仓库选择',\n  minLevel: 2,\n  onLoadData: (level, parentId) async { /* ... */ },\n);\ndialog.show(context, selectedIds: [1, 100]);",
        "description": null
      },
      {
        "title": "弹窗关闭与获取当前选中",
        "code": "final dialog = BottomSheetCascadeDialog(\n  title: '选择项目',\n  onLoadData: (level, parentId) async { /* ... */ },\n  onChanged: (path) { /* ... */ },\n);\n// 显示\ndialog.show(context);\n// 获取选中路径\nfinal selected = dialog.selectedItems;\n// 关闭弹窗\ndialog.dismiss();",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何实现多级异步联动、路径回显？",
        "answer": "onLoadData 支持按 level+parentId 动态加载，show(context, selectedIds) 支持自动高亮回显。"
      },
      {
        "question": "如何限制必须选择到第几级才能确认？",
        "answer": "通过 minLevel 参数设置，未满足时自动toast提示。"
      },
      {
        "question": "如何在弹窗外部主动关闭弹窗？",
        "answer": "调用 dialog.dismiss() 方法即可关闭底部弹窗。"
      },
      {
        "question": "支持哪些自定义能力？",
        "answer": "可定制标题、内容高度、最小级数、回显路径、确认按钮行为等，适配业务弹窗需求。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/dialog/bottom_sheet_cascade_dialog.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_cascade_select_bottom_dialog_page.dart",
    "methods": [
      {
        "name": "show",
        "description": "显示弹窗",
        "parameters": [
          "BuildContext context",
          "{List<int>? selectedIds}"
        ],
        "return_type": "void"
      },
      {
        "name": "dismiss",
        "description": "关闭弹窗",
        "parameters": [
          "无"
        ],
        "return_type": "void"
      },
      {
        "name": "selectedItems",
        "description": "当前选中路径",
        "parameters": [
          "-"
        ],
        "return_type": "List<CascadeSelectItem>"
      }
    ]
  },
  {
    "id": "BottomSingleTextDialog",
    "name": "BottomSingleTextDialog 底部单选列表弹窗",
    "category": "数据展示组件",
    "maintainer": "zhangwanyu12",
    "stability": "稳定",
    "description": "BottomSingleTextDialog 是一个通用的底部弹出单选文字列表弹窗组件，支持动态数据、标题、选项点击回调、关闭按钮。适合物流、仓储等业务场景下的参数单项选择、操作确认、快速选项弹窗。所有内容均为一维单列表，不支持分组、分区、头尾插槽等复杂结构。",
    "preview": "../assets/images/bottomsingletextdialog_preview.png",
    "scenarios": [
      "参数、状态、仓库类型等一维单项选择弹窗",
      "操作确认、单选确认、快速切换弹窗",
      "仅需“列表+标题+关闭”交互的标准弹窗"
    ],
    "import_code": null,
    "basic_usage": "BottomSingleTextDialog.show<String>(\n  context,\n  [\n    TextSelectDialogParams(itemText: \"选项A\", data: \"A\"),\n    TextSelectDialogParams(itemText: \"选项B\", data: \"B\"),\n  ],\n  dialogTitle: \"请选择\",\n  onItemTap: (index, value) {\n    print('选中: $value');\n  },\n);",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础参数选择弹窗",
        "code": "BottomSingleTextDialog.show<String>(\n  context,\n  [\n    TextSelectDialogParams(itemText: \"状态A\", data: \"A\"),\n    TextSelectDialogParams(itemText: \"状态B\", data: \"B\"),\n  ],\n  dialogTitle: '状态选择',\n  onItemTap: (idx, val) {},\n);",
        "description": null
      },
      {
        "title": "主动关闭弹窗",
        "code": "final dialog = BottomSingleTextDialog<String>(\n  dataList: [\n    TextSelectDialogParams(itemText: \"选项1\", data: \"1\"),\n    TextSelectDialogParams(itemText: \"选项2\", data: \"2\"),\n  ],\n  dialogTitle: '操作确认',\n  onItemTap: (idx, val) {},\n);\ndialog.show(context, dialog.dataList);\ndialog.dismiss();",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "是否支持分组、头部、尾部插槽？",
        "answer": "不支持。仅支持一维标准单选列表弹窗。"
      },
      {
        "question": "如何自定义每项内容和样式？",
        "answer": "只能通过 TextSelectDialogParams 定义每项文本与数据，所有项样式统一。"
      },
      {
        "question": "如何实现点击后自动关闭弹窗？",
        "answer": "默认点击任一选项会自动关闭弹窗并回调 onItemTap。"
      },
      {
        "question": "如何主动关闭弹窗？",
        "answer": "调用实例的 dismiss() 方法或点击关闭按钮均可关闭。"
      },
      {
        "question": "支持最大高度、滚动显示吗？",
        "answer": "支持。内容超出时自动滚动，最大高度为屏幕2/3。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/dialog/bottom_single_text_dialog.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_popup_page.dart",
    "methods": []
  },
  {
    "id": "ImageCarouselPage",
    "name": "ImageCarouselPage 图片轮播预览页",
    "category": "数据展示组件",
    "maintainer": "zhangwanyu12",
    "stability": "稳定",
    "description": "ImageCarouselPage 是一个支持本地/网络图片混合、滑动切换的大图轮播预览组件。适用于订单、货物、证件等多图预览场景，支持初始下标、全屏沉浸、滑动切换，体验流畅，兼容桌面和移动端。",
    "preview": "../assets/images/imagecarouselpage_preview.png",
    "scenarios": [
      "订单多图大图轮播预览",
      "货物、证照、凭证等批量图片浏览",
      "支持本地与网络图片混合展示的图片查看弹窗/页面",
      "纯图片全屏沉浸浏览、滑动切换"
    ],
    "import_code": null,
    "basic_usage": "ImageCarouselPage(\n  imagesList: [\n    ImageBean(url: 'http://xxx.com/1.png'),\n    ImageBean(url: '/local/path/2.jpg')\n  ],\n  index: 0, // 默认展示第一张\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "订单图片轮播",
        "code": "ImageCarouselPage(\n  imagesList: [\n    ImageBean(url: 'http://img.com/a.jpg'),\n    ImageBean(url: 'http://img.com/b.jpg'),\n    ImageBean(url: '/local/abc.png'),\n  ],\n  index: 0,\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "支持删除/编辑图片吗？",
        "answer": "不支持。仅做多图预览浏览，所有内容为一维图片轮播。"
      },
      {
        "question": "如何区分网络和本地图片？",
        "answer": "组件内部自动判断 url，http/https 为网络，其余为本地路径。"
      },
      {
        "question": "如何关闭页面？",
        "answer": "通过 AppBar 返回按钮或 Navigator.pop(context) 关闭。"
      },
      {
        "question": "是否支持预览大图、缩放、手势操作？",
        "answer": "仅支持轮播和全屏展示，不支持缩放/手势放大。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/image/image_carousel_page.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/demo_widget.dart",
    "methods": []
  },
  {
    "id": "数据展示组件索引",
    "name": "数据展示组件索引",
    "category": "",
    "maintainer": null,
    "stability": null,
    "description": "",
    "preview": null,
    "scenarios": [],
    "import_code": null,
    "basic_usage": null,
    "properties": [],
    "events": [],
    "examples": [],
    "faq": [],
    "source_path": null,
    "demo_path": null,
    "methods": []
  },
  {
    "id": "OperateItemWidget",
    "name": "OperateItemWidget 功能操作项组件",
    "category": "数据展示组件",
    "maintainer": "zhangwanyu12",
    "stability": "稳定",
    "description": "OperateItemWidget 是一个标准的功能操作项组件，用于展示左侧主标题、右侧可选副标题和箭头，支持扩展自定义控件与点击事件，常用于 WMS 业务功能入口、设置列表、信息项展示等场景。组件具备灵活的内容组合能力，可自定义主副标题样式、扩展控件、右侧箭头显示等。",
    "preview": "../assets/images/operateitemwidget_preview.png",
    "scenarios": [
      "WMS 业务功能入口",
      "设置项/操作项列表",
      "可点击的信息展示项",
      "需要扩展控件或自定义副标题的展示项"
    ],
    "import_code": null,
    "basic_usage": "OperateItemWidget(\n  title: '操作项',\n  subTitle: '副标题',\n  hasRightArrow: true,\n  onTap: () {\n    print('点击操作项');\n  },\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "标准信息项",
        "code": "OperateItemWidget(\n  title: '基本信息',\n  subTitle: '查看',\n  onTap: () => print('点击基本信息'),\n)",
        "description": null
      },
      {
        "title": "自定义副标题样式",
        "code": "OperateItemWidget(\n  title: '自定义样式',\n  subTitle: '重要',\n  subTitleStyle: TextStyle(\n    color: Colors.red,\n    fontWeight: FontWeight.bold,\n  ),\n)",
        "description": null
      },
      {
        "title": "仅扩展控件",
        "code": "OperateItemWidget(\n  title: '开关操作',\n  extendWidget: Switch(\n    value: false,\n    onChanged: (val) => print('切换为$val'),\n  ),\n  hasRightArrow: false,\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何隐藏右侧箭头？",
        "answer": "设置 `hasRightArrow: false` 即可隐藏右侧箭头。"
      },
      {
        "question": "如何自定义扩展控件和副标题样式？",
        "answer": "用 `extendWidget` 传入自定义 Widget，用 `subTitleStyle` 设置副标题样式。"
      },
      {
        "question": "扩展控件与副标题能否同时显示？",
        "answer": "不能，扩展控件和副标题互斥，建议仅展示其一。"
      },
      {
        "question": "组件高度可否调整？",
        "answer": "当前高度为 50.0，如需自定义可通过外部容器包裹调整。"
      },
      {
        "question": "如何自定义点击事件？",
        "answer": "传入 `onTap` 回调函数即可。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/item/operate_item_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_Item_page.dart",
    "methods": []
  },
  {
    "id": "TagImageWidget",
    "name": "TagImageWidget 图片标签",
    "category": "数据展示组件",
    "maintainer": "zhangruixuan.9",
    "stability": "稳定",
    "description": "TagImageWidget 是一个带图片背景的文本标签组件，支持自定义图片、文本、样式与宽度。常用于展示带有状态标识、角标、图标的标签，适配卡片、列表等多种业务场景。组件内部自动居中显示文本，图片资源可配置，支持自适应宽度和文本样式定制。",
    "preview": "../assets/images/tagimagewidget_preview.png",
    "scenarios": [
      "带图标的状态展示",
      "卡片/列表状态角标",
      "需要突出状态或类型的 UI 标签"
    ],
    "import_code": null,
    "basic_usage": "TagImageWidget(\n  statusText: '运输中',\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础带图片标签",
        "code": "TagImageWidget(\n  statusText: '待审核',\n)",
        "description": null
      },
      {
        "title": "列表状态角标用法",
        "code": "ListView(\n  children: [\n    ListTile(\n      title: Text('订单001'),\n      trailing: TagImageWidget(\n        statusText: '已取消',\n        imagePath: 'assets/images/state_cancel.png',\n        width: 80,\n      ),\n    ),\n  ],\n)",
        "description": null
      },
      {
        "title": "搭配卡片组件使用",
        "code": "Stack(\n  children: [\n    Card(child: Container(height: 100, width: 200)),\n    Positioned(\n      top: 8,\n      right: 8,\n      child: TagImageWidget(\n        statusText: '待处理',\n        width: 90,\n      ),\n    ),\n  ],\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何自定义图片资源？",
        "answer": "通过 `imagePath` 参数传入自定义图片路径，支持本地 assets 图片与 package 资源。"
      },
      {
        "question": "文本样式如何调整？",
        "answer": "使用 `textStyle` 参数自定义文字颜色、字号、加粗等。"
      },
      {
        "question": "标签宽度如何设置？",
        "answer": "通过 `width` 参数自定义宽度，默认为 70，单位与适配方案一致。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/tag/tag_image_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_tag_page.dart",
    "methods": []
  },
  {
    "id": "TextSelectDialog",
    "name": "TextSelectDialog 单选文字对话框",
    "category": "数据展示组件",
    "maintainer": "zhangwanyu12",
    "stability": "稳定",
    "description": "TextSelectDialog 是一个通用的单选文字列表对话框组件，支持动态内容、标题、选项点击回调、关闭按钮。适合参数选择、状态选择、操作确认等场景下的快速单选弹窗。所有内容为一维单列表，不支持分组、头部/尾部插槽。",
    "preview": "../assets/images/textselectdialog_preview.png",
    "scenarios": [
      "参数、状态、类型等一维单选弹窗",
      "操作确认、快速选择、条件切换对话框",
      "需要自定义标题、回调、最大高度的标准弹窗"
    ],
    "import_code": null,
    "basic_usage": "TextSelectDialog.show<String>(\n  context,\n  [\n    TextSelectDialogParams(itemText: \"选项A\", data: \"A\"),\n    TextSelectDialogParams(itemText: \"选项B\", data: \"B\"),\n  ],\n  dialogTitle: \"请选择\",\n  onItemTap: (index, value) {\n    print('选中: $value');\n  },\n);",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础参数选择弹窗",
        "code": "TextSelectDialog.show<String>(\n  context,\n  [\n    TextSelectDialogParams(itemText: \"参数1\", data: \"A\"),\n    TextSelectDialogParams(itemText: \"参数2\", data: \"B\"),\n  ],\n  dialogTitle: '选择参数',\n  onItemTap: (idx, val) {},\n);",
        "description": null
      },
      {
        "title": "主动关闭弹窗",
        "code": "final dialog = TextSelectDialog<String>(\n  dataList: [\n    TextSelectDialogParams(itemText: \"选项1\", data: \"1\"),\n    TextSelectDialogParams(itemText: \"选项2\", data: \"2\"),\n  ],\n  dialogTitle: '操作确认',\n  onItemTap: (idx, val) {},\n);\nshowDialog(context: context, builder: (ctx) => dialog);\n// 关闭弹窗：Navigator.of(context).pop();",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "是否支持分组、头部或尾部内容？",
        "answer": "不支持。所有内容均为一维单选列表。"
      },
      {
        "question": "如何自定义每项内容和样式？",
        "answer": "只能通过 TextSelectDialogParams 配置文本与数据，样式统一。"
      },
      {
        "question": "点击后弹窗会自动关闭吗？",
        "answer": "会。点击任一选项自动关闭弹窗并回调 onItemTap。"
      },
      {
        "question": "如何主动关闭弹窗？",
        "answer": "可通过 Navigator.of(context).pop() 主动关闭。"
      },
      {
        "question": "支持最大高度、滚动显示吗？",
        "answer": "支持。内容超出时自动滚动，最大高度为屏幕1/2。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/dialog/text_select_dialog.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_popup_page.dart",
    "methods": []
  },
  {
    "id": "ComRoundWidget",
    "name": "ComRoundWidget 圆角渐变卡片组件",
    "category": "数据展示组件",
    "maintainer": "zhangwanyu12",
    "stability": "稳定",
    "description": "ComRoundWidget 是一个圆角渐变卡片通用组件，支持自定义内容、圆角、边框和渐变背景。它可以作为 WMS 业务中承载各类控件的基础卡片组件，提供了灵活的配置选项，以满足不同的展示需求。",
    "preview": "../assets/images/comroundwidget_preview.png",
    "scenarios": [
      "信息数据展示卡片样式",
      "功能卡片模块展示容器",
      "列表项item背景"
    ],
    "import_code": null,
    "basic_usage": "ComRoundWidget(\n  child: Text('内容'),\n  gradientColors: [Colors.blue, Colors.green],\n  radius: 12,\n  margin: EdgeInsets.all(16),\n)",
    "properties": [
      {
        "name": "child",
        "description": "卡片内部的子Widget",
        "type": "Widget?",
        "default": "null",
        "required": false
      },
      {
        "name": "margin",
        "description": "卡片外边距",
        "type": "EdgeInsetsGeometry?",
        "default": "EdgeInsets.symmetric(horizontal: 15)",
        "required": false
      },
      {
        "name": "padding",
        "description": "卡片内边距",
        "type": "EdgeInsetsGeometry?",
        "default": "EdgeInsets.all(10)",
        "required": false
      },
      {
        "name": "color",
        "description": "卡片背景色",
        "type": "Color",
        "default": "Colors.white",
        "required": false
      },
      {
        "name": "height",
        "description": "卡片高度",
        "type": "double?",
        "default": "null",
        "required": false
      },
      {
        "name": "width",
        "description": "卡片宽度",
        "type": "double?",
        "default": "null",
        "required": false
      },
      {
        "name": "side",
        "description": "边框样式",
        "type": "BorderSide",
        "default": "BorderSide.none",
        "required": false
      },
      {
        "name": "radius",
        "description": "圆角半径",
        "type": "double?",
        "default": "8",
        "required": false
      },
      {
        "name": "gradientColors",
        "description": "渐变色集合",
        "type": "List<Color>?",
        "default": "null",
        "required": false
      },
      {
        "name": "begin",
        "description": "渐变起始方向",
        "type": "Alignment?",
        "default": "Alignment.topCenter",
        "required": false
      },
      {
        "name": "end",
        "description": "渐变结束方向",
        "type": "Alignment?",
        "default": "Alignment.bottomCenter",
        "required": false
      }
    ],
    "events": [],
    "examples": [
      {
        "title": "基础卡片",
        "code": "ComRoundWidget(\n  child: Text('基础卡片'),\n  padding: EdgeInsets.all(16),\n)",
        "description": null
      },
      {
        "title": "渐变背景卡片",
        "code": "ComRoundWidget(\n  child: Text('渐变背景卡片'),\n  gradientColors: [Colors.blue, Colors.purple],\n  radius: 16,\n  padding: EdgeInsets.all(20),\n)",
        "description": null
      },
      {
        "title": "自定义边框卡片",
        "code": "ComRoundWidget(\n  child: Text('自定义边框卡片'),\n  side: BorderSide(color: Colors.red, width: 2),\n  radius: 12,\n  padding: EdgeInsets.all(16),\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何创建一个没有内边距的卡片？",
        "answer": "可以将 `padding` 参数设置为 `EdgeInsets.zero`，例如：\n\n```dart\nComRoundWidget(\n  child: Text('无内边距卡片'),\n  padding: EdgeInsets.zero,\n)\n```"
      },
      {
        "question": "如何禁用卡片的圆角？",
        "answer": "将 `radius` 参数设置为 0，例如：\n\n```dart\nComRoundWidget(\n  child: Text('无圆角卡片'),\n  radius: 0,\n)\n```"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/button/card_round_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_card_round_page.dart",
    "methods": []
  },
  {
    "id": "YLPickers 时间选择器",
    "name": "YLPickers 时间选择器",
    "category": "输入组件",
    "maintainer": "wangzhonghao13",
    "stability": "稳定",
    "description": "YLPickers 是一款高度可定制的多功能时间底部弹窗滚动选择单位器组件，支持16种时间模式（年月日、时分秒等），可灵活设置时间区间、后缀、样式及多种回调，适合各类表单、业务录入场景。组件遵循MVVM架构，易于扩展和二次开发。",
    "preview": "../assets/images/ylpickers_preview.png",
    "scenarios": [
      "需要日期/时间/倒计时录入的任意业务表单",
      "复杂时间区间或格式要求的业务",
      "需统一风格或深度定制交互样式的移动端页面"
    ],
    "import_code": null,
    "basic_usage": "YLPickers.showDatePicker(\n  context,\n  mode: YLDateMode.YMD,\n  onConfirm: (data) {\n    print('选择日期: ${data.year}-${data.month}-${data.day}');\n  },\n);",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "自定义倒计时样式",
        "code": "var pickerStyle = PickerStyle(\n  headDecoration: BoxDecoration(\n    color: Colors.grey[800],\n    borderRadius: BorderRadius.only(\n      topLeft: Radius.circular(8),\n      topRight: Radius.circular(8)\n    )\n  ),\n  title: Center(child: Text('倒计时', style: TextStyle(color: Colors.white))),\n  textColor: Colors.white,\n  backgroundColor: Colors.grey[800],\n  itemOverlay: Container(\n    decoration: BoxDecoration(\n      border: Border.symmetric(\n        horizontal: BorderSide(color: Colors.cyan.withOpacity(0.3), width: 0.7)\n      )\n    )\n  )\n);\n\nYLPickers.showDatePicker(\n  context,\n  mode: YLDateMode.HMS,\n  suffix: Suffix(hours: ' 小时', minutes: ' 分钟', seconds: ' 秒'),\n  pickerStyle: pickerStyle,\n);",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何限制可选日期范围？",
        "answer": "使用minDate和maxDate参数设置时间范围限制：\n```dart\nYLPickers.showDatePicker(\n  context,\n  minDate: TimeUnit(year: 2020, month: 1),\n  maxDate: TimeUnit(year: 2030, month: 12),\n);\n```"
      },
      {
        "question": "如何自定义时间单位后缀？",
        "answer": "使用Suffix参数自定义：\n```dart\nYLPickers.showDatePicker(\n  context,\n  suffix: Suffix(years: '年', month: '月', days: '天'),\n);\n```"
      },
      {
        "question": "如何实现无标题或夜间风格？",
        "answer": "直接使用NoTitleStyle、DefaultPickerStyle.dark等样式类：\n```dart\nYLPickers.showDatePicker(\n  context,\n  pickerStyle: DefaultPickerStyle.dark(haveRadius: true, title: '夜间模式'),\n);\n```"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/wheel_picker/yl_pickers.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/date_picker_page.dart",
    "methods": []
  },
  {
    "id": "KeyboardUtils",
    "name": "KeyboardUtils 键盘工具类",
    "category": "输入组件",
    "maintainer": "zhangwanyu12",
    "stability": "稳定",
    "description": "KeyboardUtils 是一个专为 WMS 业务场景设计的键盘工具类。它提供了弹出车牌输入与内容选择、只弹出键盘等功能，适用于车牌输入、参数选择等复合交互场景。该工具类封装了常用的键盘操作，简化了开发流程，提高了代码复用性。",
    "preview": "../assets/images/keyboardutils_preview.png",
    "scenarios": [
      "WMS 系统中需要输入车牌号的场景",
      "需要同时进行内容选择和车牌输入的界面",
      "只需要弹出车牌输入键盘的场景",
      "任何需要自定义键盘输入和内容选择的复合交互场景"
    ],
    "import_code": "```dart\nimport 'package:flutter_widget/flutter_widget.dart' show KeyboardUtils;\n```",
    "basic_usage": "KeyboardUtils.showContentSelectVehicleNumberWidget(\n  context,\n  state,\n  selectContentTitle: '选择车辆类型',\n  selectContentList: ['冷链', '普货'],\n  resultCallback: (val) {\n    print('选择结果: $val');\n  },\n);",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "内容选择与车牌输入",
        "code": "KeyboardUtils.showContentSelectVehicleNumberWidget(\n  context,\n  state,\n  plateType: provincesType,\n  plateNumber: '京A12345',\n  selectContentTitle: '选择车辆类型',\n  selectContentList: ['冷链', '普货'],\n  resultCallback: (val) {\n    print('选择结果: $val');\n  },\n);",
        "description": null
      },
      {
        "title": "只弹出车牌输入键盘",
        "code": "KeyboardUtils.showOnlyPlateInputBottomSheet(\n  context,\n  initialType: provincesType,\n  vehicleNumber: '京A12345',\n  onPlateInputChanged: (number, type) {\n    print('输入变化: $number, 类型: $type');\n  },\n  onPlateInputFinish: (number, type) {\n    print('输入完成: $number, 类型: $type');\n  },\n);",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何自定义内容选择区域的样式？",
        "answer": "目前 KeyboardUtils 不直接支持自定义内容选择区域的样式。如果需要自定义，您可能需要修改 `_contentSelectWidget` 方法或创建一个新的自定义组件。"
      },
      {
        "question": "车牌输入是否支持新能源车牌？",
        "answer": "是的，KeyboardUtils 支持新能源车牌输入。通过设置 `plateType` 参数可以切换不同的车牌类型，包括新能源车牌。"
      }
    ],
    "source_path": "../../../lib/widget/keyboard/keyboard_utils.dart",
    "demo_path": "../../../example/lib/pages/yl_keyboard_page.dart",
    "methods": [
      {
        "name": "showContentSelectVehicleNumberWidget",
        "description": "展示内容选择车牌组件",
        "parameters": [
          "context",
          "state",
          "plateType",
          "plateNumber",
          "selectContentTitle",
          "selectContentList",
          "resultCallback"
        ],
        "return_type": "void"
      },
      {
        "name": "showOnlyPlateInputBottomSheet",
        "description": "弹出只有键盘输入的底部弹窗",
        "parameters": [
          "context",
          "initialType",
          "vehicleNumber",
          "onPlateInputChanged",
          "onPlateInputFinish",
          "vehicleNumberMaxLength"
        ],
        "return_type": "void"
      }
    ]
  },
  {
    "id": "CascadeSelectWidget",
    "name": "CascadeSelectWidget 级联选择组件",
    "category": "输入组件",
    "maintainer": "zhuxiaoan1",
    "stability": "稳定",
    "description": "CascadeSelectWidget 是一个灵活的级联选择组件，支持多级数据的选择和展示。它提供了丰富的自定义选项，包括选择器样式、标题栏样式、确认按钮样式等，适用于各种需要多级选择的场景。",
    "preview": "../assets/images/cascadeselectwidget_preview.png",
    "scenarios": [
      "地址选择（省市区）",
      "多级分类选择",
      "时间日期选择（年月日）",
      "任何需要多级联动选择的场景"
    ],
    "import_code": "```dart\nimport 'package:flutter_widget/flutter_widget.dart' show CascadeSelectWidget;\n```",
    "basic_usage": "CascadeSelectWidget(\n  data: [\n    ['选项1', '选项2', '选项3'],\n    ['子选项1', '子选项2', '子选项3'],\n  ],\n  onConfirm: (selected) {\n    print('选中的结果: $selected');\n  },\n)",
    "properties": [
      {
        "name": "data",
        "description": "级联数据",
        "type": "List<List<String>>",
        "default": null,
        "required": true
      },
      {
        "name": "selectIndex",
        "description": "默认选中的索引",
        "type": "List<int>?",
        "default": "null",
        "required": false
      },
      {
        "name": "title",
        "description": "选择器标题",
        "type": "String?",
        "default": "null",
        "required": false
      },
      {
        "name": "cancelText",
        "description": "取消按钮文本",
        "type": "String",
        "default": "'取消'",
        "required": false
      },
      {
        "name": "confirmText",
        "description": "确认按钮文本",
        "type": "String",
        "default": "'确定'",
        "required": false
      },
      {
        "name": "titleStyle",
        "description": "标题样式",
        "type": "TextStyle?",
        "default": "null",
        "required": false
      },
      {
        "name": "cancelStyle",
        "description": "取消按钮样式",
        "type": "TextStyle?",
        "default": "null",
        "required": false
      },
      {
        "name": "confirmStyle",
        "description": "确认按钮样式",
        "type": "TextStyle?",
        "default": "null",
        "required": false
      },
      {
        "name": "itemStyle",
        "description": "选项样式",
        "type": "TextStyle?",
        "default": "null",
        "required": false
      },
      {
        "name": "height",
        "description": "选择器高度",
        "type": "double",
        "default": "300.0",
        "required": false
      },
      {
        "name": "itemHeight",
        "description": "选项高度",
        "type": "double",
        "default": "40.0",
        "required": false
      },
      {
        "name": "itemCount",
        "description": "可见选项数",
        "type": "int",
        "default": "5",
        "required": false
      },
      {
        "name": "onCancel",
        "description": "取消回调",
        "type": "VoidCallback?",
        "default": "null",
        "required": false
      },
      {
        "name": "onConfirm",
        "description": "确认回调",
        "type": "ValueChanged<List<String>>?",
        "default": "null",
        "required": false
      }
    ],
    "events": [
      {
        "name": "onCancel",
        "description": "点击取消时触发",
        "params": "-"
      },
      {
        "name": "onConfirm",
        "description": "点击确认时触发",
        "params": "List<String>"
      }
    ],
    "examples": [
      {
        "title": "基础级联选择",
        "code": "CascadeSelectWidget(\n  data: [\n    ['北京', '上海', '广州'],\n    ['朝阳区', '海淀区', '东城区'],\n    ['望京', '酒仙桥', '大山子'],\n  ],\n  selectIndex: [0, 1, 2],\n  title: '选择地址',\n  onConfirm: (selected) {\n    print('选中的地址: ${selected.join(' ')}');\n  },\n)",
        "description": null
      },
      {
        "title": "自定义样式",
        "code": "CascadeSelectWidget(\n  data: [\n    ['2025', '2026', '2027'],\n    ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'],\n    ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'],\n  ],\n  title: '选择日期',\n  titleStyle: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n  itemStyle: TextStyle(fontSize: 16),\n  cancelText: '取消',\n  confirmText: '确定',\n  cancelStyle: TextStyle(color: Colors.grey),\n  confirmStyle: TextStyle(color: Colors.blue),\n  height: 250,\n  itemHeight: 50,\n  itemCount: 3,\n  onConfirm: (selected) {\n    print('选中的日期: ${selected.join('-')}');\n  },\n)",
        "description": null
      },
      {
        "title": "在底部弹出框中使用",
        "code": "showModalBottomSheet(\n  context: context,\n  builder: (BuildContext context) {\n    return CascadeSelectWidget(\n      data: [\n        ['小型车', '中型车', '大型车'],\n        ['轿车', 'SUV', '面包车'],\n        ['经济型', '舒适型', '豪华型'],\n      ],\n      title: '选择车型',\n      onConfirm: (selected) {\n        print('选中的车型: ${selected.join(' ')}');\n        Navigator.pop(context);\n      },\n      onCancel: () {\n        Navigator.pop(context);\n      },\n    );\n  },\n);",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何动态更新级联数据？",
        "answer": "目前 CascadeSelectWidget 不直接支持动态更新数据。如果需要更新数据，您需要重新创建一个新的 CascadeSelectWidget 实例。"
      },
      {
        "question": "是否支持异步加载数据？",
        "answer": "CascadeSelectWidget 当前版本不支持异步加载数据。所有数据需要在创建组件时提供。如果需要异步加载，您可能需要在数据加载完成后再显示 CascadeSelectWidget。"
      }
    ],
    "source_path": "../../../lib/widget/cascade/cascade_select_widget.dart",
    "demo_path": "../../../example/lib/pages/yl_cascade_select_page.dart",
    "methods": []
  },
  {
    "id": "输入组件索引",
    "name": "输入组件索引",
    "category": "",
    "maintainer": null,
    "stability": null,
    "description": "",
    "preview": null,
    "scenarios": [],
    "import_code": null,
    "basic_usage": null,
    "properties": [],
    "events": [],
    "examples": [],
    "faq": [],
    "source_path": null,
    "demo_path": null,
    "methods": []
  },
  {
    "id": "YLCheckbox",
    "name": "YLCheckbox 复选框",
    "category": "输入组件",
    "maintainer": "chenxuheng3",
    "stability": "稳定",
    "description": "YLCheckbox 是一个灵活的复选框组件，支持多种样式和自定义选项。它可以单独使用，也可以在 YLCheckboxGroup 中组合使用，以实现更复杂的选择功能。",
    "preview": "../assets/images/ylcheckbox_preview.png",
    "scenarios": [
      "需要用户在多个选项中进行多选时",
      "单个开关/同意选项",
      "全选/反选操作",
      "需要对选项进行分组管理时"
    ],
    "import_code": null,
    "basic_usage": "YLCheckbox(\n  id: 'option1',\n  title: '选项1',\n  checked: false,\n  onCheckBoxChanged: (checked) {\n    print('选项1被${checked ? '选中' : '取消选中'}');\n  },\n)",
    "properties": [],
    "events": [
      {
        "name": "onCheckBoxChanged",
        "description": "单个复选框状态变化时触发",
        "params": "bool"
      },
      {
        "name": "onChangeGroup",
        "description": "复选框组选中状态变化时触发",
        "params": "List<String>"
      }
    ],
    "examples": [
      {
        "title": "基础复选框",
        "code": "YLCheckbox(\n  id: 'option1',\n  title: '选项1',\n  checked: false,\n  onCheckBoxChanged: (checked) {\n    print('选项1被${checked ? '选中' : '取消选中'}');\n  },\n)",
        "description": null
      },
      {
        "title": "复选框组",
        "code": "YLCheckboxGroup(\n  child: Column(\n    children: [\n      YLCheckbox(id: 'option1', title: '选项1'),\n      YLCheckbox(id: 'option2', title: '选项2'),\n      YLCheckbox(id: 'option3', title: '选项3'),\n    ],\n  ),\n  checkedIds: ['option1'],\n  maxChecked: 2,\n  onChangeGroup: (checkedIds) {\n    print('当前选中的选项: $checkedIds');\n  },\n  onOverloadChecked: () {\n    print('已达到最大可选数量');\n  },\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何实现全选/反选功能？",
        "answer": "可以使用 YLCheckboxGroupController 来实现全选/反选功能。例如：\n\n```dart\nfinal controller = YLCheckboxGroupController();\n\n// 全选\ncontroller.toggleAll(true);\n\n// 反选\ncontroller.reverseAll();\n```"
      },
      {
        "question": "如何限制最大可选数量？",
        "answer": "在 YLCheckboxGroup 中设置 maxChecked 属性，并提供 onOverloadChecked 回调来处理超出最大可选数量的情况。"
      }
    ],
    "source_path": null,
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_check_box_page.dart",
    "methods": []
  },
  {
    "id": "SearchCommonWidget",
    "name": "SearchCommonWidget 通用搜索组件",
    "category": "输入组件",
    "maintainer": "zhuxiaoan1",
    "stability": "稳定",
    "description": "SearchCommonWidget 是一个功能丰富的通用搜索组件，支持扫码、延时防抖、清除、占位提示、聚焦控制等能力，适用于关键字输入、单号查询、表单搜索等多种业务场景。支持自定义样式、扫码能力、适配多终端，是WMS等高频搜索业务的推荐输入控件。",
    "preview": "../assets/images/searchcommonwidget_preview.png",
    "scenarios": [
      "WMS系统单号、高频搜索",
      "订单、发货、商品、车辆等业务实时搜索",
      "移动端扫码录入与文本输入混合",
      "需要防抖、延时触发的搜索表单",
      "可定制样式和交互的通用搜索输入"
    ],
    "import_code": null,
    "basic_usage": "SearchCommonWidget(\n  searchTextController: TextEditingController(),\n  searchTextFocusNode: FocusNode(),\n  hintText: '请输入搜索内容',\n  onChanged: (value) {\n    print('输入内容: $value');\n  },\n  onSubmitted: (value) {\n    print('提交搜索: $value');\n  },\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "搜索+扫码+清除",
        "code": "final controller = TextEditingController();\nfinal focusNode = FocusNode();\n\nSearchCommonWidget(\n  searchTextController: controller,\n  searchTextFocusNode: focusNode,\n  hintText: '请输入/扫描单号',\n  isShowScanButton: true,\n  onClean: () => controller.clear(),\n  onSubmitted: (value) => print('提交: $value'),\n)",
        "description": null
      },
      {
        "title": "防抖输入（延时搜索）",
        "code": "SearchCommonWidget(\n  searchTextController: TextEditingController(),\n  searchTextFocusNode: FocusNode(),\n  delaySearchTime: Duration(seconds: 1),\n  onDelayChanged: (val) => print('防抖: $val'),\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何实现自动聚焦到搜索框？",
        "answer": "创建 FocusNode 后，可在页面构建后调用 `FocusScope.of(context).requestFocus(focusNode)` 自动聚焦。"
      },
      {
        "question": "如何处理扫码结果/集成扫码业务？",
        "answer": "设置 isShowScanButton: true，并实现 scanBeforeCallBack/onSubmitted，扫码会自动填充并触发 onSubmitted。"
      },
      {
        "question": "如何实现防抖/延时搜索？",
        "answer": "配置 delaySearchTime 和 onDelayChanged，输入变化后延迟触发请求，适合高频搜索场景。"
      },
      {
        "question": "如何定制样式（圆角/颜色/高度等）？",
        "answer": "通过 margin、borderRadius、textFieldMargin、searchHeight 等参数自定义外观和尺寸。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/input/search_common_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_search_page.dart",
    "methods": []
  },
  {
    "id": "TopRoundedCornersInputWidget",
    "name": "TopRoundedCornersInputWidget 顶部圆角输入框",
    "category": "输入组件",
    "maintainer": "zhuxiaoan1",
    "stability": "稳定",
    "description": "TopRoundedCornersInputWidget 是一个通用顶部圆角输入框组件，支持自定义标题、关闭按钮、扫码按钮、输入确认等功能。适用于顶部弹窗、搜索表单、扫码录入等业务场景，兼容多终端，支持响应式布局。",
    "preview": "../assets/images/toproundedcornersinputwidget_preview.png",
    "scenarios": [
      "搜索表单顶部弹窗（如商品、车辆、订单等搜索）",
      "需要扫码录入的场景（如运单录入、商品扫码）",
      "需要带关闭按钮的弹窗输入框",
      "自定义输入内容确认的业务表单"
    ],
    "import_code": null,
    "basic_usage": "TopRoundedCornersInputWidget(\n  title: '搜索商品',\n  hintText: '请输入商品名称',\n  searchTextController: TextEditingController(),\n  onSubmitted: (value) {\n    // 处理提交\n  },\n  callback: () {},\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "搜索商品弹窗",
        "code": "TopRoundedCornersInputWidget(\n  title: '搜索商品',\n  hintText: '请输入商品名称',\n  searchTextController: TextEditingController(),\n  onSubmitted: (value) {\n    print('提交: $value');\n  },\n)",
        "description": null
      },
      {
        "title": "运单录入（带扫码+关闭）",
        "code": "TopRoundedCornersInputWidget(\n  title: '运单录入',\n  hintText: '请输入/扫描运单号',\n  searchTextController: TextEditingController(),\n  isShowScanButton: true,\n  closeBack: () {\n    print('关闭');\n  },\n  onSubmitted: (val) {\n    print('录入: $val');\n  },\n)",
        "description": null
      },
      {
        "title": "顶部大圆角+自定义键盘类型",
        "code": "TopRoundedCornersInputWidget(\n  title: '手机号输入',\n  hintText: '请输入手机号',\n  topRadius: 32,\n  searchTextController: TextEditingController(),\n  keyboardType: TextInputType.phone,\n  onSubmitted: (val) {},\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何实现扫码后内容自动填充？",
        "answer": "设置 isShowScanButton: true，扫码结果会自动填充到输入框，并触发 onSubmitted 回调。"
      },
      {
        "question": "如何自定义输入框圆角和整体高度？",
        "answer": "通过 topRadius 控制顶部圆角，输入区高度可通过外部容器自定义。"
      },
      {
        "question": "如何让输入框自动聚焦？",
        "answer": "传递 searchTextFocusNode，并在构建后调用 requestFocus。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/input/common_input_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_input_page.dart",
    "methods": []
  },
  {
    "id": "YLCalendarBottomSheet",
    "name": "YLCalendarBottomSheet 日历底部弹出选择器",
    "category": "输入组件",
    "maintainer": "chenxuheng3",
    "stability": "稳定",
    "description": "YLCalendarBottomSheet是一个灵活的日历底部弹出选择器组件。它提供了多种日期选择模式，并使用底部弹出的方式展示，提高了用户交互的便利性和直观性。",
    "preview": "../assets/images/ylcalendarbottomsheet_preview.png",
    "scenarios": [
      "需要用户选择单个日期的场景，如预约日期、再投日期选择等",
      "需要用户选择具体日期和时间的场景，如再投日期时间、物流配送时间设置等",
      "需要用户选择日期区间的场景，如安排、周期设置等"
    ],
    "import_code": null,
    "basic_usage": "await showSingleCalendarBottomSheet(\n  context: context,\n  onConfirm: (date) {\n    print('选择的日期: ${date.toString()}');\n  },\n);",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "单日期选择示例",
        "code": "await showSingleCalendarBottomSheet(\n  context: context,\n  selectedDate: DateTime.now(),\n  firstDay: DateTime(2024, 1, 1),\n  lastDay: DateTime(2024, 12, 31),\n  selectedColor: Colors.blue,\n  todayColor: Colors.red,\n  onConfirm: (date) {\n    print('选择的日期: ${date.toString()}');\n  },\n);",
        "description": null
      },
      {
        "title": "日期时间选择示例",
        "code": "final initialDateTime = DateTimeResult(\n  date: DateTime.now(),\n  time: TimeOfDay.now(),\n);\nawait showDateTimePickerBottomSheet(\n  context: context,\n  selectedDateTime: initialDateTime,\n  selectedColor: Colors.green,\n  todayColor: Colors.orange,\n  onConfirm: (result) {\n    print('选择的日期时间: ${result.toString()}');\n  },\n);",
        "description": null
      },
      {
        "title": "日期区间选择示例",
        "code": "final initialRange = DateRangeResult(\n  startDate: DateTime.now(),\n  endDate: DateTime.now().add(const Duration(days: 7)),\n);\nawait showRangeCalendarBottomSheet(\n  context: context,\n  selectedRange: initialRange,\n  firstDay: DateTime(2024, 1, 1),\n  lastDay: DateTime(2024, 12, 31),\n  selectedColor: Colors.purple,\n  todayColor: Colors.teal,\n  onConfirm: (result) {\n    print('选择的日期区间: ${result.toString()}');\n  },\n);",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何自定义日历的样式？",
        "answer": "目前组件提供了有限的样式自定义选项，主要包括选中日期的颜色（selectedColor）和当天日期的颜色（todayColor）。如果需要更多的样式自定义，可能需要修改底层的日历组件实现。"
      },
      {
        "question": "日期选择范围是否可以动态设置？",
        "answer": "是的，可以通过 firstDay 和 lastDay 参数来动态设置可选择的日期范围。这两个参数在所有三种模式（单日期、日期时间、日期区间）中都可用。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/input/yl_calendar_bottom_sheet.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_calendar_page.dart",
    "methods": []
  },
  {
    "id": "YLRadio",
    "name": "YLRadio 单选框",
    "category": "输入组件",
    "maintainer": "chenxuheng3",
    "stability": "稳定",
    "description": "YLRadio 是一个单选框组件，继承自 YLCheckbox。它提供了多种样式选择，支持自定义内容和图标，可以单独使用或在 YLRadioGroup 中组合使用。",
    "preview": "../assets/images/ylradio_preview.png",
    "scenarios": [
      "需要用户在多个选项中选择一个时",
      "选项数量较少（通常少于5个）时"
    ],
    "import_code": null,
    "basic_usage": "YLRadio(\n  id: 'option1',\n  title: '选项1',\n  radioStyle: YLRadioStyle.circle,\n)",
    "properties": [],
    "events": [
      {
        "name": "onRadioGroupChange",
        "description": "选中项变化时触发",
        "params": "String?"
      }
    ],
    "examples": [
      {
        "title": "基础单选框",
        "code": "YLRadio(\n  id: 'option1',\n  title: '选项1',\n  radioStyle: YLRadioStyle.circle,\n)",
        "description": null
      },
      {
        "title": "单选框组",
        "code": "YLRadioGroup(\n  direction: Axis.vertical,\n  directionalYlRadios: [\n    YLRadio(id: 'option1', title: '选项1'),\n    YLRadio(id: 'option2', title: '选项2'),\n    YLRadio(id: 'option3', title: '选项3'),\n  ],\n  selectId: 'option1',\n  onRadioGroupChange: (selectedId) {\n    print('Selected option: $selectedId');\n  },\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何在 YLRadioGroup 中设置默认选中项？",
        "answer": "可以通过 `selectId` 参数设置默认选中项的 id。"
      },
      {
        "question": "如何自定义单选框的样式？",
        "answer": "可以通过 `radioStyle` 参数设置不同的样式，如圆形、方形、对号或镂空圆点样式。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/radio/yl_radio.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_radio_page.dart",
    "methods": []
  },
  {
    "id": "YLDialogUtil",
    "name": "YLDialogUtil 对话框工具类",
    "category": "反馈组件",
    "maintainer": "chenxuheng3",
    "stability": "稳定",
    "description": "YLDialogUtil 是一个通用的对话框工具类，专为物流行业 WMS 场景设计，提供了一系列静态方法来显示单按钮、双按钮、三按钮弹窗样式，支持自定义内容和按钮，操作便捷，风格统一，极大提升了业务开发效率。",
    "preview": "../assets/images/yldialogutil_preview.png",
    "scenarios": [
      "操作确认提示（如发货、确认、删除）",
      "信息展示与自定义内容弹窗",
      "错误警告及反馈",
      "复杂内容交互或数据确认"
    ],
    "import_code": null,
    "basic_usage": "YLDialogUtil.showOneButton(\n  title: Text('发货提示'),\n  content: '确认发货该批次货物吗？',\n  onPressed: () => print('用户确认了发货操作'),\n);",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "单按钮对话框",
        "code": "YLDialogUtil.showOneButton(\n  title: Text('库存盘点确认'),\n  content: Column(\n    crossAxisAlignment: CrossAxisAlignment.start,\n    children: [\n      Text('本次盘点结果如下：'),\n      Text('实际库存：1000件'),\n      Text('系统库存：980件'),\n      Text('是否确认提交盘点结果？'),\n    ],\n  ),\n  buttonText: '确认提交',\n  onPressed: () {\n    print('用户确认了库存盘点结果');\n  },\n  textColor: Colours.textBlue1,\n);",
        "description": null
      },
      {
        "title": "双按钮对话框",
        "code": "YLDialogUtil.showTwoButtons(\n  title: Text('紧急订单处理'),\n  content: Column(\n    crossAxisAlignment: CrossAxisAlignment.start,\n    children: [\n      Text('收到新的紧急订单：WO12345678'),\n      Text('客户：ACME有限公司'),\n      Text('是否立即处理该订单？'),\n    ],\n  ),\n  leftButtonText: '稍后处理',\n  rightButtonText: '立即处理',\n  onLeftPressed: () {\n    print('用户选择稍后处理订单');\n  },\n  onRightPressed: () {\n    print('用户选择立即处理订单');\n  },\n  leftTextColor: Colours.textGray,\n  rightTextColor: Colours.textGreen,\n);",
        "description": null
      },
      {
        "title": "三按钮对话框",
        "code": "YLDialogUtil.showThreeButtons(\n  title: Text('异常订单处理'),\n  content: Column(\n    crossAxisAlignment: CrossAxisAlignment.start,\n    children: [\n      Text('订单号：WO12345678'),\n      Text('异常原因：库存不足'),\n      Text('请选择处理方式：'),\n    ],\n  ),\n  button1Text: '补货后发货',\n  button2Text: '部分发货',\n  button3Text: '取消订单',\n  onButton1Pressed: () {\n    print('用户选择了补货后发货');\n  },\n  onButton2Pressed: () {\n    print('用户选择了部分发货');\n  },\n  onButton3Pressed: () {\n    print('用户选择了取消订单');\n  },\n  button1TextColor: Colours.textGreen,\n  button2TextColor: Colours.textOrange,\n  button3TextColor: Colours.textRed1,\n);",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何自定义对话框的内容样式？",
        "answer": "content 参数支持任意 Widget，可灵活组合布局。例如：\n\n```dart\nYLDialogUtil.showOneButton(\n  title: Text('自定义内容'),\n  content: Column(\n    children: [\n      Text('这是一个自定义内容'),\n      Icon(Icons.info),\n    ],\n  ),\n  onPressed: () {\n    print('用户确认了操作');\n  },\n);\n```"
      },
      {
        "question": "如何控制对话框是否可以通过点击外部关闭？",
        "answer": "willPop 参数为 false 时，不可通过点击外部或返回键关闭，默认为 false。"
      },
      {
        "question": "如何自定义内容的高度和对齐？",
        "answer": "通过 minHeight、maxHeight 控制内容区高度，textAlign 控制内容文本对齐（仅 String 有效）。"
      },
      {
        "question": "如何自定义按钮颜色？",
        "answer": "通过 textColor / leftTextColor / rightTextColor / button1TextColor 等参数自定义。\n\n---"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/dialog/yl_dialog.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/feedbackcomponent/yl_dialog_page.dart",
    "methods": []
  },
  {
    "id": "SmartRefresher",
    "name": "SmartRefresher 智能刷新组件",
    "category": "反馈组件",
    "maintainer": "Jpeng",
    "stability": "稳定",
    "description": "SmartRefresher 是一个功能强大的刷新组件，提供了下拉刷新和上拉加载更多的功能。它支持自定义头部和底部指示器，可以灵活地适应各种刷新和加载需求。该组件特别适用于列表、网格等需要刷新或加载更多数据的场景。",
    "preview": null,
    "scenarios": [
      "列表下拉刷新",
      "列表上拉加载更多",
      "网格视图的刷新和加载",
      "自定义刷新动画",
      "需要二级刷新的场景"
    ],
    "import_code": "```dart\nimport 'package:pull_to_refresh/pull_to_refresh.dart';\n```",
    "basic_usage": "RefreshController _refreshController = RefreshController(initialRefresh: false);\n\nSmartRefresher(\n  controller: _refreshController,\n  onRefresh: _onRefresh,\n  onLoading: _onLoading,\n  child: ListView.builder(\n    itemBuilder: (c, i) => Card(child: Center(child: Text('Item $i'))),\n    itemExtent: 100.0,\n    itemCount: 20,\n  ),\n)\n\nvoid _onRefresh() async {\n  // 模拟网络请求\n  await Future.delayed(Duration(milliseconds: 1000));\n  _refreshController.refreshCompleted();\n}\n\nvoid _onLoading() async {\n  // 模拟加载更多\n  await Future.delayed(Duration(milliseconds: 1000));\n  _refreshController.loadComplete();\n}",
    "properties": [
      {
        "name": "controller",
        "description": "刷新控制器",
        "type": "RefreshController",
        "default": null,
        "required": true
      },
      {
        "name": "child",
        "description": "子组件",
        "type": "Widget?",
        "default": "null",
        "required": false
      },
      {
        "name": "header",
        "description": "自定义头部指示器",
        "type": "Widget?",
        "default": "平台默认指示器",
        "required": false
      },
      {
        "name": "footer",
        "description": "自定义底部指示器",
        "type": "Widget?",
        "default": "ClassicFooter",
        "required": false
      },
      {
        "name": "enablePullDown",
        "description": "是否启用下拉刷新",
        "type": "bool",
        "default": "true",
        "required": false
      },
      {
        "name": "enablePullUp",
        "description": "是否启用上拉加载",
        "type": "bool",
        "default": "false",
        "required": false
      },
      {
        "name": "onRefresh",
        "description": "刷新回调",
        "type": "VoidCallback?",
        "default": "null",
        "required": false
      },
      {
        "name": "onLoading",
        "description": "加载更多回调",
        "type": "VoidCallback?",
        "default": "null",
        "required": false
      },
      {
        "name": "enableTwoLevel",
        "description": "是否启用二级刷新",
        "type": "bool",
        "default": "false",
        "required": false
      }
    ],
    "events": [
      {
        "name": "onRefresh",
        "description": "刷新触发时的回调",
        "params": "无"
      },
      {
        "name": "onLoading",
        "description": "加载触发时的回调",
        "params": "无"
      },
      {
        "name": "onTwoLevel",
        "description": "二级刷新触发回调",
        "params": "bool isOpen"
      }
    ],
    "examples": [
      {
        "title": "自定义指示器",
        "code": "SmartRefresher(\n  controller: _refreshController,\n  header: WaterDropHeader(),\n  footer: CustomFooter(\n    builder: (BuildContext context, LoadStatus? mode) {\n      Widget body;\n      if (mode == LoadStatus.idle) {\n        body = Text(\"上拉加载\");\n      } else if (mode == LoadStatus.loading) {\n        body = CircularProgressIndicator();\n      } else if (mode == LoadStatus.failed) {\n        body = Text(\"加载失败！点击重试！\");\n      } else if (mode == LoadStatus.canLoading) {\n        body = Text(\"松手,加载更多!\");\n      } else {\n        body = Text(\"没有更多数据了!\");\n      }\n      return Container(\n        height: 55.0,\n        child: Center(child: body),\n      );\n    },\n  ),\n  onRefresh: _onRefresh,\n  onLoading: _onLoading,\n  child: ListView.builder(\n    itemBuilder: (c, i) => Card(child: Center(child: Text('Item $i'))),\n    itemExtent: 100.0,\n    itemCount: 20,\n  ),\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何禁用上拉加载更多？",
        "answer": "将 `enablePullUp` 属性设置为 `false`，或者在加载完所有数据后调用 `_refreshController.loadNoData()`。"
      },
      {
        "question": "如何自定义刷新完成的动画时间？",
        "answer": "可以通过 `RefreshConfiguration` widget 包裹 `SmartRefresher`，并设置 `springDescription` 属性来自定义动画。"
      }
    ],
    "source_path": "https://github.com/peng8350/flutter_pulltorefresh/blob/master/lib/src/smart_refresher.dart",
    "demo_path": "https://github.com/peng8350/flutter_pulltorefresh/tree/master/example/lib/ui",
    "methods": []
  },
  {
    "id": "反馈组件索引",
    "name": "反馈组件索引",
    "category": "",
    "maintainer": null,
    "stability": null,
    "description": "",
    "preview": null,
    "scenarios": [],
    "import_code": null,
    "basic_usage": null,
    "properties": [],
    "events": [],
    "examples": [],
    "faq": [],
    "source_path": null,
    "demo_path": null,
    "methods": []
  },
  {
    "id": "YLToast",
    "name": "YLToast 轻量级提示组件",
    "category": "反馈组件",
    "maintainer": "chenxuheng3",
    "stability": "稳定",
    "description": "YLToast是一个专为物流应用设计的多功能Toast提示组件，提供普通文本Toast、带图标Toast、加载中Toast、依附式Toast、浮动Toast选项，能够高效地展示操作反馈、状态更新和重要信息，增强用户体验和操作效率。",
    "preview": "../assets/images/yltoast_preview.png",
    "scenarios": [
      "在网络加载数据时，使用加载中Toast提示用户等待",
      "操作成功/失败/警告的提示",
      "依附于特定 UI 元素的提示",
      "在用户完成某项操作后，显示提示信息"
    ],
    "import_code": null,
    "basic_usage": "// 显示普通文本 Toast\nYLToast.openToast('操作成功');\n\n// 显示带图标的 Toast\nYLToast.openIconToast(\n  toastType: IconToastType.success,\n  content: '保存成功',\n);\n\n// 显示加载中 Toast\nYLToast.openLoadingToast(content: '加载中...');\n\n// 显示依附式 Toast\nYLToast.openFloatToast(\n  context: context,\n  showContent: '这是一个浮动提示',\n);",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "普通文本提示 Toast",
        "code": "YLToast.openToast('操作成功');",
        "description": null
      },
      {
        "title": "显示带图标的 Toast",
        "code": "YLToast.openIconToast(\n  toastType: IconToastType.success,\n  content: '操作成功',\n  duration: Duration(seconds: 2),\n);",
        "description": null
      },
      {
        "title": "显示加载中 Loading",
        "code": "YLToast.openLoadingToast(content: '正在加载数据...',);\n\n// 在适当的时候关闭 loading\nYLToast.closeLoading();",
        "description": null
      },
      {
        "title": "显示依附式 Toast",
        "code": "Builder(\n  builder: (BuildContext context) {\n    return ElevatedButton(\n      onPressed: () {\n        YLToast.openFloatToast(\n          context: context,\n          showContent: '这是一个浮动提示',\n          config: AttachedFloatToastConfig(\n            durationSeconds: 5,\n            preferDirection: PreferDirection.bottomCenter,\n          ),\n        );\n      },\n      child: Text(\"显示浮动提示\"),\n    );\n  },\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何自定义 Toast 的样式？",
        "answer": "YLToast 提供了一些基本的自定义选项，如图标类型、显示时间等。对于更复杂的自定义需求，可以使用 `openFloatToast` 方法的 `customBuilder` 参数来创建完全自定义的 Toast 内容。"
      },
      {
        "question": "如何确保只有一个 loading Toast 显示？",
        "answer": "使用 `openLoadingToast` 方法时，将 `isCloseAllHistoryLoading` 参数设置为 true，这样会在显示新的 loading Toast 之前关闭所有已存在的 loading Toast。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/toast/yl_toast.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/feedbackcomponent/yl_toast_page.dart",
    "methods": [
      {
        "name": "openToast",
        "description": "显示普通文本 Toast",
        "parameters": [
          "content",
          "context",
          "onClose",
          "align",
          "duration"
        ],
        "return_type": "void"
      },
      {
        "name": "openIconToast",
        "description": "显示带图标的 Toast",
        "parameters": [
          "toastType",
          "content",
          "onClose",
          "align",
          "duration"
        ],
        "return_type": "void"
      },
      {
        "name": "openLoadingToast",
        "description": "显示加载中的 Toast",
        "parameters": [
          "content",
          "onClose",
          "align",
          "isCloseAllHistoryLoading"
        ],
        "return_type": "CancelFunc?"
      },
      {
        "name": "openFloatToast",
        "description": "显示依附式 Toast",
        "parameters": [
          "showContent",
          "context",
          "target",
          "config",
          "customBuilder"
        ],
        "return_type": "CancelFunc"
      },
      {
        "name": "closeLoading",
        "description": "关闭当前显示的 loading Toast",
        "parameters": [
          "-"
        ],
        "return_type": "void"
      },
      {
        "name": "closeAllLoading",
        "description": "关闭所有正在显示的 loading Toast",
        "parameters": [
          "-"
        ],
        "return_type": "void"
      }
    ]
  },
  {
    "id": "YLBackTopButton",
    "name": "YLBackTopButton 返回顶部按钮",
    "category": "导航组件",
    "maintainer": "chenxuheng3",
    "stability": "稳定",
    "description": "YLBackTopButton是一个圆形的浮动按钮组件，当页面滚动超过指定距离时显示，点击后自动平滑滚动到页面顶部。按钮包含一个向上的箭头图标和\"顶部\"文字，可自定义外观和滚动行为，适用于长列表或长页面的快速导航。",
    "preview": "../assets/images/ylbacktopbutton_preview.png",
    "scenarios": [
      "长列表页面（如订单列表、货物清单等）",
      "长内容页面（如详情页、资讯页等）",
      "需要快速返回顶部的滚动视图",
      "管理长列表快速滑到顶部"
    ],
    "import_code": null,
    "basic_usage": "// 创建一个ScrollController\nfinal ScrollController _scrollController = ScrollController();\n\n// 在Scaffold中使用\nScaffold(\n  body: ListView.builder(\n    controller: _scrollController,\n    itemCount: 100,\n    itemBuilder: (context, index) => ListTile(\n      title: Text('运单项 $index'),\n    ),\n  ),\n  floatingActionButton: YLBackTopButton(\n    scrollController: _scrollController,\n  ),\n)",
    "properties": [
      {
        "name": "scrollController",
        "description": "控制滚动视图的ScrollController",
        "type": "ScrollController",
        "default": null,
        "required": true
      },
      {
        "name": "backgroundColor",
        "description": "按钮的背景颜色",
        "type": "Color?",
        "default": "Colours.bgBlack1",
        "required": false
      },
      {
        "name": "iconColor",
        "description": "箭头图标的颜色",
        "type": "Color?",
        "default": "Colors.white",
        "required": false
      },
      {
        "name": "textColor",
        "description": "\"顶部\"文字的颜色",
        "type": "Color?",
        "default": "Colors.white",
        "required": false
      },
      {
        "name": "visibilityThreshold",
        "description": "显示按钮的滚动阈值（像素）",
        "type": "double",
        "default": "100",
        "required": false
      },
      {
        "name": "scrollDuration",
        "description": "滚动到顶部的动画时长",
        "type": "Duration",
        "default": "Duration(milliseconds: 300)",
        "required": false
      },
      {
        "name": "width",
        "description": "按钮的宽度",
        "type": "double",
        "default": "60",
        "required": false
      },
      {
        "name": "height",
        "description": "按钮的高度",
        "type": "double",
        "default": "60",
        "required": false
      }
    ],
    "events": [
      {
        "name": "onPressed",
        "description": "按钮点击时的回调（内部已实现滚动到顶部的功能）",
        "params": "-"
      }
    ],
    "examples": [
      {
        "title": "基础用法",
        "code": "YLBackTopButton(\n  scrollController: _scrollController,\n)",
        "description": null
      },
      {
        "title": "自定义外观",
        "code": "YLBackTopButton(\n  scrollController: _scrollController,\n  backgroundColor: Colors.blue,\n  iconColor: Colors.yellow,\n  textColor: Colors.yellow,\n  width: 70,\n  height: 70,\n)",
        "description": null
      },
      {
        "title": "自定义滚动行为",
        "code": "YLBackTopButton(\n  scrollController: _scrollController,\n  visibilityThreshold: 200, // 滚动200像素后显示按钮\n  scrollDuration: Duration(milliseconds: 500), // 滚动动画持续500毫秒\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "按钮不显示怎么办？",
        "answer": "确保ScrollController已正确关联到滚动视图，并且页面已经滚动超过了visibilityThreshold设置的阈值。"
      },
      {
        "question": "如何在多个滚动视图中使用同一个返回顶部按钮？",
        "answer": "每个滚动视图需要使用独立的ScrollController，并根据当前活跃的滚动视图动态切换YLBackTopButton的scrollController属性。"
      },
      {
        "question": "如何自定义按钮的位置？",
        "answer": "YLBackTopButton本身不控制位置，您可以通过父容器（如Positioned、Align等）来控制按钮在屏幕中的位置。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/tree/main/widget/button/yl_back_top_button.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/tree/main/example/lib/pages/yl_backtop_page.dart",
    "methods": []
  },
  {
    "id": "YLSteps 步骤条",
    "name": "YLSteps 步骤条",
    "category": "导航组件",
    "maintainer": "chenxuheng3",
    "stability": "稳定",
    "description": "YLSteps 是一个用于展示任务进度或引导用户完成某些操作的步骤条组件。支持水平和垂直两种布局方式，可以展示成功和错误状态，并提供简洁模式和只读模式。组件可用于多步骤操作流程的可视化展示，帮助用户了解当前所处的步骤位置和整体流程。",
    "preview": "../assets/images/ylsteps_preview.png",
    "scenarios": [
      "分步操作引导流程",
      "任务完成进度展示",
      "订单处理流程可视化",
      "表单填写步骤指示",
      "业务流程状态展示"
    ],
    "import_code": null,
    "basic_usage": "YlSteps(\n  steps: [\n    YLStepsItemData(\n      title: '步骤一',\n      content: '完成第一步操作',\n    ),\n    YLStepsItemData(\n      title: '步骤二',\n      content: '完成第二步操作',\n    ),\n    YLStepsItemData(\n      title: '步骤三',\n      content: '完成第三步操作',\n    ),\n  ],\n  activeIndex: 1,\n  direction: YlStepsDirection.horizontal,\n)",
    "properties": [
      {
        "name": "steps",
        "description": "步骤条数据列表",
        "type": "List\\<YLStepsItemData\\>",
        "default": null,
        "required": true
      },
      {
        "name": "activeIndex",
        "description": "当前激活的步骤索引",
        "type": "int",
        "default": "0",
        "required": false
      },
      {
        "name": "direction",
        "description": "步骤条布局方向",
        "type": "YlStepsDirection",
        "default": "YlStepsDirection.horizontal",
        "required": false
      },
      {
        "name": "status",
        "description": "步骤条当前状态",
        "type": "YlStepsStatus",
        "default": "YlStepsStatus.success",
        "required": false
      },
      {
        "name": "simple",
        "description": "是否使用简洁模式",
        "type": "bool",
        "default": "false",
        "required": false
      },
      {
        "name": "readOnly",
        "description": "是否为只读模式",
        "type": "bool",
        "default": "false",
        "required": false
      },
      {
        "name": "verticalSelect",
        "description": "垂直布局下是否启用自定义选择",
        "type": "bool",
        "default": "false",
        "required": false
      }
    ],
    "events": [],
    "examples": [
      {
        "title": "水平布局步骤条",
        "code": "YlSteps(\n  steps: [\n    YLStepsItemData(\n      title: '待发货',\n      content: '订单已确认',\n    ),\n    YLStepsItemData(\n      title: '运输中',\n      content: '正在配送',\n    ),\n    YLStepsItemData(\n      title: '已送达',\n      content: '订单已完成',\n    ),\n  ],\n  activeIndex: 1,\n  direction: YlStepsDirection.horizontal,\n)",
        "description": null
      },
      {
        "title": "垂直布局步骤条",
        "code": "YlSteps(\n  steps: [\n    YLStepsItemData(\n      title: '信息填写',\n      content: '完成个人信息填写',\n    ),\n    YLStepsItemData(\n      title: '上传资料',\n      content: '上传相关证明材料',\n    ),\n    YLStepsItemData(\n      title: '提交审核',\n      content: '等待系统审核',\n    ),\n  ],\n  activeIndex: 0,\n  direction: YlStepsDirection.vertical,\n)",
        "description": null
      },
      {
        "title": "错误状态步骤条",
        "code": "YlSteps(\n  steps: [\n    YLStepsItemData(\n      title: '步骤一',\n      content: '已完成',\n    ),\n    YLStepsItemData(\n      title: '步骤二',\n      content: '出现错误',\n    ),\n    YLStepsItemData(\n      title: '步骤三',\n      content: '等待处理',\n    ),\n  ],\n  activeIndex: 1,\n  status: YlStepsStatus.error,\n)",
        "description": null
      },
      {
        "title": "简洁模式步骤条",
        "code": "YlSteps(\n  steps: [\n    YLStepsItemData(title: '步骤一'),\n    YLStepsItemData(title: '步骤二'),\n    YLStepsItemData(title: '步骤三'),\n  ],\n  activeIndex: 1,\n  simple: true,\n)",
        "description": null
      },
      {
        "title": "自定义内容步骤条",
        "code": "YlSteps(\n  steps: [\n    YLStepsItemData(\n      customContent: Container(\n        padding: EdgeInsets.all(8),\n        child: Row(\n          children: [\n            Icon(Icons.check_circle, color: Colors.green),\n            SizedBox(width: 8),\n            Text('自定义步骤一'),\n          ],\n        ),\n      ),\n    ),\n    YLStepsItemData(\n      customContent: Container(\n        padding: EdgeInsets.all(8),\n        child: Row(\n          children: [\n            Icon(Icons.pending, color: Colors.blue),\n            SizedBox(width: 8),\n            Text('自定义步骤二'),\n          ],\n        ),\n      ),\n    ),\n  ],\n  activeIndex: 0,\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何动态更新当前步骤?",
        "answer": "通过更新 activeIndex 属性值可以动态改变当前激活的步骤。"
      },
      {
        "question": "如何自定义步骤图标?",
        "answer": "可以通过 YLStepsItemData 的 successIcon 和 errorIcon 属性自定义成功和错误状态的图标。"
      },
      {
        "question": "垂直布局和水平布局有什么区别?",
        "answer": "水平布局适合步骤较少且屏幕宽度足够的场景，垂直布局适合步骤较多或需要展示更多内容的场景。通过 direction 属性可以切换布局方向。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/setps/yl_steps.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_steps_page.dart",
    "methods": []
  },
  {
    "id": "StepNavigator",
    "name": "StepNavigator 步骤导航组件",
    "category": "导航组件",
    "maintainer": "zhangruixuan.9",
    "stability": "稳定",
    "description": "StepNavigator 是一个灵活的多步骤导航条组件，支持箭头型和时间轴型两种展示模式。可自定义步骤文字、异常提示、颜色样式，支持步骤点击切换、异常/错误状态提示，适合表单、订单处理等多节点流程的可视化进度展示和导航。",
    "preview": "../assets/images/stepnavigator_preview.png",
    "scenarios": [
      "多步骤表单、分步引导流程",
      "订单处理/流转进度展示",
      "任务、审批等业务流程的进度与节点导航"
    ],
    "import_code": null,
    "basic_usage": "StepNavigator(\n  steps: ['步骤一', '步骤二', '步骤三'],\n  currentStep: 1,\n  onStepChanged: (index) {\n    // 处理步骤切换\n  },\n  showExclamations: [false, true, false],\n)",
    "properties": [],
    "events": [
      {
        "name": "onStepChanged",
        "description": "步骤切换时触发",
        "params": "index: 选中的步骤索引"
      }
    ],
    "examples": [
      {
        "title": "动态步骤/异常状态",
        "code": "StepNavigator(\n  steps: ['下单', '派单', '运输', '签收'],\n  currentStep: _currentStep,\n  onStepChanged: (idx) => {},\n  showExclamations: [false, false, false, true],\n)",
        "description": null
      },
      {
        "title": "高级自定义示例",
        "code": "StepNavigator(\n  steps: ['A', 'B', 'C', 'D'],\n  currentStep: 2,\n  onStepChanged: (i) {},\n  showExclamations: [false, false, false, false],\n  mode: StepBarMode.timeline,\n  height: 64,\n  fontSize: 16,\n  activeStepTextColor: Colors.deepPurple,\n  completedStepTextColor: Colors.green,\n  inactiveStepTextColor: Colors.grey[400],\n  space: SizedBox(width: 24),\n  spaceImage: Icon(Icons.double_arrow, size: 18),\n  errorWidget: [\n    SizedBox(),\n    SizedBox(),\n    Icon(Icons.warning, color: Colors.orange, size: 18),\n    SizedBox(),\n  ],\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何动态更新步骤状态?",
        "answer": "通过 SafeSetState 动态更新 currentStep 或 showExclamations 即可。"
      },
      {
        "question": "如何切换显示模式（箭头/时间轴）？",
        "answer": "设置 mode 参数为 StepBarMode.arrow 或 StepBarMode.timeline。"
      },
      {
        "question": "如何自定义文字颜色/间隔/错误图标？",
        "answer": "通过 activeStepTextColor、completedStepTextColor、inactiveStepTextColor、space、spaceImage、errorWidget 参数自定义。\nß"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/setps/step_navigator.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_step_navigator_page.dart",
    "methods": []
  },
  {
    "id": "导航组件索引",
    "name": "导航组件索引",
    "category": "",
    "maintainer": null,
    "stability": null,
    "description": "",
    "preview": null,
    "scenarios": [],
    "import_code": null,
    "basic_usage": null,
    "properties": [],
    "events": [],
    "examples": [],
    "faq": [],
    "source_path": null,
    "demo_path": null,
    "methods": []
  },
  {
    "id": "YLNavBar",
    "name": "YLNavBar 导航栏",
    "category": "导航组件",
    "maintainer": "chenxuneng3",
    "stability": "稳定",
    "description": "YLNavBar 是一个高度可定制的导航栏组件，支持自定义标题、左右操作项、背景色、边框样式等配置。组件实现了 PreferredSizeWidget 接口，可以无缝集成到 Scaffold 的 appBar 属性中。支持自动适配屏幕（包含状态栏高度）、自定义返回按钮行为、添加额外内容区域等功能。",
    "preview": "../assets/images/ylnavbar_preview.png",
    "scenarios": [
      "应用顶部导航栏",
      "需要自定义导航栏样式的场景",
      "需要在导航栏添加多个操作按钮的场景"
    ],
    "import_code": null,
    "basic_usage": "YLNavBar(\n  title: '标题',\n  rightBarItems: [\n    YLNavBarItem(\n      icon: Icons.share,\n      action: () => print('分享'),\n    ),\n  ],\n)",
    "properties": [
      {
        "name": "title",
        "description": "标题文本",
        "type": "String?",
        "default": "null",
        "required": false
      },
      {
        "name": "titleWidget",
        "description": "自定义标题Widget",
        "type": "Widget?",
        "default": "null",
        "required": false
      },
      {
        "name": "titleColor",
        "description": "标题文本颜色",
        "type": "Color?",
        "default": "Colors.white",
        "required": false
      },
      {
        "name": "titleFont",
        "description": "标题字体大小配置",
        "type": "Font?",
        "default": "null",
        "required": false
      },
      {
        "name": "titleFontFamily",
        "description": "标题自定义字体样式",
        "type": "TextStyle?",
        "default": "null",
        "required": false
      },
      {
        "name": "titleFontWeight",
        "description": "标题字体粗细",
        "type": "FontWeight?",
        "default": "FontWeight.w500",
        "required": false
      },
      {
        "name": "centerTitle",
        "description": "标题是否居中显示",
        "type": "bool",
        "default": "true",
        "required": false
      },
      {
        "name": "leftBarItems",
        "description": "左侧操作项列表",
        "type": "List\\<YLNavBarItem\\>?",
        "default": "null",
        "required": false
      },
      {
        "name": "rightBarItems",
        "description": "右侧操作项列表",
        "type": "List\\<YLNavBarItem\\>?",
        "default": "null",
        "required": false
      },
      {
        "name": "opacity",
        "description": "导航栏背景透明度",
        "type": "double",
        "default": "1.0",
        "required": false
      },
      {
        "name": "backgroundColor",
        "description": "导航栏背景颜色",
        "type": "Color?",
        "default": "Color(0xFFf0250f)",
        "required": false
      },
      {
        "name": "padding",
        "description": "内容区域内边距",
        "type": "EdgeInsetsGeometry?",
        "default": "EdgeInsets.symmetric(horizontal: 16.0, vertical: 4.0)",
        "required": false
      },
      {
        "name": "titleMargin",
        "description": "标题左右两侧的边距",
        "type": "double",
        "default": "16.0",
        "required": false
      },
      {
        "name": "height",
        "description": "导航栏高度",
        "type": "double",
        "default": "44.0",
        "required": false
      },
      {
        "name": "screenAdaptation",
        "description": "是否自动适配屏幕",
        "type": "bool",
        "default": "true",
        "required": false
      },
      {
        "name": "useDefaultBack",
        "description": "是否显示默认的返回按钮",
        "type": "bool",
        "default": "true",
        "required": false
      },
      {
        "name": "onBack",
        "description": "返回按钮点击回调",
        "type": "VoidCallback?",
        "default": "null",
        "required": false
      },
      {
        "name": "useBorderStyle",
        "description": "是否使用边框样式",
        "type": "bool",
        "default": "false",
        "required": false
      },
      {
        "name": "border",
        "description": "边框样式配置",
        "type": "YLNavBarItemBorder?",
        "default": "null",
        "required": false
      },
      {
        "name": "belowTitleWidget",
        "description": "导航栏下方的额外Widget",
        "type": "Widget?",
        "default": "null",
        "required": false
      },
      {
        "name": "boxShadow",
        "description": "底部阴影配置",
        "type": "List\\<BoxShadow\\>?",
        "default": "null",
        "required": false
      },
      {
        "name": "flexibleSpace",
        "description": "固定背景Widget",
        "type": "Widget?",
        "default": "null",
        "required": false
      }
    ],
    "events": [
      {
        "name": "onBack",
        "description": "返回按钮点击事件",
        "params": "无"
      }
    ],
    "examples": [
      {
        "title": "基础用法 - 带标题和返回按钮的导航栏",
        "code": "YLNavBar(\n  title: '标题',\n)",
        "description": null
      },
      {
        "title": "自定义左右操作项",
        "code": "YLNavBar(\n  title: '自定义操作项',\n  leftBarItems: [\n    YLNavBarItem(\n      icon: Icons.arrow_back,\n      action: () => Navigator.pop(context),\n    ),\n  ],\n  rightBarItems: [\n    YLNavBarItem(\n      icon: Icons.share,\n      action: () => print('分享'),\n    ),\n    YLNavBarItem(\n      icon: Icons.more_vert,\n      action: () => print('更多'),\n    ),\n  ],\n)",
        "description": null
      },
      {
        "title": "自定义样式",
        "code": "YLNavBar(\n  title: '自定义样式',\n  titleColor: Colors.black,\n  backgroundColor: Colors.white,\n  useBorderStyle: true,\n  border: YLNavBarItemBorder(\n    color: Colors.grey[300],\n    radius: 20,\n  ),\n  boxShadow: [\n    BoxShadow(\n      color: Colors.black12,\n      blurRadius: 4,\n    ),\n  ],\n)",
        "description": null
      },
      {
        "title": "带有额外内容的导航栏",
        "code": "YLNavBar(\n  title: '带有额外内容',\n  belowTitleWidget: Container(\n    padding: EdgeInsets.all(8),\n    child: Text('这是额外的内容'),\n  ),\n)",
        "description": null
      },
      {
        "title": "完全自定义标题区域",
        "code": "YLNavBar(\n  titleWidget: Row(\n    mainAxisAlignment: MainAxisAlignment.center,\n    children: [\n      Icon(Icons.location_on),\n      Text('当前位置'),\n    ],\n  ),\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何禁用默认的返回按钮?",
        "answer": "设置 `useDefaultBack: false` 可以禁用默认的返回按钮。"
      },
      {
        "question": "如何自定义返回按钮行为?",
        "answer": "可以通过 `onBack` 回调函数自定义返回按钮的行为。"
      },
      {
        "question": "如何让导航栏透明?",
        "answer": "设置 `backgroundColor: Colors.transparent` 和 `opacity: 0.0` 可以实现完全透明的导航栏。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/nav/yl_nav_bar.dart",
    "demo_path": null,
    "methods": []
  },
  {
    "id": "CountDownButton 倒计时按钮",
    "name": "CountDownButton 倒计时按钮",
    "category": "基础组件",
    "maintainer": "- **稳定性**: 稳定",
    "stability": "稳定",
    "description": "CountDownButton 是一个带倒计时功能的按钮组件，点击后会开始倒计时并显示剩余秒数，倒计时结束后恢复初始状态。常用于验证码发送、短信验证等需要限制频繁操作的场景，提供用户友好的等待提示。",
    "preview": "../assets/images/countdownbutton_preview.png",
    "scenarios": [
      "短信验证码发送按钮",
      "需要限制频繁操作的提交按钮",
      "需要用户等待一段时间后再次操作的场景",
      "任何需要倒计时功能的交互按钮"
    ],
    "import_code": "```dart\nimport 'package:flutter_widget/flutter_widget.dart' show CountDownButton;\n```",
    "basic_usage": "CountDownButton(\n  total: 60,\n  onClick: () {\n    // 发送验证码逻辑\n    sendVerificationCode();\n  },\n  onFinish: () {\n    // 倒计时结束后的回调\n    print('倒计时结束，可以重新发送');\n  },\n)",
    "properties": [
      {
        "name": "onClick",
        "description": "点击事件回调",
        "type": "VoidCallback?",
        "default": "null",
        "required": false
      },
      {
        "name": "onFinish",
        "description": "倒计时结束回调",
        "type": "VoidCallback?",
        "default": "null",
        "required": false
      },
      {
        "name": "total",
        "description": "倒计时总时长（秒）",
        "type": "int",
        "default": "5",
        "required": false
      },
      {
        "name": "borderRadius",
        "description": "边框圆角",
        "type": "double",
        "default": "20",
        "required": false
      },
      {
        "name": "content",
        "description": "默认显示内容",
        "type": "String",
        "default": "\"\"",
        "required": false
      },
      {
        "name": "textStyle",
        "description": "文字样式",
        "type": "TextStyle?",
        "default": "TextStyle(color: Colors.white, fontSize: 14)",
        "required": false
      },
      {
        "name": "backgroundColor",
        "description": "背景色",
        "type": "Color?",
        "default": "null",
        "required": false
      }
    ],
    "events": [
      {
        "name": "onClick",
        "description": "点击按钮时触发",
        "params": "无"
      },
      {
        "name": "onFinish",
        "description": "倒计时结束时触发",
        "params": "无"
      }
    ],
    "examples": [
      {
        "title": "基础用法",
        "code": "CountDownButton(\n  total: 60,\n  onClick: () {\n    // 发送验证码逻辑\n  },\n)",
        "description": null
      },
      {
        "title": "自定义样式",
        "code": "CountDownButton(\n  total: 30,\n  borderRadius: 10,\n  textStyle: TextStyle(\n    color: Colors.white,\n    fontSize: 16,\n    fontWeight: FontWeight.bold,\n  ),\n  backgroundColor: Colors.blue,\n  onClick: () {\n    // 点击事件处理\n  },\n  onFinish: () {\n    // 倒计时结束处理\n  },\n)",
        "description": null
      },
      {
        "title": "在表单中使用",
        "code": "Row(\n  children: [\n    Expanded(\n      child: TextField(\n        decoration: InputDecoration(\n          hintText: '请输入验证码',\n        ),\n      ),\n    ),\n    SizedBox(width: 10),\n    SizedBox(\n      width: 100,\n      height: 40,\n      child: CountDownButton(\n        total: 60,\n        backgroundColor: Colors.blue,\n        onClick: () {\n          // 发送验证码\n        },\n      ),\n    ),\n  ],\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何在倒计时过程中更新按钮文本？",
        "answer": "当前组件在倒计时过程中会自动显示剩余秒数，如需自定义显示文本，可以修改源码中的 CountdownTimer 的 widgetBuilder 部分。"
      },
      {
        "question": "如何在页面重建后保持倒计时状态？",
        "answer": "组件内部会记录已计时时间，但如果页面完全重建，倒计时状态会丢失。可以考虑在父组件中维护倒计时状态，或使用状态管理工具保存倒计时状态。"
      }
    ],
    "source_path": "../../lib/widget/button/count_down_button.dart",
    "demo_path": "../../example/lib/pages/yl_button_page.dart",
    "methods": []
  },
  {
    "id": "YLOptionGroupSelectWidget",
    "name": "YLOptionGroupSelectWidget 通用分组选项选择组件",
    "category": "业务组件",
    "maintainer": "zhangruixuan.9",
    "stability": "稳定",
    "description": "YLOptionGroupSelectWidget 是一个支持文本、图片、单选、多选、历史记录、Tip、加载、空、错误等多种能力的分组选项选择组件。适合多级表单、批量配置、历史快捷选、复杂业务选项等场景，支持动画展开/收起、灵活扩展和高度自定义。",
    "preview": "../assets/images/yloptiongroupselectwidget_preview.png",
    "scenarios": [
      "WMS/OMS 等业务表单多级选项选择",
      "车辆、商品、组织、部门等批量配置与快速选",
      "需要展示历史选项、加载/空/错误占位的复杂业务交互",
      "支持多选、图片选项、Tip和动态内容的表单/弹窗"
    ],
    "import_code": null,
    "basic_usage": "YLOptionGroupSelectWidget(\n  title: '选择车型',\n  package: 'flutter_widget',\n  selectText: '小型货车',\n  selectTextItems: [\n    VehicleParamDto(dictName: '小型货车'),\n    VehicleParamDto(dictName: '大型货车'),\n    VehicleParamDto(dictName: '冷链车'),\n  ],\n  callback: () {},\n  onTapItemCallback: (item) {\n    print('点击: ${item.dictName}');\n  },\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础单选文本",
        "code": "YLOptionGroupSelectWidget(\n  title: '选择品牌',\n  package: 'flutter_widget',\n  selectText: '品牌A',\n  selectTextItems: [\n    VehicleParamDto(dictName: '品牌A'),\n    VehicleParamDto(dictName: '品牌B'),\n  ],\n  callback: () {},\n)",
        "description": null
      },
      {
        "title": "多选+历史+Tip+更多",
        "code": "YLOptionGroupSelectWidget(\n  title: '多选+历史',\n  package: 'flutter_widget',\n  canSelect: true,\n  selectTextItems: [\n    VehicleParamDto(dictName: '选项A', isSelected: true),\n    VehicleParamDto(dictName: '选项B'),\n  ],\n  historyItems: ['历史A', '历史B'],\n  onTapHistoryCallback: (item) {},\n  needTipIcon: true,\n  tipCallback: () {},\n  showMore: true,\n  callback: () {},\n)",
        "description": null
      },
      {
        "title": "图片选项+错误/加载/空数据占位",
        "code": "YLOptionGroupSelectWidget(\n  title: '图片选择',\n  package: 'flutter_widget',\n  selectImageItems: ['assets/pic1.png', 'assets/pic2.png'],\n  loading: false,\n  errorText: '',\n  emptyText: '暂无图片',\n  callback: () {},\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何支持多选和单选切换？",
        "answer": "通过 canSelect 参数控制，true 为多选，false 为单选。"
      },
      {
        "question": "如何展示历史记录和Tip？",
        "answer": "分别通过 historyItems 和 needTipIcon/tipCallback 参数配置即可。"
      },
      {
        "question": "如何控制加载、空数据、错误占位？",
        "answer": "通过 loading/emptyText/errorText 参数，组件内部自动切换显示。"
      },
      {
        "question": "如何自定义动画展开/收起？",
        "answer": "通过 enableAnimation、expand 参数灵活控制动画和默认展开状态。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/yl_option_group_select_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_option_group_select_example_page.dart",
    "methods": []
  },
  {
    "id": "PlateInputWithKeyboard",
    "name": "PlateInputWithKeyboard 车牌输入框+键盘",
    "category": "业务组件",
    "maintainer": "zhangruixuan.9",
    "stability": "稳定",
    "description": "PlateInputWithKeyboard 是一个集成车牌输入框与软键盘的复用组件，支持车牌内容与类型管理、键盘类型切换、最大长度控制、输入和完成回调，样式高度可定制。适用于需要车牌输入与交互的业务场景，如物流车牌录入、车牌绑定弹窗、车辆管理等。",
    "preview": "../assets/images/plateinputwithkeyboard_preview1.jpg",
    "scenarios": [
      "任何需要用户输入车牌号的表单、弹窗或页面。",
      "例如：车辆登记、车辆绑定、车牌信息录入、车辆管理等。",
      "需要车牌输入与专用键盘一体化交互的场景，提升输入效率与准确性，避免系统键盘带来的误输入。",
      "支持多种车牌类型（内地/港澳）切换及最大长度限制，对输入内容和格式有严格要求的场合。",
      "需要实时获取车牌输入内容并联动业务逻辑的页面，如输入过程中校验、提交等。",
      "交互样式、UI布局需自定义、适配不同业务需求的车牌输入区域。"
    ],
    "import_code": null,
    "basic_usage": "PlateInputWithKeyboard(\n  showInputTypeSwitcher: true,\n  showKeyboard: true,\n  onChanged: (plate, type) {\n    print('内容: \\$plate, 类型: \\$type');\n  },\n  onFinish: (plate, type) {\n    print('完成: \\$plate, 类型: \\$type');\n  },\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础用法",
        "code": "PlateInputWithKeyboard(\n  showInputTypeSwitcher: true,\n  showKeyboard: true,\n  onChanged: (plate, type) {},\n  onFinish: (plate, type) {},\n)",
        "description": null
      },
      {
        "title": "业务联动示例",
        "code": "PlateInputWithKeyboard(\n  showInputTypeSwitcher: true,\n  showKeyboard: true,\n  onChanged: (number, type) {\n    // 实时同步外部状态\n    viewModel.updatePlate(number, type);\n  },\n  onFinish: (number, type) {\n    // 提交业务/关闭弹窗\n  },\n)",
        "description": null
      },
      {
        "title": "定制按钮与UI",
        "code": "PlateInputWithKeyboard(\n  showInputTypeSwitcher: true,\n  showKeyboard: true,\n  keyButtonStyle: ButtonStyle(\n    backgroundColor: MaterialStateProperty.all(Colors.green),\n  ),\n  sureButtonDecoration: BoxDecoration(color: Colors.red),\n  cleanButtonDecoration: BoxDecoration(color: Colors.blue),\n  switcherStyle: PlateInputSwitcherStyle.row,\n  onChanged: (plate, type) {},\n  onFinish: (plate, type) {},\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "支持几种车牌类型切换？",
        "answer": "支持内地（provincesType）、字母（alphabetsType）、港澳（hkMType）等多种类型，类型可通过UI或方法切换。"
      },
      {
        "question": "最大输入长度如何调整？",
        "answer": "通过 vehicleNumberMaxLength 参数设置，不同业务可自定义 7 位、8 位等。"
      },
      {
        "question": "如何实现内容和类型的双向绑定？",
        "answer": "组件每次输入或类型切换都会通过 onChanged 回调同步最新状态，外部可用同一套状态管理。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/keyboard/plate_input_with_keyboard.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_keyboard_page.dart",
    "methods": []
  },
  {
    "id": "PartialWebViewPage",
    "name": "PartialWebViewPage 业务WebView页面（可拓展）",
    "category": "业务组件",
    "maintainer": "zhangruixuan.9",
    "stability": "稳定",
    "description": "PartialWebViewPage 是一个支持网页链接和富文本 HTML 加载的业务 WebView 组件，基于 JpatWebviewPage 二次封装。具备自定义标题、AppBar 显隐、URL 编码、JS 通道注入等功能，适用于通用 H5 页面、富文本内容展示与业务流程 Web 交互等场景，支持 Flutter 与 H5 的深度交互扩展。",
    "preview": "../assets/images/partialwebviewpage_preview.png",
    "scenarios": [
      "通用 H5 页面、外链、营销活动加载与交互",
      "富文本内容展示（如协议、公告、图文详情等）",
      "Flutter 与 Web/H5 页面消息通信和交互",
      "业务流程 Web 交互（如支付、表单、JS 通道回调）"
    ],
    "import_code": null,
    "basic_usage": "PartialWebViewPage(\n  title: \"H5页面\",\n  url: \"https://m.jd.com\",\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础网页加载",
        "code": "PartialWebViewPage(\n  title: \"京东首页\",\n  url: \"https://m.jd.com\",\n)",
        "description": null
      },
      {
        "title": "富文本内容展示",
        "code": "PartialWebViewPage(\n  title: \"协议内容\",\n  htmlContent: \"<h2>协议正文</h2><p>这里是富文本内容...</p>\",\n)",
        "description": null
      },
      {
        "title": "JS 通道交互",
        "code": "class DemoJsChannel extends BaseWebChannel {\n  DemoJsChannel({required BuildContext context}) : super(context: context);\n  @override\n  String methodName() => \"demoJs\";\n  @override\n  void handler(Map params) {\n    print(\"收到H5消息: \\$params\");\n  }\n}\n\nPartialWebViewPage(\n  title: \"H5通信\",\n  url: \"https://yourh5.com\",\n  javaScriptChannelModels: [\n    DemoJsChannel(context: context)\n  ],\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "url 和 htmlContent 能否同时传递？优先级如何？",
        "answer": "两者二选一，如都传则优先加载 url。"
      },
      {
        "question": "如何注入多个 JS 通道？Flutter 如何接收 H5 消息？",
        "answer": "实现多个 BaseWebChannel 子类，全部放入 javaScriptChannelModels 列表。H5 端使用 window.[methodName].postMessage() 即可与 Flutter 通信。"
      },
      {
        "question": "如何自定义顶部导航栏或完全隐藏 AppBar？",
        "answer": "通过 showAppBar 控制顶部 AppBar 是否显示。业务可自定义导航栏实现更复杂的导航功能。"
      },
      {
        "question": "支持哪些 WebView 高级能力？如刷新/拦截/进度条等？",
        "answer": "PartialWebViewPage 聚焦通用场景，进阶能力可通过 WebViewController 或 JpatWebviewPage 扩展实现。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/webview/partial_webview_page.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_webview_page.dart",
    "methods": []
  },
  {
    "id": "ScanManualInputWidget",
    "name": "ScanManualInputWidget 扫码手动输入组件",
    "category": "业务组件",
    "maintainer": "chenxunheng3",
    "stability": "稳定",
    "description": "ScanManualInputWidget 是一个支持扫码和手动输入两种方式录入数据的通用组件。主要用于物流、仓储等业务场景中的快递单号、运单号等数据的高效录入，支持扫码优先、手动补录、白炽灯控制、输入校验、启用/禁用切换等功能。适合移动端便捷数据采集，提升业务效率。",
    "preview": "../assets/images/scanmanualinputwidget_preview.png",
    "scenarios": [
      "快递单号、运单号、包裹号等物流唯一标识的快速录入",
      "现场拣货、发货、入库等扫码+手动输入混合场景",
      "需要扫码/手输切换、白炽灯补光、校验控制的表单",
      "物流、仓储、零售等高频扫码业务"
    ],
    "import_code": null,
    "basic_usage": "ScanManualInputController controller = ScanManualInputController();\n\nScanManualInputWidget(\n  onResultBack: (String code) {\n    print('扫码/输入结果: $code');\n  },\n  onResultCheck: (String code) {\n    return code.length > 5;\n  },\n  manualInputTitle: '手动录入单号',\n  manualInputHintText: '请输入单号',\n  keyboardType: TextInputType.number,\n  errorTipText: '单号格式不正确',\n  scanManualInputController: controller,\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础扫码+手动输入",
        "code": "ScanManualInputWidget(\n  onResultBack: (code) => print('录入: $code'),\n)",
        "description": null
      },
      {
        "title": "启用/禁用扫码",
        "code": "final controller = ScanManualInputController();\ncontroller.close(); // 禁用扫码\ncontroller.open();  // 启用扫码",
        "description": null
      },
      {
        "title": "校验&错误提示",
        "code": "ScanManualInputWidget(\n  onResultBack: (code) => print('扫码: $code'),\n  onResultCheck: (code) => code.startsWith('JD'),\n  errorTipText: '单号需以JD开头',\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何切换扫码和手动输入？扫码与手动输入能否同时用？",
        "answer": "组件支持扫码优先，点击“手动输入”可弹出输入框补录，扫码和手动输入互斥但可无缝切换。"
      },
      {
        "question": "如何在网络请求等场景下临时禁用扫码？",
        "answer": "使用 ScanManualInputController 的 close/open 方法控制扫码功能启用状态。"
      },
      {
        "question": "如何自定义校验逻辑和错误提示？",
        "answer": "通过 onResultCheck 实现自定义校验逻辑，通过 errorTipText 定制校验失败提示。"
      },
      {
        "question": "是否支持扫码时自动震动/提示？",
        "answer": "支持。扫码成功自动震动，错误时可配合 showErrorTip 显示提示。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/input/scan_manual_input_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/businesscomponent/scanmanualinput/yl_scan_manual_input_page.dart",
    "methods": []
  },
  {
    "id": "ImageUploadNewWidget",
    "name": "ImageUploadNewWidget 新一代图片上传组件",
    "category": "业务组件",
    "maintainer": "zhangwanyu12",
    "stability": "稳定",
    "description": "ImageUploadNewWidget 是一个图片上传组件，专为 WMS 业务场景设计。它支持水印添加、必传数量限制、自定义行列布局、回调等功能, 该组件提供了灵活的配置选项，可以满足各种复杂的图片上传需求。",
    "preview": "../assets/images/imageuploadnewwidget_preview.png",
    "scenarios": [
      "WMS 业务单据图片上传",
      "货物多角度拍照上传",
      "需要水印的图片采集",
      "有必传数量要求的图片上传",
      "自定义布局的图片展示"
    ],
    "import_code": null,
    "basic_usage": "ImageUploadNewWidget\n(\ntitle: '上传凭证',\nmaxPickSize: 5,\nrequiredCount: 2,\nimageCountPerRow: 4,\ncanSelectAlbum: true,\ndataCallback: (list) {\n// 处理图片回调\nprint('上传的图片数量: ${list?.length}');\n},\n)",
    "properties": [
      {
        "name": "title",
        "description": "组件标题",
        "type": "String",
        "default": "'上传图片'",
        "required": false
      },
      {
        "name": "padding",
        "description": "图片区域内边距",
        "type": "EdgeInsets",
        "default": "EdgeInsets.zero",
        "required": false
      },
      {
        "name": "itemSpacing",
        "description": "图片项间距",
        "type": "double",
        "default": "24",
        "required": false
      },
      {
        "name": "needWaterMark",
        "description": "是否需要添加水印",
        "type": "bool",
        "default": "false",
        "required": false
      },
      {
        "name": "waterMarkText",
        "description": "水印内容",
        "type": "String",
        "default": "''",
        "required": false
      },
      {
        "name": "maxPickSize",
        "description": "最大图片数量",
        "type": "int",
        "default": "3",
        "required": false
      },
      {
        "name": "requiredCount",
        "description": "必填数量",
        "type": "int",
        "default": "1",
        "required": false
      },
      {
        "name": "imageCountPerRow",
        "description": "一行显示的图片数量",
        "type": "int",
        "default": "3",
        "required": false
      },
      {
        "name": "canSelectAlbum",
        "description": "能否从相册选择",
        "type": "bool",
        "default": "false",
        "required": false
      },
      {
        "name": "imageList",
        "description": "图片列表初始值",
        "type": "List?",
        "default": "null",
        "required": false
      },
      {
        "name": "dataCallback",
        "description": "图片数据回调",
        "type": "ImagePathDataCallback?",
        "default": "null",
        "required": false
      },
      {
        "name": "style",
        "description": "标题字体样式",
        "type": "TextStyle?",
        "default": "null",
        "required": false
      },
      {
        "name": "margin",
        "description": "外部边距",
        "type": "EdgeInsets?",
        "default": "null",
        "required": false
      },
      {
        "name": "editable",
        "description": "是否可编辑",
        "type": "bool",
        "default": "true",
        "required": false
      }
    ],
    "events": [
      {
        "name": "dataCallback",
        "description": "图片数据回调",
        "params": "List<ImageBean>?"
      }
    ],
    "examples": [
      {
        "title": "基本使用",
        "code": "ImageUploadNewWidget\n(\ntitle: '上传货物照片',\nmaxPickSize: 6,\nrequiredCount: 3,\nimageCountPerRow: 3,\ncanSelectAlbum: true,\nneedWaterMark: true,\nwaterMarkText: '京东物流',\ndataCallback: (list) {\nif (list != null) {\nfor (var image in list) {\nprint('图片URL: ${image.url}');\n}\n}\n},\n)",
        "description": null
      },
      {
        "title": "自定义样式",
        "code": "ImageUploadNewWidget\n(\ntitle: '上传单据',\nstyle: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\nmargin: EdgeInsets.all(16),\npadding: EdgeInsets.all(8),\nitemSpacing: 16,\nmaxPickSize: 4,\nimageCountPerRow: 2,\ndataCallback: (list) {\n// 处理图片回调\n},\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何限制上传图片的数量？",
        "answer": "可以通过设置 `maxPickSize` 参数来限制最大上传图片数量，同时 `requiredCount` 参数可以设置必须上传的最小图片数量。"
      },
      {
        "question": "如何在上传的图片上添加水印？",
        "answer": "将 `needWaterMark` 参数设置为 true，并通过 `waterMarkText` 参数指定水印内容即可。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/image/image_upload_new_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_image_page.dart",
    "methods": []
  },
  {
    "id": "KeyboardAdapter",
    "name": "KeyboardAdapter 键盘适配器",
    "category": "业务组件",
    "maintainer": "wangzhonghao13",
    "stability": "稳定",
    "description": "KeyboardAdapter 是一个通用的键盘自适应和输入焦点滚动适配器组件。可自动调整页面底部 padding 防止键盘遮挡，支持自动滚动聚焦输入框、动画过渡、padding 灵活定制。适用于表单输入弹窗、批量录入、移动端输入体验优化等场景，无需手动处理键盘遮挡问题。",
    "preview": "../assets/images/keyboardadapter_preview.png",
    "scenarios": [
      "表单输入弹窗、底部弹出输入",
      "多输入框批量录入、可滚动表单",
      "聊天、评论等输入框随键盘自动上移",
      "需要自适应键盘高度并自动滚动聚焦的场景"
    ],
    "import_code": null,
    "basic_usage": "KeyboardAdapter(\n  child: Column(\n    children: [\n      TextField(),\n      SizedBox(height: 16),\n      TextField(),\n    ],\n  ),\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "横向滚动表单适配",
        "code": "KeyboardAdapter(\n  autoScroll: true,\n  child: SingleChildScrollView(\n    child: Column(\n      children: [\n        for (int i = 0; i < 5; i++)\n          Padding(\n            padding: const EdgeInsets.all(8.0),\n            child: TextField(),\n          ),\n      ],\n    ),\n  ),\n)",
        "description": null
      },
      {
        "title": "嵌套在弹窗中防止遮挡",
        "code": "showModalBottomSheet(\n  context: context,\n  isScrollControlled: true,\n  builder: (context) {\n    return KeyboardAdapter(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: TextField(),\n      ),\n    );\n  },\n);",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "autoScroll 有什么用？什么时候开启？",
        "answer": "autoScroll 设为 true 时，聚焦输入框会自动滚动内容区，确保输入框不会被键盘遮挡，适合可滚动的表单录入界面。"
      },
      {
        "question": "child 必须是什么类型？可以嵌套哪些内容？",
        "answer": "支持任意 Widget。若 child 非 ScrollView 且 autoScroll=true，会自动包裹 SingleChildScrollView。"
      },
      {
        "question": "多层嵌套/复杂弹窗能用吗？",
        "answer": "可以。建议 KeyboardAdapter 作为输入区域的顶层包裹，保证键盘弹出时所有内容能自适应。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/keyboard/keyboard_adapter.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/keyboard/edit_text_list_page.dart",
    "methods": []
  },
  {
    "id": "CascadeSelectWidget",
    "name": "CascadeSelectWidget 级联选择器组件",
    "category": "业务组件",
    "maintainer": "zhuxiaoan1",
    "stability": "稳定",
    "description": "CascadeSelectWidget 是一个支持多层级异步数据加载、路径回显、面包屑导航的级联选择器控件。广泛应用于地址选择、组织结构、区域划分等需要多级联动的业务场景。支持手动/异步加载每一层数据、动态导航、路径回显与编辑，适配复杂选择流程。",
    "preview": "../assets/images/cascadeselectwidget_preview.png",
    "scenarios": [
      "地址选择（省/市/区）",
      "组织结构、部门/人员多级选择",
      "仓库/库区/货架等多层级分区管理",
      "区域、品类、项目等无限级联动选择"
    ],
    "import_code": null,
    "basic_usage": "CascadeSelectWidget(\n  height: 300,\n  onLoadData: (level, parentId) async {\n    if (level == 0) {\n      return [\n        CascadeSelectItem(id: 1, name: '北京市'),\n        CascadeSelectItem(id: 2, name: '上海市'),\n      ];\n    } else if (level == 1) {\n      return [\n        CascadeSelectItem(id: 11, name: '朝阳区'),\n        CascadeSelectItem(id: 12, name: '海淀区'),\n      ];\n    }\n    return [];\n  },\n  onPathChanged: (selectedPath) {\n    print('已选择: ${selectedPath.map((e) => e.name).join('/')}');\n  },\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础用法",
        "code": "CascadeSelectWidget(\n  height: 300,\n  onLoadData: (level, parentId) async {\n    // 异步加载每一级选项\n  },\n  onPathChanged: (path) {},\n)",
        "description": null
      },
      {
        "title": "编辑/详情回显",
        "code": "CascadeSelectWidget(\n  initialSelectedIds: [省id, 市id, 区id],\n  onLoadData: (level, parentId) async {\n    // ...\n  },\n)",
        "description": null
      },
      {
        "title": "无限级联",
        "code": "CascadeSelectWidget(\n  onLoadData: (level, parentId) async {\n    // 动态从服务端加载\n  },\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何实现省市区/多级联动的动态加载？",
        "answer": "通过 onLoadData 回调，每一级数据都可异步获取（本地或接口），根据level和parentId返回对应选项。"
      },
      {
        "question": "如何进行初始路径回显（编辑场景）？",
        "answer": "传 initialSelectedIds: [id1, id2, ...]，组件会自动级联定位并高亮对应路径。"
      },
      {
        "question": "支持无限级、异步、同步数据吗？",
        "answer": "支持。onLoadData 既可本地同步返回，也可异步请求服务端数据，层级数量不限。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/cascade/cascade_select_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_cascade_page.dart",
    "methods": []
  },
  {
    "id": "ContactGridWidget",
    "name": "ContactGridWidget 联系人网格组件",
    "category": "业务组件",
    "maintainer": "zhangwanyu12",
    "stability": "稳定",
    "description": "ContactGridWidget 是一个支持每行展示数量自定义、自动换行、点击拨号和自定义回调的联系人网格组件。适用于WMS系统联系人分布、物流配送、仓库人员等多行多列联系人展示场景，便于批量管理和交互。",
    "preview": "../assets/images/contactgridwidget_preview.png",
    "scenarios": [
      "WMS系统联系人列表批量展示",
      "物流配送联系人快速拨号",
      "仓库员工/管理员联系方式展示",
      "需要网格、多行多列、点击拨号的联系人界面"
    ],
    "import_code": null,
    "basic_usage": "ContactGridWidget(\n  items: [\n    ContactInfoParams(name: \"张三\", phoneNumber: \"12345678901\"),\n    ContactInfoParams(name: \"李四\", phoneNumber: \"09876543210\"),\n  ],\n  crossAxisCount: 3,\n  onItemPressed: (index, item) {\n    print('点击第$index个: ${item.name}');\n  },\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础联系人网格",
        "code": "ContactGridWidget(\n  items: [\n    ContactInfoParams(name: \"王五\", phoneNumber: \"12345678900\"),\n    ContactInfoParams(name: \"赵六\", phoneNumber: \"18888888888\"),\n  ],\n  onItemPressed: (index, item) {\n    print('点击: ${item.name}');\n  },\n)",
        "description": null
      },
      {
        "title": "自定义列数与样式",
        "code": "ContactGridWidget(\n  items: myContacts,\n  crossAxisCount: 5,\n  textStyle: TextStyle(fontSize: 15, color: Colors.green),\n  childAspectRatio: 2.5,\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何实现点击自动拨号？",
        "answer": "只需为联系人数据添加 phoneNumber 字段，点击联系人时组件会自动调用 CommonChannel.callPhoneChannel 进行拨号。"
      },
      {
        "question": "如何自适应列数、支持不同数量数据展示？",
        "answer": "设置 autoSizeCrossAxisCount: true，组件会根据实际数据量调整每行展示个数。"
      },
      {
        "question": "如何自定义联系人显示样式？",
        "answer": "通过 textStyle 参数自定义字体颜色、大小、粗细等。"
      },
      {
        "question": "如何只展示文本不拨号？",
        "answer": "不传 phoneNumber 字段或传空，点击仅触发 onItemPressed 回调，不拨号。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/contact/contact_grid_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_contact_page.dart",
    "methods": []
  },
  {
    "id": "业务组件索引",
    "name": "业务组件索引",
    "category": "",
    "maintainer": null,
    "stability": null,
    "description": "",
    "preview": null,
    "scenarios": [],
    "import_code": null,
    "basic_usage": null,
    "properties": [],
    "events": [],
    "examples": [],
    "faq": [],
    "source_path": null,
    "demo_path": null,
    "methods": []
  },
  {
    "id": "PlateKeyboard",
    "name": "PlateKeyboard 车牌专用键盘",
    "category": "业务组件",
    "maintainer": "zhangruixuan.9",
    "stability": "稳定",
    "description": "PlateKeyboard 是一个专为车牌输入场景设计的自定义键盘组件，支持省份、字母、港澳多种输入模式，样式灵活可配，支持自定义按钮样式与回调。适用于物流、运输等领域的车牌号录入、车牌绑定等业务，具备良好的用户体验和业务适配性。",
    "preview": "../assets/images/platekeyboard_preview.png",
    "scenarios": [
      "任何需要输入车牌号的页面或表单。",
      "例如：车辆登记、车牌绑定、车辆信息录入、停车/出入场车牌录入等。",
      "需要对车牌输入规范、格式有强校验要求的场景。",
      "如：只允许输入合法的省份简称、字母、数字、港澳特殊字符等，防止用户输入非法字符。",
      "移动端、触屏端等不适合使用系统软键盘的场合，通过自定义专用键盘提升车牌输入效率和准确率。",
      "表单或弹窗中需要定制车牌输入体验、按钮样式或与业务逻辑深度集成的场景。"
    ],
    "import_code": null,
    "basic_usage": "PlateKeyboard(\n  context,\n  provincesType,\n  (content) {\n    print('输入内容：$content');\n  },\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "基础用法",
        "code": "PlateKeyboard(\n  context,\n  provincesType,\n  (text) => print('输入：$text'),\n)",
        "description": null
      },
      {
        "title": "动态切换车牌类型",
        "code": "final keyboard = PlateKeyboard(context, provincesType, (val) {});\n// 切换为字母模式\nkeyboard.setInputType(alphabetsType);\n// 获取当前类型\nfinal type = keyboard.getType();",
        "description": null
      },
      {
        "title": "自定义操作按钮高度和样式",
        "code": "PlateKeyboard(\n  context,\n  hkMType,\n  (val) {},\n  operationButtonHeight: 60,\n  sureButtonDecoration: BoxDecoration(color: Colors.blue),\n  cleanButtonDecoration: BoxDecoration(color: Colors.orange),\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何动态切换键盘类型（省份/字母/港澳等）？",
        "answer": "可通过调用组件实例的 setInputType(type) 方法，在业务逻辑中自由切换输入模式。"
      },
      {
        "question": "如何自适应不同屏幕宽度和高度？",
        "answer": "组件内部基于屏幕宽度和适配工具自动布局，无需手动调整。"
      },
      {
        "question": "如何自定义按钮样式与颜色？",
        "answer": "通过传递 keyButtonStyle、sureButtonDecoration、cleanButtonDecoration 等参数，分别定制普通、确定、清空按钮的样式。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/keyboard/keyboard_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_keyboard_page.dart",
    "methods": []
  },
  {
    "id": "ContentSelectWidget",
    "name": "ContentSelectWidget 内容选择组件",
    "category": "业务组件",
    "maintainer": "zhangwanyu12",
    "stability": "稳定",
    "description": "ContentSelectWidget 是一个支持标题、网格布局、多项自定义、点击回调的内容批量选择组件。适用于WMS等业务属性、分类、参数批量选择场景，支持自定义每行项目数、样式、颜色与回调，兼容移动端和桌面端。",
    "preview": "../assets/images/contentselectwidget_preview.png",
    "scenarios": [
      "WMS/OMS等业务参数、属性、类型选择",
      "商品、车辆、仓库等网格批量选择",
      "多标签/多选项弹窗、表单批量选择",
      "需要自定义行数、颜色、点击交互的场景"
    ],
    "import_code": null,
    "basic_usage": "ContentSelectWidget(\n  title: '请选择类型',\n  items: ['冷链', '普货', '大件'],\n  itemsPerRow: 3,\n  onItemTap: (value, index) {\n    print('点击: $value, 索引: $index');\n  },\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "标题+自定义样式",
        "code": "ContentSelectWidget(\n  title: '选择类型',\n  items: ['A', 'B', 'C'],\n  itemBackgroundColor: Colors.blue,\n  itemTextColor: Colors.white,\n  borderRadius: 10,\n  onItemTap: (val, idx) {},\n)",
        "description": null
      },
      {
        "title": "多行多列选项",
        "code": "ContentSelectWidget(\n  title: '选择分类',\n  items: ['A', 'B', 'C', 'D', 'E', 'F'],\n  itemsPerRow: 4,\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "如何自定义每行展示数量与横纵间距？",
        "answer": "通过 itemsPerRow（每行数量）、itemChildAspectRatio、GridView.builder 的 mainAxisSpacing/crossAxisSpacing 参数可灵活控制。"
      },
      {
        "question": "items 支持动态更新吗？",
        "answer": "支持。items 参数可传任意 List<String>，可通过 setState 触发重建。"
      },
      {
        "question": "如何自定义item点击回调？",
        "answer": "通过 onItemTap 实现，回调参数为内容和索引。"
      },
      {
        "question": "可以只用作展示，不支持点击吗？",
        "answer": "可以。不传 onItemTap 即为只读展示。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/item/content_select_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_Item_page.dart",
    "methods": []
  },
  {
    "id": "NetPicturePresentationWidget",
    "name": "NetPicturePresentationWidget 网络图片聚合展示组件",
    "category": "业务组件",
    "maintainer": "zhangwanyu12",
    "stability": "稳定",
    "description": "NetPicturePresentationWidget 是一款用于网络图片横向聚合展示组件。支持设置最大展示图片数量，超出部分自动聚合为“+X”，点击图片后可进入大图预览并支持左右滑动切换。",
    "preview": "../assets/images/netpicturepresentationwidget_preview.png",
    "scenarios": [
      "出入库单图片批量展示",
      "运输环节异常凭证图片列表",
      "多网络图片展示"
    ],
    "import_code": null,
    "basic_usage": "NetPicturePresentationWidget(\n  [\n    'http://example.com/img1.jpg',\n    'http://example.com/img2.jpg',\n    'http://example.com/img3.jpg',\n  ],\n  maxShowCount: 4,\n)",
    "properties": [],
    "events": [],
    "examples": [
      {
        "title": "场景1：普通展示",
        "code": "NetPicturePresentationWidget(\n  [\n    'https://img.jd.com/a.jpg',\n    'https://img.jd.com/b.jpg',\n    'https://img.jd.com/c.jpg',\n  ],\n)",
        "description": null
      },
      {
        "title": "场景2：图片数量超出聚合",
        "code": "NetPicturePresentationWidget(\n  [\n    'https://img.jd.com/1.jpg',\n    'https://img.jd.com/2.jpg',\n    'https://img.jd.com/3.jpg',\n    'https://img.jd.com/4.jpg',\n    'https://img.jd.com/5.jpg',\n  ],\n  maxShowCount: 3,\n)",
        "description": null
      },
      {
        "title": "场景3：自定义聚合数量",
        "code": "NetPicturePresentationWidget(\n  [\n    'https://img.jd.com/11.jpg',\n    'https://img.jd.com/12.jpg',\n    'https://img.jd.com/13.jpg',\n    'https://img.jd.com/14.jpg',\n    'https://img.jd.com/15.jpg',\n    'https://img.jd.com/16.jpg',\n  ],\n  maxShowCount: 2,\n)",
        "description": null
      }
    ],
    "faq": [
      {
        "question": "图片加载不出来怎么办？",
        "answer": "组件内置默认占位图片，若图片异常会自动显示占位图，无需额外处理。"
      },
      {
        "question": "+X 聚合逻辑是怎样的？",
        "answer": "当图片数量超过 maxShowCount 时，最后一个图片位置会聚合显示剩余数量，点击后可预览全部图片。"
      },
      {
        "question": "支持本地图片或视频吗？",
        "answer": "当前仅支持 http/https 网络图片。可通过业务扩展支持更多类型。"
      }
    ],
    "source_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/lib/widget/image/net_picture_presentation_widget.dart",
    "demo_path": "http://xingyun.jd.com/codingRoot/Jpat-Flutter-UI/flutter_widget/blob/main/example/lib/pages/yl_image_page.dart",
    "methods": []
  }
]