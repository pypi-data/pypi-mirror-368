# PyTest Configuration for {{ project_name }}
# Generated by TestAPIX on {{ timestamp }}
# This file configures pytest behavior for the project

[pytest]
# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Asyncio support
asyncio_mode = auto

# Output options
addopts =
    # Verbose output
    -v

    # Show local variables on failure
    -l

    # Strict markers (fail on unknown marks)
    --strict-markers

    # Coverage report (requires pytest-cov)
    # Note: Update --cov to point to your source code directory if you have one
    # --cov=src
    # --cov-report=term-missing:skip-covered
    # --cov-report=html:reports/coverage

    # HTML test report (requires pytest-html)
    # Uncomment the lines below after installing pytest-html
    # --html=reports/test_report.html
    # --self-contained-html

    # Show slowest tests
    --durations=10

    {% if template == "advanced" or template == "microservices" %}
    # Performance benchmarking (for advanced templates)
    --benchmark-skip
    {% endif %}

# Test markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    functional: marks tests as functional tests
    security: marks tests as security tests
    performance: marks tests as performance tests
    destructive: marks tests that modify data (use carefully in production)
    {% if template == "microservices" %}
    contract: marks tests as contract tests
    service: marks tests for specific microservices
    {% endif %}

# Coverage settings
[coverage:run]
source = tests
omit = tests/fixtures/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.

# Minimum coverage threshold
fail_under = 80
