"""
PyTest Configuration for TestAPIX Tests

Generated by TestAPIX on {{ timestamp }}

This file is automatically loaded by pytest and provides session-wide
configuration and fixtures. It's the perfect place for fixtures that
need to be available across all test modules.
"""

import pytest
import asyncio
from pathlib import Path

# Add project root to Python path for imports
import sys
sys.path.insert(0, str(Path(__file__).parent.parent))

# Import fixtures from our fixtures module to make them available
from tests.fixtures import *  # noqa: F401, F403


# Configure pytest-asyncio
pytest_plugins = ['pytest_asyncio']


@pytest.fixture(scope="session")
def event_loop():
    """
    Create an event loop for the test session.

    This ensures all async tests share the same event loop,
    which is important for fixtures that need to persist across tests.
    """
    loop = asyncio.new_event_loop()
    yield loop
    loop.close()


def pytest_configure(config):
    """
    Configure pytest with custom markers.

    This allows us to categorize tests and run specific subsets.
    """
    config.addinivalue_line(
        "markers", "slow: marks tests as slow (deselect with '-m \"not slow\"')"
    )
    config.addinivalue_line(
        "markers", "integration: marks tests as integration tests"
    )
    config.addinivalue_line(
        "markers", "unit: marks tests as unit tests"
    )
    config.addinivalue_line(
        "markers", "functional: marks tests as functional tests"
    )
    config.addinivalue_line(
        "markers", "contract: marks tests as contract tests"
    )
    config.addinivalue_line(
        "markers", "security: marks tests as security tests"
    )
    config.addinivalue_line(
        "markers", "performance: marks tests as performance tests"
    )


def pytest_collection_modifyitems(config, items):
    """
    Automatically add markers based on test location.

    This helps organize tests without manual marking.
    """
    for item in items:
        # Add markers based on test file location
        if "functional" in str(item.fspath):
            item.add_marker(pytest.mark.functional)
        elif "security" in str(item.fspath):
            item.add_marker(pytest.mark.security)
        elif "performance" in str(item.fspath):
            item.add_marker(pytest.mark.performance)
        elif "contract" in str(item.fspath):
            item.add_marker(pytest.mark.contract)
