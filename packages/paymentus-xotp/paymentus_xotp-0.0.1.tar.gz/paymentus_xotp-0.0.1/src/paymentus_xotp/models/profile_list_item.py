# coding: utf-8

"""
    XOTP Integration Gateway (IG) REST API

     # Introduction Paymentus REST API exposes payment, profile and account data to authenticated users through a widely accepted REST technology. REST APIs are based on representation state transfer (REST) technology, an architectural style and approach to communications often used in web services development. REST technology is generally preferred to SOAP technology because REST leverages less bandwidth, making it more suitable for internet usage. A RESTful API explicitly takes advantage for HTTP methodologies defined by the RFC 2616 protocol. It uses GET to retrieve a resource, PUT to change the state or update a resource, which can be an object, file or block, POST to create the resource and DELETE to remove it.  Paymentus REST API acts as a wrapper around Paymentus XOTP API and maps HTTP GET, PUT, POST and DELETE verbs to corresponding endpoints of the XOTP API.  Paymentus API's use Bearer authentication.To authenticate you will:  - Click on Authorize button above and provide the Request secret, jwt token will generated and will be persisted for all requests. 

    The version of the OpenAPI document: v3
    Contact: apiteam@paymentus.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from paymentus_xotp.models.credit_card_expiry_date import CreditCardExpiryDate
from paymentus_xotp.models.payment_method_type_enum import PaymentMethodTypeEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProfileListItem(BaseModel):
    """
    Schema: ProfileListItem
    """ # noqa: E501
    token: StrictStr = Field(description="Property: token")
    type: PaymentMethodTypeEnum
    account_number: StrictStr = Field(description="Property: account-number", alias="account-number")
    card_holder_name: StrictStr = Field(description="Property: card-holder-name", alias="card-holder-name")
    credit_card_expiry_date: Optional[CreditCardExpiryDate] = Field(default=None, alias="credit-card-expiry-date")
    active: Optional[StrictBool] = Field(default=None, description="Property: active")
    zip: Optional[StrictStr] = Field(default=None, description="Property: zip")
    default: Optional[StrictBool] = Field(default=None, description="Property: default")
    profile_description: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=256)]] = Field(default=None, description="Property: profile-description", alias="profile-description")
    bank_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=64)]] = Field(default=None, description="Bank name of where the direct deposit is from", alias="bank-name")
    used_for_autopay: Optional[StrictBool] = Field(default=None, description="True if profile entry is associated with AutoPay schedule", alias="used-for-Autopay")
    used_deferred_payments: Optional[StrictBool] = Field(default=None, description="True if profile entry is associated with future deferred payment", alias="used-deferred-payments")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["token", "type", "account-number", "card-holder-name", "credit-card-expiry-date", "active", "zip", "default", "profile-description", "bank-name", "used-for-Autopay", "used-deferred-payments"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProfileListItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of credit_card_expiry_date
        if self.credit_card_expiry_date:
            _dict['credit-card-expiry-date'] = self.credit_card_expiry_date.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProfileListItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "token": obj.get("token"),
            "type": obj.get("type"),
            "account-number": obj.get("account-number"),
            "card-holder-name": obj.get("card-holder-name"),
            "credit-card-expiry-date": CreditCardExpiryDate.from_dict(obj.get("credit-card-expiry-date")) if obj.get("credit-card-expiry-date") is not None else None,
            "active": obj.get("active"),
            "zip": obj.get("zip"),
            "default": obj.get("default"),
            "profile-description": obj.get("profile-description"),
            "bank-name": obj.get("bank-name"),
            "used-for-Autopay": obj.get("used-for-Autopay"),
            "used-deferred-payments": obj.get("used-deferred-payments")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


