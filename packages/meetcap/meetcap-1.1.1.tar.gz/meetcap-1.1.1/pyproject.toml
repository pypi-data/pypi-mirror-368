[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "meetcap"
dynamic = ["version"]
description = "Offline meeting recorder & summarizer for macOS"
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
authors = [
    { name = "Juan", email = "juan@example.com" }
]
homepage = "https://github.com/juanqui/meetcap"
repository = "https://github.com/juanqui/meetcap"
issues = "https://github.com/juanqui/meetcap/issues"
keywords = ["meeting", "recorder", "transcription", "summarization", "macos"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Capture/Recording",
]

dependencies = [
    "pynput>=1.7.6",
    "rich>=13.7.0",
    "typer>=0.9.0",
    "tomli>=2.0.1; python_version < '3.11'",
    "toml>=0.10.2",
    "urllib3>=2.0.0",
]

[project.scripts]
meetcap = "meetcap.cli:app"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.1",
    "pytest-timeout>=2.2.0",
    "black>=23.12.0",
    "ruff>=0.1.8",
    "mypy>=1.7.1",
    "coverage[toml]>=7.3.2",
    "bump2version>=1.0.0",
]
stt = [
    "faster-whisper>=0.10.0",
]
mlx-stt = [
    "mlx-whisper>=0.1.0",
]
llm = [
    "llama-cpp-python>=0.2.32",
]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.1",
    "pytest-timeout>=2.2.0",
    "black>=23.12.0",
    "ruff>=0.1.8",
    "mypy>=1.7.1",
    "coverage[toml]>=7.3.2",
    "bump2version>=1.0.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=meetcap {args:tests}"
fmt = [
    "ruff format {args:.}",
    "ruff check --fix {args:.}",
]
format = [
    "ruff format {args:.}",
    "ruff check --fix {args:.}",
]
lint = [
    "ruff format --check {args:.}",
    "ruff check {args:.}",
]
record = "python -m meetcap.cli record {args}"
devices = "python -m meetcap.cli devices {args}"
verify = "python -m meetcap.cli verify {args}"

[tool.hatch.version]
path = "meetcap/__init__.py"

[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # bugbear
    "C4",   # comprehensions
    "UP",   # pyupgrade
]
ignore = ["E501"]  # line too long, handled by black

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.coverage.run]
source = ["meetcap"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--cov=meetcap",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=75",
]
