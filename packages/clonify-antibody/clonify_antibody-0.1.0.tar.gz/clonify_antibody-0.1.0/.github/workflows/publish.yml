name: Publish to PyPI on release

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      publish_target:
        description: Where to publish artifacts
        required: true
        type: choice
        options: [none, pypi]
        default: none

permissions:
  contents: read
  # IMPORTANT: this permission is mandatory for trusted publishing
  id-token: write

jobs:
  build-wheels:
    name: Build wheels (${{ matrix.os }} / py${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Build once per platform since the native library is ABI-stable (abi3)
        os: [ubuntu-latest, macos-13, macos-14]
        python-version: ["3.10"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build wheel (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          # Produce a manylinux_2_28-compatible wheel so users without a compiler can install
          manylinux: "manylinux_2_28"
          # Build an abi3 wheel (stable for all Python â‰¥3.10)
          args: --release --out dist

      # Build dedicated arm64 wheel on Apple-silicon runner
      - name: Build wheel (macOS arm64)
        if: matrix.os == 'macos-14'
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          maturin-version: latest
          # Native build already targets arm64; no universal2 slice
          args: --release --out dist

      # Build universal2 wheel on Intel runner (contains both x86_64 + arm64 slices)
      - name: Build wheel (macOS universal2)
        if: matrix.os == 'macos-13'
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          maturin-version: latest
          target: universal2-apple-darwin
          args: --release --out dist

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*.whl
          if-no-files-found: error

  sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build sdist with maturin
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          maturin-version: latest
          command: sdist
          args: --out dist

      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          if-no-files-found: error

  smoke-test:
    name: Smoke test install (${{ matrix.os }} / py${{ matrix.python-version }})
    needs: [build-wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Test wheels on all supported Python versions
        os: [ubuntu-latest, macos-13, macos-14]
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Install wheel from artifacts
        run: |
          python -m pip install -U pip
          python -m pip install --find-links dist --only-binary clonify-antibody clonify-antibody
      - name: Import and CLI smoke test
        run: |
          python - <<'PY'
          import clonify, importlib
          importlib.import_module("clonify._native")
          print("Imported clonify", clonify.__version__)
          PY
          clonify --help

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [build-wheels, sdist, smoke-test]
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Publish to PyPI
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && inputs.publish_target == 'pypi')
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          packages-dir: dist
          verbose: true
          skip-existing: true

      # - name: Publish to TestPyPI
      #   if: github.event_name == 'workflow_dispatch' && inputs.publish_target == 'testpypi'
      #   uses: pypa/gh-action-pypi-publish@v1.12.4
      #   with:
      #     packages-dir: dist
      #     repository-url: https://test.pypi.org/legacy/
      #     verbose: true
      #     skip-existing: true


