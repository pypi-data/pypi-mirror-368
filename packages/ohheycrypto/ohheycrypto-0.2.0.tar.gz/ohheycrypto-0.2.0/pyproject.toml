[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ohheycrypto"
dynamic = ["version"]
authors = [
    {name = "Sean Nieuwoudt", email = "sean@underwulf.com"},
]
description = "A sophisticated cryptocurrency trading bot with advanced technical analysis and risk management"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Topic :: Office/Business :: Financial :: Investment",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
keywords = ["cryptocurrency", "trading", "bot", "binance", "bitcoin", "btc", "technical-analysis", "rsi"]

dependencies = [
    "python-binance>=1.0.19",
    "requests>=2.32.0",
    "numpy>=2.0.0",
    "pydantic>=2.0.0",
    "yachalk>=0.1.5",
    "psutil>=6.0.0",
]

[project.urls]
Homepage = "https://github.com/sn/ohheycrypto"
"Bug Tracker" = "https://github.com/sn/ohheycrypto/issues"
Documentation = "https://github.com/sn/ohheycrypto#readme"
"Source Code" = "https://github.com/sn/ohheycrypto"

[project.scripts]
ohheycrypto = "ohheycrypto.cli:main"

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "black>=24.0.0",
    "flake8>=7.0.0",
    "mypy>=1.0.0",
    "isort>=5.13.0",
    "bandit>=1.7.0",
    "pre-commit>=4.0.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["ohheycrypto*"]
exclude = ["tests*"]

[tool.setuptools.dynamic]
version = {attr = "ohheycrypto.__version__.__version__"}

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["binance.*", "yachalk.*", "numpy.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=. --cov-report=html --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "build/*",
    "dist/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pylint.messages_control]
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0613",  # unused-argument
]

[tool.pylint.format]
max-line-length = 100

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test