[build-system]
requires = ["setuptools", "setuptools-git-versioning"]
build-backend = "setuptools.build_meta"

[project]
name = "busysloths-mlox"
readme = "README.md"
keywords = ["Infrastructure", "Server", "Service", "Dashboard", "Opinionated", "MLOps"]
license = { file = "LICENSE" }
description = "Accelerate your ML journeyâ€”deploy production-ready MLOps in minutes, not months."
requires-python = ">=3.11"
authors = [{ name = "nicococo", email = "contact@mlox.org" }]
classifiers = [
    # How mature is this project? Common values are
    #   1 - Planning
    #   2 - Pre-Alpha 
    #   3 - Alpha
    #   4 - Beta
    #   5 - Production/Stable
    "Development Status :: 3 - Alpha",

    # Indicate who your project is intended for
    "Intended Audience :: Developers",
    "Topic :: Software Development",
    "Topic :: System :: Distributed Computing",
    "Topic :: Internet",
    "Topic :: Database",

    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dynamic = ["version"]
dependencies = [
    "dacite",
    "pyyaml",
    "fabric",
    "cryptography",
    "bcrypt",
    "passlib",
    # cli
    "typer",
]

[project.optional-dependencies]
gcp = [
"pandas",
"gspread",
"pandas-gbq",
"google-cloud-storage",
"google-cloud-bigquery",
"google-cloud-secret-manager",
]
all = [
    # ui
    "streamlit",
    "streamlit-vis-timeline",
    "backports.tarfile",
    "pandas",
    "numpy",
    # gcp
    "gspread",
    "pandas-gbq",
    "google-cloud-storage",
    "google-cloud-bigquery",
    "google-cloud-secret-manager",
    # ml
    "mlflow",
    "mlserver",
    "psutil",
    # telemetry
    "opentelemetry-api",
    "opentelemetry-sdk",
    "opentelemetry-exporter-otlp",
    # connectors
    "redis",
    "influxdb",
    "grpcio",
]
dev = [
    # All packages from the 'all' extra
    "streamlit", "streamlit-vis-timeline", "backports.tarfile", "pandas", "numpy",
    "gspread", "pandas-gbq", "google-cloud-storage", "google-cloud-bigquery", "google-cloud-secret-manager",
    "mlflow", "mlserver", "psutil",
    "opentelemetry-api", "opentelemetry-sdk", "opentelemetry-exporter-otlp",
    "redis", "influxdb", "grpcio",
    # Development-specific tools
    "pytest", "pytest-cov", "pytest-mock", "flake8", "pdoc", "build", "twine", "psycopg2-binary",
]

[project.urls]
"Homepage" = "https://busysloths.github.io/mlox/mlox.html"
"Tracker" = "https://github.com/busysloths/mlox/issues"
"Source" = "https://github.com/busysloths/mlox"
"Examples" = "https://github.com/busysloths/mlox"

[project.scripts]
mlox-start-multipass = "mlox.cli:start_multipass"
mlox-ui = "mlox.cli:start_ui"
mlox = "mlox.cli:main"


[tool.setuptools-git-versioning]
enabled = true
# Use the tag directly for a clean release version (e.g., v0.1.0 -> 0.1.0)
template = "{tag}"
# For development builds after a tag (e.g., v0.1.0 + 2 commits -> 0.1.0.post2)
dev_template = "{tag}.post{ccount}"
# ATTENTION: Dirty builds are no longer accepted in PyPI, so this is commented out.
# For dirty builds (e.g., uncommitted changes after a tag -> 0.1.0.post2.dirty)
# dirty_template = "{tag}.post{ccount}+dirty"

[tool.setuptools]
include-package-data = true
packages = ["mlox"]
