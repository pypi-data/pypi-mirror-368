from .common import *
from enum import Flag

def info(message: str) -> None: ...
def debug(message: str) -> None: ...
def trace(message: str) -> None: ...
def error(message: str) -> None: ...
def warning(message: str) -> None: ...

class ivec2:
    def __init__(self, x:int, y:int) -> None: ...
    ...

class ivec3:
    def __init__(self, x:int, y:int, z:int) -> None: ...
    ...

class ivec4:
    def __init__(self, x:int, y:int, z:int, w:int) -> None: ...
    ...

class vec2:
    def __init__(self, x:float, y:float) -> None: ...
    ...
    
class vec3:
    def __init__(self, x:float, y:float, z:float) -> None: ...
    ...

class vec4:
    def __init__(self, x:float, y:float, z:float, w:float) -> None: ...
    ...

class point3:
    def __init__(self, x:float, y:float, z:float) -> None: ...
    def __init__(self, xyz:vec3) -> None: ...
    ...

class bounds3:
    def __init__(self, pt:point3) -> None: ...
    def __init__(self, min:point3, max:point3) -> None: ...
    ...

class MiniBuffer: ...

class Filesys:
    @staticmethod
    def sync_read_file(): ...
    
    @staticmethod
    def sync_write_file(): ...
    
    @staticmethod
    def get_executable_path() -> str: ...
    
    @staticmethod
    def get_parent_path(path: str) -> str: ...
    
    @staticmethod
    def get_stem(path: str) -> str: ...
    
    @staticmethod
    def get_filename(path: str) -> str: ...
    
    @staticmethod
    def get_absolute_path(path: str) -> str: ...
    
    @staticmethod
    def file_exists(path: str) -> bool: ...
    
    @staticmethod
    def resolve_path(path: str) -> str: ...


class Resource:
    @staticmethod
    def query_runtime_uid() -> int: ...
    
    @staticmethod
    def query_string_uid(string: str) -> int: ...
    
    
class Platform:
    @staticmethod
    def open_file() -> str: ...
    
    @staticmethod
    def save_file() -> str: ...


class Configuration:
    @staticmethod
    def set_macro(key: str, value: str) -> None: ...
    
    @staticmethod
    def set_config_file() -> None: ...
    
    @staticmethod
    def string_property(key: str) -> str: ...
    
    @staticmethod
    def string_array_property(key: str) -> list[str]: ...
    
    @staticmethod
    def on_draw_gui() -> None: ...


class Window:
    def __init__(self, width: int, height: int, title: str) -> None: ...
    
    def is_running(self) -> bool: ...
    
    def fetch_events(self) -> None: ...
    
    def destroy(self) -> None: ...

    def get_width(self) -> int: ...

    def get_height(self) -> int: ...

    def is_iconified(self) -> bool: ...
    
    def is_resized(self) -> bool: ...
    

class rhi:

    class ContextExtensionEnum:
        NONE = ...
        DEBUG_UTILS = ...
        MESH_SHADER = ...
        FRAGMENT_BARYCENTRIC = ...
        SAMPLER_FILTER_MIN_MAX = ...
        RAY_TRACING = ...
        SHADER_NON_SEMANTIC_INFO = ...
        BINDLESS_INDEXING = ...
        ATOMIC_FLOAT = ...
        CONSERVATIVE_RASTERIZATION = ...
        COOPERATIVE_MATRIX = ...
        CUDA_INTEROPERABILITY = ...
        USE_AFTERMATH = ...
    
    class PowerPreferenceEnum:
        LOW_POWER = ...
        HIGH_PERFORMANCE = ...
    
    class Context:
        def __init__(self, window: Window, extensions: int) -> None: ...
        def request_adapter(self, power_preference: rhi.PowerPreferenceEnum) -> rhi.Adapter: ...
        def get_binded_window(self) -> Window: ...
        
    class Adapter:
        def __init__(self, context: 'rhi.Context', extensions: int) -> None: ...
        def request_device(self) -> rhi.Device: ...
        
    class Device:
        def __init__(self, adapter: 'rhi.Adapter', extensions: int) -> None: ...
        def wait_idle(self) -> None: ...
        def from_which_adapter(self) -> rhi.Adapter: ...
        def get_graphics_queue(self) -> rhi.Queue: ...
        def get_compute_queue(self) -> rhi.Queue: ...
        def get_present_queue(self) -> rhi.Queue: ...
        def create_command_encoder(self, cmdBuffer: rhi.CommandBuffer = None) -> rhi.CommandEncoder: ...
        def create_swapchain(self, window: Window) -> rhi.Swapchain: ...
        def create_shader_module(self, code: bytes) -> rhi.ShaderModule: ...
        def create_frame_resources(self, count: int) -> rhi.FrameResources: ...
        def allocate_command_buffer(self) -> rhi.CommandBuffer: ...
        def create_buffer(self, descriptor:rhi.BufferDescriptor) -> rhi.Buffer: ...
        def create_semaphore(self, teimeline: bool = True, export: bool = True) -> rhi.Semaphore: ...
        ...

    class Queue:
        def submit(self, command_buffers: list[rhi.CommandBuffer], 
                   image_available_semaphore: rhi.Semaphore, 
                   render_finished_semaphore: rhi.Semaphore, 
                   fence: rhi.Fence) -> None: ...
        
        def wait_idle(self) -> None: ...
        
    class BufferUsageEnum:
        MAP_READ = 1 << 0
        MAP_WRITE = 1 << 1
        COPY_SRC = 1 << 2
        COPY_DST = 1 << 3
        INDEX = 1 << 4
        VERTEX = 1 << 5
        UNIFORM = 1 << 6
        STORAGE = 1 << 7
        INDIRECT = 1 << 8
        QUERY_RESOLVE = 1 << 9
        SHADER_DEVICE_ADDRESS = 1 << 10
        ACCELERATION_STRUCTURE_STORAGE = 1 << 11
        ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY = 1 << 12
        SHADER_BINDING_TABLE = 1 << 13
        CUDA_ACCESS = 1 << 14
        
    class BufferUsages:
        ...
        
    class BufferShareMode:
        EXCLUSIVE = 0
        SHARED = 1
        
    class MemoryPropertyEnum:
        DEVICE_LOCAL_BIT = 1 << 0
        HOST_VISIBLE_BIT = 1 << 1
        HOST_COHERENT_BIT = 1 << 2
        HOST_CACHED_BIT = 1 << 3
        LAZILY_ALLOCATED_BIT = 1 << 4
        PROTECTED_BIT = 1 << 5
        
    class MemoryPropertys:
        ...

    class Semaphore:
        ...
        
    class ShaderModule:
        ...
    
    class BufferDescriptor:
        ...
        
    class Buffer:
        ...
        
    class DataType:
        Float16 = 0
        Float32 = 1
        Float64 = 2
        UINT8 = 3
        INT8 = 4
        INT16 = 5
        INT32 = 6
        INT64 = 7

    class CUDASemaphore:
        def signal(self, stream: int, timeline_value: int = 0) -> None: ...
        def wait(self, stream: int, timeline_value: int = 0) -> None: ...
        ...
        
    class CUDAExternalBuffer:
        def signal(self, stream: int, timeline_value: int = 0) -> None: ...
        def wait(self, stream: int, timeline_value: int = 0) -> None: ...
        ...
        
    class CUDAContext:
        @staticmethod
        def initialize(device: rhi.Device) -> None: ...
        
        @staticmethod
        def export_to_cuda(buffer: rhi.Buffer) -> rhi.CUDAExternalBuffer: ...
        
        @staticmethod
        def export_to_cuda(semaphore: rhi.Semaphore) -> rhi.CUDASemaphore: ...
        
        @staticmethod
        def to_tensor(
            cudaBuffer: rhi.CUDAExternalBuffer,
            dimensions: list[int],
            dtype: rhi.DataType = rhi.DataType.Float32
        ) -> None: ...
        
    class Swapchain:
        def __init__(self, device: rhi.Device, window: Window) -> None: ...
        
        def present(self) -> None: ...
        
        def resize(self, width: int, height: int) -> None: ...
        
        def destroy(self) -> None: ...

    class FrameResources:
        def get_flight_index(self) -> int: ...
        def get_swapchain_index(self) -> int: ...
        def get_image_available_semaphore(self) -> rhi.Semaphore: ...
        def get_render_finished_semaphore(self) -> rhi.Semaphore: ...
        def get_fence(self) -> rhi.Fence: ...
        def reset(self) -> None: ...
        def frame_start(self) -> None: ...
        def frame_end(self) -> None: ...
        def get_command_buffer(self) -> rhi.CommandBuffer: ...
        ...
        
    class CommandBuffer:
        ...
        
    class AddressMode:
        CLAMP_TO_EDGE = ...
        REPEAT = ...
        MIRROR_REPEAT = ...
        
    class FilterMode:
        NEAREST = ...
        LINEAR = ...
        
    class MipmapFilterMode:
        NEAREST = ...
        LINEAR = ...
        
    class MemoryBarrier:
        ...
        
    class BufferMemoryBarrierDescriptor:
        ...
    
    class TextureMemoryBarrierDescriptor:
        ...
        
    class BarrierDescriptor:
        def __init__(self, 
            src_stages: int, dst_stages: int, dependency_flags: int,
            memory_barriers: list[rhi.MemoryBarrier] = None,
            buffer_barriers: list[rhi.BufferMemoryBarrierDescriptor] = None,
            texture_barriers: list[rhi.TextureMemoryBarrierDescriptor] = None) -> None: ...
        ...
        
    class CommandEncoder:
        def finish(self) -> rhi.CommandBuffer: ...
        def pipeline_barrier(self, desc: rhi.BarrierDescriptor) -> None: ...
        ...

    class Fence:
        ...

    class PipelineStageEnum:
        TOP_OF_PIPE_BIT = ...
        DRAW_INDIRECT_BIT = ...
        VERTEX_INPUT_BIT = ...
        VERTEX_SHADER_BIT = ...
        TESSELLATION_CONTROL_SHADER_BIT = ...
        TESSELLATION_EVALUATION_SHADER_BIT = ...
        GEOMETRY_SHADER_BIT = ...
        FRAGMENT_SHADER_BIT = ...
        EARLY_FRAGMENT_TESTS_BIT = ...
        LATE_FRAGMENT_TESTS_BIT = ...
        COLOR_ATTACHMENT_OUTPUT_BIT = ...
        COMPUTE_SHADER_BIT = ...
        TRANSFER_BIT = ...
        BOTTOM_OF_PIPE_BIT = ...
        HOST_BIT = ...
        ALL_GRAPHICS_BIT = ...
        ALL_COMMANDS_BIT = ...
        TRANSFORM_FEEDBACK_BIT_EXT = ...
        CONDITIONAL_RENDERING_BIT_EXT = ...
        ACCELERATION_STRUCTURE_BUILD_BIT_KHR = ...
        RAY_TRACING_SHADER_BIT_KHR = ...
        TASK_SHADER_BIT_NV = ...
        MESH_SHADER_BIT_NV = ...
        FRAGMENT_DENSITY_PROCESS_BIT = ...
        FRAGMENT_SHADING_RATE_ATTACHMENT_BIT = ...
        COMMAND_PREPROCESS_BIT = ...
        
    class PipelineStages:
        ...

    class ShaderStageEnum:
        VERTEX = 1 << 0
        FRAGMENT = 1 << 1
        COMPUTE = 1 << 2
        GEOMETRY = 1 << 3
        RAYGEN = 1 << 4
        MISS = 1 << 5
        CLOSEST_HIT = 1 << 6
        INTERSECTION = 1 << 7
        ANY_HIT = 1 << 8
        CALLABLE = 1 << 9
        TASK = 1 << 10
        MESH = 1 << 11
        
    class CompareFunction:
        NEVER = ...
        LESS = ...
        EQUAL = ...
        LESS_EQUAL = ...
        GREATER = ...
        NOT_EQUAL = ...
        GREATER_EQUAL = ...
        ALWAYS = ...

    class LoadOp:
        DONT_CARE = ...
        LOAD = ...
        CLEAR = ...

    class StoreOp:
        DONT_CARE = ...
        STORE = ...
        DISCARD = ...

    class BindingResource:
        def __init__(self) -> None: ...
        def __init__(self, buffer: object) -> None: ...
        def __init__(self, resource: rhi.BufferBinding) -> None: ...
    
    class RenderPassDescriptor:
        def __init__(self, colorAttachments: list[rhi.RenderPassColorAttachment], depthStencilAttachment: rhi.RenderPassDepthStencilAttachment, timestampWrites: rhi.RenderPassTimestampWrites = rhi.RenderPassTimestampWrites(), maxDrawCount: int = 50000000) -> None: ...


    class RenderPassEncoder:
        def push_constants(
            data: object,
            stage: int,
            offset: int,
            size: int
        ) -> None: ...
        
        def set_index_buffer(
            buffer: rhi.Buffer,
            index_format: rhi.IndexFormat = rhi.IndexFormat.UINT32,
            offset: int = 0,
            size: int = 0
        ) -> None: ...
        
        def draw(
            vertex_count: int,
            instance_count: int = 1,
            first_vertex: int = 0,
            first_instance: int = 0
        ) -> None: ...
        
        def draw_indexed(
            index_count: int,
            instance_count: int = 1,
            first_index: int = 0,
            base_vertex: int = 0,
            first_instance: int = 0
        ) -> None: ...
        
        def end(self) -> None: ...
        
    class ComputePassEncoder:
        def dispatch_workgroups(
            workgroupCountX: int,
            workgroupCountY: int,
            workgroupCountZ: int
        ) -> None: ...
        def push_constants(
            data: object,
            stage: int,
            offset: int,
            size: int
        ) -> None: ...
        def dispatch_workgroups_indirect(
            buffer: rhi.Buffer,
            offset: int
        ) -> None: ...
        def end(self) -> None: ...

    class TextureFormat:
        # Unknown
        UNKOWN   = 0
        # 8-bit formats
        R8_UNORM = 1
        R8_SNORM = 2
        R8_UINT  = 3
        R8_SINT  = 4
        # 16-bit formats
        R16_UINT = 5
        R16_SINT = 6
        R16_FLOAT = 7
        RG8_UNORM = 8
        RG8_SNORM = 9
        RG8_UINT = 10
        RG8_SINT = 11
        # 32-bit formats
        R32_UINT = 12
        R32_SINT = 13
        R32_FLOAT = 14
        RG16_UINT = 15
        RG16_SINT = 16
        RG16_FLOAT = 17
        RGBA8_UNORM = 18
        RGBA8_UNORM_SRGB = 19
        RGBA8_SNORM = 20
        RGBA8_UINT = 21
        RGBA8_SINT = 22
        BGRA8_UNORM = 23
        BGRA8_UNORM_SRGB = 24
        # Packed 32-bit formats
        RGB9E5_UFLOAT = 25
        RG11B10_UFLOAT = 26
        # 64-bit formats
        RG32_UINT = 27
        RG32_SINT = 28
        RG32_FLOAT = 29
        RGBA16_UINT = 30
        RGBA16_SINT = 31
        RGBA16_FLOAT = 32
        # 128-bit formats
        RGBA32_UINT = 33
        RGBA32_SINT = 34
        RGBA32_FLOAT = 35
        # Depth/stencil formats
        STENCIL8 = 36
        DEPTH16_UNORM = 37
        DEPTH24 = 38
        DEPTH24STENCIL8 = 39
        DEPTH32_FLOAT = 40
        # Compressed formats
        COMPRESSION = 41
        RGB10A2_UNORM = 42
        DEPTH32STENCIL8 = 43
        BC1_RGB_UNORM_BLOCK = 44
        BC1_RGB_SRGB_BLOCK = 45
        BC1_RGBA_UNORM_BLOCK = 46
        BC1_RGBA_SRGB_BLOCK = 47
        BC2_UNORM_BLOCK = 48
        BC2_SRGB_BLOCK = 49
        BC3_UNORM_BLOCK = 50
        BC3_SRGB_BLOCK  = 51
        BC4_UNORM_BLOCK = 52
        BC4_SNORM_BLOCK = 53
        BC5_UNORM_BLOCK = 54
        BC5_SNORM_BLOCK = 55
        BC6H_UFLOAT_BLOCK = 56
        BC6H_SFLOAT_BLOCK = 57
        BC7_UNORM_BLOCK = 58
        BC7_SRGB_BLOCK = 59
    
    class AccessFlagEnum:
        INDIRECT_COMMAND_READ_BIT = ...
        INDEX_READ_BIT = ...
        VERTEX_ATTRIBUTE_READ_BIT = ...
        UNIFORM_READ_BIT = ...
        INPUT_ATTACHMENT_READ_BIT = ...
        SHADER_READ_BIT = ...
        SHADER_WRITE_BIT = ...
        COLOR_ATTACHMENT_READ_BIT = ...
        COLOR_ATTACHMENT_WRITE_BIT = ...
        DEPTH_STENCIL_ATTACHMENT_READ_BIT = ...
        DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = ...
        TRANSFER_READ_BIT = ...
        TRANSFER_WRITE_BIT = ...
        HOST_READ_BIT = ...
        HOST_WRITE_BIT = ...
        MEMORY_READ_BIT = ...
        MEMORY_WRITE_BIT = ...
        TRANSFORM_FEEDBACK_WRITE_BIT = ...
        TRANSFORM_FEEDBACK_COUNTER_READ_BIT = ...
        TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT = ...
        CONDITIONAL_RENDERING_READ_BIT = ...
        COLOR_ATTACHMENT_READ_NONCOHERENT_BIT = ...
        ACCELERATION_STRUCTURE_READ_BIT = ...
        ACCELERATION_STRUCTURE_WRITE_BIT = ...
        FRAGMENT_DENSITY_MAP_READ_BIT = ...
        FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT = ...
        COMMAND_PREPROCESS_READ_BIT = ...
        COMMAND_PREPROCESS_WRITE_BIT = ...
        NONE = 0
        
    class TextureUsageEnum:
        COPY_SRC = 1 << 0
        COPY_DST = 1 << 1
        TEXTURE_BINDING = 1 << 2
        STORAGE_BINDING = 1 << 3
        COLOR_ATTACHMENT = 1 << 4
        DEPTH_ATTACHMENT = 1 << 5
        TRANSIENT_ATTACHMENT = 1 << 6
        INPUT_ATTACHMENT = 1 << 7
        
    class Buffer:
        def size(self) -> int: ...
        
    class BufferBinding:
        def __init__(self, buffer: rhi.Buffer, offset: int = 0, size: int = 0) -> None: ...

    class RenderPassColorAttachment:
        def __init__(self, texture: rhi.TextureView, resolveTexture: rhi.TextureView, clearColor: vec4, loadOp: rhi.LoadOp, storeOp: rhi.StoreOp) -> None: ...
        ...
    
    class RenderPassDepthStencilAttachment:
        def __init__(self, texture: rhi.TextureView, clearDepth: float, depthLoadOp: rhi.LoadOp,  depthStoreOp: rhi.StoreOp, depthReadOnly:bool, stencilvalue:int, stencilLoadOp: rhi.LoadOp, stencilStoreOp:rhi.StoreOp, stencilReadOnly:bool) -> None: ...
        ...

    class TextureView:
        ...
        
class gfx:
    class Scene:
        ...
        
    class GPUScene:
        def binding_resource_index(self) -> rhi.BindingResource: ...
        def binding_resource_position(self) -> rhi.BindingResource: ...
        def binding_resource_vertex(self) -> rhi.BindingResource: ...
        def binding_resource_geometry(self) -> rhi.BindingResource: ...
        def binding_resource_camera(self) -> rhi.BindingResource: ...
        def binding_resource_tlas(self) -> rhi.BindingResource: ...
        def binding_resource_medium(self) -> rhi.BindingResource: ...
        def binding_resource_medium_grid(self) -> rhi.BindingResource: ...
        ...
            
    class SceneHandle:
        def update_gpu_scene(self) -> None: ...
        def update_scripts(self) -> None: ...
        def gpu_scene(self) -> gfx.GPUScene: ...
        def draw_meshes(self, encoder: rhi.RenderPassEncoder) -> None: ...
        
    class Texture:
        class ConsumeType:
            ColorAttachment = 0
            DepthStencilAttachment = 1
            TextureBinding = 2
            StorageBinding = 3
            
        class ConsumeEntry:
            def __init__(self, 
                         type:rdg.TextureInfo.ConsumeType, 
                         access:rhi.AccessFlagBits=0, 
                         stages:rhi.PipelineStageBit=0,
                         level_beg:int=0, level_end:int=0,
                         mip_beg:int=0, mip_end:int=0,
                         depthWrite:bool=False,
                         depthCmp:rhi.CompareFunction=rhi.CompareFunction.ALWAYS,
                         attachLoc:int=-1) -> None: ...
            def add_stage(self, stage:rhi.PipelineStageBit) -> rdg.TextureInfo.ConsumeEntry: ...
            def set_attachment_loc(self, loc:int) -> rdg.TextureInfo.ConsumeEntry: ...
            def enable_depth_write(self, enable:bool) -> rdg.TextureInfo.ConsumeEntry: ...
            def set_depth_compare_fn(self, cmp:rhi.CompareFunction) -> rdg.TextureInfo.ConsumeEntry: ...
            def set_blend_operation(self, op:rhi.BlendOperation) -> rdg.TextureInfo.ConsumeEntry: ...
            def set_source_blender_factor(self, fct:rhi.BlendFactor) -> rdg.TextureInfo.ConsumeEntry: ...
            def set_target_blender_factor(self, fct:rhi.BlendFactor) -> rdg.TextureInfo.ConsumeEntry: ...

        def get_uav(self, mipLevel:int, firstArraySlice:int, arraySize:int) -> rhi.TextureView: ...
        def get_rtv(self, mipLevel:int, firstArraySlice:int, arraySize:int) -> rhi.TextureView: ...
        def get_dsv(self, mipLevel:int, firstArraySlice:int, arraySize:int) -> rhi.TextureView: ...
        def get_srv(self, mostDetailedMip:int, mipCount:int, firstArraySlice:int, arraySize:int) -> rhi.TextureView: ...
        ...
        
    class TextureHandle:
        def get(self) -> gfx.Texture: ...
        def get_uav(self, mipLevel:int, firstArraySlice:int, arraySize:int) -> rhi.TextureView: ...
        def get_rtv(self, mipLevel:int, firstArraySlice:int, arraySize:int) -> rhi.TextureView: ...
        def get_dsv(self, mipLevel:int, firstArraySlice:int, arraySize:int) -> rhi.TextureView: ...
        def get_srv(self, mostDetailedMip:int, mipCount:int, firstArraySlice:int, arraySize:int) -> rhi.TextureView: ...
        def width(self) -> int: ...
        def height(self) -> int: ...
        ...

    class GFXContext:
        @staticmethod
        def initialize(window: Window, extensions: int) -> None: ...
        
        @staticmethod
        def create_flights(count: int, allocator: rhi.Swapchain) -> None: ...
        
        @staticmethod
        def finalize() -> None: ...
        
        @staticmethod
        def get_flights() -> rhi.FrameResources: ...

        @staticmethod
        def clean_texture_cache() -> None: ...
        
        @staticmethod
        def device() -> rhi.Device: ...

        @staticmethod
        def clean_cache() -> None: ...
        
        @staticmethod
        def frame_end() -> None: ...

        @staticmethod
        def load_scene_gltf(path: str) -> gfx.SceneHandle: ...
        
        @staticmethod
        def load_scene_xml(path: str) -> gfx.SceneHandle: ...
        
        @staticmethod
        def load_scene_pbrt(path: str) -> gfx.SceneHandle: ...
        
        # return type is a list of gfx.ShaderModule
        @staticmethod
        def load_shader_slang(
            path: str,
            entrypoints: list[tuple[str, rhi.ShaderStageEnum]],
            macros: list[tuple[str, str]] = [],
            glsl_intermediate: bool = False
        ) -> list[gfx.ShaderHandle]: ...
        
    class Buffer:
        ...
        
    class BufferHandle:
        def get(self) -> rhi.Buffer: ...
        def with_size(self, size: int) -> gfx.BufferHandle: ...
        def with_usage(self, usage: int) -> gfx.BufferHandle: ...
        def with_data(self, data: bytes) -> gfx.BufferHandle: ...
        def with_mapped(self, mapped: bool) -> gfx.BufferHandle: ...
        def with_name(self, name: str) -> gfx.BufferHandle: ...
        ...
        
    class ShaderModule:
        ...
    
    class ShaderHandle:
        def get(self) -> rhi.ShaderModule: ...
        ...
    
class rdg:
    class Pass:
        ...
    
    class PipelinePass(rdg.Pass):
        ...

    class RenderPass(rdg.PipelinePass):
        def __init__(self) -> None: ...
        def init(self, vert_shader:gfx.ShaderModule, frag_shader:gfx.ShaderModule) -> None: ...
        def set_render_pass_descriptor(self, desc:rhi.RenderPassDescriptor) -> None: ...
        def update_bindings(
            context: rdg.RenderContext,
            bindings: list[tuple[str, rhi.BindingResource]]
        ) -> None: ...
        def update_binding_scene(
            context: rdg.RenderContext,
            scene:gfx.SceneHandle
        ) -> None: ...
        def begin_pass(self, context: rdg.RenderContext,
            target: gfx.Texture) -> rhi.RenderPassEncoder: ...

    class ComputePass(rdg.PipelinePass):
        def __init__(self) -> None: ...
        def init(self, shader:object) -> None: ...
        def update_bindings(
            context: rdg.RenderContext,
            bindings: list[tuple[str, rhi.BindingResource]]
        ) -> None: ...
        def update_binding_scene(
            context: rdg.RenderContext,
            scene:gfx.SceneHandle
        ) -> None: ...
        def begin_pass(self, context: rdg.RenderContext) -> rhi.ComputePassEncoder: ...

    class BufferInfo:
        def with_size(self, size:int) -> rdg.BufferInfo: ...
        def with_usages(self, usage:int) -> rdg.BufferInfo: ...
        def consume(self, entry:rdg.BufferInfo.ConsumeEntry) -> rdg.BufferInfo: ...

        class ConsumeEntry:
            def __init__(self) -> None: ...
            def set_access(self, access:int) -> rdg.BufferInfo.ConsumeEntry: ...
            def add_stage(self, stages:int) -> rdg.BufferInfo.ConsumeEntry: ...
        ...
    
    class TextureInfo:
        def with_size(self, rel_size:vec3) -> rdg.TextureInfo: ...
        def with_size(self, abs_size:ivec3) -> rdg.TextureInfo: ...
        def with_format(self, format:rhi.TextureFormat) -> rdg.TextureInfo: ...
        def with_usages(self, usage:int) -> rdg.TextureInfo: ...
        def consume(self, entry:rdg.TextureInfo.ConsumeEntry) -> rdg.TextureInfo: ...
        def consume_as_storage_binding_in_compute(self) -> rdg.TextureInfo.ConsumeEntry: ...
        def consume_as_color_attachment_at(self, loc:int) -> rdg.TextureInfo.ConsumeEntry: ...
        def consume_as_depth_stencil_attachment_at(self, loc:int,
            depth_write:bool = True,
            depth_compare:rhi.CompareFunction = rhi.CompareFunction.LESS_EQUAL) -> rdg.TextureInfo: ...
        
        class ConsumeType:
            ColorAttachment = 0
            DepthStencilAttachment = 1
            TextureBinding = 2
            StorageBinding = 3

        class ConsumeEntry:
            def __init__(self, 
                         type:rdg.TextureInfo.ConsumeType, 
                         access:rhi.AccessFlagBits=0, 
                         stages:rhi.PipelineStageBit=0,
                         level_beg:int=0, level_end:int=0,
                         mip_beg:int=0, mip_end:int=0,
                         depthWrite:bool=False,
                         depthCmp:rhi.CompareFunction=rhi.CompareFunction.ALWAYS,
                         attachLoc:int=-1) -> None: ...
            def add_stage(self, stage:rhi.PipelineStageBit) -> rdg.TextureInfo.ConsumeEntry: ...
            def set_attachment_loc(self, loc:int) -> rdg.TextureInfo.ConsumeEntry: ...
            def enable_depth_write(self, enable:bool) -> rdg.TextureInfo.ConsumeEntry: ...
            def set_depth_compare_fn(self, cmp:rhi.CompareFunction) -> rdg.TextureInfo.ConsumeEntry: ...
            def set_blend_operation(self, op:rhi.BlendOperation) -> rdg.TextureInfo.ConsumeEntry: ...
            def set_source_blender_factor(self, fct:rhi.BlendFactor) -> rdg.TextureInfo.ConsumeEntry: ...
            def set_target_blender_factor(self, fct:rhi.BlendFactor) -> rdg.TextureInfo.ConsumeEntry: ...

        ...

    class ResourceInfo:
        def is_buffer(self) -> rdg.BufferInfo: ...
        def is_texture(self) -> rdg.TextureInfo: ...

    class PassReflection:
        def __init__(self) -> None: ...
        def add_input(self, name:str) -> rdg.ResourceInfo: ...
        def add_output(self, name:str) -> rdg.ResourceInfo: ...
        def add_input_output(self, name:str) -> rdg.ResourceInfo: ...
        def add_internal(self, name:str) -> rdg.ResourceInfo: ...
    
    class RenderContext:
        def __init__(self) -> None: ...
        flightIdx: int
        cmdEncoder: rhi.ComputePassEncoder
    
    class RenderData:
        def __init__(self) -> None: ...
        def get_texture(self, name:str) -> gfx.TextureHandle : ...
        def get_buffer(self, name:str) -> gfx.BufferHandle : ...
        def get_scene(self) -> gfx.SceneHandle: ...
        def set_scene(self, scene:gfx.SceneHandle) -> None: ...

    class Graph:
        def add_pass(self, passptr:rdg.Pass, name:str) -> None: ...
        def add_edge(self, srcPass:str, srcRes:str, dstPass:str, dstRes:str) -> None: ...
        def mark_output(self, passName:str, resName:str) -> None: ...
        def get_buffer_resource(self, passName:str, resName:str) -> gfx.BufferHandle: ...
        def build(self) -> None: ...
        def execute(self, encoder:rhi.CommandEncoder) -> None: ...
        def get_render_data(self) -> rdg.RenderData: ...
        def get_output(self) -> gfx.TextureHandle: ...
        def set_standard_size(self, width:int, height:int) -> None: ...
        ...

    class Pipeline:
        def setGraph(self, graph:rdg.Graph) -> None: ...
        def build(self) -> None: ...
        def execute(self, encoder:rhi.CommandEncoder) -> None: ...
        def pipeline(self) -> rdg.Pipeline: ...
        def bindScene(self, scene:gfx.SceneHandle) -> None: ...
        def setStandardSize(self, size:ivec3) -> None: ...
        ...

    class SingleGraphPipeline(rdg.Pipeline):
        ...

    ...

class editor:
    class EditorContext:
        @staticmethod
        def initialize(device: rhi.Device) -> None: ...
        
        @staticmethod
        def finalize() -> None: ...
        
        @staticmethod
        def begin_frame(encoder: rhi.CommandEncoder) -> None: ...
        
        @staticmethod
        def end_frame(semaphore: rhi.Semaphore) -> None: ...
        
        @staticmethod
        def set_scene_display(scene: gfx.SceneHandle) -> None: ...
        
        @staticmethod
        def set_graph_display(scene: gfx.SceneHandle) -> None: ...
        
        @staticmethod
        def set_viewport_texture(texture: gfx.TextureHandle) -> None: ...
 
    class ImGuiContext:
        @staticmethod
        def initialize(window: Window) -> None: ...
        
        @staticmethod
        def recreate(width: int, height: int) -> None: ...
        
        @staticmethod
        def need_recreate() -> bool: ...
        
        @staticmethod
        def finalize() -> None: ...

        @staticmethod
        def is_resized() -> bool: ...
        
        @staticmethod
        def start_new_frame() -> None: ...
        
        @staticmethod
        def start_gui_recording() -> None: ...

        @staticmethod
        def render(semaphore: rhi.Semaphore) -> None: ...
        

class Int32:
    def __int__(self) -> int: ...
    def __init__(self, value:int) -> None: ...
    def get(self) -> int: ...
    def set(self, value:int) -> None: ...

class Float32:
    def __int__(self) -> float: ...
    def __init__(self, value:float) -> None: ...
    def get(self) -> float: ...
    def set(self, value:float) -> None: ...

class Bool:
    def __int__(self) -> bool: ...
    def __init__(self, value:bool) -> None: ...
    def get(self) -> bool: ...
    def set(self, value:bool) -> None: ...
    
class imgui:
    @staticmethod
    def begin(name:str, open:bool, flag:int) -> bool: ...
    @staticmethod
    def end() -> None: ...
    @staticmethod
    def drag_int(label:str, value:int, speed:float, min:int, max:int) -> bool: ...
    @staticmethod
    def drag_float(label:str, value:float, speed:float, min:float, max:float) -> bool: ...
    @staticmethod
    def button(label:str, size:vec2) -> bool: ...
    @staticmethod
    def text(text:str) -> None: ...
    @staticmethod
    def same_line(offset_from_start_x:float, spacing:float) -> None: ...
    @staticmethod
    def combo(label:str, current_item:Int32, items:list[str]) -> bool: ...
    @staticmethod
    def checkbox(label:str, value:Bool) -> bool: ...
    @staticmethod
    def push_item_width(width:float) -> None: ...
    @staticmethod
    def pop_item_width() -> None: ...
    @staticmethod
    def tree_node(label:str) -> bool: ...
    @staticmethod
    def tree_pop() -> None: ...
    @staticmethod
    def color_edit_vec3(label:str, value:vec3) -> bool: ...
    
    
class addon:
    class AccumulatePass(rdg.ComputePass):
        def __init__(self) -> None: ...