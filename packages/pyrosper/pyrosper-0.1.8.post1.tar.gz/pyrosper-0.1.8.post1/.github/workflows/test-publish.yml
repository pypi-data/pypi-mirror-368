name: Test Publish Workflow

on:
  workflow_dispatch:
    inputs:
      test_version:
        description: 'Test version to use (e.g., 0.1.1)'
        required: true
        default: '0.1.1'
      dry_run:
        description: 'Dry run (do not actually publish)'
        required: false
        default: true
        type: boolean

jobs:
  test-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools-scm
    
    - name: Create test tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -d v${{ inputs.test_version }} || true
        git push origin :refs/tags/v${{ inputs.test_version }} || true
        git tag v${{ inputs.test_version }}
        git push origin v${{ inputs.test_version }}
    
    - name: Generate version file
      run: |
        # Generate the version.py file using setuptools-scm
        python -c "
        import setuptools_scm
        from setuptools_scm import dump_version
        version = setuptools_scm.get_version()
        dump_version('.', version, 'src/version.py')
        "
    
    - name: Show generated version
      run: |
        echo "Generated version file:"
        cat src/version.py
        echo ""
        echo "Version from setuptools-scm:"
        python -c "import setuptools_scm; print(setuptools_scm.get_version())"
    
    - name: Build package
      run: |
        python -m build
        echo "Built packages:"
        ls -la dist/
    
    - name: Test package contents
      run: |
        echo "Package contents:"
        tar -tzf dist/*.tar.gz | head -20
        echo ""
        echo "Wheel contents:"
        unzip -l dist/*.whl | head -20
    
    - name: Test PyPI upload (dry run)
      if: inputs.dry_run
      run: |
        echo "Testing PyPI upload (dry run)..."
        python -m twine check dist/*
        echo "Package validation passed!"
    
    - name: Actually publish to PyPI
      if: ${{ !inputs.dry_run }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "Publishing to PyPI..."
        twine upload dist/*
    
    - name: Clean up test tag
      if: always()
      run: |
        git tag -d v${{ inputs.test_version }} || true
        git push origin :refs/tags/v${{ inputs.test_version }} || true 