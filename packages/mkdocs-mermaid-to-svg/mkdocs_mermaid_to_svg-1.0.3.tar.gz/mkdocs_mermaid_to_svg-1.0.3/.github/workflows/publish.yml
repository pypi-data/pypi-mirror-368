name: Publish Package

# このワークフローはPythonパッケージのリリースを自動化します
#
# バージョン管理の仕組み:
# - プロジェクトではhatch-vcsを使用してGitタグからバージョンを動的に生成
# - pyproject.tomlで設定: [tool.hatch.version] source = "vcs"
# - タグ形式: release-1.2.3 から 1.2.3 を抽出
#
# リリースタイプ:
# 1. 本番リリース: release-* タグでトリガー → PyPIにリリース + GitHub Release作成
# 2. テストリリース: 手動実行 → TestPyPIにリリース
#
# GitHub Releaseの名前問題の対策:
# - 本番リリース時はタグから直接バージョンを抽出（タグ: release-1.2.3 → 1.2.3）
# - パッケージからの取得ではhatch-vcsのタイミング問題により正しく取得できない場合があるため

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-release
  cancel-in-progress: true

on:
  # タグ作成時のトリガー（本番リリース）
  push:
    tags:
      - 'release-*'
  # 手動実行（テストリリース）
  workflow_dispatch:

jobs:
  # CIワークフローを先に実行
  ci:
    uses: ./.github/workflows/ci.yml

  # CI失敗時の通知ジョブ
  ci-failure:
    needs: ci
    if: ${{ needs.ci.result == 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - name: CI Failed
        run: |
          echo "::error::CI workflow failed. Publication cancelled."
          echo "Please fix the CI issues before attempting to publish."
          exit 1

  # リリースタイプの判定
  determine-release-type:
    needs: ci
    if: ${{ needs.ci.result == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      is-production: ${{ steps.check.outputs.is-production }}
      release-type: ${{ steps.check.outputs.release-type }}
    steps:
      - name: Determine release type
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/release-* ]]; then
            echo "is-production=true" >> $GITHUB_OUTPUT
            echo "release-type=production" >> $GITHUB_OUTPUT
            echo "Production release detected (tag: ${{ github.ref_name }})"
          else
            echo "is-production=false" >> $GITHUB_OUTPUT
            echo "release-type=test" >> $GITHUB_OUTPUT
            echo "Test release detected (manual trigger)"
          fi

  publish:
    needs: [ci, determine-release-type]
    if: ${{ needs.ci.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write  # GitHub Release作成用
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Build package
        run: uv build

      # バージョン取得の仕組み:
      # - 本番リリース時: Gitタグから直接バージョンを抽出（release-1.2.3 -> 1.2.3）
      # - テストリリース時: hatch-vcsで生成されたパッケージからバージョンを取得
      #
      # hatch-vcsは pyproject.toml で設定されており、Gitタグからバージョンを自動生成します:
      # [tool.hatch.version]
      # source = "vcs"
      # raw-options = { local_scheme = "no-local-version" }
      #
      # パッケージビルド時にhatch-vcsがタグを検出してバージョンファイルを生成するため、
      # PyPIリリースは正しいバージョンになりますが、GitHub Release名には
      # パッケージから取得したバージョンではなく、タグから直接抽出したバージョンを使用します。
      - name: Get version
        id: version
        run: |
          if [[ "${{ needs.determine-release-type.outputs.is-production }}" == "true" ]]; then
            # 本番リリース時: タグ名から直接バージョンを抽出
            # release-1.2.3 -> 1.2.3 の変換を行う
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#release-}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Version extracted from tag: $VERSION"
            echo "Tag name: ${{ github.ref_name }}"
          else
            # テストリリース時: hatch-vcsで生成されたパッケージからバージョンを取得
            VERSION=$(uv run python -c "import mkdocs_mermaid_to_svg; print(mkdocs_mermaid_to_svg.__version__)")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Version from package (hatch-vcs): $VERSION"
          fi

      # デバッグ情報: バージョン取得の詳細ログ
      - name: Debug version information
        run: |
          echo "=== Version Debug Information ==="
          echo "GitHub event: ${{ github.event_name }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub ref_name: ${{ github.ref_name }}"
          echo "Is production: ${{ needs.determine-release-type.outputs.is-production }}"
          echo "Release type: ${{ needs.determine-release-type.outputs.release-type }}"
          echo "Final version: ${{ steps.version.outputs.version }}"
          if [[ "${{ needs.determine-release-type.outputs.is-production }}" == "true" ]]; then
            echo "Tag-based version extraction: ${GITHUB_REF_NAME#release-}"
          fi
          echo "Package version (hatch-vcs):"
          uv run python -c "import mkdocs_mermaid_to_svg; print(f'  {mkdocs_mermaid_to_svg.__version__}')" || echo "  Package not available"
          echo "Version file content:"
          cat src/mkdocs_mermaid_to_svg/_version.py 2>/dev/null || echo "  Version file not found"
          echo "================================="

      - name: Validate package
        run: |
          uv add --dev twine
          uv run python -m twine check dist/*
          echo "Package validation completed"

      # テストリリース（手動実行時）
      - name: Publish to TestPyPI
        if: ${{ needs.determine-release-type.outputs.is-production == 'false' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      # 本番リリース（タグ作成時）
      - name: Publish to PyPI
        if: ${{ needs.determine-release-type.outputs.is-production == 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      # GitHub Release作成（本番リリース時のみ）
      - name: Create GitHub Release
        if: ${{ needs.determine-release-type.outputs.is-production == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dist/*.whl
            dist/*.tar.gz

      # リリース結果の通知
      - name: Release Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type**: ${{ needs.determine-release-type.outputs.release-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.determine-release-type.outputs.is-production }}" == "true" ]]; then
            echo "- **PyPI**: https://pypi.org/project/mkdocs-mermaid-to-svg/${{ steps.version.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
            echo "- **GitHub Release**: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **TestPyPI**: https://test.pypi.org/project/mkdocs-mermaid-to-svg/${{ steps.version.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
            echo "- **Installation**: \`pip install --index-url https://test.pypi.org/simple/ mkdocs-mermaid-to-svg==${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          fi
