[tool.poetry]
name = "optinist"
description = "Calcium Imaging Pipeline Tool"
version = "2.2.3"
license = "GPL-3.0"
authors = ["OIST <email@example.com>"]
readme = "README.md"
documentation = "https://optinist.readthedocs.io"
repository = "https://github.com/oist/optinist"
keywords = ["optinist"]
classifiers = [
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: MacOS :: MacOS X",
]
packages = [{ include = "studio" }, { include = "frontend" }, { include = "sample_data" }]

include = [
  "frontend/build/*",
  "frontend/build/static/*",
  "frontend/build/static/css/*",
  "frontend/build/static/js/*",
  "frontend/build/static/media/*",
  "studio/app/optinist/core/nwb/nwb.yaml",
  "studio/app/common/core/snakemake/snakemake.yaml",
  "studio/app/*/wrappers/**/*.yaml",
  "studio/app/Snakefile",
  "studio/config/*.yaml",
  "sample_data/**/input/*",
  "sample_data/**/output/**/*.yaml",
]
exclude = [
  "conda.env.*",
  "studio/tests/*",
  "studio/test_data/*",
  "studio/app/optinist/microscopes/libs.zip",
  "frontend/node_modules/*",
  "frontend/public/*",
  "frontend/src/*",
  "frontend/*.*",
  "sample_data/*.*",
]

[tool.poetry.dependencies]
python = "^3.9"
fastapi = "0.104.*"
uvicorn = "0.24.*"
numpy = "1.24.3"
pandas = "1.5.3"
aiofiles = "*"
tqdm = "*"
pyyaml = "*"
imageio = "*"
tifffile = "*"
python-multipart = "*"
future = "*"
pynwb = "2.8.3"
psutil = "*"
nbstripout = "*"
snakemake = { version = ">=7.24, <7.31" }
jinja2 = "3.1.*"
httpx = "0.21.0"
starlette = "0.27.0"
firebase_admin = "*"
pyrebase4 = "4.7.1"
pydantic = { version = "1.10.13", extras = ["email", "dotenv"] }
python-jose = { version = "*", extras = ["cryptography"] }
alembic = "1.9.2"
sqlmodel = "0.0.12"
pymysql = "1.1.0"
fastapi_pagination = "0.12.13"
plotly = "5.18.0"
filelock = "*"
ruamel-yaml = "^0.18.5"
pymatreader = "^0.0.32"
xmltodict = "*"
matplotlib = "3.7.*"
concurrent-log-handler = "^0.9.25"
numpydoc = "*"
yapf = "*"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
black = "23.11"
flake8 = "6.1.*"
isort = "5.*"
pre-commit = "*"
codespell = "*"

[tool.poetry.group.doc]
optional = true

[tool.poetry.group.doc.dependencies]
sphinx = "7.1.2"
sphinxcontrib-apidoc = "*"
sphinx-rtd-theme = "^1.3.0"
sphinx-prompt = "*"
sphinx-autodoc-typehints = "*"
sphinx-copybutton = "0.5.2"
sphinx-autobuild = "2021.3.14"
myst-parser = "*"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-env = "*"

[tool.poetry.scripts]
run_optinist = "studio.__main__:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
pythonpath = "."
testpaths = "/app/studio/tests"
env = [
  "OPTINIST_DIR=/app/studio/test_data",
  "IS_TEST=True",
]
filterwarnings = [
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
    "ignore:Deprecated call to `pkg_resources.declare_namespace:DeprecationWarning",
    "ignore:invalid escape sequence :DeprecationWarning",
]
markers = [
    "lighter_processing",
    "heavier_processing",
]

[tool.codespell]
skip = './frontend/build,./frontend/node_modules,./docs/_build,*.lock,*log,*.egg-info'
ignore-words = '.codespellignore'
