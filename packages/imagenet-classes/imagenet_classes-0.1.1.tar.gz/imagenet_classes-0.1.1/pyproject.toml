[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "imagenet-classes"
dynamic = ["version"]
description = "A Python package for managing and retrieving ImageNet-1k mappings among integer class IDs, string class IDs, and human-readable class names."
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Illia Volkov", email = "volkoill@cvut.cz"},
    {name = "Nikita Kisel", email = "kiselnik@fel.cvut.cz"}
]
maintainers = [
    {name = "Nikita Kisel", email = "kiselnik@fel.cvut.cz"}
]
keywords = ["imagenet", "computer-vision", "machine-learning", "deep-learning", "classification"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
    "Framework :: Pytest",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.7"
dependencies = [
    "numpy>=1.19.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.800",
]

[project.urls]
Homepage = "https://github.com/gonikisgo/imagenet-classes"
Documentation = "https://github.com/gonikisgo/imagenet-classes#readme"
Repository = "https://github.com/gonikisgo/imagenet-classes"
"Bug Tracker" = "https://github.com/gonikisgo/imagenet-classes/issues"

[tool.setuptools]
packages = ["class_mapping"]
include-package-data = true

[tool.setuptools.package-data]
class_mapping = ["*.npy"]

[tool.setuptools.dynamic]
version = {attr = "class_mapping.__version__"}

[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=class_mapping",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["class_mapping"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
