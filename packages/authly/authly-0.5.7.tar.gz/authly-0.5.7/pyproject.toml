[project]
name = "authly"
version = "0.5.7"
description = "Authorization & User Token Handling Layer for You"
authors = [
    { name = "Ove Ranheim", email = "oranheim@gmail.com" }
]
requires-python = ">=3.11"
readme = "README.md"
keywords = ["oauth", "oauth2", "oidc", "iam", "security", "identity", "authentication", "authorization", "asyncio", "fastapi"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "fastapi>=0.116.1",
    "starlette>=0.47.2",
    "uvicorn>=0.35.0",
    "python-dotenv>=1.0.1",
    "psycopg-toolkit>=0.2.0",
    "tenacity>=9.0.0",
    "pydantic>=2.10.5",
    "pydantic-settings>=2.1.0",
    "tomli>=2.2.1",
    "python-jose[cryptography]>=3.3.0",
    "cryptography>=44.0.1",
    "bcrypt==4.3.0",
    "python-multipart>=0.0.6",
    "jinja2>=3.1.6",
    "click>=8.1.7",
    "httpx>=0.28.1",
    "coverage>=7.9.2",
    "prometheus-client>=0.20.0",
    "pyjwt>=2.10.1",
    "psycopg[binary]>=3.2.3",
    "psycopg-pool>=3.2.4",
]

[dependency-groups]
redis = [
    "redis>=5.2.0",
]
embedded = [
    "testcontainers[postgres]>=4.10.0",
]
dev = [
    "pytest-xdist>=3.8.0",
    "ruff>=0.8.6",
]
test = [
    "pytest>=8.3.4",
    "pytest-order>=1.3.0",
    "pytest-asyncio>=0.25.0",
    "pytest-cov>=6.0.0",
    "testcontainers[postgres]>=4.10.0",
    "fastapi-testing>=0.2.0",
]

[tool.pytest.ini_options]
pythonpath = ["src", "tests"]
testpaths = ["tests"]
python_files = ["test_*.py"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "asyncio: mark test as async",
    "integration: mark test as integration test",
    "auth: Authentication and user management tests",
    "oauth: OAuth 2.1 core flow tests",
    "oidc: OpenID Connect feature tests",
    "oidc_integration: OIDC integration scenario tests",
    "admin: Admin portal tests",
    "admin_users: Admin user management tests",
    "infrastructure: Core infrastructure tests",
    "slow: Slow running tests",
    "unit: Unit tests without external dependencies",
    "tck: TCK/Conformance tests (requires TCK docker stack)",
]
addopts = "-m 'not integration' --verbose --tb=short --strict-markers -ra --ignore=tests/tck"

[build-system]
requires = ["hatchling>=1.26.3"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/authly"]

[tool.hatch.build]
exclude = [
    "ai_docs/*",
    "docs/*",
    "examples/*",
    "tests/*",
    ".github/*",
    "*.gif",
    "*.png",
    "dist/*",
    "build/*",
    "tck/*",
    ".pytest_cache",
    ".ruff_cache",
    "__pycache__",
    "*.pyc"
]

[project.scripts]
authly-admin = "authly.admin.cli:main"
authly = "authly.__main__:cli"

[project.urls]
Homepage = "https://github.com/descoped/authly"
Repository = "https://github.com/descoped/authly"
Issues = "https://github.com/descoped/authly/issues"

[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple/"
publish-url = "https://upload.pypi.org/legacy/"

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"

[tool.ruff]
target-version = "py311"
line-length = 120
indent-width = 4
respect-gitignore = true
extend-exclude = [
    "__pycache__",
    ".pytest_cache",
    "build",
    "dist",
    ".venv",
    ".env",
    "htmlcov",
    "tck/conformance-suite",  # Third-party code
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "C4",  # flake8-comprehensions
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by formatter)
    "E741",   # Ambiguous variable name
    "B008",   # Do not perform function calls in argument defaults
    "B017",   # Assert raises on Exception - sometimes needed for testing
    "T201",   # Print found (allow print statements)
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF013", # PEP 484 prohibits implicit Optional (keeping Optional[] syntax)
]

[tool.ruff.lint.per-file-ignores]
# Test files can have unused imports
#"tests/*" = ["F401"]
# Examples can be more relaxed
#"examples/*" = ["F401", "F841"]
# Tck OIDC Conformance Suite
"tck/*" = ["C416", "F401", "F541", "I001", "E722", "SIM115", "UP035", "W291", "W292", "W293"]
# Tck tests
"tests/tck/*" = ["E402"]

[tool.ruff.lint.isort]
known-first-party = ["authly"]
force-single-line = false
combine-as-imports = true
split-on-trailing-comma = true

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

