<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacePersistentLaplacians" kind="namespace" language="C++">
    <compoundname>PersistentLaplacians</compoundname>
    <innerclass refid="classPersistentLaplacians_1_1FilteredBoundaryMatrix" prot="public">PersistentLaplacians::FilteredBoundaryMatrix</innerclass>
    <innerclass refid="classPersistentLaplacians_1_1PersistentLaplacian" prot="public">PersistentLaplacians::PersistentLaplacian</innerclass>
    <innerclass refid="classPersistentLaplacians_1_1schur" prot="public">PersistentLaplacians::schur</innerclass>
    <innerclass refid="classPersistentLaplacians_1_1ortho" prot="public">PersistentLaplacians::ortho</innerclass>
    <innerclass refid="classPersistentLaplacians_1_1selfadjoint" prot="public">PersistentLaplacians::selfadjoint</innerclass>
    <innerclass refid="classPersistentLaplacians_1_1eigensolver" prot="public">PersistentLaplacians::eigensolver</innerclass>
    <innerclass refid="classPersistentLaplacians_1_1bdcsvd" prot="public">PersistentLaplacians::bdcsvd</innerclass>
    <innerclass refid="structPersistentLaplacians_1_1timer" prot="public">PersistentLaplacians::timer</innerclass>
    <innerclass refid="structPersistentLaplacians_1_1Profile" prot="public">PersistentLaplacians::Profile</innerclass>
    <innerclass refid="classPersistentLaplacians_1_1PersistentAlphaLaplacian" prot="public">PersistentLaplacians::PersistentAlphaLaplacian</innerclass>
    <innerclass refid="classPersistentLaplacians_1_1PersistentDirectedFlagLaplacian" prot="public">PersistentLaplacians::PersistentDirectedFlagLaplacian</innerclass>
    <innerclass refid="classPersistentLaplacians_1_1PersistentRipsLaplacian" prot="public">PersistentLaplacians::PersistentRipsLaplacian</innerclass>
    <innerclass refid="classPersistentLaplacians_1_1PersistentSheafLaplacian" prot="public">PersistentLaplacians::PersistentSheafLaplacian</innerclass>
    <innerclass refid="classPersistentLaplacians_1_1sheaf__simplex__tree" prot="public">PersistentLaplacians::sheaf_simplex_tree</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacePersistentLaplacians_1af5a05e44b87981109cce88070677b6f1" prot="public" static="no">
        <type>Gudhi::Simplex_tree&lt; Gudhi::Simplex_tree_options_default &gt;</type>
        <definition>using PersistentLaplacians::Simplex_tree = typedef Gudhi::Simplex_tree&lt;Gudhi::Simplex_tree_options_default&gt;</definition>
        <argsstring></argsstring>
        <name>Simplex_tree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/variants/sheaf_simplex_tree.hpp" line="17" column="5" bodyfile="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/variants/sheaf_simplex_tree.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacePersistentLaplacians_1a58c490a6ba7bc8547c4d686ce660e806" prot="public" static="no">
        <type>Simplex_tree::Filtration_value</type>
        <definition>using PersistentLaplacians::Filtration_value = typedef Simplex_tree::Filtration_value</definition>
        <argsstring></argsstring>
        <name>Filtration_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/variants/sheaf_simplex_tree.hpp" line="18" column="5" bodyfile="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/variants/sheaf_simplex_tree.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacePersistentLaplacians_1a751679cfa9745a7e47c310947521b59e" prot="public" static="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="namespacePersistentLaplacians_1a58c490a6ba7bc8547c4d686ce660e806" kindref="member">Filtration_value</ref> &gt; &gt;</type>
        <definition>using PersistentLaplacians::Distance_matrix = typedef std::vector&lt;std::vector&lt;Filtration_value&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>Distance_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/variants/sheaf_simplex_tree.hpp" line="19" column="5" bodyfile="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/variants/sheaf_simplex_tree.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacePersistentLaplacians_1a5e90134767fdfde516979022489d8202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PersistentLaplacians::round_zeros</definition>
        <argsstring>(spectra_vec &amp;inout, spectra_type threshold)</argsstring>
        <name>round_zeros</name>
        <param>
          <type><ref refid="typedefs_8hpp_1a27a64e317582fd2a2dbdc95fa84b7ebd" kindref="member">spectra_vec</ref> &amp;</type>
          <declname>inout</declname>
        </param>
        <param>
          <type><ref refid="typedefs_8hpp_1ac240cc0d46f103fa1a410237a0b8853f" kindref="member">spectra_type</ref></type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" line="10" column="10" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" bodystart="10" bodyend="12" declfile="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/PersistentLaplacians.hpp" declline="15" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1a112d702a171a0032f30409e7de3532ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PersistentLaplacians::print_full_matrix_precise</definition>
        <argsstring>(SparseMatrixInt m)</argsstring>
        <name>print_full_matrix_precise</name>
        <param>
          <type><ref refid="typedefs_8hpp_1af75f469c1ca3f8752d6f67a115e57af4" kindref="member">SparseMatrixInt</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" line="14" column="10" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" bodystart="14" bodyend="17" declfile="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/PersistentLaplacians.hpp" declline="17" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1aa2ceec6e0a53a2780e0b5655d79dbca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PersistentLaplacians::print_full_matrix_precise</definition>
        <argsstring>(Eigen::MatrixXi m)</argsstring>
        <name>print_full_matrix_precise</name>
        <param>
          <type>Eigen::MatrixXi</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" line="19" column="10" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" bodystart="19" bodyend="22" declfile="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/PersistentLaplacians.hpp" declline="19" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1a05153ba21964d638315e6dcbadfd4ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PersistentLaplacians::print_full_matrix_precise</definition>
        <argsstring>(SparseMatrix_PL m)</argsstring>
        <name>print_full_matrix_precise</name>
        <param>
          <type><ref refid="typedefs_8hpp_1aa0b819682f9cdac0ae1234aed46106e6" kindref="member">SparseMatrix_PL</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" line="24" column="10" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" bodystart="24" bodyend="27" declfile="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/PersistentLaplacians.hpp" declline="21" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1a94948fb7f8d8894648fbdf7ac11870e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PersistentLaplacians::print_full_matrix_precise</definition>
        <argsstring>(DenseMatrix_PL m)</argsstring>
        <name>print_full_matrix_precise</name>
        <param>
          <type><ref refid="typedefs_8hpp_1a260197b742c38462952d018c69ff535a" kindref="member">DenseMatrix_PL</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" line="28" column="10" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" bodystart="28" bodyend="31" declfile="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/PersistentLaplacians.hpp" declline="22" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1a6a6d1cace8ac4c62b88ce5140f3b98da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PersistentLaplacians::print_vector_precise</definition>
        <argsstring>(Eigen::VectorXd v)</argsstring>
        <name>print_vector_precise</name>
        <param>
          <type>Eigen::VectorXd</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" line="33" column="10" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" bodystart="33" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1a9384228573917582462e538376d385b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PersistentLaplacians::print_vector_precise</definition>
        <argsstring>(Eigen::VectorXf v)</argsstring>
        <name>print_vector_precise</name>
        <param>
          <type>Eigen::VectorXf</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" line="38" column="10" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" bodystart="38" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1aa8ee555e30135133715db05dd7b35ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PersistentLaplacians::print_spectra</definition>
        <argsstring>(std::vector&lt; std::tuple&lt; int, filtration_type, filtration_type, std::vector&lt; spectra_type &gt;&gt;&gt; spectra)</argsstring>
        <name>print_spectra</name>
        <param>
          <type>std::vector&lt; std::tuple&lt; int, <ref refid="typedefs_8hpp_1afc86493f3736a9d186d249149b2e5e22" kindref="member">filtration_type</ref>, <ref refid="typedefs_8hpp_1afc86493f3736a9d186d249149b2e5e22" kindref="member">filtration_type</ref>, std::vector&lt; <ref refid="typedefs_8hpp_1ac240cc0d46f103fa1a410237a0b8853f" kindref="member">spectra_type</ref> &gt;&gt;&gt;</type>
          <declname>spectra</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" line="45" column="10" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" bodystart="45" bodyend="57" declfile="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/PersistentLaplacians.hpp" declline="25" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1ac97e07389e2c5d1f9dec664e271cd59b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PersistentLaplacians::reindex_boundaries_map</definition>
        <argsstring>(std::vector&lt; std::vector&lt; std::tuple&lt; int64_t, int64_t, int &gt;&gt;&gt; &amp;boundaries_triples, std::vector&lt; SparseMatrixInt &gt; &amp;reindexed_boundaries, int dummy_remove)</argsstring>
        <name>reindex_boundaries_map</name>
        <param>
          <type>std::vector&lt; std::vector&lt; std::tuple&lt; int64_t, int64_t, int &gt;&gt;&gt; &amp;</type>
          <declname>boundaries_triples</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="typedefs_8hpp_1af75f469c1ca3f8752d6f67a115e57af4" kindref="member">SparseMatrixInt</ref> &gt; &amp;</type>
          <declname>reindexed_boundaries</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dummy_remove</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" line="59" column="10" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" bodystart="59" bodyend="117" declfile="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/PersistentLaplacians.hpp" declline="28" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1a2c6b429935449ff2010770034b5e9ff2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PersistentLaplacians::reindex_boundaries</definition>
        <argsstring>(std::vector&lt; std::vector&lt; std::tuple&lt; int, int, int &gt;&gt;&gt; &amp;boundaries_triples, std::vector&lt; SparseMatrixInt &gt; &amp;reindexed_boundaries, int dim_0_rows)</argsstring>
        <name>reindex_boundaries</name>
        <param>
          <type>std::vector&lt; std::vector&lt; std::tuple&lt; int, int, int &gt;&gt;&gt; &amp;</type>
          <declname>boundaries_triples</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="typedefs_8hpp_1af75f469c1ca3f8752d6f67a115e57af4" kindref="member">SparseMatrixInt</ref> &gt; &amp;</type>
          <declname>reindexed_boundaries</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_0_rows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" line="118" column="10" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" bodystart="118" bodyend="172" declfile="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/PersistentLaplacians.hpp" declline="27" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1ae854648cbdf91ceb16c6fe07a6801989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PersistentLaplacians::alpha_points</definition>
        <argsstring>(std::vector&lt; Point &gt; &amp;points, int dim_max, std::vector&lt; std::vector&lt; std::tuple&lt; int, int, int &gt;&gt;&gt; &amp;boundaries_triples, std::vector&lt; std::vector&lt; filtration_type &gt;&gt; &amp;filtrations)</argsstring>
        <name>alpha_points</name>
        <param>
          <type>std::vector&lt; <ref refid="PersistentAlphaLaplacian_8cpp_1a34f5250ef707a575baad36c8a213ba4a" kindref="member">Point</ref> &gt; &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_max</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; std::tuple&lt; int, int, int &gt;&gt;&gt; &amp;</type>
          <declname>boundaries_triples</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="typedefs_8hpp_1afc86493f3736a9d186d249149b2e5e22" kindref="member">filtration_type</ref> &gt;&gt; &amp;</type>
          <declname>filtrations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/variants/PersistentAlphaLaplacian.cpp" line="168" column="10" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/variants/PersistentAlphaLaplacian.cpp" bodystart="168" bodyend="243" declfile="/home/jones657/PersistentLaplacians/cpp/src/variants/PersistentAlphaLaplacian.cpp" declline="47" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1aa8578e00f53b31867376ac329cd8b9eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PersistentLaplacians::alpha_OFF</definition>
        <argsstring>(const char *filename, int dim_max, std::vector&lt; std::vector&lt; std::tuple&lt; int, int, int &gt;&gt;&gt; &amp;boundaries_triples, std::vector&lt; std::vector&lt; filtration_type &gt;&gt; &amp;filtrations)</argsstring>
        <name>alpha_OFF</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_max</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; std::tuple&lt; int, int, int &gt;&gt;&gt; &amp;</type>
          <declname>boundaries_triples</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="typedefs_8hpp_1afc86493f3736a9d186d249149b2e5e22" kindref="member">filtration_type</ref> &gt;&gt; &amp;</type>
          <declname>filtrations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/variants/PersistentAlphaLaplacian.cpp" line="246" column="10" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/variants/PersistentAlphaLaplacian.cpp" bodystart="246" bodyend="260" declfile="/home/jones657/PersistentLaplacians/cpp/src/variants/PersistentAlphaLaplacian.cpp" declline="48" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1a06d02bd9fe76eee39b28d8b672df0ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="PersistentAlphaLaplacian_8cpp_1a35b212c9d8294610f52745b5a555c5ed" kindref="member">Vertex_list</ref></type>
        <definition>Vertex_list PersistentLaplacians::from</definition>
        <argsstring>(const Cell_handle &amp;ch)</argsstring>
        <name>from</name>
        <param>
          <type>const <ref refid="PersistentAlphaLaplacian_8cpp_1a29ee975320b9ec3b14074ce336d7b88c" kindref="member">Cell_handle</ref> &amp;</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/variants/PersistentAlphaLaplacian.cpp" line="83" column="17" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/variants/PersistentAlphaLaplacian.cpp" bodystart="83" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1a1a687cbb13d72b6c94ff1e6a7414648a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="PersistentAlphaLaplacian_8cpp_1a35b212c9d8294610f52745b5a555c5ed" kindref="member">Vertex_list</ref></type>
        <definition>Vertex_list PersistentLaplacians::from</definition>
        <argsstring>(const Facet &amp;fct)</argsstring>
        <name>from</name>
        <param>
          <type>const <ref refid="PersistentAlphaLaplacian_8cpp_1ab757b57094db65647a1f51c793464240" kindref="member">Facet</ref> &amp;</type>
          <declname>fct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/variants/PersistentAlphaLaplacian.cpp" line="92" column="17" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/variants/PersistentAlphaLaplacian.cpp" bodystart="92" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1a1ccbae2ac3385b0b00fbcf791101763c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="PersistentAlphaLaplacian_8cpp_1a35b212c9d8294610f52745b5a555c5ed" kindref="member">Vertex_list</ref></type>
        <definition>Vertex_list PersistentLaplacians::from</definition>
        <argsstring>(const Edge &amp;edg)</argsstring>
        <name>from</name>
        <param>
          <type>const <ref refid="PersistentAlphaLaplacian_8cpp_1a059d548004c91470f1bf1df952e0b531" kindref="member">Edge</ref> &amp;</type>
          <declname>edg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/variants/PersistentAlphaLaplacian.cpp" line="104" column="17" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/variants/PersistentAlphaLaplacian.cpp" bodystart="104" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1a8b6dc89cc0afd68c219f8ebdaaa490f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="PersistentAlphaLaplacian_8cpp_1a35b212c9d8294610f52745b5a555c5ed" kindref="member">Vertex_list</ref></type>
        <definition>Vertex_list PersistentLaplacians::from</definition>
        <argsstring>(const Alpha_shape_3::Vertex_handle &amp;vh)</argsstring>
        <name>from</name>
        <param>
          <type>const Alpha_shape_3::Vertex_handle &amp;</type>
          <declname>vh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/variants/PersistentAlphaLaplacian.cpp" line="116" column="17" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/variants/PersistentAlphaLaplacian.cpp" bodystart="116" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1aaea7b6de09ffe44b94fcaa130f68b378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PersistentLaplacians::get_boundaries_and_filtrations</definition>
        <argsstring>(Simplex_tree simplex_tree, int dim_max, std::vector&lt; std::vector&lt; std::tuple&lt; int, int, int &gt;&gt;&gt; &amp;boundaries_triples, std::vector&lt; std::vector&lt; filtration_type &gt;&gt; &amp;filtrations)</argsstring>
        <name>get_boundaries_and_filtrations</name>
        <param>
          <type><ref refid="namespacePersistentLaplacians_1af5a05e44b87981109cce88070677b6f1" kindref="member">Simplex_tree</ref></type>
          <declname>simplex_tree</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_max</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; std::tuple&lt; int, int, int &gt;&gt;&gt; &amp;</type>
          <declname>boundaries_triples</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="typedefs_8hpp_1afc86493f3736a9d186d249149b2e5e22" kindref="member">filtration_type</ref> &gt;&gt; &amp;</type>
          <declname>filtrations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/src/variants/PersistentAlphaLaplacian.cpp" line="124" column="10" bodyfile="/home/jones657/PersistentLaplacians/cpp/src/variants/PersistentAlphaLaplacian.cpp" bodystart="124" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1ac9b7a3c77f8eb773c3bded878909fe1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PersistentLaplacians::print_full_matrix_precise</definition>
        <argsstring>(Eigen::MatrixXf m)</argsstring>
        <name>print_full_matrix_precise</name>
        <param>
          <type>Eigen::MatrixXf</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/PersistentLaplacians.hpp" line="18" column="10" declfile="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/PersistentLaplacians.hpp" declline="18" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1a690d31305b1585081c4f16bb703f5bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PersistentLaplacians::print_vector_precise</definition>
        <argsstring>(spectra_vec v)</argsstring>
        <name>print_vector_precise</name>
        <param>
          <type><ref refid="typedefs_8hpp_1a27a64e317582fd2a2dbdc95fa84b7ebd" kindref="member">spectra_vec</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/PersistentLaplacians.hpp" line="23" column="10" declfile="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/PersistentLaplacians.hpp" declline="23" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacePersistentLaplacians_1a723613a2af1a0651a29f8f34a44b3f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPersistentLaplacians_1_1sheaf__simplex__tree" kindref="compound">PersistentLaplacians::sheaf_simplex_tree</ref></type>
        <definition>PersistentLaplacians::sheaf_simplex_tree PersistentLaplacians::rips_sheaf_simplex_tree</definition>
        <argsstring>(std::vector&lt; std::vector&lt; float &gt;&gt; points, Filtration_value max_length, std::function&lt; float(Simplex_tree::Simplex_handle, Simplex_tree::Simplex_handle, sheaf_simplex_tree &amp;)&gt; restriction)</argsstring>
        <name>rips_sheaf_simplex_tree</name>
        <param>
          <type>std::vector&lt; std::vector&lt; float &gt;&gt;</type>
          <declname>points</declname>
        </param>
        <param>
          <type><ref refid="namespacePersistentLaplacians_1a58c490a6ba7bc8547c4d686ce660e806" kindref="member">Filtration_value</ref></type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>std::function&lt; float(Simplex_tree::Simplex_handle, Simplex_tree::Simplex_handle, <ref refid="classPersistentLaplacians_1_1sheaf__simplex__tree" kindref="compound">sheaf_simplex_tree</ref> &amp;)&gt;</type>
          <declname>restriction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/variants/sheaf_simplex_tree.hpp" line="176" column="46" bodyfile="/home/jones657/PersistentLaplacians/cpp/include/PersistentLaplacians_headers/variants/sheaf_simplex_tree.hpp" bodystart="176" bodyend="223"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/jones657/PersistentLaplacians/cpp/src/PersistentLaplacians.cpp" line="7" column="1"/>
  </compounddef>
</doxygen>
