"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[249],{92249:function(e,n,t){t.r(n),t.d(n,{default:function(){return v}});var i=t(57437),o=t(2265),r=t(9285),g=t(36496),c=t(85903),u=t(51448),l=t(51714);function a(e){let{debug:n,displacementStrength:t,distortionStrength:g,...c}=e,a=(0,o.useRef)(),v=(0,o.useRef)(),s=(0,o.useRef)({uTime:{value:0},uTimeFrequency:{value:.3},uDistortionFrequency:{value:1.8},uDistortionStrength:{value:.3},uDisplacementFrequency:{value:2.4},uDisplacementStrength:{value:.15},uLightAColor:{value:new u.Color("#7eff86")},uLightBColor:{value:new u.Color("#0c79f2")},uLightAPosition:{value:new u.Vector3(1,-2,1)},uLightBPosition:{value:new u.Vector3(1,-2,1)},uLightAIntensity:{value:6},uLightBIntensity:{value:6},uSubdivision:{value:new u.Vector2(512,512)},uFresnelOffset:{value:.01},uFresnelMultiplier:{value:.95},uFresnelPower:{value:9},uNoiseStrength:{value:1.5},uNoiseFrequency:{value:1}});(0,o.useEffect)(()=>{n||(s.current.uFresnelMultiplier.value=0,s.current.uDisplacementStrength.value=0)},[n]);let y=n?(0,l.M4)("Sphere Settings",{timeFrequency:{value:s.current.uTimeFrequency.value,min:0,max:2,step:.01},distortionFrequency:{value:s.current.uDistortionFrequency.value,min:0,max:10,step:.001},distortionStrength:{value:s.current.uDistortionStrength.value,min:0,max:10,step:.001},displacementFrequency:{value:s.current.uDisplacementFrequency.value,min:0,max:5,step:.001},displacementStrength:{value:s.current.uDisplacementStrength.value,min:0,max:1,step:.001},lightAColor:"#0cf700",lightBColor:"#1896cc",lightAIntensity:{value:s.current.uLightAIntensity.value,min:0,max:10,step:.001},lightBIntensity:{value:s.current.uLightBIntensity.value,min:0,max:10,step:.001},lightAPosition:{value:[s.current.uLightAPosition.value.x,s.current.uLightAPosition.value.y,s.current.uLightAPosition.value.z]},lightBPosition:{value:[s.current.uLightBPosition.value.x,s.current.uLightBPosition.value.y,s.current.uLightBPosition.value.z]},subdivisionX:{value:s.current.uSubdivision.value.x,min:1,max:1024,step:1},subdivisionY:{value:s.current.uSubdivision.value.y,min:1,max:1024,step:1},fresnelOffset:{value:s.current.uFresnelOffset.value,min:-1,max:1,step:.001},fresnelMultiplier:{value:s.current.uFresnelMultiplier.value,min:0,max:5,step:.001},fresnelPower:{value:s.current.uFresnelPower.value,min:0,max:15,step:.001},noiseStrength:{value:s.current.uNoiseStrength.value,min:0,max:10,step:.01},noiseFrequency:{value:s.current.uNoiseFrequency.value,min:0,max:5,step:.01}}):null;return(0,r.F)(e=>{let{clock:n}=e,i=n.getElapsedTime();if(v.current){if(s.current.uTime.value=i,y)s.current.uTimeFrequency.value=y.timeFrequency,s.current.uDistortionFrequency.value=y.distortionFrequency,s.current.uDistortionStrength.value=y.distortionStrength,s.current.uDisplacementFrequency.value=y.displacementFrequency,s.current.uDisplacementStrength.value=y.displacementStrength,s.current.uLightAColor.value=new u.Color(y.lightAColor),s.current.uLightBColor.value=new u.Color(y.lightBColor),s.current.uLightAPosition.value=new u.Vector3(y.lightAPosition[0],y.lightAPosition[1],y.lightAPosition[2]),s.current.uLightBPosition.value=new u.Vector3(y.lightBPosition[0],y.lightBPosition[1],y.lightBPosition[2]),s.current.uSubdivision.value=new u.Vector2(y.subdivisionX,y.subdivisionY),s.current.uFresnelOffset.value=y.fresnelOffset,s.current.uFresnelMultiplier.value=y.fresnelMultiplier,s.current.uFresnelPower.value=y.fresnelPower,s.current.uLightAIntensity.value=y.lightAIntensity,s.current.uLightBIntensity.value=y.lightBIntensity,s.current.uNoiseStrength.value=y.noiseStrength,s.current.uNoiseFrequency.value=y.noiseFrequency;else{if(s.current.uFresnelMultiplier.value+=.01,s.current.uFresnelMultiplier.value=Math.min(s.current.uFresnelMultiplier.value,1),t&&t.current>0){let e=t.current,n=s.current.uDisplacementStrength.value;s.current.uDisplacementStrength.value=u.MathUtils.lerp(n,e,.1),t.current-=1e-4,t.current=Math.max(t.current,.125)}if(g&&g.current>0){let e=g.current,n=s.current.uDistortionStrength.value;s.current.uDistortionStrength.value=u.MathUtils.lerp(n,e,.1),g.current-=1e-4,g.current=Math.max(g.current,.125)}}}}),(0,i.jsxs)("mesh",{ref:a,scale:[1,1,1],...c,children:[(0,i.jsx)("sphereGeometry",{args:[1,s.current.uSubdivision.value.x,s.current.uSubdivision.value.y],onUpdate:e=>{e.computeTangents()}}),(0,i.jsx)("shaderMaterial",{ref:v,vertexShader:"#define GLSLIFY 1\n#define M_PI 3.1415926535897932384626433832795\n\nvarying vec3 vNormal;\nvarying vec3 vColor;\nvarying float vNoiseVal;\n\nuniform float uTime;\nuniform float uTimeFrequency;\nuniform float uDistortionFrequency;\nuniform float uDistortionStrength;\nuniform float uDisplacementFrequency;\nuniform float uDisplacementStrength;\nuniform float uFresnelOffset;\nuniform float uFresnelMultiplier;\nuniform float uFresnelPower;\nuniform vec3 uLightAColor;\nuniform vec3 uLightBColor;\nuniform vec3 uLightAPosition;\nuniform vec3 uLightBPosition;\nuniform float uLightAIntensity;\nuniform float uLightBIntensity;\nuniform float uNoiseStrength;\nuniform float uNoiseFrequency;\nuniform vec2 uSubdivision;\n\n//	Classic Perlin 3D Noise \n//	by Stefan Gustavson\n//\nvec4 permute_0(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt_0(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec4 fade_0(vec4 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat perlin4d(vec4 P){\n  vec4 Pi0 = floor(P); // Integer part for indexing\n  vec4 Pi1 = Pi0 + 1.0; // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec4 Pf0 = fract(P); // Fractional part for interpolation\n  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = vec4(Pi0.zzzz);\n  vec4 iz1 = vec4(Pi1.zzzz);\n  vec4 iw0 = vec4(Pi0.wwww);\n  vec4 iw1 = vec4(Pi1.wwww);\n\n  vec4 ixy = permute_0(permute_0(ix) + iy);\n  vec4 ixy0 = permute_0(ixy + iz0);\n  vec4 ixy1 = permute_0(ixy + iz1);\n  vec4 ixy00 = permute_0(ixy0 + iw0);\n  vec4 ixy01 = permute_0(ixy0 + iw1);\n  vec4 ixy10 = permute_0(ixy1 + iw0);\n  vec4 ixy11 = permute_0(ixy1 + iw1);\n\n  vec4 gx00 = ixy00 / 7.0;\n  vec4 gy00 = floor(gx00) / 7.0;\n  vec4 gz00 = floor(gy00) / 6.0;\n  gx00 = fract(gx00) - 0.5;\n  gy00 = fract(gy00) - 0.5;\n  gz00 = fract(gz00) - 0.5;\n  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\n  vec4 sw00 = step(gw00, vec4(0.0));\n  gx00 -= sw00 * (step(0.0, gx00) - 0.5);\n  gy00 -= sw00 * (step(0.0, gy00) - 0.5);\n\n  vec4 gx01 = ixy01 / 7.0;\n  vec4 gy01 = floor(gx01) / 7.0;\n  vec4 gz01 = floor(gy01) / 6.0;\n  gx01 = fract(gx01) - 0.5;\n  gy01 = fract(gy01) - 0.5;\n  gz01 = fract(gz01) - 0.5;\n  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\n  vec4 sw01 = step(gw01, vec4(0.0));\n  gx01 -= sw01 * (step(0.0, gx01) - 0.5);\n  gy01 -= sw01 * (step(0.0, gy01) - 0.5);\n\n  vec4 gx10 = ixy10 / 7.0;\n  vec4 gy10 = floor(gx10) / 7.0;\n  vec4 gz10 = floor(gy10) / 6.0;\n  gx10 = fract(gx10) - 0.5;\n  gy10 = fract(gy10) - 0.5;\n  gz10 = fract(gz10) - 0.5;\n  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\n  vec4 sw10 = step(gw10, vec4(0.0));\n  gx10 -= sw10 * (step(0.0, gx10) - 0.5);\n  gy10 -= sw10 * (step(0.0, gy10) - 0.5);\n\n  vec4 gx11 = ixy11 / 7.0;\n  vec4 gy11 = floor(gx11) / 7.0;\n  vec4 gz11 = floor(gy11) / 6.0;\n  gx11 = fract(gx11) - 0.5;\n  gy11 = fract(gy11) - 0.5;\n  gz11 = fract(gz11) - 0.5;\n  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\n  vec4 sw11 = step(gw11, vec4(0.0));\n  gx11 -= sw11 * (step(0.0, gx11) - 0.5);\n  gy11 -= sw11 * (step(0.0, gy11) - 0.5);\n\n  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\n  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\n  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\n  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\n  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\n  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\n  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\n  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\n  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\n  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\n  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\n  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\n  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\n  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\n  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\n  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\n\n  vec4 norm00 = taylorInvSqrt_0(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\n  g0000 *= norm00.x;\n  g0100 *= norm00.y;\n  g1000 *= norm00.z;\n  g1100 *= norm00.w;\n\n  vec4 norm01 = taylorInvSqrt_0(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\n  g0001 *= norm01.x;\n  g0101 *= norm01.y;\n  g1001 *= norm01.z;\n  g1101 *= norm01.w;\n\n  vec4 norm10 = taylorInvSqrt_0(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\n  g0010 *= norm10.x;\n  g0110 *= norm10.y;\n  g1010 *= norm10.z;\n  g1110 *= norm10.w;\n\n  vec4 norm11 = taylorInvSqrt_0(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\n  g0011 *= norm11.x;\n  g0111 *= norm11.y;\n  g1011 *= norm11.z;\n  g1111 *= norm11.w;\n\n  float n0000 = dot(g0000, Pf0);\n  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\n  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\n  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\n  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\n  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\n  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\n  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\n  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\n  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\n  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\n  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\n  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\n  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\n  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\n  float n1111 = dot(g1111, Pf1);\n\n  vec4 fade_xyzw = fade_0(Pf0);\n  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\n  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\n  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\n  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\n  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\n  return 2.2 * n_xyzw;\n}\n\n//	Classic Perlin 3D Noise \n//	by Stefan Gustavson\n//\nvec4 permute_1(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt_1(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade_1(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat perlin3d(vec3 P)\n{\n    vec3 Pi0 = floor(P); // Integer part for indexing\n    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n    Pi0 = mod(Pi0, 289.0);\n    Pi1 = mod(Pi1, 289.0);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute_1(permute_1(ix) + iy);\n    vec4 ixy0 = permute_1(ixy + iz0);\n    vec4 ixy1 = permute_1(ixy + iz1);\n\n    vec4 gx0 = ixy0 / 7.0;\n    vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n    vec4 gx1 = ixy1 / 7.0;\n    vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt_1(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt_1(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade_1(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n    return 2.2 * n_xyz;\n}\n\nvec3 getDisplacedPosition(vec3 _position) {\n\n  vec3 displacementPosition = _position;\n  displacementPosition += perlin4d(vec4(displacementPosition * uDistortionFrequency, uTime * uTimeFrequency)) * uDistortionStrength;\n  \n  float perlinStrength = perlin4d(vec4(displacementPosition * uDisplacementFrequency, uTime * uTimeFrequency));\n  \n  vec3 displacedPosition = _position;\n  displacedPosition += normalize(_position) * perlinStrength * uDisplacementStrength;\n\n  return displacedPosition;\n}\n\nvoid main() {\n\n  // Position\n  vec3 displacedPosition = getDisplacedPosition(position);\n  vec4 viewPosition = viewMatrix * vec4(displacedPosition, 1.0);\n  gl_Position = projectionMatrix * viewPosition;\n\n  // Bi tngents\n  float distanceA = (M_PI * 2.0) / uSubdivision.x;\n  float distanceB = M_PI / uSubdivision.x;\n\n  vec3 biTangent = cross(normal, tangent.xyz);\n\n  vec3 positionA = position + tangent.xyz * distanceA;\n  vec3 displacedPositionA = getDisplacedPosition(positionA).xyz;\n\n  vec3 positionB = position + biTangent.xyz * distanceB;\n  vec3 displacedPositionB = getDisplacedPosition(positionB).xyz;\n\n  vec3 computedNormal = cross(displacedPositionA - displacedPosition, displacedPositionB - displacedPosition);  \n  computedNormal = normalize(computedNormal);\n\n  // Fresenl\n  vec3 viewDirection = normalize(displacedPosition - cameraPosition);\n  float fresnel = uFresnelOffset + (1.0 + dot(viewDirection, computedNormal)) * uFresnelMultiplier;\n  fresnel = pow(max(0.0, fresnel), uFresnelPower);\n\n  // Color\n  float lightAIntensityValue = max(0.0, dot(computedNormal.xyz, normalize(- uLightAPosition))) * uLightAIntensity;\n  float lightBIntensityValue = max(0.0, -dot(computedNormal.xyz, normalize(- uLightBPosition))) * uLightBIntensity;\n\n  vec3 color = vec3(0.098);\n  color = mix(color,uLightAColor,lightAIntensityValue*fresnel);\n  color = mix(color,uLightBColor,lightBIntensityValue*fresnel);\n  color = mix(color, vec3(1.0), clamp(pow(max(0.0, fresnel - 0.4), 3.0), 0.0, 1.0));\n\n  vNormal = normal;\n  vColor = color;\n  vNoiseVal = perlin4d(vec4(position * uNoiseStrength, uTime * uNoiseFrequency));\n}\n",fragmentShader:"#define GLSLIFY 1\nvarying vec3 vNormal;\nvarying vec3 vColor;\nvarying float vNoiseVal;\nuniform float uNoiseStrength;\n\nvoid main() {\n\n  float grain = fract(sin(vNoiseVal * uNoiseStrength * 1000.0) * uNoiseStrength * 1000.0);\n  grain = 0.5 + grain * 0.8;\n  gl_FragColor = vec4(vColor * grain, 1.0);\n}\n",uniforms:s.current,defines:{USE_TANGENT:""}})]})}function v(e){let{debug:n=!1,displacementStrength:t,distortionStrength:o}=e;return(0,i.jsxs)(g.Xz,{camera:{position:[0,0,3.2],fov:45},style:{background:"transparent"},gl:{alpha:!0,antialias:!0},children:[!n&&(0,i.jsx)(s,{}),(0,i.jsx)(c.z,{enableZoom:n,enablePan:n,enableRotate:n}),(0,i.jsx)(a,{debug:n,dispose:null,displacementStrength:t,distortionStrength:o})]})}function s(){return(0,r.F)(e=>{let{camera:n}=e,t=.001*performance.now()*.1;n.position.x=3.2*Math.sin(t),n.position.z=3.2*Math.cos(t),n.lookAt(0,0,0)}),null}}}]);