Metadata-Version: 2.4
Name: robin-logistics-env
Version: 2.1.0
Summary: A professional logistics optimization environment for hackathons and competitions
Author-email: Robin <mario.salama@beltoneholding.com>
License: MIT
Project-URL: Homepage, https://github.com/robinlogistics/robin-logistics-env
Project-URL: Repository, https://github.com/robinlogistics/robin-logistics-env.git
Project-URL: Bug Tracker, https://github.com/robinlogistics/robin-logistics-env/issues
Keywords: logistics,optimization,vehicle-routing,hackathon,competition,simulation
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Education
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: streamlit>=1.28.0
Requires-Dist: pandas>=1.5.0
Requires-Dist: numpy>=1.21.0
Requires-Dist: networkx>=2.8.0
Requires-Dist: folium>=0.14.0
Requires-Dist: streamlit-folium>=0.13.0
Requires-Dist: plotly>=5.0.0
Requires-Dist: scipy>=1.9.0
Dynamic: license-file

# Robin Logistics Environment 🚛

**A professional logistics optimization environment for hackathons and competitions.**

**Author**: Robin  
**Contact**: mario.salama@beltoneholding.com

## 🎯 What This Is

Robin Logistics Environment is a **production-ready Python package** that provides a complete logistics optimization platform. Contestants import it as a package and implement their own solvers to compete in logistics challenges.

## 🚀 Quick Start

### For Contestants (Using Deployed Package)

```bash
# Install the package
pip install robin-logistics-env

# Run the interactive dashboard
python contestant_example/main.py
```

### For Local Development

```bash
# Clone and install locally
git clone <repository-url>
cd Environment
pip install -e .

# Run the dashboard
python main.py
```

## 🏗️ Architecture

```
robin_logistics/
├── core/                    # Core simulation engine
│   ├── environment.py      # Road network & entity management
│   ├── data_generator.py  # Problem instance generation
│   └── simulation_engine.py # Route execution & cost calculation
├── dashboard.py            # Interactive Streamlit dashboard
├── environment.py          # Main public API
└── solvers.py             # Example solver implementations
```

## 🎮 How It Works

### 1. **Environment Setup**
- **Road Network**: Real-world road data with nodes and edges
- **Warehouses**: Multiple depot locations with inventory
- **Orders**: Customer demands with SKU requirements
- **Vehicles**: Fleet with capacity constraints

### 2. **Problem Generation**
- **Dynamic**: Configurable parameters (dispersion, demand, inventory)
- **Realistic**: Based on actual geographic data
- **Balanced**: Ensures solvable problem instances

### 3. **Solver Execution**
- **Working Examples**: Provided solvers generate valid routes automatically
- **Contestant Responsibility**: Implement your own routing algorithms
- **Environment Validation**: Checks physical feasibility and constraints
- **Performance Metrics**: Comprehensive cost and efficiency analysis

### 4. **Solution Visualization**
- **Interactive Map**: Route visualization with Folium
- **Performance Dashboard**: Detailed metrics and analysis
- **Real-time Updates**: Immediate feedback on changes

## 🛠️ Contestant API

### Core Environment

```python
from robin_logistics import LogisticsEnvironment

# Create environment
env = LogisticsEnvironment()

# Generate problem instance
env.generate_scenario_from_config(config)

# Access data
road_data = env.get_road_network_data()
warehouses = env.warehouses
orders = env.orders
vehicles = env.vehicles
```

### Helper Functions

```python
# Route validation
is_valid = env.validate_route_constraints(solution)

# Cost calculation
cost = env.calculate_route_cost(route)

# Road network access
road_data = env.get_road_network_data()
nodes = road_data['nodes']
edges = road_data['edges']

# Essential data access
order_ids = env.get_all_order_ids()
vehicle_ids = env.get_available_vehicles()
order_location = env.get_order_location(order_id)
home_warehouse = env.get_vehicle_home_warehouse(vehicle_id)
```

### Example Solver Structure

```python
def my_solver(env):
    """Implement your logistics optimization algorithm here."""
    
    # Get road network data
    road_data = env.get_road_network_data()
    order_ids = env.get_all_order_ids()
    available_vehicles = env.get_available_vehicles()
    
    solution = {'routes': []}
    
    # Create routes for each vehicle-order pair
    for i, order_id in enumerate(order_ids):
        if i < len(available_vehicles):
            vehicle_id = available_vehicles[i]
            order_location = env.get_order_location(order_id)
            home_warehouse = env.get_vehicle_home_warehouse(vehicle_id)
            
            if order_location is not None and home_warehouse is not None:
                route = create_simple_route(home_warehouse, order_location, road_data)
                
                if route:
                    # Validate the route
                    is_valid, error_msg = env.validate_single_route(vehicle_id, route)
                    
                    if is_valid:
                        solution['routes'].append({
                            'vehicle_id': vehicle_id,
                            'route': route,
                            'distance': env.get_route_distance(route),
                            'order_id': order_id
                        })
    
    return solution

def create_route(vehicle, orders, nodes, edges):
    """Implement your routing algorithm here."""
    # Your pathfinding logic goes here
    # Must return route dict with: vehicle_id, orders, path, distance
    pass
```

## 🎯 Competition Rules

### What Contestants Must Implement
- **Pathfinding Algorithms**: Find shortest paths through road network
- **Route Optimization**: Assign orders to vehicles efficiently
- **Constraint Handling**: Respect capacity and distance limits

### What Environment Provides
- **Problem Data**: Road network, orders, warehouses, vehicles
- **Validation**: Route feasibility checking
- **Simulation**: Cost calculation and performance metrics
- **Visualization**: Interactive dashboard and maps

### Evaluation Criteria
- **Total Cost**: Minimize operational expenses
- **Efficiency**: Maximize orders served per distance
- **Feasibility**: All routes must be physically valid
- **Innovation**: Creative approach to optimization

## 📊 Dashboard Features

### Configuration
- **Demand Management**: SKU distribution and order generation
- **Supply Planning**: Warehouse inventory allocation
- **Fleet Configuration**: Vehicle type and capacity settings
- **Geographic Control**: Dispersion and coverage parameters

### Analysis
- **Route Visualization**: Interactive map with vehicle paths
- **Performance Metrics**: Cost, distance, efficiency analysis
- **Resource Utilization**: Warehouse and vehicle usage statistics
- **Solution Comparison**: Multiple solver performance analysis

## 🚀 Deployment

### PyPI Package
```bash
# Install from PyPI
pip install robin-logistics-env

# Import in your code
from robin_logistics import LogisticsEnvironment
```

### Local Development
```bash
# Install in development mode
pip install -e .

# Run tests
python test_structure.py

# Launch dashboard
python main.py
```

## 📚 Documentation

- **Package README**: `robin_logistics/README.md`
- **Contestant Guide**: `contestant_example/README.md`
- **API Reference**: See docstrings in code
- **Examples**: `contestant_example/` directory

## 🤝 Contributing

This package is designed for hackathon competitions. For development contributions:

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test thoroughly
5. Submit a pull request

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 🏆 Hackathon Success

**Robin Logistics Environment** provides everything contestants need to build world-class logistics optimization solutions:

- ✅ **Professional-grade environment** - Production-ready codebase
- ✅ **Working examples** - Solvers generate valid routes immediately
- ✅ **Real-world data and constraints** - Based on actual geographic data
- ✅ **Comprehensive validation tools** - Automatic route checking
- ✅ **Interactive development dashboard** - Real-time visualization and analysis
- ✅ **Clear competition framework** - Ready for immediate deployment

### What Contestants Get:

- **Immediate Results**: Run examples and see working solutions instantly
- **Complete API**: All helper functions for pathfinding and validation
- **Real-time Feedback**: Dashboard shows performance metrics immediately
- **Production Quality**: No bugs, clean code, professional structure

**Ready to launch your logistics hackathon? Your environment is fully functional and ready for contestants! 🚛💨**
