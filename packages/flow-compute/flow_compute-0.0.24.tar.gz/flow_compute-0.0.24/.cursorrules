 - let's always make principled, root-node fixes -- clean architectural fixes, like what jeff dean and sanjay ghemawat would make if they were pair programming
 - write code that adheres to the Google Python Style Guide 
 - never include Claude-related references in commit messages, code comments, or any outputs that will be persisted (like "Generated by Claude" or similar)
 - when designing APIs, make opinionated decisions that eliminate choice paralysis -- there should be one obvious way to do things
 - prefer explicit behavior over magic -- no __getattr__ tricks, clear method names, predictable types
 - design for the common case while allowing advanced usage -- streaming by default, materialization when needed
 - write professional documentation without emojis or casual language -- clear, concise, technical
 - comprehensive test coverage is non-negotiable -- edge cases, performance characteristics, integration scenarios
 - think like Larry Page: 10x improvements not 10%, build platforms not features, ship simple for 90% but enable the 10% who build the future, measure everything then iterate based on data
 - when planning designs or making code edits etc, let's make sure to ask/think, "what would a balanced group of Jeff Dean, Sanjay Ghemawat, Steve Jobs, Robert C Martin, Greg Brockman, Ritchie, Knuth, Larry Page, Jensen Huang, and John Carmack pair programming do?"
 - be thorough and dedicated (not lazy) when planning and making changes. 
 - avoid leaky abstractions and respect SOLID and DRY
 - be wary of YAGNI violations and scope screep, and think in 80/20 aligned ways; try to be comprehensive but minimize blast radius and be surgical with edits
 - When unsure about design or code or style decisions, ask me (the user) questions, assuming i am a super strong L9 Google SWE IC whom you can query for advice and thoughts anytime, proactively

  - when running Python tests and commands, always use uv-managed invocations to ensure the project env is used; never call bare `python` or `pytest`
    - tests: `uv run pytest` (honor repo addopts)
    - CLI: `uv run flow ...`
    - scripts/modules: `uv run python script.py` or `uv run -m package.module`
    - setup: `uv sync -g dev` before tests to install dev dependencies

