# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MonitorArtifactIdentifier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_case_metric_identifier': 'ArtifactIdentifierTestCaseMetricIdentifier',
        'category_test_metric_identifier': 'ArtifactIdentifierCategoryTestIdentifier',
        'subset_test_metric_identifier': 'ArtifactIdentifierSubsetTestMetricIdentifier'
    }

    attribute_map = {
        'test_case_metric_identifier': 'testCaseMetricIdentifier',
        'category_test_metric_identifier': 'categoryTestMetricIdentifier',
        'subset_test_metric_identifier': 'subsetTestMetricIdentifier'
    }

    def __init__(self, test_case_metric_identifier=None, category_test_metric_identifier=None, subset_test_metric_identifier=None):  # noqa: E501
        """MonitorArtifactIdentifier - a model defined in Swagger"""  # noqa: E501
        self._test_case_metric_identifier = None
        self._category_test_metric_identifier = None
        self._subset_test_metric_identifier = None
        self.discriminator = None
        if test_case_metric_identifier is not None:
            self.test_case_metric_identifier = test_case_metric_identifier
        if category_test_metric_identifier is not None:
            self.category_test_metric_identifier = category_test_metric_identifier
        if subset_test_metric_identifier is not None:
            self.subset_test_metric_identifier = subset_test_metric_identifier

    @property
    def test_case_metric_identifier(self):
        """Gets the test_case_metric_identifier of this MonitorArtifactIdentifier.  # noqa: E501


        :return: The test_case_metric_identifier of this MonitorArtifactIdentifier.  # noqa: E501
        :rtype: ArtifactIdentifierTestCaseMetricIdentifier
        """
        return self._test_case_metric_identifier

    @test_case_metric_identifier.setter
    def test_case_metric_identifier(self, test_case_metric_identifier):
        """Sets the test_case_metric_identifier of this MonitorArtifactIdentifier.


        :param test_case_metric_identifier: The test_case_metric_identifier of this MonitorArtifactIdentifier.  # noqa: E501
        :type: ArtifactIdentifierTestCaseMetricIdentifier
        """

        self._test_case_metric_identifier = test_case_metric_identifier

    @property
    def category_test_metric_identifier(self):
        """Gets the category_test_metric_identifier of this MonitorArtifactIdentifier.  # noqa: E501


        :return: The category_test_metric_identifier of this MonitorArtifactIdentifier.  # noqa: E501
        :rtype: ArtifactIdentifierCategoryTestIdentifier
        """
        return self._category_test_metric_identifier

    @category_test_metric_identifier.setter
    def category_test_metric_identifier(self, category_test_metric_identifier):
        """Sets the category_test_metric_identifier of this MonitorArtifactIdentifier.


        :param category_test_metric_identifier: The category_test_metric_identifier of this MonitorArtifactIdentifier.  # noqa: E501
        :type: ArtifactIdentifierCategoryTestIdentifier
        """

        self._category_test_metric_identifier = category_test_metric_identifier

    @property
    def subset_test_metric_identifier(self):
        """Gets the subset_test_metric_identifier of this MonitorArtifactIdentifier.  # noqa: E501


        :return: The subset_test_metric_identifier of this MonitorArtifactIdentifier.  # noqa: E501
        :rtype: ArtifactIdentifierSubsetTestMetricIdentifier
        """
        return self._subset_test_metric_identifier

    @subset_test_metric_identifier.setter
    def subset_test_metric_identifier(self, subset_test_metric_identifier):
        """Sets the subset_test_metric_identifier of this MonitorArtifactIdentifier.


        :param subset_test_metric_identifier: The subset_test_metric_identifier of this MonitorArtifactIdentifier.  # noqa: E501
        :type: ArtifactIdentifierSubsetTestMetricIdentifier
        """

        self._subset_test_metric_identifier = subset_test_metric_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonitorArtifactIdentifier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonitorArtifactIdentifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
