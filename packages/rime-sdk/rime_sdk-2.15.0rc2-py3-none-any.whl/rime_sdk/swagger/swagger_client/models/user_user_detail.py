# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserUserDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'RimeUUID',
        'name': 'str',
        'role': 'UserRole',
        'email': 'str',
        'full_name': 'str',
        'show_tutorial': 'bool',
        'org_role': 'RimeActorRole',
        'private_info': 'UserPrivateInfo'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'role': 'role',
        'email': 'email',
        'full_name': 'fullName',
        'show_tutorial': 'showTutorial',
        'org_role': 'orgRole',
        'private_info': 'privateInfo'
    }

    def __init__(self, id=None, name=None, role=None, email=None, full_name=None, show_tutorial=None, org_role=None, private_info=None):  # noqa: E501
        """UserUserDetail - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._role = None
        self._email = None
        self._full_name = None
        self._show_tutorial = None
        self._org_role = None
        self._private_info = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if role is not None:
            self.role = role
        if email is not None:
            self.email = email
        if full_name is not None:
            self.full_name = full_name
        if show_tutorial is not None:
            self.show_tutorial = show_tutorial
        if org_role is not None:
            self.org_role = org_role
        if private_info is not None:
            self.private_info = private_info

    @property
    def id(self):
        """Gets the id of this UserUserDetail.  # noqa: E501


        :return: The id of this UserUserDetail.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserUserDetail.


        :param id: The id of this UserUserDetail.  # noqa: E501
        :type: RimeUUID
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UserUserDetail.  # noqa: E501

        Name of the user.  # noqa: E501

        :return: The name of this UserUserDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserUserDetail.

        Name of the user.  # noqa: E501

        :param name: The name of this UserUserDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def role(self):
        """Gets the role of this UserUserDetail.  # noqa: E501


        :return: The role of this UserUserDetail.  # noqa: E501
        :rtype: UserRole
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserUserDetail.


        :param role: The role of this UserUserDetail.  # noqa: E501
        :type: UserRole
        """

        self._role = role

    @property
    def email(self):
        """Gets the email of this UserUserDetail.  # noqa: E501


        :return: The email of this UserUserDetail.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserUserDetail.


        :param email: The email of this UserUserDetail.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def full_name(self):
        """Gets the full_name of this UserUserDetail.  # noqa: E501


        :return: The full_name of this UserUserDetail.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserUserDetail.


        :param full_name: The full_name of this UserUserDetail.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def show_tutorial(self):
        """Gets the show_tutorial of this UserUserDetail.  # noqa: E501


        :return: The show_tutorial of this UserUserDetail.  # noqa: E501
        :rtype: bool
        """
        return self._show_tutorial

    @show_tutorial.setter
    def show_tutorial(self, show_tutorial):
        """Sets the show_tutorial of this UserUserDetail.


        :param show_tutorial: The show_tutorial of this UserUserDetail.  # noqa: E501
        :type: bool
        """

        self._show_tutorial = show_tutorial

    @property
    def org_role(self):
        """Gets the org_role of this UserUserDetail.  # noqa: E501


        :return: The org_role of this UserUserDetail.  # noqa: E501
        :rtype: RimeActorRole
        """
        return self._org_role

    @org_role.setter
    def org_role(self, org_role):
        """Sets the org_role of this UserUserDetail.


        :param org_role: The org_role of this UserUserDetail.  # noqa: E501
        :type: RimeActorRole
        """

        self._org_role = org_role

    @property
    def private_info(self):
        """Gets the private_info of this UserUserDetail.  # noqa: E501


        :return: The private_info of this UserUserDetail.  # noqa: E501
        :rtype: UserPrivateInfo
        """
        return self._private_info

    @private_info.setter
    def private_info(self, private_info):
        """Sets the private_info of this UserUserDetail.


        :param private_info: The private_info of this UserUserDetail.  # noqa: E501
        :type: UserPrivateInfo
        """

        self._private_info = private_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserUserDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserUserDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
