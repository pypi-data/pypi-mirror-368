# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RegistryMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tags': 'list[str]',
        'extra_info': 'str'
    }

    attribute_map = {
        'tags': 'tags',
        'extra_info': 'extraInfo'
    }

    def __init__(self, tags=None, extra_info=None):  # noqa: E501
        """RegistryMetadata - a model defined in Swagger"""  # noqa: E501
        self._tags = None
        self._extra_info = None
        self.discriminator = None
        if tags is not None:
            self.tags = tags
        if extra_info is not None:
            self.extra_info = extra_info

    @property
    def tags(self):
        """Gets the tags of this RegistryMetadata.  # noqa: E501

        Tags are optional single strings used to identify and organize across a project.  # noqa: E501

        :return: The tags of this RegistryMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RegistryMetadata.

        Tags are optional single strings used to identify and organize across a project.  # noqa: E501

        :param tags: The tags of this RegistryMetadata.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def extra_info(self):
        """Gets the extra_info of this RegistryMetadata.  # noqa: E501

        Metadata are optional json encoded information that users wish to associate.  # noqa: E501

        :return: The extra_info of this RegistryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._extra_info

    @extra_info.setter
    def extra_info(self, extra_info):
        """Sets the extra_info of this RegistryMetadata.

        Metadata are optional json encoded information that users wish to associate.  # noqa: E501

        :param extra_info: The extra_info of this RegistryMetadata.  # noqa: E501
        :type: str
        """

        self._extra_info = extra_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegistryMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistryMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
