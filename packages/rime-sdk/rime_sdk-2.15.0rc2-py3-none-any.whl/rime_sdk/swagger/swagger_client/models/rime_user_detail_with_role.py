# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeUserDetailWithRole(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_detail': 'UserUserDetail',
        'user_role': 'RimeActorRole',
        'implicit_grant': 'bool'
    }

    attribute_map = {
        'user_detail': 'userDetail',
        'user_role': 'userRole',
        'implicit_grant': 'implicitGrant'
    }

    def __init__(self, user_detail=None, user_role=None, implicit_grant=None):  # noqa: E501
        """RimeUserDetailWithRole - a model defined in Swagger"""  # noqa: E501
        self._user_detail = None
        self._user_role = None
        self._implicit_grant = None
        self.discriminator = None
        if user_detail is not None:
            self.user_detail = user_detail
        if user_role is not None:
            self.user_role = user_role
        if implicit_grant is not None:
            self.implicit_grant = implicit_grant

    @property
    def user_detail(self):
        """Gets the user_detail of this RimeUserDetailWithRole.  # noqa: E501


        :return: The user_detail of this RimeUserDetailWithRole.  # noqa: E501
        :rtype: UserUserDetail
        """
        return self._user_detail

    @user_detail.setter
    def user_detail(self, user_detail):
        """Sets the user_detail of this RimeUserDetailWithRole.


        :param user_detail: The user_detail of this RimeUserDetailWithRole.  # noqa: E501
        :type: UserUserDetail
        """

        self._user_detail = user_detail

    @property
    def user_role(self):
        """Gets the user_role of this RimeUserDetailWithRole.  # noqa: E501


        :return: The user_role of this RimeUserDetailWithRole.  # noqa: E501
        :rtype: RimeActorRole
        """
        return self._user_role

    @user_role.setter
    def user_role(self, user_role):
        """Sets the user_role of this RimeUserDetailWithRole.


        :param user_role: The user_role of this RimeUserDetailWithRole.  # noqa: E501
        :type: RimeActorRole
        """

        self._user_role = user_role

    @property
    def implicit_grant(self):
        """Gets the implicit_grant of this RimeUserDetailWithRole.  # noqa: E501


        :return: The implicit_grant of this RimeUserDetailWithRole.  # noqa: E501
        :rtype: bool
        """
        return self._implicit_grant

    @implicit_grant.setter
    def implicit_grant(self, implicit_grant):
        """Sets the implicit_grant of this RimeUserDetailWithRole.


        :param implicit_grant: The implicit_grant of this RimeUserDetailWithRole.  # noqa: E501
        :type: bool
        """

        self._implicit_grant = implicit_grant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeUserDetailWithRole, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeUserDetailWithRole):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
