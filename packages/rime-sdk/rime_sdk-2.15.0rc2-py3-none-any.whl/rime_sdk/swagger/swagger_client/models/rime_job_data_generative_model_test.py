# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeJobDataGenerativeModelTest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workspace_id': 'RimeUUID',
        'progress': 'RimeGenerativeModelTestProgress',
        'name': 'str',
        'url': 'str',
        'model_output_is_sensitive': 'bool'
    }

    attribute_map = {
        'workspace_id': 'workspaceId',
        'progress': 'progress',
        'name': 'name',
        'url': 'url',
        'model_output_is_sensitive': 'modelOutputIsSensitive'
    }

    def __init__(self, workspace_id=None, progress=None, name=None, url=None, model_output_is_sensitive=None):  # noqa: E501
        """RimeJobDataGenerativeModelTest - a model defined in Swagger"""  # noqa: E501
        self._workspace_id = None
        self._progress = None
        self._name = None
        self._url = None
        self._model_output_is_sensitive = None
        self.discriminator = None
        if workspace_id is not None:
            self.workspace_id = workspace_id
        if progress is not None:
            self.progress = progress
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if model_output_is_sensitive is not None:
            self.model_output_is_sensitive = model_output_is_sensitive

    @property
    def workspace_id(self):
        """Gets the workspace_id of this RimeJobDataGenerativeModelTest.  # noqa: E501


        :return: The workspace_id of this RimeJobDataGenerativeModelTest.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this RimeJobDataGenerativeModelTest.


        :param workspace_id: The workspace_id of this RimeJobDataGenerativeModelTest.  # noqa: E501
        :type: RimeUUID
        """

        self._workspace_id = workspace_id

    @property
    def progress(self):
        """Gets the progress of this RimeJobDataGenerativeModelTest.  # noqa: E501


        :return: The progress of this RimeJobDataGenerativeModelTest.  # noqa: E501
        :rtype: RimeGenerativeModelTestProgress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this RimeJobDataGenerativeModelTest.


        :param progress: The progress of this RimeJobDataGenerativeModelTest.  # noqa: E501
        :type: RimeGenerativeModelTestProgress
        """

        self._progress = progress

    @property
    def name(self):
        """Gets the name of this RimeJobDataGenerativeModelTest.  # noqa: E501


        :return: The name of this RimeJobDataGenerativeModelTest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RimeJobDataGenerativeModelTest.


        :param name: The name of this RimeJobDataGenerativeModelTest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this RimeJobDataGenerativeModelTest.  # noqa: E501


        :return: The url of this RimeJobDataGenerativeModelTest.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RimeJobDataGenerativeModelTest.


        :param url: The url of this RimeJobDataGenerativeModelTest.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def model_output_is_sensitive(self):
        """Gets the model_output_is_sensitive of this RimeJobDataGenerativeModelTest.  # noqa: E501


        :return: The model_output_is_sensitive of this RimeJobDataGenerativeModelTest.  # noqa: E501
        :rtype: bool
        """
        return self._model_output_is_sensitive

    @model_output_is_sensitive.setter
    def model_output_is_sensitive(self, model_output_is_sensitive):
        """Sets the model_output_is_sensitive of this RimeJobDataGenerativeModelTest.


        :param model_output_is_sensitive: The model_output_is_sensitive of this RimeJobDataGenerativeModelTest.  # noqa: E501
        :type: bool
        """

        self._model_output_is_sensitive = model_output_is_sensitive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeJobDataGenerativeModelTest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeJobDataGenerativeModelTest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
