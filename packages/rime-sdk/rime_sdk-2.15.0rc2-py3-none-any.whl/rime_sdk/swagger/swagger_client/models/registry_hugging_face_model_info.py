# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RegistryHuggingFaceModelInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_uri': 'str',
        'kwargs': 'str'
    }

    attribute_map = {
        'model_uri': 'modelUri',
        'kwargs': 'kwargs'
    }

    def __init__(self, model_uri=None, kwargs=None):  # noqa: E501
        """RegistryHuggingFaceModelInfo - a model defined in Swagger"""  # noqa: E501
        self._model_uri = None
        self._kwargs = None
        self.discriminator = None
        self.model_uri = model_uri
        if kwargs is not None:
            self.kwargs = kwargs

    @property
    def model_uri(self):
        """Gets the model_uri of this RegistryHuggingFaceModelInfo.  # noqa: E501

        The name of the model to use.  Can get be found by using the copy button next to the name of the model on the model page.  For example, the model_uri for the model at https://huggingface.co/distilgpt2 is \"distilgpt2\".  # noqa: E501

        :return: The model_uri of this RegistryHuggingFaceModelInfo.  # noqa: E501
        :rtype: str
        """
        return self._model_uri

    @model_uri.setter
    def model_uri(self, model_uri):
        """Sets the model_uri of this RegistryHuggingFaceModelInfo.

        The name of the model to use.  Can get be found by using the copy button next to the name of the model on the model page.  For example, the model_uri for the model at https://huggingface.co/distilgpt2 is \"distilgpt2\".  # noqa: E501

        :param model_uri: The model_uri of this RegistryHuggingFaceModelInfo.  # noqa: E501
        :type: str
        """
        if model_uri is None:
            raise ValueError("Invalid value for `model_uri`, must not be `None`")  # noqa: E501

        self._model_uri = model_uri

    @property
    def kwargs(self):
        """Gets the kwargs of this RegistryHuggingFaceModelInfo.  # noqa: E501

        We are currently in the process of adding extra huggingface params and separating use cases into tabular and nlp. Use a serialized json dictionary for other variables right now to ensure maximum flexibility.  # noqa: E501

        :return: The kwargs of this RegistryHuggingFaceModelInfo.  # noqa: E501
        :rtype: str
        """
        return self._kwargs

    @kwargs.setter
    def kwargs(self, kwargs):
        """Sets the kwargs of this RegistryHuggingFaceModelInfo.

        We are currently in the process of adding extra huggingface params and separating use cases into tabular and nlp. Use a serialized json dictionary for other variables right now to ensure maximum flexibility.  # noqa: E501

        :param kwargs: The kwargs of this RegistryHuggingFaceModelInfo.  # noqa: E501
        :type: str
        """

        self._kwargs = kwargs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegistryHuggingFaceModelInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistryHuggingFaceModelInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
