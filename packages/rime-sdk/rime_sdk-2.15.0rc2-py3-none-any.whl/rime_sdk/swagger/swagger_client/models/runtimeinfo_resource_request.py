# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RuntimeinfoResourceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ram_request_megabytes': 'str',
        'cpu_request_millicores': 'str'
    }

    attribute_map = {
        'ram_request_megabytes': 'ramRequestMegabytes',
        'cpu_request_millicores': 'cpuRequestMillicores'
    }

    def __init__(self, ram_request_megabytes=None, cpu_request_millicores=None):  # noqa: E501
        """RuntimeinfoResourceRequest - a model defined in Swagger"""  # noqa: E501
        self._ram_request_megabytes = None
        self._cpu_request_millicores = None
        self.discriminator = None
        if ram_request_megabytes is not None:
            self.ram_request_megabytes = ram_request_megabytes
        if cpu_request_millicores is not None:
            self.cpu_request_millicores = cpu_request_millicores

    @property
    def ram_request_megabytes(self):
        """Gets the ram_request_megabytes of this RuntimeinfoResourceRequest.  # noqa: E501

        Megabytes of RAM requested for the Stress Test Job.  # noqa: E501

        :return: The ram_request_megabytes of this RuntimeinfoResourceRequest.  # noqa: E501
        :rtype: str
        """
        return self._ram_request_megabytes

    @ram_request_megabytes.setter
    def ram_request_megabytes(self, ram_request_megabytes):
        """Sets the ram_request_megabytes of this RuntimeinfoResourceRequest.

        Megabytes of RAM requested for the Stress Test Job.  # noqa: E501

        :param ram_request_megabytes: The ram_request_megabytes of this RuntimeinfoResourceRequest.  # noqa: E501
        :type: str
        """

        self._ram_request_megabytes = ram_request_megabytes

    @property
    def cpu_request_millicores(self):
        """Gets the cpu_request_millicores of this RuntimeinfoResourceRequest.  # noqa: E501

        Millicores of CPU requested for the Stress Test Job.  # noqa: E501

        :return: The cpu_request_millicores of this RuntimeinfoResourceRequest.  # noqa: E501
        :rtype: str
        """
        return self._cpu_request_millicores

    @cpu_request_millicores.setter
    def cpu_request_millicores(self, cpu_request_millicores):
        """Sets the cpu_request_millicores of this RuntimeinfoResourceRequest.

        Millicores of CPU requested for the Stress Test Job.  # noqa: E501

        :param cpu_request_millicores: The cpu_request_millicores of this RuntimeinfoResourceRequest.  # noqa: E501
        :type: str
        """

        self._cpu_request_millicores = cpu_request_millicores

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuntimeinfoResourceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuntimeinfoResourceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
