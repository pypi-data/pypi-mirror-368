# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RegistryConnectionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_file': 'RegistryDataFileInfo',
        'data_loading': 'RegistryDataLoadingInfo',
        'data_collector': 'RegistryDataCollectorInfo',
        'databricks': 'RegistryDatabricksInfo',
        'hugging_face': 'RegistryHuggingFaceDataInfo'
    }

    attribute_map = {
        'data_file': 'dataFile',
        'data_loading': 'dataLoading',
        'data_collector': 'dataCollector',
        'databricks': 'databricks',
        'hugging_face': 'huggingFace'
    }

    def __init__(self, data_file=None, data_loading=None, data_collector=None, databricks=None, hugging_face=None):  # noqa: E501
        """RegistryConnectionInfo - a model defined in Swagger"""  # noqa: E501
        self._data_file = None
        self._data_loading = None
        self._data_collector = None
        self._databricks = None
        self._hugging_face = None
        self.discriminator = None
        if data_file is not None:
            self.data_file = data_file
        if data_loading is not None:
            self.data_loading = data_loading
        if data_collector is not None:
            self.data_collector = data_collector
        if databricks is not None:
            self.databricks = databricks
        if hugging_face is not None:
            self.hugging_face = hugging_face

    @property
    def data_file(self):
        """Gets the data_file of this RegistryConnectionInfo.  # noqa: E501


        :return: The data_file of this RegistryConnectionInfo.  # noqa: E501
        :rtype: RegistryDataFileInfo
        """
        return self._data_file

    @data_file.setter
    def data_file(self, data_file):
        """Sets the data_file of this RegistryConnectionInfo.


        :param data_file: The data_file of this RegistryConnectionInfo.  # noqa: E501
        :type: RegistryDataFileInfo
        """

        self._data_file = data_file

    @property
    def data_loading(self):
        """Gets the data_loading of this RegistryConnectionInfo.  # noqa: E501


        :return: The data_loading of this RegistryConnectionInfo.  # noqa: E501
        :rtype: RegistryDataLoadingInfo
        """
        return self._data_loading

    @data_loading.setter
    def data_loading(self, data_loading):
        """Sets the data_loading of this RegistryConnectionInfo.


        :param data_loading: The data_loading of this RegistryConnectionInfo.  # noqa: E501
        :type: RegistryDataLoadingInfo
        """

        self._data_loading = data_loading

    @property
    def data_collector(self):
        """Gets the data_collector of this RegistryConnectionInfo.  # noqa: E501


        :return: The data_collector of this RegistryConnectionInfo.  # noqa: E501
        :rtype: RegistryDataCollectorInfo
        """
        return self._data_collector

    @data_collector.setter
    def data_collector(self, data_collector):
        """Sets the data_collector of this RegistryConnectionInfo.


        :param data_collector: The data_collector of this RegistryConnectionInfo.  # noqa: E501
        :type: RegistryDataCollectorInfo
        """

        self._data_collector = data_collector

    @property
    def databricks(self):
        """Gets the databricks of this RegistryConnectionInfo.  # noqa: E501


        :return: The databricks of this RegistryConnectionInfo.  # noqa: E501
        :rtype: RegistryDatabricksInfo
        """
        return self._databricks

    @databricks.setter
    def databricks(self, databricks):
        """Sets the databricks of this RegistryConnectionInfo.


        :param databricks: The databricks of this RegistryConnectionInfo.  # noqa: E501
        :type: RegistryDatabricksInfo
        """

        self._databricks = databricks

    @property
    def hugging_face(self):
        """Gets the hugging_face of this RegistryConnectionInfo.  # noqa: E501


        :return: The hugging_face of this RegistryConnectionInfo.  # noqa: E501
        :rtype: RegistryHuggingFaceDataInfo
        """
        return self._hugging_face

    @hugging_face.setter
    def hugging_face(self, hugging_face):
        """Sets the hugging_face of this RegistryConnectionInfo.


        :param hugging_face: The hugging_face of this RegistryConnectionInfo.  # noqa: E501
        :type: RegistryHuggingFaceDataInfo
        """

        self._hugging_face = hugging_face

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegistryConnectionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistryConnectionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
