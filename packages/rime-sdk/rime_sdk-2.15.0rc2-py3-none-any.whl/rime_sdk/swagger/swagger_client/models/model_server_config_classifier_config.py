# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelServerConfigClassifierConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sensitivity_based_thresholds': 'dict(str, str)',
        'fixed_threshold': 'str',
        'default_sensitivity': 'str',
        'positive_class_index': 'int'
    }

    attribute_map = {
        'sensitivity_based_thresholds': 'sensitivityBasedThresholds',
        'fixed_threshold': 'fixedThreshold',
        'default_sensitivity': 'defaultSensitivity',
        'positive_class_index': 'positiveClassIndex'
    }

    def __init__(self, sensitivity_based_thresholds=None, fixed_threshold=None, default_sensitivity=None, positive_class_index=None):  # noqa: E501
        """ModelServerConfigClassifierConfig - a model defined in Swagger"""  # noqa: E501
        self._sensitivity_based_thresholds = None
        self._fixed_threshold = None
        self._default_sensitivity = None
        self._positive_class_index = None
        self.discriminator = None
        if sensitivity_based_thresholds is not None:
            self.sensitivity_based_thresholds = sensitivity_based_thresholds
        if fixed_threshold is not None:
            self.fixed_threshold = fixed_threshold
        if default_sensitivity is not None:
            self.default_sensitivity = default_sensitivity
        if positive_class_index is not None:
            self.positive_class_index = positive_class_index

    @property
    def sensitivity_based_thresholds(self):
        """Gets the sensitivity_based_thresholds of this ModelServerConfigClassifierConfig.  # noqa: E501


        :return: The sensitivity_based_thresholds of this ModelServerConfigClassifierConfig.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._sensitivity_based_thresholds

    @sensitivity_based_thresholds.setter
    def sensitivity_based_thresholds(self, sensitivity_based_thresholds):
        """Sets the sensitivity_based_thresholds of this ModelServerConfigClassifierConfig.


        :param sensitivity_based_thresholds: The sensitivity_based_thresholds of this ModelServerConfigClassifierConfig.  # noqa: E501
        :type: dict(str, str)
        """

        self._sensitivity_based_thresholds = sensitivity_based_thresholds

    @property
    def fixed_threshold(self):
        """Gets the fixed_threshold of this ModelServerConfigClassifierConfig.  # noqa: E501


        :return: The fixed_threshold of this ModelServerConfigClassifierConfig.  # noqa: E501
        :rtype: str
        """
        return self._fixed_threshold

    @fixed_threshold.setter
    def fixed_threshold(self, fixed_threshold):
        """Sets the fixed_threshold of this ModelServerConfigClassifierConfig.


        :param fixed_threshold: The fixed_threshold of this ModelServerConfigClassifierConfig.  # noqa: E501
        :type: str
        """

        self._fixed_threshold = fixed_threshold

    @property
    def default_sensitivity(self):
        """Gets the default_sensitivity of this ModelServerConfigClassifierConfig.  # noqa: E501


        :return: The default_sensitivity of this ModelServerConfigClassifierConfig.  # noqa: E501
        :rtype: str
        """
        return self._default_sensitivity

    @default_sensitivity.setter
    def default_sensitivity(self, default_sensitivity):
        """Sets the default_sensitivity of this ModelServerConfigClassifierConfig.


        :param default_sensitivity: The default_sensitivity of this ModelServerConfigClassifierConfig.  # noqa: E501
        :type: str
        """

        self._default_sensitivity = default_sensitivity

    @property
    def positive_class_index(self):
        """Gets the positive_class_index of this ModelServerConfigClassifierConfig.  # noqa: E501


        :return: The positive_class_index of this ModelServerConfigClassifierConfig.  # noqa: E501
        :rtype: int
        """
        return self._positive_class_index

    @positive_class_index.setter
    def positive_class_index(self, positive_class_index):
        """Sets the positive_class_index of this ModelServerConfigClassifierConfig.


        :param positive_class_index: The positive_class_index of this ModelServerConfigClassifierConfig.  # noqa: E501
        :type: int
        """

        self._positive_class_index = positive_class_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelServerConfigClassifierConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelServerConfigClassifierConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
