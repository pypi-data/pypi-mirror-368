# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FirewallInstanceConfigModelServerConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'hugging_face_config': 'ModelServerConfigHuggingfaceConfig',
        'classification_config': 'dict(str, ModelServerConfigClassifierConfig)',
        'model_server_image': 'str',
        'resource_config': 'GenerativefirewallKubernetesResourceConfig'
    }

    attribute_map = {
        'name': 'name',
        'hugging_face_config': 'huggingFaceConfig',
        'classification_config': 'classificationConfig',
        'model_server_image': 'modelServerImage',
        'resource_config': 'resourceConfig'
    }

    def __init__(self, name=None, hugging_face_config=None, classification_config=None, model_server_image=None, resource_config=None):  # noqa: E501
        """FirewallInstanceConfigModelServerConfig - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._hugging_face_config = None
        self._classification_config = None
        self._model_server_image = None
        self._resource_config = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if hugging_face_config is not None:
            self.hugging_face_config = hugging_face_config
        if classification_config is not None:
            self.classification_config = classification_config
        if model_server_image is not None:
            self.model_server_image = model_server_image
        if resource_config is not None:
            self.resource_config = resource_config

    @property
    def name(self):
        """Gets the name of this FirewallInstanceConfigModelServerConfig.  # noqa: E501


        :return: The name of this FirewallInstanceConfigModelServerConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FirewallInstanceConfigModelServerConfig.


        :param name: The name of this FirewallInstanceConfigModelServerConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def hugging_face_config(self):
        """Gets the hugging_face_config of this FirewallInstanceConfigModelServerConfig.  # noqa: E501


        :return: The hugging_face_config of this FirewallInstanceConfigModelServerConfig.  # noqa: E501
        :rtype: ModelServerConfigHuggingfaceConfig
        """
        return self._hugging_face_config

    @hugging_face_config.setter
    def hugging_face_config(self, hugging_face_config):
        """Sets the hugging_face_config of this FirewallInstanceConfigModelServerConfig.


        :param hugging_face_config: The hugging_face_config of this FirewallInstanceConfigModelServerConfig.  # noqa: E501
        :type: ModelServerConfigHuggingfaceConfig
        """

        self._hugging_face_config = hugging_face_config

    @property
    def classification_config(self):
        """Gets the classification_config of this FirewallInstanceConfigModelServerConfig.  # noqa: E501


        :return: The classification_config of this FirewallInstanceConfigModelServerConfig.  # noqa: E501
        :rtype: dict(str, ModelServerConfigClassifierConfig)
        """
        return self._classification_config

    @classification_config.setter
    def classification_config(self, classification_config):
        """Sets the classification_config of this FirewallInstanceConfigModelServerConfig.


        :param classification_config: The classification_config of this FirewallInstanceConfigModelServerConfig.  # noqa: E501
        :type: dict(str, ModelServerConfigClassifierConfig)
        """

        self._classification_config = classification_config

    @property
    def model_server_image(self):
        """Gets the model_server_image of this FirewallInstanceConfigModelServerConfig.  # noqa: E501


        :return: The model_server_image of this FirewallInstanceConfigModelServerConfig.  # noqa: E501
        :rtype: str
        """
        return self._model_server_image

    @model_server_image.setter
    def model_server_image(self, model_server_image):
        """Sets the model_server_image of this FirewallInstanceConfigModelServerConfig.


        :param model_server_image: The model_server_image of this FirewallInstanceConfigModelServerConfig.  # noqa: E501
        :type: str
        """

        self._model_server_image = model_server_image

    @property
    def resource_config(self):
        """Gets the resource_config of this FirewallInstanceConfigModelServerConfig.  # noqa: E501


        :return: The resource_config of this FirewallInstanceConfigModelServerConfig.  # noqa: E501
        :rtype: GenerativefirewallKubernetesResourceConfig
        """
        return self._resource_config

    @resource_config.setter
    def resource_config(self, resource_config):
        """Sets the resource_config of this FirewallInstanceConfigModelServerConfig.


        :param resource_config: The resource_config of this FirewallInstanceConfigModelServerConfig.  # noqa: E501
        :type: GenerativefirewallKubernetesResourceConfig
        """

        self._resource_config = resource_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FirewallInstanceConfigModelServerConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirewallInstanceConfigModelServerConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
