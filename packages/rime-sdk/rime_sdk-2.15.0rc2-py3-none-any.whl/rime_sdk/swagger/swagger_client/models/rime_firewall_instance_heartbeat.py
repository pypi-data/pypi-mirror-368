# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeFirewallInstanceHeartbeat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'firewall_instance_id': 'str',
        'health': 'GenerativefirewallFirewallInstanceHealth'
    }

    attribute_map = {
        'firewall_instance_id': 'firewallInstanceId',
        'health': 'health'
    }

    def __init__(self, firewall_instance_id=None, health=None):  # noqa: E501
        """RimeFirewallInstanceHeartbeat - a model defined in Swagger"""  # noqa: E501
        self._firewall_instance_id = None
        self._health = None
        self.discriminator = None
        self.firewall_instance_id = firewall_instance_id
        if health is not None:
            self.health = health

    @property
    def firewall_instance_id(self):
        """Gets the firewall_instance_id of this RimeFirewallInstanceHeartbeat.  # noqa: E501

        The ID of the firewall instance.  # noqa: E501

        :return: The firewall_instance_id of this RimeFirewallInstanceHeartbeat.  # noqa: E501
        :rtype: str
        """
        return self._firewall_instance_id

    @firewall_instance_id.setter
    def firewall_instance_id(self, firewall_instance_id):
        """Sets the firewall_instance_id of this RimeFirewallInstanceHeartbeat.

        The ID of the firewall instance.  # noqa: E501

        :param firewall_instance_id: The firewall_instance_id of this RimeFirewallInstanceHeartbeat.  # noqa: E501
        :type: str
        """
        if firewall_instance_id is None:
            raise ValueError("Invalid value for `firewall_instance_id`, must not be `None`")  # noqa: E501

        self._firewall_instance_id = firewall_instance_id

    @property
    def health(self):
        """Gets the health of this RimeFirewallInstanceHeartbeat.  # noqa: E501


        :return: The health of this RimeFirewallInstanceHeartbeat.  # noqa: E501
        :rtype: GenerativefirewallFirewallInstanceHealth
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this RimeFirewallInstanceHeartbeat.


        :param health: The health of this RimeFirewallInstanceHeartbeat.  # noqa: E501
        :type: GenerativefirewallFirewallInstanceHealth
        """

        self._health = health

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeFirewallInstanceHeartbeat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeFirewallInstanceHeartbeat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
