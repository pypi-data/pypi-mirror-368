# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FirewallInstanceIdUuidScanBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query': 'str',
        'response': 'str',
        'ruleset_types': 'list[GenerativefirewallGuardrailScanRuleset]',
        'language': 'str',
        'firewall_instance_id': 'object',
        'detection_config': 'GenerativefirewallDetectionConfig',
        'tools': 'str'
    }

    attribute_map = {
        'query': 'query',
        'response': 'response',
        'ruleset_types': 'rulesetTypes',
        'language': 'language',
        'firewall_instance_id': 'firewallInstanceId',
        'detection_config': 'detectionConfig',
        'tools': 'tools'
    }

    def __init__(self, query=None, response=None, ruleset_types=None, language=None, firewall_instance_id=None, detection_config=None, tools=None):  # noqa: E501
        """FirewallInstanceIdUuidScanBody - a model defined in Swagger"""  # noqa: E501
        self._query = None
        self._response = None
        self._ruleset_types = None
        self._language = None
        self._firewall_instance_id = None
        self._detection_config = None
        self._tools = None
        self.discriminator = None
        if query is not None:
            self.query = query
        if response is not None:
            self.response = response
        if ruleset_types is not None:
            self.ruleset_types = ruleset_types
        if language is not None:
            self.language = language
        if firewall_instance_id is not None:
            self.firewall_instance_id = firewall_instance_id
        if detection_config is not None:
            self.detection_config = detection_config
        if tools is not None:
            self.tools = tools

    @property
    def query(self):
        """Gets the query of this FirewallInstanceIdUuidScanBody.  # noqa: E501

        A JSON string representing the conversation history included in a request to the LLM API.  # noqa: E501

        :return: The query of this FirewallInstanceIdUuidScanBody.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this FirewallInstanceIdUuidScanBody.

        A JSON string representing the conversation history included in a request to the LLM API.  # noqa: E501

        :param query: The query of this FirewallInstanceIdUuidScanBody.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def response(self):
        """Gets the response of this FirewallInstanceIdUuidScanBody.  # noqa: E501

        A JSON string representing the LLM API response.  # noqa: E501

        :return: The response of this FirewallInstanceIdUuidScanBody.  # noqa: E501
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this FirewallInstanceIdUuidScanBody.

        A JSON string representing the LLM API response.  # noqa: E501

        :param response: The response of this FirewallInstanceIdUuidScanBody.  # noqa: E501
        :type: str
        """

        self._response = response

    @property
    def ruleset_types(self):
        """Gets the ruleset_types of this FirewallInstanceIdUuidScanBody.  # noqa: E501

        List of rulesets to scan against.  # noqa: E501

        :return: The ruleset_types of this FirewallInstanceIdUuidScanBody.  # noqa: E501
        :rtype: list[GenerativefirewallGuardrailScanRuleset]
        """
        return self._ruleset_types

    @ruleset_types.setter
    def ruleset_types(self, ruleset_types):
        """Sets the ruleset_types of this FirewallInstanceIdUuidScanBody.

        List of rulesets to scan against.  # noqa: E501

        :param ruleset_types: The ruleset_types of this FirewallInstanceIdUuidScanBody.  # noqa: E501
        :type: list[GenerativefirewallGuardrailScanRuleset]
        """

        self._ruleset_types = ruleset_types

    @property
    def language(self):
        """Gets the language of this FirewallInstanceIdUuidScanBody.  # noqa: E501

        Language of the policy.  # noqa: E501

        :return: The language of this FirewallInstanceIdUuidScanBody.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this FirewallInstanceIdUuidScanBody.

        Language of the policy.  # noqa: E501

        :param language: The language of this FirewallInstanceIdUuidScanBody.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def firewall_instance_id(self):
        """Gets the firewall_instance_id of this FirewallInstanceIdUuidScanBody.  # noqa: E501

        Unique ID of an object in RIME.  # noqa: E501

        :return: The firewall_instance_id of this FirewallInstanceIdUuidScanBody.  # noqa: E501
        :rtype: object
        """
        return self._firewall_instance_id

    @firewall_instance_id.setter
    def firewall_instance_id(self, firewall_instance_id):
        """Sets the firewall_instance_id of this FirewallInstanceIdUuidScanBody.

        Unique ID of an object in RIME.  # noqa: E501

        :param firewall_instance_id: The firewall_instance_id of this FirewallInstanceIdUuidScanBody.  # noqa: E501
        :type: object
        """

        self._firewall_instance_id = firewall_instance_id

    @property
    def detection_config(self):
        """Gets the detection_config of this FirewallInstanceIdUuidScanBody.  # noqa: E501


        :return: The detection_config of this FirewallInstanceIdUuidScanBody.  # noqa: E501
        :rtype: GenerativefirewallDetectionConfig
        """
        return self._detection_config

    @detection_config.setter
    def detection_config(self, detection_config):
        """Sets the detection_config of this FirewallInstanceIdUuidScanBody.


        :param detection_config: The detection_config of this FirewallInstanceIdUuidScanBody.  # noqa: E501
        :type: GenerativefirewallDetectionConfig
        """

        self._detection_config = detection_config

    @property
    def tools(self):
        """Gets the tools of this FirewallInstanceIdUuidScanBody.  # noqa: E501

        A JSON string representing the tools included in the request to the LLM API.  # noqa: E501

        :return: The tools of this FirewallInstanceIdUuidScanBody.  # noqa: E501
        :rtype: str
        """
        return self._tools

    @tools.setter
    def tools(self, tools):
        """Sets the tools of this FirewallInstanceIdUuidScanBody.

        A JSON string representing the tools included in the request to the LLM API.  # noqa: E501

        :param tools: The tools of this FirewallInstanceIdUuidScanBody.  # noqa: E501
        :type: str
        """

        self._tools = tools

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FirewallInstanceIdUuidScanBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirewallInstanceIdUuidScanBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
