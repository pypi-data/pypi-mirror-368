# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativevalidationGenerativeValidationTestRun(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'RimeUUID',
        'name': 'str',
        'workspace_id': 'RimeUUID',
        'config': 'GenerativevalidationGenerativeValidationConfig',
        'job_info': 'GenerativevalidationJobInfo',
        'total_attacks': 'int',
        'successful_attacks': 'int',
        'attempted_attacks': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'workspace_id': 'workspaceId',
        'config': 'config',
        'job_info': 'jobInfo',
        'total_attacks': 'totalAttacks',
        'successful_attacks': 'successfulAttacks',
        'attempted_attacks': 'attemptedAttacks'
    }

    def __init__(self, id=None, name=None, workspace_id=None, config=None, job_info=None, total_attacks=None, successful_attacks=None, attempted_attacks=None):  # noqa: E501
        """GenerativevalidationGenerativeValidationTestRun - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._workspace_id = None
        self._config = None
        self._job_info = None
        self._total_attacks = None
        self._successful_attacks = None
        self._attempted_attacks = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if workspace_id is not None:
            self.workspace_id = workspace_id
        if config is not None:
            self.config = config
        if job_info is not None:
            self.job_info = job_info
        if total_attacks is not None:
            self.total_attacks = total_attacks
        if successful_attacks is not None:
            self.successful_attacks = successful_attacks
        if attempted_attacks is not None:
            self.attempted_attacks = attempted_attacks

    @property
    def id(self):
        """Gets the id of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501


        :return: The id of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GenerativevalidationGenerativeValidationTestRun.


        :param id: The id of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501
        :type: RimeUUID
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501

        A name of the test run.  # noqa: E501

        :return: The name of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GenerativevalidationGenerativeValidationTestRun.

        A name of the test run.  # noqa: E501

        :param name: The name of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def workspace_id(self):
        """Gets the workspace_id of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501


        :return: The workspace_id of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this GenerativevalidationGenerativeValidationTestRun.


        :param workspace_id: The workspace_id of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501
        :type: RimeUUID
        """

        self._workspace_id = workspace_id

    @property
    def config(self):
        """Gets the config of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501


        :return: The config of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501
        :rtype: GenerativevalidationGenerativeValidationConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this GenerativevalidationGenerativeValidationTestRun.


        :param config: The config of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501
        :type: GenerativevalidationGenerativeValidationConfig
        """

        self._config = config

    @property
    def job_info(self):
        """Gets the job_info of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501


        :return: The job_info of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501
        :rtype: GenerativevalidationJobInfo
        """
        return self._job_info

    @job_info.setter
    def job_info(self, job_info):
        """Sets the job_info of this GenerativevalidationGenerativeValidationTestRun.


        :param job_info: The job_info of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501
        :type: GenerativevalidationJobInfo
        """

        self._job_info = job_info

    @property
    def total_attacks(self):
        """Gets the total_attacks of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501

        Total attacks run during the test.  # noqa: E501

        :return: The total_attacks of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501
        :rtype: int
        """
        return self._total_attacks

    @total_attacks.setter
    def total_attacks(self, total_attacks):
        """Sets the total_attacks of this GenerativevalidationGenerativeValidationTestRun.

        Total attacks run during the test.  # noqa: E501

        :param total_attacks: The total_attacks of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501
        :type: int
        """

        self._total_attacks = total_attacks

    @property
    def successful_attacks(self):
        """Gets the successful_attacks of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501

        The number of successful attacks on the model.  # noqa: E501

        :return: The successful_attacks of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501
        :rtype: int
        """
        return self._successful_attacks

    @successful_attacks.setter
    def successful_attacks(self, successful_attacks):
        """Sets the successful_attacks of this GenerativevalidationGenerativeValidationTestRun.

        The number of successful attacks on the model.  # noqa: E501

        :param successful_attacks: The successful_attacks of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501
        :type: int
        """

        self._successful_attacks = successful_attacks

    @property
    def attempted_attacks(self):
        """Gets the attempted_attacks of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501

        The number of attacks attempted.  # noqa: E501

        :return: The attempted_attacks of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501
        :rtype: int
        """
        return self._attempted_attacks

    @attempted_attacks.setter
    def attempted_attacks(self, attempted_attacks):
        """Sets the attempted_attacks of this GenerativevalidationGenerativeValidationTestRun.

        The number of attacks attempted.  # noqa: E501

        :param attempted_attacks: The attempted_attacks of this GenerativevalidationGenerativeValidationTestRun.  # noqa: E501
        :type: int
        """

        self._attempted_attacks = attempted_attacks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativevalidationGenerativeValidationTestRun, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativevalidationGenerativeValidationTestRun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
