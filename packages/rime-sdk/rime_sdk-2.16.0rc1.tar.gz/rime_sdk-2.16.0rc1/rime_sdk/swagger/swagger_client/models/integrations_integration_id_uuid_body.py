# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntegrationsIntegrationIdUuidBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'integration_id': 'object',
        'variables': 'list[RimeConfigureIntegrationRequestIntegrationVariable]'
    }

    attribute_map = {
        'integration_id': 'integrationId',
        'variables': 'variables'
    }

    def __init__(self, integration_id=None, variables=None):  # noqa: E501
        """IntegrationsIntegrationIdUuidBody - a model defined in Swagger"""  # noqa: E501
        self._integration_id = None
        self._variables = None
        self.discriminator = None
        if integration_id is not None:
            self.integration_id = integration_id
        self.variables = variables

    @property
    def integration_id(self):
        """Gets the integration_id of this IntegrationsIntegrationIdUuidBody.  # noqa: E501

        Unique ID of an object in RIME.  # noqa: E501

        :return: The integration_id of this IntegrationsIntegrationIdUuidBody.  # noqa: E501
        :rtype: object
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this IntegrationsIntegrationIdUuidBody.

        Unique ID of an object in RIME.  # noqa: E501

        :param integration_id: The integration_id of this IntegrationsIntegrationIdUuidBody.  # noqa: E501
        :type: object
        """

        self._integration_id = integration_id

    @property
    def variables(self):
        """Gets the variables of this IntegrationsIntegrationIdUuidBody.  # noqa: E501


        :return: The variables of this IntegrationsIntegrationIdUuidBody.  # noqa: E501
        :rtype: list[RimeConfigureIntegrationRequestIntegrationVariable]
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this IntegrationsIntegrationIdUuidBody.


        :param variables: The variables of this IntegrationsIntegrationIdUuidBody.  # noqa: E501
        :type: list[RimeConfigureIntegrationRequestIntegrationVariable]
        """
        if variables is None:
            raise ValueError("Invalid value for `variables`, must not be `None`")  # noqa: E501

        self._variables = variables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntegrationsIntegrationIdUuidBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrationsIntegrationIdUuidBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
