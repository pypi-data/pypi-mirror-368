# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SecuritydbModelSecurityReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'repo_id': 'str',
        'repo_type': 'SecuritydbRepoType',
        'description': 'str',
        'repo_metadata': 'SchemasecuritydbRepoMetadata',
        'file_scan_result': 'SchemasecuritydbFileScanResult'
    }

    attribute_map = {
        'repo_id': 'repoId',
        'repo_type': 'repoType',
        'description': 'description',
        'repo_metadata': 'repoMetadata',
        'file_scan_result': 'fileScanResult'
    }

    def __init__(self, repo_id=None, repo_type=None, description=None, repo_metadata=None, file_scan_result=None):  # noqa: E501
        """SecuritydbModelSecurityReport - a model defined in Swagger"""  # noqa: E501
        self._repo_id = None
        self._repo_type = None
        self._description = None
        self._repo_metadata = None
        self._file_scan_result = None
        self.discriminator = None
        if repo_id is not None:
            self.repo_id = repo_id
        if repo_type is not None:
            self.repo_type = repo_type
        if description is not None:
            self.description = description
        if repo_metadata is not None:
            self.repo_metadata = repo_metadata
        if file_scan_result is not None:
            self.file_scan_result = file_scan_result

    @property
    def repo_id(self):
        """Gets the repo_id of this SecuritydbModelSecurityReport.  # noqa: E501

        The ID of the model repository on Hugging Face.  # noqa: E501

        :return: The repo_id of this SecuritydbModelSecurityReport.  # noqa: E501
        :rtype: str
        """
        return self._repo_id

    @repo_id.setter
    def repo_id(self, repo_id):
        """Sets the repo_id of this SecuritydbModelSecurityReport.

        The ID of the model repository on Hugging Face.  # noqa: E501

        :param repo_id: The repo_id of this SecuritydbModelSecurityReport.  # noqa: E501
        :type: str
        """

        self._repo_id = repo_id

    @property
    def repo_type(self):
        """Gets the repo_type of this SecuritydbModelSecurityReport.  # noqa: E501


        :return: The repo_type of this SecuritydbModelSecurityReport.  # noqa: E501
        :rtype: SecuritydbRepoType
        """
        return self._repo_type

    @repo_type.setter
    def repo_type(self, repo_type):
        """Sets the repo_type of this SecuritydbModelSecurityReport.


        :param repo_type: The repo_type of this SecuritydbModelSecurityReport.  # noqa: E501
        :type: SecuritydbRepoType
        """

        self._repo_type = repo_type

    @property
    def description(self):
        """Gets the description of this SecuritydbModelSecurityReport.  # noqa: E501

        Description of the availability of the security report such as 'Scan completed' or 'Scan in progress. Please check back later for results'.  # noqa: E501

        :return: The description of this SecuritydbModelSecurityReport.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SecuritydbModelSecurityReport.

        Description of the availability of the security report such as 'Scan completed' or 'Scan in progress. Please check back later for results'.  # noqa: E501

        :param description: The description of this SecuritydbModelSecurityReport.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def repo_metadata(self):
        """Gets the repo_metadata of this SecuritydbModelSecurityReport.  # noqa: E501


        :return: The repo_metadata of this SecuritydbModelSecurityReport.  # noqa: E501
        :rtype: SchemasecuritydbRepoMetadata
        """
        return self._repo_metadata

    @repo_metadata.setter
    def repo_metadata(self, repo_metadata):
        """Sets the repo_metadata of this SecuritydbModelSecurityReport.


        :param repo_metadata: The repo_metadata of this SecuritydbModelSecurityReport.  # noqa: E501
        :type: SchemasecuritydbRepoMetadata
        """

        self._repo_metadata = repo_metadata

    @property
    def file_scan_result(self):
        """Gets the file_scan_result of this SecuritydbModelSecurityReport.  # noqa: E501


        :return: The file_scan_result of this SecuritydbModelSecurityReport.  # noqa: E501
        :rtype: SchemasecuritydbFileScanResult
        """
        return self._file_scan_result

    @file_scan_result.setter
    def file_scan_result(self, file_scan_result):
        """Sets the file_scan_result of this SecuritydbModelSecurityReport.


        :param file_scan_result: The file_scan_result of this SecuritydbModelSecurityReport.  # noqa: E501
        :type: SchemasecuritydbFileScanResult
        """

        self._file_scan_result = file_scan_result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecuritydbModelSecurityReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecuritydbModelSecurityReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
