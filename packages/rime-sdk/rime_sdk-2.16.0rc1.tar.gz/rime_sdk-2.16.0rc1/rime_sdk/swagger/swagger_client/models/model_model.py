# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'model_id': 'RimeUUID',
        'project_ids': 'list[RimeUUID]',
        'creator_id': 'RimeUUID',
        'creation_time': 'datetime',
        'external_id': 'str',
        'user_metadata': 'RegistryMetadata',
        'model_info': 'SchemaregistryModelInfo',
        'validity_status': 'RegistryValidityStatus',
        'integration_id': 'RimeUUID',
        'model_endpoint_integration_id': 'RimeUUID',
        'validity_status_message': 'str'
    }

    attribute_map = {
        'name': 'name',
        'model_id': 'modelId',
        'project_ids': 'projectIds',
        'creator_id': 'creatorId',
        'creation_time': 'creationTime',
        'external_id': 'externalId',
        'user_metadata': 'userMetadata',
        'model_info': 'modelInfo',
        'validity_status': 'validityStatus',
        'integration_id': 'integrationId',
        'model_endpoint_integration_id': 'modelEndpointIntegrationId',
        'validity_status_message': 'validityStatusMessage'
    }

    def __init__(self, name=None, model_id=None, project_ids=None, creator_id=None, creation_time=None, external_id=None, user_metadata=None, model_info=None, validity_status=None, integration_id=None, model_endpoint_integration_id=None, validity_status_message=None):  # noqa: E501
        """ModelModel - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._model_id = None
        self._project_ids = None
        self._creator_id = None
        self._creation_time = None
        self._external_id = None
        self._user_metadata = None
        self._model_info = None
        self._validity_status = None
        self._integration_id = None
        self._model_endpoint_integration_id = None
        self._validity_status_message = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if model_id is not None:
            self.model_id = model_id
        if project_ids is not None:
            self.project_ids = project_ids
        if creator_id is not None:
            self.creator_id = creator_id
        if creation_time is not None:
            self.creation_time = creation_time
        if external_id is not None:
            self.external_id = external_id
        if user_metadata is not None:
            self.user_metadata = user_metadata
        if model_info is not None:
            self.model_info = model_info
        if validity_status is not None:
            self.validity_status = validity_status
        if integration_id is not None:
            self.integration_id = integration_id
        if model_endpoint_integration_id is not None:
            self.model_endpoint_integration_id = model_endpoint_integration_id
        if validity_status_message is not None:
            self.validity_status_message = validity_status_message

    @property
    def name(self):
        """Gets the name of this ModelModel.  # noqa: E501

        Name and model_id are both enforced to be unique. Name is user specified. Model_id is internally generated.  # noqa: E501

        :return: The name of this ModelModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelModel.

        Name and model_id are both enforced to be unique. Name is user specified. Model_id is internally generated.  # noqa: E501

        :param name: The name of this ModelModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def model_id(self):
        """Gets the model_id of this ModelModel.  # noqa: E501


        :return: The model_id of this ModelModel.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this ModelModel.


        :param model_id: The model_id of this ModelModel.  # noqa: E501
        :type: RimeUUID
        """

        self._model_id = model_id

    @property
    def project_ids(self):
        """Gets the project_ids of this ModelModel.  # noqa: E501

        For now, a model will only have one project_id associated with it. We make this an array to allow model's to be shared in the future.  # noqa: E501

        :return: The project_ids of this ModelModel.  # noqa: E501
        :rtype: list[RimeUUID]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this ModelModel.

        For now, a model will only have one project_id associated with it. We make this an array to allow model's to be shared in the future.  # noqa: E501

        :param project_ids: The project_ids of this ModelModel.  # noqa: E501
        :type: list[RimeUUID]
        """

        self._project_ids = project_ids

    @property
    def creator_id(self):
        """Gets the creator_id of this ModelModel.  # noqa: E501


        :return: The creator_id of this ModelModel.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this ModelModel.


        :param creator_id: The creator_id of this ModelModel.  # noqa: E501
        :type: RimeUUID
        """

        self._creator_id = creator_id

    @property
    def creation_time(self):
        """Gets the creation_time of this ModelModel.  # noqa: E501


        :return: The creation_time of this ModelModel.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ModelModel.


        :param creation_time: The creation_time of this ModelModel.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def external_id(self):
        """Gets the external_id of this ModelModel.  # noqa: E501

        external_id is an optional way for a user to identify the model with their own Model IDs.  # noqa: E501

        :return: The external_id of this ModelModel.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ModelModel.

        external_id is an optional way for a user to identify the model with their own Model IDs.  # noqa: E501

        :param external_id: The external_id of this ModelModel.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def user_metadata(self):
        """Gets the user_metadata of this ModelModel.  # noqa: E501


        :return: The user_metadata of this ModelModel.  # noqa: E501
        :rtype: RegistryMetadata
        """
        return self._user_metadata

    @user_metadata.setter
    def user_metadata(self, user_metadata):
        """Sets the user_metadata of this ModelModel.


        :param user_metadata: The user_metadata of this ModelModel.  # noqa: E501
        :type: RegistryMetadata
        """

        self._user_metadata = user_metadata

    @property
    def model_info(self):
        """Gets the model_info of this ModelModel.  # noqa: E501


        :return: The model_info of this ModelModel.  # noqa: E501
        :rtype: SchemaregistryModelInfo
        """
        return self._model_info

    @model_info.setter
    def model_info(self, model_info):
        """Sets the model_info of this ModelModel.


        :param model_info: The model_info of this ModelModel.  # noqa: E501
        :type: SchemaregistryModelInfo
        """

        self._model_info = model_info

    @property
    def validity_status(self):
        """Gets the validity_status of this ModelModel.  # noqa: E501


        :return: The validity_status of this ModelModel.  # noqa: E501
        :rtype: RegistryValidityStatus
        """
        return self._validity_status

    @validity_status.setter
    def validity_status(self, validity_status):
        """Sets the validity_status of this ModelModel.


        :param validity_status: The validity_status of this ModelModel.  # noqa: E501
        :type: RegistryValidityStatus
        """

        self._validity_status = validity_status

    @property
    def integration_id(self):
        """Gets the integration_id of this ModelModel.  # noqa: E501


        :return: The integration_id of this ModelModel.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this ModelModel.


        :param integration_id: The integration_id of this ModelModel.  # noqa: E501
        :type: RimeUUID
        """

        self._integration_id = integration_id

    @property
    def model_endpoint_integration_id(self):
        """Gets the model_endpoint_integration_id of this ModelModel.  # noqa: E501


        :return: The model_endpoint_integration_id of this ModelModel.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._model_endpoint_integration_id

    @model_endpoint_integration_id.setter
    def model_endpoint_integration_id(self, model_endpoint_integration_id):
        """Sets the model_endpoint_integration_id of this ModelModel.


        :param model_endpoint_integration_id: The model_endpoint_integration_id of this ModelModel.  # noqa: E501
        :type: RimeUUID
        """

        self._model_endpoint_integration_id = model_endpoint_integration_id

    @property
    def validity_status_message(self):
        """Gets the validity_status_message of this ModelModel.  # noqa: E501

        Information about the validity status of the model, such as why it is invalid. A Case where this would be populated is when the ValidityStatus is not explicitly set to valid by the XP validation task and additional details are required to convey to the user why the model is not valid.  # noqa: E501

        :return: The validity_status_message of this ModelModel.  # noqa: E501
        :rtype: str
        """
        return self._validity_status_message

    @validity_status_message.setter
    def validity_status_message(self, validity_status_message):
        """Sets the validity_status_message of this ModelModel.

        Information about the validity status of the model, such as why it is invalid. A Case where this would be populated is when the ValidityStatus is not explicitly set to valid by the XP validation task and additional details are required to convey to the user why the model is not valid.  # noqa: E501

        :param validity_status_message: The validity_status_message of this ModelModel.  # noqa: E501
        :type: str
        """

        self._validity_status_message = validity_status_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
