# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1betamonitorsmonitorIdUuidMonitor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'name': 'str',
        'firewall_id': 'RimeUUID',
        'monitor_type': 'MonitorMonitorType',
        'risk_category_type': 'RiskscoreRiskCategoryType',
        'test_category': 'TestrunTestCategoryType',
        'artifact_identifier': 'MonitorArtifactIdentifier',
        'created_time': 'datetime',
        'notify': 'bool',
        'config': 'SchemamonitorConfig',
        'excluded_transforms': 'MonitorExcludedTransforms',
        'pinned': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'firewall_id': 'firewallId',
        'monitor_type': 'monitorType',
        'risk_category_type': 'riskCategoryType',
        'test_category': 'testCategory',
        'artifact_identifier': 'artifactIdentifier',
        'created_time': 'createdTime',
        'notify': 'notify',
        'config': 'config',
        'excluded_transforms': 'excludedTransforms',
        'pinned': 'pinned'
    }

    def __init__(self, id=None, name=None, firewall_id=None, monitor_type=None, risk_category_type=None, test_category=None, artifact_identifier=None, created_time=None, notify=None, config=None, excluded_transforms=None, pinned=None):  # noqa: E501
        """V1betamonitorsmonitorIdUuidMonitor - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._firewall_id = None
        self._monitor_type = None
        self._risk_category_type = None
        self._test_category = None
        self._artifact_identifier = None
        self._created_time = None
        self._notify = None
        self._config = None
        self._excluded_transforms = None
        self._pinned = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if firewall_id is not None:
            self.firewall_id = firewall_id
        if monitor_type is not None:
            self.monitor_type = monitor_type
        if risk_category_type is not None:
            self.risk_category_type = risk_category_type
        if test_category is not None:
            self.test_category = test_category
        if artifact_identifier is not None:
            self.artifact_identifier = artifact_identifier
        if created_time is not None:
            self.created_time = created_time
        if notify is not None:
            self.notify = notify
        if config is not None:
            self.config = config
        if excluded_transforms is not None:
            self.excluded_transforms = excluded_transforms
        if pinned is not None:
            self.pinned = pinned

    @property
    def id(self):
        """Gets the id of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501

        Uniquely specifies a Monitor.  # noqa: E501

        :return: The id of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1betamonitorsmonitorIdUuidMonitor.

        Uniquely specifies a Monitor.  # noqa: E501

        :param id: The id of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :type: object
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501

        The name of the monitor.  # noqa: E501

        :return: The name of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1betamonitorsmonitorIdUuidMonitor.

        The name of the monitor.  # noqa: E501

        :param name: The name of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def firewall_id(self):
        """Gets the firewall_id of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501


        :return: The firewall_id of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._firewall_id

    @firewall_id.setter
    def firewall_id(self, firewall_id):
        """Sets the firewall_id of this V1betamonitorsmonitorIdUuidMonitor.


        :param firewall_id: The firewall_id of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :type: RimeUUID
        """

        self._firewall_id = firewall_id

    @property
    def monitor_type(self):
        """Gets the monitor_type of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501


        :return: The monitor_type of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :rtype: MonitorMonitorType
        """
        return self._monitor_type

    @monitor_type.setter
    def monitor_type(self, monitor_type):
        """Sets the monitor_type of this V1betamonitorsmonitorIdUuidMonitor.


        :param monitor_type: The monitor_type of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :type: MonitorMonitorType
        """

        self._monitor_type = monitor_type

    @property
    def risk_category_type(self):
        """Gets the risk_category_type of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501


        :return: The risk_category_type of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :rtype: RiskscoreRiskCategoryType
        """
        return self._risk_category_type

    @risk_category_type.setter
    def risk_category_type(self, risk_category_type):
        """Sets the risk_category_type of this V1betamonitorsmonitorIdUuidMonitor.


        :param risk_category_type: The risk_category_type of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :type: RiskscoreRiskCategoryType
        """

        self._risk_category_type = risk_category_type

    @property
    def test_category(self):
        """Gets the test_category of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501


        :return: The test_category of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :rtype: TestrunTestCategoryType
        """
        return self._test_category

    @test_category.setter
    def test_category(self, test_category):
        """Sets the test_category of this V1betamonitorsmonitorIdUuidMonitor.


        :param test_category: The test_category of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :type: TestrunTestCategoryType
        """

        self._test_category = test_category

    @property
    def artifact_identifier(self):
        """Gets the artifact_identifier of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501


        :return: The artifact_identifier of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :rtype: MonitorArtifactIdentifier
        """
        return self._artifact_identifier

    @artifact_identifier.setter
    def artifact_identifier(self, artifact_identifier):
        """Sets the artifact_identifier of this V1betamonitorsmonitorIdUuidMonitor.


        :param artifact_identifier: The artifact_identifier of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :type: MonitorArtifactIdentifier
        """

        self._artifact_identifier = artifact_identifier

    @property
    def created_time(self):
        """Gets the created_time of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501

        The time at which the monitor was created.  # noqa: E501

        :return: The created_time of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this V1betamonitorsmonitorIdUuidMonitor.

        The time at which the monitor was created.  # noqa: E501

        :param created_time: The created_time of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :type: datetime
        """

        self._created_time = created_time

    @property
    def notify(self):
        """Gets the notify of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501

        This field indicates whether the system should send CT monitoring notifications when this monitor is triggered. For default monitors, after the RIME engine creates a Monitor, this field should only be modified directly by the user. i.e. when we upsert the monitor in the Result synthesizer, we must not overwrite the value configured by the user.  # noqa: E501

        :return: The notify of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :rtype: bool
        """
        return self._notify

    @notify.setter
    def notify(self, notify):
        """Sets the notify of this V1betamonitorsmonitorIdUuidMonitor.

        This field indicates whether the system should send CT monitoring notifications when this monitor is triggered. For default monitors, after the RIME engine creates a Monitor, this field should only be modified directly by the user. i.e. when we upsert the monitor in the Result synthesizer, we must not overwrite the value configured by the user.  # noqa: E501

        :param notify: The notify of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :type: bool
        """

        self._notify = notify

    @property
    def config(self):
        """Gets the config of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501


        :return: The config of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :rtype: SchemamonitorConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this V1betamonitorsmonitorIdUuidMonitor.


        :param config: The config of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :type: SchemamonitorConfig
        """

        self._config = config

    @property
    def excluded_transforms(self):
        """Gets the excluded_transforms of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501


        :return: The excluded_transforms of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :rtype: MonitorExcludedTransforms
        """
        return self._excluded_transforms

    @excluded_transforms.setter
    def excluded_transforms(self, excluded_transforms):
        """Sets the excluded_transforms of this V1betamonitorsmonitorIdUuidMonitor.


        :param excluded_transforms: The excluded_transforms of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :type: MonitorExcludedTransforms
        """

        self._excluded_transforms = excluded_transforms

    @property
    def pinned(self):
        """Gets the pinned of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501

        Option to pin a monitor. Pinned monitors are pinned for all users visiting the monitor's project.  # noqa: E501

        :return: The pinned of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :rtype: bool
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned):
        """Sets the pinned of this V1betamonitorsmonitorIdUuidMonitor.

        Option to pin a monitor. Pinned monitors are pinned for all users visiting the monitor's project.  # noqa: E501

        :param pinned: The pinned of this V1betamonitorsmonitorIdUuidMonitor.  # noqa: E501
        :type: bool
        """

        self._pinned = pinned

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1betamonitorsmonitorIdUuidMonitor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1betamonitorsmonitorIdUuidMonitor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
