# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeGetFirewallLicenseUsageForAgentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_id': 'RimeUUID',
        'total_limit_value': 'str',
        'current_total_usage': 'str',
        'current_agent_usage': 'str'
    }

    attribute_map = {
        'agent_id': 'agentId',
        'total_limit_value': 'totalLimitValue',
        'current_total_usage': 'currentTotalUsage',
        'current_agent_usage': 'currentAgentUsage'
    }

    def __init__(self, agent_id=None, total_limit_value=None, current_total_usage=None, current_agent_usage=None):  # noqa: E501
        """RimeGetFirewallLicenseUsageForAgentResponse - a model defined in Swagger"""  # noqa: E501
        self._agent_id = None
        self._total_limit_value = None
        self._current_total_usage = None
        self._current_agent_usage = None
        self.discriminator = None
        if agent_id is not None:
            self.agent_id = agent_id
        if total_limit_value is not None:
            self.total_limit_value = total_limit_value
        if current_total_usage is not None:
            self.current_total_usage = current_total_usage
        if current_agent_usage is not None:
            self.current_agent_usage = current_agent_usage

    @property
    def agent_id(self):
        """Gets the agent_id of this RimeGetFirewallLicenseUsageForAgentResponse.  # noqa: E501


        :return: The agent_id of this RimeGetFirewallLicenseUsageForAgentResponse.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this RimeGetFirewallLicenseUsageForAgentResponse.


        :param agent_id: The agent_id of this RimeGetFirewallLicenseUsageForAgentResponse.  # noqa: E501
        :type: RimeUUID
        """

        self._agent_id = agent_id

    @property
    def total_limit_value(self):
        """Gets the total_limit_value of this RimeGetFirewallLicenseUsageForAgentResponse.  # noqa: E501


        :return: The total_limit_value of this RimeGetFirewallLicenseUsageForAgentResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_limit_value

    @total_limit_value.setter
    def total_limit_value(self, total_limit_value):
        """Sets the total_limit_value of this RimeGetFirewallLicenseUsageForAgentResponse.


        :param total_limit_value: The total_limit_value of this RimeGetFirewallLicenseUsageForAgentResponse.  # noqa: E501
        :type: str
        """

        self._total_limit_value = total_limit_value

    @property
    def current_total_usage(self):
        """Gets the current_total_usage of this RimeGetFirewallLicenseUsageForAgentResponse.  # noqa: E501


        :return: The current_total_usage of this RimeGetFirewallLicenseUsageForAgentResponse.  # noqa: E501
        :rtype: str
        """
        return self._current_total_usage

    @current_total_usage.setter
    def current_total_usage(self, current_total_usage):
        """Sets the current_total_usage of this RimeGetFirewallLicenseUsageForAgentResponse.


        :param current_total_usage: The current_total_usage of this RimeGetFirewallLicenseUsageForAgentResponse.  # noqa: E501
        :type: str
        """

        self._current_total_usage = current_total_usage

    @property
    def current_agent_usage(self):
        """Gets the current_agent_usage of this RimeGetFirewallLicenseUsageForAgentResponse.  # noqa: E501


        :return: The current_agent_usage of this RimeGetFirewallLicenseUsageForAgentResponse.  # noqa: E501
        :rtype: str
        """
        return self._current_agent_usage

    @current_agent_usage.setter
    def current_agent_usage(self, current_agent_usage):
        """Sets the current_agent_usage of this RimeGetFirewallLicenseUsageForAgentResponse.


        :param current_agent_usage: The current_agent_usage of this RimeGetFirewallLicenseUsageForAgentResponse.  # noqa: E501
        :type: str
        """

        self._current_agent_usage = current_agent_usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeGetFirewallLicenseUsageForAgentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeGetFirewallLicenseUsageForAgentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
