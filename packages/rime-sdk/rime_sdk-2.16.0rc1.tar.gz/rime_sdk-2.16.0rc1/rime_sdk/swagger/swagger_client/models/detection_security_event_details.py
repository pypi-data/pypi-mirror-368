# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DetectionSecurityEventDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'SecurityEventDetailsSecurityEventType',
        'effect_on_model': 'list[str]',
        'possible_intent': 'list[str]',
        'evidence': 'list[str]',
        'recommendations': 'list[str]',
        'datapoints': 'list[SecurityEventDetailsFlaggedDatapoint]'
    }

    attribute_map = {
        'type': 'type',
        'effect_on_model': 'effectOnModel',
        'possible_intent': 'possibleIntent',
        'evidence': 'evidence',
        'recommendations': 'recommendations',
        'datapoints': 'datapoints'
    }

    def __init__(self, type=None, effect_on_model=None, possible_intent=None, evidence=None, recommendations=None, datapoints=None):  # noqa: E501
        """DetectionSecurityEventDetails - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._effect_on_model = None
        self._possible_intent = None
        self._evidence = None
        self._recommendations = None
        self._datapoints = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if effect_on_model is not None:
            self.effect_on_model = effect_on_model
        if possible_intent is not None:
            self.possible_intent = possible_intent
        if evidence is not None:
            self.evidence = evidence
        if recommendations is not None:
            self.recommendations = recommendations
        if datapoints is not None:
            self.datapoints = datapoints

    @property
    def type(self):
        """Gets the type of this DetectionSecurityEventDetails.  # noqa: E501


        :return: The type of this DetectionSecurityEventDetails.  # noqa: E501
        :rtype: SecurityEventDetailsSecurityEventType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DetectionSecurityEventDetails.


        :param type: The type of this DetectionSecurityEventDetails.  # noqa: E501
        :type: SecurityEventDetailsSecurityEventType
        """

        self._type = type

    @property
    def effect_on_model(self):
        """Gets the effect_on_model of this DetectionSecurityEventDetails.  # noqa: E501


        :return: The effect_on_model of this DetectionSecurityEventDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._effect_on_model

    @effect_on_model.setter
    def effect_on_model(self, effect_on_model):
        """Sets the effect_on_model of this DetectionSecurityEventDetails.


        :param effect_on_model: The effect_on_model of this DetectionSecurityEventDetails.  # noqa: E501
        :type: list[str]
        """

        self._effect_on_model = effect_on_model

    @property
    def possible_intent(self):
        """Gets the possible_intent of this DetectionSecurityEventDetails.  # noqa: E501


        :return: The possible_intent of this DetectionSecurityEventDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._possible_intent

    @possible_intent.setter
    def possible_intent(self, possible_intent):
        """Sets the possible_intent of this DetectionSecurityEventDetails.


        :param possible_intent: The possible_intent of this DetectionSecurityEventDetails.  # noqa: E501
        :type: list[str]
        """

        self._possible_intent = possible_intent

    @property
    def evidence(self):
        """Gets the evidence of this DetectionSecurityEventDetails.  # noqa: E501


        :return: The evidence of this DetectionSecurityEventDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._evidence

    @evidence.setter
    def evidence(self, evidence):
        """Sets the evidence of this DetectionSecurityEventDetails.


        :param evidence: The evidence of this DetectionSecurityEventDetails.  # noqa: E501
        :type: list[str]
        """

        self._evidence = evidence

    @property
    def recommendations(self):
        """Gets the recommendations of this DetectionSecurityEventDetails.  # noqa: E501


        :return: The recommendations of this DetectionSecurityEventDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._recommendations

    @recommendations.setter
    def recommendations(self, recommendations):
        """Sets the recommendations of this DetectionSecurityEventDetails.


        :param recommendations: The recommendations of this DetectionSecurityEventDetails.  # noqa: E501
        :type: list[str]
        """

        self._recommendations = recommendations

    @property
    def datapoints(self):
        """Gets the datapoints of this DetectionSecurityEventDetails.  # noqa: E501

        Include descriptions of all the flagged datapoints for the attack.  # noqa: E501

        :return: The datapoints of this DetectionSecurityEventDetails.  # noqa: E501
        :rtype: list[SecurityEventDetailsFlaggedDatapoint]
        """
        return self._datapoints

    @datapoints.setter
    def datapoints(self, datapoints):
        """Sets the datapoints of this DetectionSecurityEventDetails.

        Include descriptions of all the flagged datapoints for the attack.  # noqa: E501

        :param datapoints: The datapoints of this DetectionSecurityEventDetails.  # noqa: E501
        :type: list[SecurityEventDetailsFlaggedDatapoint]
        """

        self._datapoints = datapoints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetectionSecurityEventDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetectionSecurityEventDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
