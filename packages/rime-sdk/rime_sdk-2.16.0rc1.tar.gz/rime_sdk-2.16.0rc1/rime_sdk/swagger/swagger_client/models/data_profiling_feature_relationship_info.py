# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataProfilingFeatureRelationshipInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_feats_to_profile': 'str',
        'compute_feature_relationships': 'bool',
        'compute_numeric_feature_relationships': 'bool',
        'ignore_nan_for_feature_relationships': 'bool',
        'features_to_profile': 'list[str]'
    }

    attribute_map = {
        'num_feats_to_profile': 'numFeatsToProfile',
        'compute_feature_relationships': 'computeFeatureRelationships',
        'compute_numeric_feature_relationships': 'computeNumericFeatureRelationships',
        'ignore_nan_for_feature_relationships': 'ignoreNanForFeatureRelationships',
        'features_to_profile': 'featuresToProfile'
    }

    def __init__(self, num_feats_to_profile=None, compute_feature_relationships=None, compute_numeric_feature_relationships=None, ignore_nan_for_feature_relationships=None, features_to_profile=None):  # noqa: E501
        """DataProfilingFeatureRelationshipInfo - a model defined in Swagger"""  # noqa: E501
        self._num_feats_to_profile = None
        self._compute_feature_relationships = None
        self._compute_numeric_feature_relationships = None
        self._ignore_nan_for_feature_relationships = None
        self._features_to_profile = None
        self.discriminator = None
        if num_feats_to_profile is not None:
            self.num_feats_to_profile = num_feats_to_profile
        if compute_feature_relationships is not None:
            self.compute_feature_relationships = compute_feature_relationships
        if compute_numeric_feature_relationships is not None:
            self.compute_numeric_feature_relationships = compute_numeric_feature_relationships
        if ignore_nan_for_feature_relationships is not None:
            self.ignore_nan_for_feature_relationships = ignore_nan_for_feature_relationships
        if features_to_profile is not None:
            self.features_to_profile = features_to_profile

    @property
    def num_feats_to_profile(self):
        """Gets the num_feats_to_profile of this DataProfilingFeatureRelationshipInfo.  # noqa: E501

        Number of features to profile for smart feature sampling.  # noqa: E501

        :return: The num_feats_to_profile of this DataProfilingFeatureRelationshipInfo.  # noqa: E501
        :rtype: str
        """
        return self._num_feats_to_profile

    @num_feats_to_profile.setter
    def num_feats_to_profile(self, num_feats_to_profile):
        """Sets the num_feats_to_profile of this DataProfilingFeatureRelationshipInfo.

        Number of features to profile for smart feature sampling.  # noqa: E501

        :param num_feats_to_profile: The num_feats_to_profile of this DataProfilingFeatureRelationshipInfo.  # noqa: E501
        :type: str
        """

        self._num_feats_to_profile = num_feats_to_profile

    @property
    def compute_feature_relationships(self):
        """Gets the compute_feature_relationships of this DataProfilingFeatureRelationshipInfo.  # noqa: E501

        Specifies whether to compute feature relationships.  # noqa: E501

        :return: The compute_feature_relationships of this DataProfilingFeatureRelationshipInfo.  # noqa: E501
        :rtype: bool
        """
        return self._compute_feature_relationships

    @compute_feature_relationships.setter
    def compute_feature_relationships(self, compute_feature_relationships):
        """Sets the compute_feature_relationships of this DataProfilingFeatureRelationshipInfo.

        Specifies whether to compute feature relationships.  # noqa: E501

        :param compute_feature_relationships: The compute_feature_relationships of this DataProfilingFeatureRelationshipInfo.  # noqa: E501
        :type: bool
        """

        self._compute_feature_relationships = compute_feature_relationships

    @property
    def compute_numeric_feature_relationships(self):
        """Gets the compute_numeric_feature_relationships of this DataProfilingFeatureRelationshipInfo.  # noqa: E501

        Specifies whether to compute feature relationships for numeric columns.  # noqa: E501

        :return: The compute_numeric_feature_relationships of this DataProfilingFeatureRelationshipInfo.  # noqa: E501
        :rtype: bool
        """
        return self._compute_numeric_feature_relationships

    @compute_numeric_feature_relationships.setter
    def compute_numeric_feature_relationships(self, compute_numeric_feature_relationships):
        """Sets the compute_numeric_feature_relationships of this DataProfilingFeatureRelationshipInfo.

        Specifies whether to compute feature relationships for numeric columns.  # noqa: E501

        :param compute_numeric_feature_relationships: The compute_numeric_feature_relationships of this DataProfilingFeatureRelationshipInfo.  # noqa: E501
        :type: bool
        """

        self._compute_numeric_feature_relationships = compute_numeric_feature_relationships

    @property
    def ignore_nan_for_feature_relationships(self):
        """Gets the ignore_nan_for_feature_relationships of this DataProfilingFeatureRelationshipInfo.  # noqa: E501

        Specifies whether to ignore NaN values when computing feature relationships.  # noqa: E501

        :return: The ignore_nan_for_feature_relationships of this DataProfilingFeatureRelationshipInfo.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_nan_for_feature_relationships

    @ignore_nan_for_feature_relationships.setter
    def ignore_nan_for_feature_relationships(self, ignore_nan_for_feature_relationships):
        """Sets the ignore_nan_for_feature_relationships of this DataProfilingFeatureRelationshipInfo.

        Specifies whether to ignore NaN values when computing feature relationships.  # noqa: E501

        :param ignore_nan_for_feature_relationships: The ignore_nan_for_feature_relationships of this DataProfilingFeatureRelationshipInfo.  # noqa: E501
        :type: bool
        """

        self._ignore_nan_for_feature_relationships = ignore_nan_for_feature_relationships

    @property
    def features_to_profile(self):
        """Gets the features_to_profile of this DataProfilingFeatureRelationshipInfo.  # noqa: E501


        :return: The features_to_profile of this DataProfilingFeatureRelationshipInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._features_to_profile

    @features_to_profile.setter
    def features_to_profile(self, features_to_profile):
        """Sets the features_to_profile of this DataProfilingFeatureRelationshipInfo.


        :param features_to_profile: The features_to_profile of this DataProfilingFeatureRelationshipInfo.  # noqa: E501
        :type: list[str]
        """

        self._features_to_profile = features_to_profile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataProfilingFeatureRelationshipInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataProfilingFeatureRelationshipInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
