# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativefirewallTelemetryLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schema_version': 'str',
        'validation_time': 'datetime',
        'rules_results': 'dict(str, GenerativefirewallRuleOutput)',
        'firewall_validate_response': 'GenerativefirewallValidateResponse'
    }

    attribute_map = {
        'schema_version': 'schemaVersion',
        'validation_time': 'validationTime',
        'rules_results': 'rulesResults',
        'firewall_validate_response': 'firewallValidateResponse'
    }

    def __init__(self, schema_version=None, validation_time=None, rules_results=None, firewall_validate_response=None):  # noqa: E501
        """GenerativefirewallTelemetryLog - a model defined in Swagger"""  # noqa: E501
        self._schema_version = None
        self._validation_time = None
        self._rules_results = None
        self._firewall_validate_response = None
        self.discriminator = None
        if schema_version is not None:
            self.schema_version = schema_version
        if validation_time is not None:
            self.validation_time = validation_time
        if rules_results is not None:
            self.rules_results = rules_results
        if firewall_validate_response is not None:
            self.firewall_validate_response = firewall_validate_response

    @property
    def schema_version(self):
        """Gets the schema_version of this GenerativefirewallTelemetryLog.  # noqa: E501

        Telemetry log schema version is the version of the log. This should be updated whenever we make semantic changes to the log.  # noqa: E501

        :return: The schema_version of this GenerativefirewallTelemetryLog.  # noqa: E501
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this GenerativefirewallTelemetryLog.

        Telemetry log schema version is the version of the log. This should be updated whenever we make semantic changes to the log.  # noqa: E501

        :param schema_version: The schema_version of this GenerativefirewallTelemetryLog.  # noqa: E501
        :type: str
        """

        self._schema_version = schema_version

    @property
    def validation_time(self):
        """Gets the validation_time of this GenerativefirewallTelemetryLog.  # noqa: E501

        Date and time at which the Firewall allowed or denied this request.  # noqa: E501

        :return: The validation_time of this GenerativefirewallTelemetryLog.  # noqa: E501
        :rtype: datetime
        """
        return self._validation_time

    @validation_time.setter
    def validation_time(self, validation_time):
        """Sets the validation_time of this GenerativefirewallTelemetryLog.

        Date and time at which the Firewall allowed or denied this request.  # noqa: E501

        :param validation_time: The validation_time of this GenerativefirewallTelemetryLog.  # noqa: E501
        :type: datetime
        """

        self._validation_time = validation_time

    @property
    def rules_results(self):
        """Gets the rules_results of this GenerativefirewallTelemetryLog.  # noqa: E501

        Results of the firewall for every rule that was run. The key is a rule name.  # noqa: E501

        :return: The rules_results of this GenerativefirewallTelemetryLog.  # noqa: E501
        :rtype: dict(str, GenerativefirewallRuleOutput)
        """
        return self._rules_results

    @rules_results.setter
    def rules_results(self, rules_results):
        """Sets the rules_results of this GenerativefirewallTelemetryLog.

        Results of the firewall for every rule that was run. The key is a rule name.  # noqa: E501

        :param rules_results: The rules_results of this GenerativefirewallTelemetryLog.  # noqa: E501
        :type: dict(str, GenerativefirewallRuleOutput)
        """

        self._rules_results = rules_results

    @property
    def firewall_validate_response(self):
        """Gets the firewall_validate_response of this GenerativefirewallTelemetryLog.  # noqa: E501


        :return: The firewall_validate_response of this GenerativefirewallTelemetryLog.  # noqa: E501
        :rtype: GenerativefirewallValidateResponse
        """
        return self._firewall_validate_response

    @firewall_validate_response.setter
    def firewall_validate_response(self, firewall_validate_response):
        """Sets the firewall_validate_response of this GenerativefirewallTelemetryLog.


        :param firewall_validate_response: The firewall_validate_response of this GenerativefirewallTelemetryLog.  # noqa: E501
        :type: GenerativefirewallValidateResponse
        """

        self._firewall_validate_response = firewall_validate_response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativefirewallTelemetryLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativefirewallTelemetryLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
