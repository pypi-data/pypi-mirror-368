# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativevalidationBedrockInferenceConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_tokens': 'int',
        'temperature': 'float',
        'top_p': 'float',
        'stop_sequences': 'list[str]'
    }

    attribute_map = {
        'max_tokens': 'maxTokens',
        'temperature': 'temperature',
        'top_p': 'topP',
        'stop_sequences': 'stopSequences'
    }

    def __init__(self, max_tokens=None, temperature=None, top_p=None, stop_sequences=None):  # noqa: E501
        """GenerativevalidationBedrockInferenceConfig - a model defined in Swagger"""  # noqa: E501
        self._max_tokens = None
        self._temperature = None
        self._top_p = None
        self._stop_sequences = None
        self.discriminator = None
        if max_tokens is not None:
            self.max_tokens = max_tokens
        if temperature is not None:
            self.temperature = temperature
        if top_p is not None:
            self.top_p = top_p
        if stop_sequences is not None:
            self.stop_sequences = stop_sequences

    @property
    def max_tokens(self):
        """Gets the max_tokens of this GenerativevalidationBedrockInferenceConfig.  # noqa: E501


        :return: The max_tokens of this GenerativevalidationBedrockInferenceConfig.  # noqa: E501
        :rtype: int
        """
        return self._max_tokens

    @max_tokens.setter
    def max_tokens(self, max_tokens):
        """Sets the max_tokens of this GenerativevalidationBedrockInferenceConfig.


        :param max_tokens: The max_tokens of this GenerativevalidationBedrockInferenceConfig.  # noqa: E501
        :type: int
        """

        self._max_tokens = max_tokens

    @property
    def temperature(self):
        """Gets the temperature of this GenerativevalidationBedrockInferenceConfig.  # noqa: E501


        :return: The temperature of this GenerativevalidationBedrockInferenceConfig.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this GenerativevalidationBedrockInferenceConfig.


        :param temperature: The temperature of this GenerativevalidationBedrockInferenceConfig.  # noqa: E501
        :type: float
        """

        self._temperature = temperature

    @property
    def top_p(self):
        """Gets the top_p of this GenerativevalidationBedrockInferenceConfig.  # noqa: E501


        :return: The top_p of this GenerativevalidationBedrockInferenceConfig.  # noqa: E501
        :rtype: float
        """
        return self._top_p

    @top_p.setter
    def top_p(self, top_p):
        """Sets the top_p of this GenerativevalidationBedrockInferenceConfig.


        :param top_p: The top_p of this GenerativevalidationBedrockInferenceConfig.  # noqa: E501
        :type: float
        """

        self._top_p = top_p

    @property
    def stop_sequences(self):
        """Gets the stop_sequences of this GenerativevalidationBedrockInferenceConfig.  # noqa: E501

        A list of stop sequences that causes the model to stop generating the response.  # noqa: E501

        :return: The stop_sequences of this GenerativevalidationBedrockInferenceConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._stop_sequences

    @stop_sequences.setter
    def stop_sequences(self, stop_sequences):
        """Sets the stop_sequences of this GenerativevalidationBedrockInferenceConfig.

        A list of stop sequences that causes the model to stop generating the response.  # noqa: E501

        :param stop_sequences: The stop_sequences of this GenerativevalidationBedrockInferenceConfig.  # noqa: E501
        :type: list[str]
        """

        self._stop_sequences = stop_sequences

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativevalidationBedrockInferenceConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativevalidationBedrockInferenceConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
