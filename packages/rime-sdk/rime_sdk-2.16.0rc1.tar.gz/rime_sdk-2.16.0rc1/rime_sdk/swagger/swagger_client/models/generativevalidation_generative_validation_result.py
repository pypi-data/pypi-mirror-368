# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativevalidationGenerativeValidationResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'RimeUUID',
        'attack_technique': 'str',
        'attack_objective': 'RimeAttackObjective',
        'objective_sub_category': 'GenerativevalidationObjectiveSubCategory',
        'severity': 'LibgenerativeSeverity',
        'owasp_standards': 'list[GenerativevalidationGenerativeValidationResultStandardInfo]',
        'nist_standards': 'list[GenerativevalidationGenerativeValidationResultStandardInfo]',
        'mitre_standards': 'list[GenerativevalidationGenerativeValidationResultStandardInfo]',
        'threat': 'GenerativevalidationThreat',
        'skipped_reason': 'str',
        'test_run_id': 'RimeUUID',
        'example': 'GenerativeValidationResultExample',
        'sequential_id': 'int',
        'total_num_prompts': 'int'
    }

    attribute_map = {
        'id': 'id',
        'attack_technique': 'attackTechnique',
        'attack_objective': 'attackObjective',
        'objective_sub_category': 'objectiveSubCategory',
        'severity': 'severity',
        'owasp_standards': 'owaspStandards',
        'nist_standards': 'nistStandards',
        'mitre_standards': 'mitreStandards',
        'threat': 'threat',
        'skipped_reason': 'skippedReason',
        'test_run_id': 'testRunId',
        'example': 'example',
        'sequential_id': 'sequentialId',
        'total_num_prompts': 'totalNumPrompts'
    }

    def __init__(self, id=None, attack_technique=None, attack_objective=None, objective_sub_category=None, severity=None, owasp_standards=None, nist_standards=None, mitre_standards=None, threat=None, skipped_reason=None, test_run_id=None, example=None, sequential_id=None, total_num_prompts=None):  # noqa: E501
        """GenerativevalidationGenerativeValidationResult - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._attack_technique = None
        self._attack_objective = None
        self._objective_sub_category = None
        self._severity = None
        self._owasp_standards = None
        self._nist_standards = None
        self._mitre_standards = None
        self._threat = None
        self._skipped_reason = None
        self._test_run_id = None
        self._example = None
        self._sequential_id = None
        self._total_num_prompts = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if attack_technique is not None:
            self.attack_technique = attack_technique
        if attack_objective is not None:
            self.attack_objective = attack_objective
        if objective_sub_category is not None:
            self.objective_sub_category = objective_sub_category
        if severity is not None:
            self.severity = severity
        if owasp_standards is not None:
            self.owasp_standards = owasp_standards
        if nist_standards is not None:
            self.nist_standards = nist_standards
        if mitre_standards is not None:
            self.mitre_standards = mitre_standards
        if threat is not None:
            self.threat = threat
        if skipped_reason is not None:
            self.skipped_reason = skipped_reason
        if test_run_id is not None:
            self.test_run_id = test_run_id
        if example is not None:
            self.example = example
        if sequential_id is not None:
            self.sequential_id = sequential_id
        if total_num_prompts is not None:
            self.total_num_prompts = total_num_prompts

    @property
    def id(self):
        """Gets the id of this GenerativevalidationGenerativeValidationResult.  # noqa: E501


        :return: The id of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GenerativevalidationGenerativeValidationResult.


        :param id: The id of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :type: RimeUUID
        """

        self._id = id

    @property
    def attack_technique(self):
        """Gets the attack_technique of this GenerativevalidationGenerativeValidationResult.  # noqa: E501

        The attack technique used in the prompt. This is a string because the types of attacks changes frequently over time depending on our threat intelligence.  # noqa: E501

        :return: The attack_technique of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :rtype: str
        """
        return self._attack_technique

    @attack_technique.setter
    def attack_technique(self, attack_technique):
        """Sets the attack_technique of this GenerativevalidationGenerativeValidationResult.

        The attack technique used in the prompt. This is a string because the types of attacks changes frequently over time depending on our threat intelligence.  # noqa: E501

        :param attack_technique: The attack_technique of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :type: str
        """

        self._attack_technique = attack_technique

    @property
    def attack_objective(self):
        """Gets the attack_objective of this GenerativevalidationGenerativeValidationResult.  # noqa: E501


        :return: The attack_objective of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :rtype: RimeAttackObjective
        """
        return self._attack_objective

    @attack_objective.setter
    def attack_objective(self, attack_objective):
        """Sets the attack_objective of this GenerativevalidationGenerativeValidationResult.


        :param attack_objective: The attack_objective of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :type: RimeAttackObjective
        """

        self._attack_objective = attack_objective

    @property
    def objective_sub_category(self):
        """Gets the objective_sub_category of this GenerativevalidationGenerativeValidationResult.  # noqa: E501


        :return: The objective_sub_category of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :rtype: GenerativevalidationObjectiveSubCategory
        """
        return self._objective_sub_category

    @objective_sub_category.setter
    def objective_sub_category(self, objective_sub_category):
        """Sets the objective_sub_category of this GenerativevalidationGenerativeValidationResult.


        :param objective_sub_category: The objective_sub_category of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :type: GenerativevalidationObjectiveSubCategory
        """

        self._objective_sub_category = objective_sub_category

    @property
    def severity(self):
        """Gets the severity of this GenerativevalidationGenerativeValidationResult.  # noqa: E501


        :return: The severity of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :rtype: LibgenerativeSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this GenerativevalidationGenerativeValidationResult.


        :param severity: The severity of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :type: LibgenerativeSeverity
        """

        self._severity = severity

    @property
    def owasp_standards(self):
        """Gets the owasp_standards of this GenerativevalidationGenerativeValidationResult.  # noqa: E501

        List of the OWASP AI risk standards associated with the attacks in these results.  # noqa: E501

        :return: The owasp_standards of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :rtype: list[GenerativevalidationGenerativeValidationResultStandardInfo]
        """
        return self._owasp_standards

    @owasp_standards.setter
    def owasp_standards(self, owasp_standards):
        """Sets the owasp_standards of this GenerativevalidationGenerativeValidationResult.

        List of the OWASP AI risk standards associated with the attacks in these results.  # noqa: E501

        :param owasp_standards: The owasp_standards of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :type: list[GenerativevalidationGenerativeValidationResultStandardInfo]
        """

        self._owasp_standards = owasp_standards

    @property
    def nist_standards(self):
        """Gets the nist_standards of this GenerativevalidationGenerativeValidationResult.  # noqa: E501

        List of the NIST AI risk standards associated with the attacks in these results.  # noqa: E501

        :return: The nist_standards of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :rtype: list[GenerativevalidationGenerativeValidationResultStandardInfo]
        """
        return self._nist_standards

    @nist_standards.setter
    def nist_standards(self, nist_standards):
        """Sets the nist_standards of this GenerativevalidationGenerativeValidationResult.

        List of the NIST AI risk standards associated with the attacks in these results.  # noqa: E501

        :param nist_standards: The nist_standards of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :type: list[GenerativevalidationGenerativeValidationResultStandardInfo]
        """

        self._nist_standards = nist_standards

    @property
    def mitre_standards(self):
        """Gets the mitre_standards of this GenerativevalidationGenerativeValidationResult.  # noqa: E501

        List of the MITRE AI risk standards associated with the attacks in these results.  # noqa: E501

        :return: The mitre_standards of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :rtype: list[GenerativevalidationGenerativeValidationResultStandardInfo]
        """
        return self._mitre_standards

    @mitre_standards.setter
    def mitre_standards(self, mitre_standards):
        """Sets the mitre_standards of this GenerativevalidationGenerativeValidationResult.

        List of the MITRE AI risk standards associated with the attacks in these results.  # noqa: E501

        :param mitre_standards: The mitre_standards of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :type: list[GenerativevalidationGenerativeValidationResultStandardInfo]
        """

        self._mitre_standards = mitre_standards

    @property
    def threat(self):
        """Gets the threat of this GenerativevalidationGenerativeValidationResult.  # noqa: E501


        :return: The threat of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :rtype: GenerativevalidationThreat
        """
        return self._threat

    @threat.setter
    def threat(self, threat):
        """Sets the threat of this GenerativevalidationGenerativeValidationResult.


        :param threat: The threat of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :type: GenerativevalidationThreat
        """

        self._threat = threat

    @property
    def skipped_reason(self):
        """Gets the skipped_reason of this GenerativevalidationGenerativeValidationResult.  # noqa: E501

        Indicates that the test was skipped and provides a reason. If the test was not skipped this will be the empty string.  # noqa: E501

        :return: The skipped_reason of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :rtype: str
        """
        return self._skipped_reason

    @skipped_reason.setter
    def skipped_reason(self, skipped_reason):
        """Sets the skipped_reason of this GenerativevalidationGenerativeValidationResult.

        Indicates that the test was skipped and provides a reason. If the test was not skipped this will be the empty string.  # noqa: E501

        :param skipped_reason: The skipped_reason of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :type: str
        """

        self._skipped_reason = skipped_reason

    @property
    def test_run_id(self):
        """Gets the test_run_id of this GenerativevalidationGenerativeValidationResult.  # noqa: E501


        :return: The test_run_id of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._test_run_id

    @test_run_id.setter
    def test_run_id(self, test_run_id):
        """Sets the test_run_id of this GenerativevalidationGenerativeValidationResult.


        :param test_run_id: The test_run_id of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :type: RimeUUID
        """

        self._test_run_id = test_run_id

    @property
    def example(self):
        """Gets the example of this GenerativevalidationGenerativeValidationResult.  # noqa: E501


        :return: The example of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :rtype: GenerativeValidationResultExample
        """
        return self._example

    @example.setter
    def example(self, example):
        """Sets the example of this GenerativevalidationGenerativeValidationResult.


        :param example: The example of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :type: GenerativeValidationResultExample
        """

        self._example = example

    @property
    def sequential_id(self):
        """Gets the sequential_id of this GenerativevalidationGenerativeValidationResult.  # noqa: E501

        This is a special ID used by the AI Defense CP to manage retries. It should not be used for any other purpose.  # noqa: E501

        :return: The sequential_id of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :rtype: int
        """
        return self._sequential_id

    @sequential_id.setter
    def sequential_id(self, sequential_id):
        """Sets the sequential_id of this GenerativevalidationGenerativeValidationResult.

        This is a special ID used by the AI Defense CP to manage retries. It should not be used for any other purpose.  # noqa: E501

        :param sequential_id: The sequential_id of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :type: int
        """

        self._sequential_id = sequential_id

    @property
    def total_num_prompts(self):
        """Gets the total_num_prompts of this GenerativevalidationGenerativeValidationResult.  # noqa: E501

        The total number of prompts in this test run. Does not include prompts that were filtered out.  # noqa: E501

        :return: The total_num_prompts of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :rtype: int
        """
        return self._total_num_prompts

    @total_num_prompts.setter
    def total_num_prompts(self, total_num_prompts):
        """Sets the total_num_prompts of this GenerativevalidationGenerativeValidationResult.

        The total number of prompts in this test run. Does not include prompts that were filtered out.  # noqa: E501

        :param total_num_prompts: The total_num_prompts of this GenerativevalidationGenerativeValidationResult.  # noqa: E501
        :type: int
        """

        self._total_num_prompts = total_num_prompts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativevalidationGenerativeValidationResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativevalidationGenerativeValidationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
