# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SchemafilescanningRepoMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'purl': 'FilescanningPackageURL',
        'repo_last_modified_time': 'datetime',
        'tags': 'list[str]',
        'reputation': 'SchemafilescanningRepoMetadataReputation',
        'license': 'SchemafilescanningRepoMetadataLicense',
        'author': 'str'
    }

    attribute_map = {
        'purl': 'purl',
        'repo_last_modified_time': 'repoLastModifiedTime',
        'tags': 'tags',
        'reputation': 'reputation',
        'license': 'license',
        'author': 'author'
    }

    def __init__(self, purl=None, repo_last_modified_time=None, tags=None, reputation=None, license=None, author=None):  # noqa: E501
        """SchemafilescanningRepoMetadata - a model defined in Swagger"""  # noqa: E501
        self._purl = None
        self._repo_last_modified_time = None
        self._tags = None
        self._reputation = None
        self._license = None
        self._author = None
        self.discriminator = None
        if purl is not None:
            self.purl = purl
        if repo_last_modified_time is not None:
            self.repo_last_modified_time = repo_last_modified_time
        if tags is not None:
            self.tags = tags
        if reputation is not None:
            self.reputation = reputation
        if license is not None:
            self.license = license
        if author is not None:
            self.author = author

    @property
    def purl(self):
        """Gets the purl of this SchemafilescanningRepoMetadata.  # noqa: E501


        :return: The purl of this SchemafilescanningRepoMetadata.  # noqa: E501
        :rtype: FilescanningPackageURL
        """
        return self._purl

    @purl.setter
    def purl(self, purl):
        """Sets the purl of this SchemafilescanningRepoMetadata.


        :param purl: The purl of this SchemafilescanningRepoMetadata.  # noqa: E501
        :type: FilescanningPackageURL
        """

        self._purl = purl

    @property
    def repo_last_modified_time(self):
        """Gets the repo_last_modified_time of this SchemafilescanningRepoMetadata.  # noqa: E501

        The time when the model repository was last modified, inferred from the git history.  # noqa: E501

        :return: The repo_last_modified_time of this SchemafilescanningRepoMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._repo_last_modified_time

    @repo_last_modified_time.setter
    def repo_last_modified_time(self, repo_last_modified_time):
        """Sets the repo_last_modified_time of this SchemafilescanningRepoMetadata.

        The time when the model repository was last modified, inferred from the git history.  # noqa: E501

        :param repo_last_modified_time: The repo_last_modified_time of this SchemafilescanningRepoMetadata.  # noqa: E501
        :type: datetime
        """

        self._repo_last_modified_time = repo_last_modified_time

    @property
    def tags(self):
        """Gets the tags of this SchemafilescanningRepoMetadata.  # noqa: E501

        The tags associated with the model repository.  # noqa: E501

        :return: The tags of this SchemafilescanningRepoMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SchemafilescanningRepoMetadata.

        The tags associated with the model repository.  # noqa: E501

        :param tags: The tags of this SchemafilescanningRepoMetadata.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def reputation(self):
        """Gets the reputation of this SchemafilescanningRepoMetadata.  # noqa: E501


        :return: The reputation of this SchemafilescanningRepoMetadata.  # noqa: E501
        :rtype: SchemafilescanningRepoMetadataReputation
        """
        return self._reputation

    @reputation.setter
    def reputation(self, reputation):
        """Sets the reputation of this SchemafilescanningRepoMetadata.


        :param reputation: The reputation of this SchemafilescanningRepoMetadata.  # noqa: E501
        :type: SchemafilescanningRepoMetadataReputation
        """

        self._reputation = reputation

    @property
    def license(self):
        """Gets the license of this SchemafilescanningRepoMetadata.  # noqa: E501


        :return: The license of this SchemafilescanningRepoMetadata.  # noqa: E501
        :rtype: SchemafilescanningRepoMetadataLicense
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this SchemafilescanningRepoMetadata.


        :param license: The license of this SchemafilescanningRepoMetadata.  # noqa: E501
        :type: SchemafilescanningRepoMetadataLicense
        """

        self._license = license

    @property
    def author(self):
        """Gets the author of this SchemafilescanningRepoMetadata.  # noqa: E501


        :return: The author of this SchemafilescanningRepoMetadata.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this SchemafilescanningRepoMetadata.


        :param author: The author of this SchemafilescanningRepoMetadata.  # noqa: E501
        :type: str
        """

        self._author = author

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemafilescanningRepoMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemafilescanningRepoMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
