# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValidateResponseProcessedRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input_text_sha': 'str',
        'input_tokens': 'int',
        'output_text_sha': 'str',
        'output_tokens': 'int'
    }

    attribute_map = {
        'input_text_sha': 'inputTextSha',
        'input_tokens': 'inputTokens',
        'output_text_sha': 'outputTextSha',
        'output_tokens': 'outputTokens'
    }

    def __init__(self, input_text_sha=None, input_tokens=None, output_text_sha=None, output_tokens=None):  # noqa: E501
        """ValidateResponseProcessedRequest - a model defined in Swagger"""  # noqa: E501
        self._input_text_sha = None
        self._input_tokens = None
        self._output_text_sha = None
        self._output_tokens = None
        self.discriminator = None
        if input_text_sha is not None:
            self.input_text_sha = input_text_sha
        if input_tokens is not None:
            self.input_tokens = input_tokens
        if output_text_sha is not None:
            self.output_text_sha = output_text_sha
        if output_tokens is not None:
            self.output_tokens = output_tokens

    @property
    def input_text_sha(self):
        """Gets the input_text_sha of this ValidateResponseProcessedRequest.  # noqa: E501

        Information about the `user_input_text`. The raw input is truncated if it exceeds a certain token length so we do not denial of service downstream logging and data systems.  # noqa: E501

        :return: The input_text_sha of this ValidateResponseProcessedRequest.  # noqa: E501
        :rtype: str
        """
        return self._input_text_sha

    @input_text_sha.setter
    def input_text_sha(self, input_text_sha):
        """Sets the input_text_sha of this ValidateResponseProcessedRequest.

        Information about the `user_input_text`. The raw input is truncated if it exceeds a certain token length so we do not denial of service downstream logging and data systems.  # noqa: E501

        :param input_text_sha: The input_text_sha of this ValidateResponseProcessedRequest.  # noqa: E501
        :type: str
        """

        self._input_text_sha = input_text_sha

    @property
    def input_tokens(self):
        """Gets the input_tokens of this ValidateResponseProcessedRequest.  # noqa: E501


        :return: The input_tokens of this ValidateResponseProcessedRequest.  # noqa: E501
        :rtype: int
        """
        return self._input_tokens

    @input_tokens.setter
    def input_tokens(self, input_tokens):
        """Sets the input_tokens of this ValidateResponseProcessedRequest.


        :param input_tokens: The input_tokens of this ValidateResponseProcessedRequest.  # noqa: E501
        :type: int
        """

        self._input_tokens = input_tokens

    @property
    def output_text_sha(self):
        """Gets the output_text_sha of this ValidateResponseProcessedRequest.  # noqa: E501

        Information about the `output_text`. The output text is truncated if it exceeds a certain token length so we do not denial of service downstream logging and data systems.  # noqa: E501

        :return: The output_text_sha of this ValidateResponseProcessedRequest.  # noqa: E501
        :rtype: str
        """
        return self._output_text_sha

    @output_text_sha.setter
    def output_text_sha(self, output_text_sha):
        """Sets the output_text_sha of this ValidateResponseProcessedRequest.

        Information about the `output_text`. The output text is truncated if it exceeds a certain token length so we do not denial of service downstream logging and data systems.  # noqa: E501

        :param output_text_sha: The output_text_sha of this ValidateResponseProcessedRequest.  # noqa: E501
        :type: str
        """

        self._output_text_sha = output_text_sha

    @property
    def output_tokens(self):
        """Gets the output_tokens of this ValidateResponseProcessedRequest.  # noqa: E501


        :return: The output_tokens of this ValidateResponseProcessedRequest.  # noqa: E501
        :rtype: int
        """
        return self._output_tokens

    @output_tokens.setter
    def output_tokens(self, output_tokens):
        """Sets the output_tokens of this ValidateResponseProcessedRequest.


        :param output_tokens: The output_tokens of this ValidateResponseProcessedRequest.  # noqa: E501
        :type: int
        """

        self._output_tokens = output_tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidateResponseProcessedRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidateResponseProcessedRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
