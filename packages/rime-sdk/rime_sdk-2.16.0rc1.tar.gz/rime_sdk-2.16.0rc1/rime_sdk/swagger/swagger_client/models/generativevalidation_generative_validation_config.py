# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativevalidationGenerativeValidationConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'prompt_bank': 'GenerativevalidationPromptBank',
        'system_prompt': 'str',
        'connection': 'GenerativevalidationModelConnectionSpec',
        'model_output_is_sensitive': 'bool',
        'filters': 'GenerativevalidationFilters',
        'language': 'RimeLanguage',
        'tenant_id': 'str',
        'config_id': 'str',
        'task_id': 'str'
    }

    attribute_map = {
        'prompt_bank': 'promptBank',
        'system_prompt': 'systemPrompt',
        'connection': 'connection',
        'model_output_is_sensitive': 'modelOutputIsSensitive',
        'filters': 'filters',
        'language': 'language',
        'tenant_id': 'tenantId',
        'config_id': 'configId',
        'task_id': 'taskId'
    }

    def __init__(self, prompt_bank=None, system_prompt=None, connection=None, model_output_is_sensitive=None, filters=None, language=None, tenant_id=None, config_id=None, task_id=None):  # noqa: E501
        """GenerativevalidationGenerativeValidationConfig - a model defined in Swagger"""  # noqa: E501
        self._prompt_bank = None
        self._system_prompt = None
        self._connection = None
        self._model_output_is_sensitive = None
        self._filters = None
        self._language = None
        self._tenant_id = None
        self._config_id = None
        self._task_id = None
        self.discriminator = None
        if prompt_bank is not None:
            self.prompt_bank = prompt_bank
        if system_prompt is not None:
            self.system_prompt = system_prompt
        if connection is not None:
            self.connection = connection
        if model_output_is_sensitive is not None:
            self.model_output_is_sensitive = model_output_is_sensitive
        if filters is not None:
            self.filters = filters
        if language is not None:
            self.language = language
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if config_id is not None:
            self.config_id = config_id
        if task_id is not None:
            self.task_id = task_id

    @property
    def prompt_bank(self):
        """Gets the prompt_bank of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501


        :return: The prompt_bank of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :rtype: GenerativevalidationPromptBank
        """
        return self._prompt_bank

    @prompt_bank.setter
    def prompt_bank(self, prompt_bank):
        """Sets the prompt_bank of this GenerativevalidationGenerativeValidationConfig.


        :param prompt_bank: The prompt_bank of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :type: GenerativevalidationPromptBank
        """

        self._prompt_bank = prompt_bank

    @property
    def system_prompt(self):
        """Gets the system_prompt of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501

        The system prompt that is currently active on the provided endpoint. If this is not set, system prompt extraction tests will be skipped.  # noqa: E501

        :return: The system_prompt of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :rtype: str
        """
        return self._system_prompt

    @system_prompt.setter
    def system_prompt(self, system_prompt):
        """Sets the system_prompt of this GenerativevalidationGenerativeValidationConfig.

        The system prompt that is currently active on the provided endpoint. If this is not set, system prompt extraction tests will be skipped.  # noqa: E501

        :param system_prompt: The system_prompt of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :type: str
        """

        self._system_prompt = system_prompt

    @property
    def connection(self):
        """Gets the connection of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501


        :return: The connection of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :rtype: GenerativevalidationModelConnectionSpec
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this GenerativevalidationGenerativeValidationConfig.


        :param connection: The connection of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :type: GenerativevalidationModelConnectionSpec
        """

        self._connection = connection

    @property
    def model_output_is_sensitive(self):
        """Gets the model_output_is_sensitive of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501

        Will not be saved to the database, logged in plaintext, etc.  # noqa: E501

        :return: The model_output_is_sensitive of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :rtype: bool
        """
        return self._model_output_is_sensitive

    @model_output_is_sensitive.setter
    def model_output_is_sensitive(self, model_output_is_sensitive):
        """Sets the model_output_is_sensitive of this GenerativevalidationGenerativeValidationConfig.

        Will not be saved to the database, logged in plaintext, etc.  # noqa: E501

        :param model_output_is_sensitive: The model_output_is_sensitive of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :type: bool
        """

        self._model_output_is_sensitive = model_output_is_sensitive

    @property
    def filters(self):
        """Gets the filters of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501


        :return: The filters of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :rtype: GenerativevalidationFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this GenerativevalidationGenerativeValidationConfig.


        :param filters: The filters of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :type: GenerativevalidationFilters
        """

        self._filters = filters

    @property
    def language(self):
        """Gets the language of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501


        :return: The language of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :rtype: RimeLanguage
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this GenerativevalidationGenerativeValidationConfig.


        :param language: The language of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :type: RimeLanguage
        """

        self._language = language

    @property
    def tenant_id(self):
        """Gets the tenant_id of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501

        The tenant ID of the user.  # noqa: E501

        :return: The tenant_id of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this GenerativevalidationGenerativeValidationConfig.

        The tenant ID of the user.  # noqa: E501

        :param tenant_id: The tenant_id of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def config_id(self):
        """Gets the config_id of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501

        The ID of the configuration.  # noqa: E501

        :return: The config_id of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this GenerativevalidationGenerativeValidationConfig.

        The ID of the configuration.  # noqa: E501

        :param config_id: The config_id of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :type: str
        """

        self._config_id = config_id

    @property
    def task_id(self):
        """Gets the task_id of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501

        The ID assigned by the job initiating a validation run.  # noqa: E501

        :return: The task_id of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this GenerativevalidationGenerativeValidationConfig.

        The ID assigned by the job initiating a validation run.  # noqa: E501

        :param task_id: The task_id of this GenerativevalidationGenerativeValidationConfig.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativevalidationGenerativeValidationConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativevalidationGenerativeValidationConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
