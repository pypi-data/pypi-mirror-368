# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelServerConfigHuggingfaceConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_task': 'str',
        'repository': 'str',
        'revision': 'str',
        'tokenizer_kwargs_json': 'str'
    }

    attribute_map = {
        'model_task': 'modelTask',
        'repository': 'repository',
        'revision': 'revision',
        'tokenizer_kwargs_json': 'tokenizerKwargsJson'
    }

    def __init__(self, model_task=None, repository=None, revision=None, tokenizer_kwargs_json=None):  # noqa: E501
        """ModelServerConfigHuggingfaceConfig - a model defined in Swagger"""  # noqa: E501
        self._model_task = None
        self._repository = None
        self._revision = None
        self._tokenizer_kwargs_json = None
        self.discriminator = None
        if model_task is not None:
            self.model_task = model_task
        if repository is not None:
            self.repository = repository
        if revision is not None:
            self.revision = revision
        if tokenizer_kwargs_json is not None:
            self.tokenizer_kwargs_json = tokenizer_kwargs_json

    @property
    def model_task(self):
        """Gets the model_task of this ModelServerConfigHuggingfaceConfig.  # noqa: E501


        :return: The model_task of this ModelServerConfigHuggingfaceConfig.  # noqa: E501
        :rtype: str
        """
        return self._model_task

    @model_task.setter
    def model_task(self, model_task):
        """Sets the model_task of this ModelServerConfigHuggingfaceConfig.


        :param model_task: The model_task of this ModelServerConfigHuggingfaceConfig.  # noqa: E501
        :type: str
        """

        self._model_task = model_task

    @property
    def repository(self):
        """Gets the repository of this ModelServerConfigHuggingfaceConfig.  # noqa: E501


        :return: The repository of this ModelServerConfigHuggingfaceConfig.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this ModelServerConfigHuggingfaceConfig.


        :param repository: The repository of this ModelServerConfigHuggingfaceConfig.  # noqa: E501
        :type: str
        """

        self._repository = repository

    @property
    def revision(self):
        """Gets the revision of this ModelServerConfigHuggingfaceConfig.  # noqa: E501


        :return: The revision of this ModelServerConfigHuggingfaceConfig.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this ModelServerConfigHuggingfaceConfig.


        :param revision: The revision of this ModelServerConfigHuggingfaceConfig.  # noqa: E501
        :type: str
        """

        self._revision = revision

    @property
    def tokenizer_kwargs_json(self):
        """Gets the tokenizer_kwargs_json of this ModelServerConfigHuggingfaceConfig.  # noqa: E501


        :return: The tokenizer_kwargs_json of this ModelServerConfigHuggingfaceConfig.  # noqa: E501
        :rtype: str
        """
        return self._tokenizer_kwargs_json

    @tokenizer_kwargs_json.setter
    def tokenizer_kwargs_json(self, tokenizer_kwargs_json):
        """Sets the tokenizer_kwargs_json of this ModelServerConfigHuggingfaceConfig.


        :param tokenizer_kwargs_json: The tokenizer_kwargs_json of this ModelServerConfigHuggingfaceConfig.  # noqa: E501
        :type: str
        """

        self._tokenizer_kwargs_json = tokenizer_kwargs_json

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelServerConfigHuggingfaceConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelServerConfigHuggingfaceConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
