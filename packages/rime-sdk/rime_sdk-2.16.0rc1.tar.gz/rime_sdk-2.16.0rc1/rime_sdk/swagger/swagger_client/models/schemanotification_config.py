# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SchemanotificationConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'digest_config': 'NotificationDigestConfig',
        'job_action_config': 'NotificationJobActionConfig',
        'monitoring_config': 'NotificationMonitoringConfig'
    }

    attribute_map = {
        'digest_config': 'digestConfig',
        'job_action_config': 'jobActionConfig',
        'monitoring_config': 'monitoringConfig'
    }

    def __init__(self, digest_config=None, job_action_config=None, monitoring_config=None):  # noqa: E501
        """SchemanotificationConfig - a model defined in Swagger"""  # noqa: E501
        self._digest_config = None
        self._job_action_config = None
        self._monitoring_config = None
        self.discriminator = None
        if digest_config is not None:
            self.digest_config = digest_config
        if job_action_config is not None:
            self.job_action_config = job_action_config
        if monitoring_config is not None:
            self.monitoring_config = monitoring_config

    @property
    def digest_config(self):
        """Gets the digest_config of this SchemanotificationConfig.  # noqa: E501


        :return: The digest_config of this SchemanotificationConfig.  # noqa: E501
        :rtype: NotificationDigestConfig
        """
        return self._digest_config

    @digest_config.setter
    def digest_config(self, digest_config):
        """Sets the digest_config of this SchemanotificationConfig.


        :param digest_config: The digest_config of this SchemanotificationConfig.  # noqa: E501
        :type: NotificationDigestConfig
        """

        self._digest_config = digest_config

    @property
    def job_action_config(self):
        """Gets the job_action_config of this SchemanotificationConfig.  # noqa: E501


        :return: The job_action_config of this SchemanotificationConfig.  # noqa: E501
        :rtype: NotificationJobActionConfig
        """
        return self._job_action_config

    @job_action_config.setter
    def job_action_config(self, job_action_config):
        """Sets the job_action_config of this SchemanotificationConfig.


        :param job_action_config: The job_action_config of this SchemanotificationConfig.  # noqa: E501
        :type: NotificationJobActionConfig
        """

        self._job_action_config = job_action_config

    @property
    def monitoring_config(self):
        """Gets the monitoring_config of this SchemanotificationConfig.  # noqa: E501


        :return: The monitoring_config of this SchemanotificationConfig.  # noqa: E501
        :rtype: NotificationMonitoringConfig
        """
        return self._monitoring_config

    @monitoring_config.setter
    def monitoring_config(self, monitoring_config):
        """Sets the monitoring_config of this SchemanotificationConfig.


        :param monitoring_config: The monitoring_config of this SchemanotificationConfig.  # noqa: E501
        :type: NotificationMonitoringConfig
        """

        self._monitoring_config = monitoring_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemanotificationConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemanotificationConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
