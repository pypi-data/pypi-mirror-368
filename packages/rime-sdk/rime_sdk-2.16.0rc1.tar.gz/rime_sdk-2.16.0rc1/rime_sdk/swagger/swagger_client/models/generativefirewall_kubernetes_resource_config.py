# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativefirewallKubernetesResourceConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_replicas': 'int',
        'max_replicas': 'int',
        'limits': 'dict(str, str)',
        'requests': 'dict(str, str)'
    }

    attribute_map = {
        'min_replicas': 'minReplicas',
        'max_replicas': 'maxReplicas',
        'limits': 'limits',
        'requests': 'requests'
    }

    def __init__(self, min_replicas=None, max_replicas=None, limits=None, requests=None):  # noqa: E501
        """GenerativefirewallKubernetesResourceConfig - a model defined in Swagger"""  # noqa: E501
        self._min_replicas = None
        self._max_replicas = None
        self._limits = None
        self._requests = None
        self.discriminator = None
        if min_replicas is not None:
            self.min_replicas = min_replicas
        if max_replicas is not None:
            self.max_replicas = max_replicas
        if limits is not None:
            self.limits = limits
        if requests is not None:
            self.requests = requests

    @property
    def min_replicas(self):
        """Gets the min_replicas of this GenerativefirewallKubernetesResourceConfig.  # noqa: E501


        :return: The min_replicas of this GenerativefirewallKubernetesResourceConfig.  # noqa: E501
        :rtype: int
        """
        return self._min_replicas

    @min_replicas.setter
    def min_replicas(self, min_replicas):
        """Sets the min_replicas of this GenerativefirewallKubernetesResourceConfig.


        :param min_replicas: The min_replicas of this GenerativefirewallKubernetesResourceConfig.  # noqa: E501
        :type: int
        """

        self._min_replicas = min_replicas

    @property
    def max_replicas(self):
        """Gets the max_replicas of this GenerativefirewallKubernetesResourceConfig.  # noqa: E501


        :return: The max_replicas of this GenerativefirewallKubernetesResourceConfig.  # noqa: E501
        :rtype: int
        """
        return self._max_replicas

    @max_replicas.setter
    def max_replicas(self, max_replicas):
        """Sets the max_replicas of this GenerativefirewallKubernetesResourceConfig.


        :param max_replicas: The max_replicas of this GenerativefirewallKubernetesResourceConfig.  # noqa: E501
        :type: int
        """

        self._max_replicas = max_replicas

    @property
    def limits(self):
        """Gets the limits of this GenerativefirewallKubernetesResourceConfig.  # noqa: E501


        :return: The limits of this GenerativefirewallKubernetesResourceConfig.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this GenerativefirewallKubernetesResourceConfig.


        :param limits: The limits of this GenerativefirewallKubernetesResourceConfig.  # noqa: E501
        :type: dict(str, str)
        """

        self._limits = limits

    @property
    def requests(self):
        """Gets the requests of this GenerativefirewallKubernetesResourceConfig.  # noqa: E501


        :return: The requests of this GenerativefirewallKubernetesResourceConfig.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """Sets the requests of this GenerativefirewallKubernetesResourceConfig.


        :param requests: The requests of this GenerativefirewallKubernetesResourceConfig.  # noqa: E501
        :type: dict(str, str)
        """

        self._requests = requests

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativefirewallKubernetesResourceConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativefirewallKubernetesResourceConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
