# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativefirewallPiiDetectionRuleConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_types': 'list[GenerativefirewallPiiEntityType]',
        'custom_entities': 'list[GenerativefirewallCustomPiiEntity]'
    }

    attribute_map = {
        'entity_types': 'entityTypes',
        'custom_entities': 'customEntities'
    }

    def __init__(self, entity_types=None, custom_entities=None):  # noqa: E501
        """GenerativefirewallPiiDetectionRuleConfig - a model defined in Swagger"""  # noqa: E501
        self._entity_types = None
        self._custom_entities = None
        self.discriminator = None
        if entity_types is not None:
            self.entity_types = entity_types
        if custom_entities is not None:
            self.custom_entities = custom_entities

    @property
    def entity_types(self):
        """Gets the entity_types of this GenerativefirewallPiiDetectionRuleConfig.  # noqa: E501

        Entity types determines which types of PII will be flagged.  # noqa: E501

        :return: The entity_types of this GenerativefirewallPiiDetectionRuleConfig.  # noqa: E501
        :rtype: list[GenerativefirewallPiiEntityType]
        """
        return self._entity_types

    @entity_types.setter
    def entity_types(self, entity_types):
        """Sets the entity_types of this GenerativefirewallPiiDetectionRuleConfig.

        Entity types determines which types of PII will be flagged.  # noqa: E501

        :param entity_types: The entity_types of this GenerativefirewallPiiDetectionRuleConfig.  # noqa: E501
        :type: list[GenerativefirewallPiiEntityType]
        """

        self._entity_types = entity_types

    @property
    def custom_entities(self):
        """Gets the custom_entities of this GenerativefirewallPiiDetectionRuleConfig.  # noqa: E501

        Custom entities are custom-specified patterns to flag.  # noqa: E501

        :return: The custom_entities of this GenerativefirewallPiiDetectionRuleConfig.  # noqa: E501
        :rtype: list[GenerativefirewallCustomPiiEntity]
        """
        return self._custom_entities

    @custom_entities.setter
    def custom_entities(self, custom_entities):
        """Sets the custom_entities of this GenerativefirewallPiiDetectionRuleConfig.

        Custom entities are custom-specified patterns to flag.  # noqa: E501

        :param custom_entities: The custom_entities of this GenerativefirewallPiiDetectionRuleConfig.  # noqa: E501
        :type: list[GenerativefirewallCustomPiiEntity]
        """

        self._custom_entities = custom_entities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativefirewallPiiDetectionRuleConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativefirewallPiiDetectionRuleConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
