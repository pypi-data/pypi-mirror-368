# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeCreateNotificationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'NotificationObjectType',
        'object_id': 'str',
        'emails': 'list[str]',
        'config': 'SchemanotificationConfig',
        'webhooks': 'list[NotificationWebhookConfig]'
    }

    attribute_map = {
        'object_type': 'objectType',
        'object_id': 'objectId',
        'emails': 'emails',
        'config': 'config',
        'webhooks': 'webhooks'
    }

    def __init__(self, object_type=None, object_id=None, emails=None, config=None, webhooks=None):  # noqa: E501
        """RimeCreateNotificationRequest - a model defined in Swagger"""  # noqa: E501
        self._object_type = None
        self._object_id = None
        self._emails = None
        self._config = None
        self._webhooks = None
        self.discriminator = None
        if object_type is not None:
            self.object_type = object_type
        self.object_id = object_id
        if emails is not None:
            self.emails = emails
        if config is not None:
            self.config = config
        if webhooks is not None:
            self.webhooks = webhooks

    @property
    def object_type(self):
        """Gets the object_type of this RimeCreateNotificationRequest.  # noqa: E501


        :return: The object_type of this RimeCreateNotificationRequest.  # noqa: E501
        :rtype: NotificationObjectType
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this RimeCreateNotificationRequest.


        :param object_type: The object_type of this RimeCreateNotificationRequest.  # noqa: E501
        :type: NotificationObjectType
        """

        self._object_type = object_type

    @property
    def object_id(self):
        """Gets the object_id of this RimeCreateNotificationRequest.  # noqa: E501

        Uniquely specifies an object for the notification. This varies depending on the object type; for Projects, this should be the unique identifier of the project.  # noqa: E501

        :return: The object_id of this RimeCreateNotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this RimeCreateNotificationRequest.

        Uniquely specifies an object for the notification. This varies depending on the object type; for Projects, this should be the unique identifier of the project.  # noqa: E501

        :param object_id: The object_id of this RimeCreateNotificationRequest.  # noqa: E501
        :type: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")  # noqa: E501

        self._object_id = object_id

    @property
    def emails(self):
        """Gets the emails of this RimeCreateNotificationRequest.  # noqa: E501

        List of emails that notifications should be sent to - this can be empty.  # noqa: E501

        :return: The emails of this RimeCreateNotificationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this RimeCreateNotificationRequest.

        List of emails that notifications should be sent to - this can be empty.  # noqa: E501

        :param emails: The emails of this RimeCreateNotificationRequest.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def config(self):
        """Gets the config of this RimeCreateNotificationRequest.  # noqa: E501


        :return: The config of this RimeCreateNotificationRequest.  # noqa: E501
        :rtype: SchemanotificationConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this RimeCreateNotificationRequest.


        :param config: The config of this RimeCreateNotificationRequest.  # noqa: E501
        :type: SchemanotificationConfig
        """

        self._config = config

    @property
    def webhooks(self):
        """Gets the webhooks of this RimeCreateNotificationRequest.  # noqa: E501

        List of webhooks that notifications should be sent to - this can be empty.  # noqa: E501

        :return: The webhooks of this RimeCreateNotificationRequest.  # noqa: E501
        :rtype: list[NotificationWebhookConfig]
        """
        return self._webhooks

    @webhooks.setter
    def webhooks(self, webhooks):
        """Sets the webhooks of this RimeCreateNotificationRequest.

        List of webhooks that notifications should be sent to - this can be empty.  # noqa: E501

        :param webhooks: The webhooks of this RimeCreateNotificationRequest.  # noqa: E501
        :type: list[NotificationWebhookConfig]
        """

        self._webhooks = webhooks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeCreateNotificationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeCreateNotificationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
