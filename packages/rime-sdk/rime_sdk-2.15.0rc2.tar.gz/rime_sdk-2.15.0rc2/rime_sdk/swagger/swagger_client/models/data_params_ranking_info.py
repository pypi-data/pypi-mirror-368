# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataParamsRankingInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query_col': 'str',
        'nqueries': 'str',
        'nrows_per_query': 'str',
        'drop_query_id': 'bool'
    }

    attribute_map = {
        'query_col': 'queryCol',
        'nqueries': 'nqueries',
        'nrows_per_query': 'nrowsPerQuery',
        'drop_query_id': 'dropQueryId'
    }

    def __init__(self, query_col=None, nqueries=None, nrows_per_query=None, drop_query_id=None):  # noqa: E501
        """DataParamsRankingInfo - a model defined in Swagger"""  # noqa: E501
        self._query_col = None
        self._nqueries = None
        self._nrows_per_query = None
        self._drop_query_id = None
        self.discriminator = None
        if query_col is not None:
            self.query_col = query_col
        if nqueries is not None:
            self.nqueries = nqueries
        if nrows_per_query is not None:
            self.nrows_per_query = nrows_per_query
        if drop_query_id is not None:
            self.drop_query_id = drop_query_id

    @property
    def query_col(self):
        """Gets the query_col of this DataParamsRankingInfo.  # noqa: E501

        Name of column in dataset that contains the query ids.  # noqa: E501

        :return: The query_col of this DataParamsRankingInfo.  # noqa: E501
        :rtype: str
        """
        return self._query_col

    @query_col.setter
    def query_col(self, query_col):
        """Sets the query_col of this DataParamsRankingInfo.

        Name of column in dataset that contains the query ids.  # noqa: E501

        :param query_col: The query_col of this DataParamsRankingInfo.  # noqa: E501
        :type: str
        """

        self._query_col = query_col

    @property
    def nqueries(self):
        """Gets the nqueries of this DataParamsRankingInfo.  # noqa: E501

        Number of queries to consider. If null, will use all queries.  # noqa: E501

        :return: The nqueries of this DataParamsRankingInfo.  # noqa: E501
        :rtype: str
        """
        return self._nqueries

    @nqueries.setter
    def nqueries(self, nqueries):
        """Sets the nqueries of this DataParamsRankingInfo.

        Number of queries to consider. If null, will use all queries.  # noqa: E501

        :param nqueries: The nqueries of this DataParamsRankingInfo.  # noqa: E501
        :type: str
        """

        self._nqueries = nqueries

    @property
    def nrows_per_query(self):
        """Gets the nrows_per_query of this DataParamsRankingInfo.  # noqa: E501

        Number of rows to use per query. If null, will use all rows.  # noqa: E501

        :return: The nrows_per_query of this DataParamsRankingInfo.  # noqa: E501
        :rtype: str
        """
        return self._nrows_per_query

    @nrows_per_query.setter
    def nrows_per_query(self, nrows_per_query):
        """Sets the nrows_per_query of this DataParamsRankingInfo.

        Number of rows to use per query. If null, will use all rows.  # noqa: E501

        :param nrows_per_query: The nrows_per_query of this DataParamsRankingInfo.  # noqa: E501
        :type: str
        """

        self._nrows_per_query = nrows_per_query

    @property
    def drop_query_id(self):
        """Gets the drop_query_id of this DataParamsRankingInfo.  # noqa: E501

        Whether to drop the query ID column from the dataset to avoid passing as a feature to the model.  # noqa: E501

        :return: The drop_query_id of this DataParamsRankingInfo.  # noqa: E501
        :rtype: bool
        """
        return self._drop_query_id

    @drop_query_id.setter
    def drop_query_id(self, drop_query_id):
        """Sets the drop_query_id of this DataParamsRankingInfo.

        Whether to drop the query ID column from the dataset to avoid passing as a feature to the model.  # noqa: E501

        :param drop_query_id: The drop_query_id of this DataParamsRankingInfo.  # noqa: E501
        :type: bool
        """

        self._drop_query_id = drop_query_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataParamsRankingInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataParamsRankingInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
