# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilescanningPackageURL(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'SchemafilescanningPackageType',
        'namespace': 'str',
        'name': 'str',
        'version': 'str',
        'qualifiers': 'dict(str, str)',
        'subpath': 'str'
    }

    attribute_map = {
        'type': 'type',
        'namespace': 'namespace',
        'name': 'name',
        'version': 'version',
        'qualifiers': 'qualifiers',
        'subpath': 'subpath'
    }

    def __init__(self, type=None, namespace=None, name=None, version=None, qualifiers=None, subpath=None):  # noqa: E501
        """FilescanningPackageURL - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._namespace = None
        self._name = None
        self._version = None
        self._qualifiers = None
        self._subpath = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if namespace is not None:
            self.namespace = namespace
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        if qualifiers is not None:
            self.qualifiers = qualifiers
        if subpath is not None:
            self.subpath = subpath

    @property
    def type(self):
        """Gets the type of this FilescanningPackageURL.  # noqa: E501


        :return: The type of this FilescanningPackageURL.  # noqa: E501
        :rtype: SchemafilescanningPackageType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FilescanningPackageURL.


        :param type: The type of this FilescanningPackageURL.  # noqa: E501
        :type: SchemafilescanningPackageType
        """

        self._type = type

    @property
    def namespace(self):
        """Gets the namespace of this FilescanningPackageURL.  # noqa: E501

        Optional. The name prefix such as a GitHub user or organization, Maven groupid, or a Docker image owner.  # noqa: E501

        :return: The namespace of this FilescanningPackageURL.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this FilescanningPackageURL.

        Optional. The name prefix such as a GitHub user or organization, Maven groupid, or a Docker image owner.  # noqa: E501

        :param namespace: The namespace of this FilescanningPackageURL.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def name(self):
        """Gets the name of this FilescanningPackageURL.  # noqa: E501

        The name of the package.  # noqa: E501

        :return: The name of this FilescanningPackageURL.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FilescanningPackageURL.

        The name of the package.  # noqa: E501

        :param name: The name of this FilescanningPackageURL.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this FilescanningPackageURL.  # noqa: E501

        Optional. The version of the package.  # noqa: E501

        :return: The version of this FilescanningPackageURL.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FilescanningPackageURL.

        Optional. The version of the package.  # noqa: E501

        :param version: The version of this FilescanningPackageURL.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def qualifiers(self):
        """Gets the qualifiers of this FilescanningPackageURL.  # noqa: E501

        Optional. Additional qualifying data for a package such as an OS, architecture, a distro, etc.  # noqa: E501

        :return: The qualifiers of this FilescanningPackageURL.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._qualifiers

    @qualifiers.setter
    def qualifiers(self, qualifiers):
        """Sets the qualifiers of this FilescanningPackageURL.

        Optional. Additional qualifying data for a package such as an OS, architecture, a distro, etc.  # noqa: E501

        :param qualifiers: The qualifiers of this FilescanningPackageURL.  # noqa: E501
        :type: dict(str, str)
        """

        self._qualifiers = qualifiers

    @property
    def subpath(self):
        """Gets the subpath of this FilescanningPackageURL.  # noqa: E501

        Optional. A subpath within a package, relative to the package root.  # noqa: E501

        :return: The subpath of this FilescanningPackageURL.  # noqa: E501
        :rtype: str
        """
        return self._subpath

    @subpath.setter
    def subpath(self, subpath):
        """Sets the subpath of this FilescanningPackageURL.

        Optional. A subpath within a package, relative to the package root.  # noqa: E501

        :param subpath: The subpath of this FilescanningPackageURL.  # noqa: E501
        :type: str
        """

        self._subpath = subpath

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilescanningPackageURL, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilescanningPackageURL):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
