# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContinuoustestsFirewallIdUuidBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'firewall_id': 'object',
        'test_run_incremental_config': 'TestrunTestRunIncrementalConfig',
        'override_existing_bins': 'bool',
        'agent_id': 'RimeUUID',
        'internal_created': 'bool',
        'experimental_fields': 'dict(str, object)'
    }

    attribute_map = {
        'firewall_id': 'firewallId',
        'test_run_incremental_config': 'testRunIncrementalConfig',
        'override_existing_bins': 'overrideExistingBins',
        'agent_id': 'agentId',
        'internal_created': 'internalCreated',
        'experimental_fields': 'experimentalFields'
    }

    def __init__(self, firewall_id=None, test_run_incremental_config=None, override_existing_bins=None, agent_id=None, internal_created=None, experimental_fields=None):  # noqa: E501
        """ContinuoustestsFirewallIdUuidBody - a model defined in Swagger"""  # noqa: E501
        self._firewall_id = None
        self._test_run_incremental_config = None
        self._override_existing_bins = None
        self._agent_id = None
        self._internal_created = None
        self._experimental_fields = None
        self.discriminator = None
        if firewall_id is not None:
            self.firewall_id = firewall_id
        if test_run_incremental_config is not None:
            self.test_run_incremental_config = test_run_incremental_config
        if override_existing_bins is not None:
            self.override_existing_bins = override_existing_bins
        if agent_id is not None:
            self.agent_id = agent_id
        if internal_created is not None:
            self.internal_created = internal_created
        if experimental_fields is not None:
            self.experimental_fields = experimental_fields

    @property
    def firewall_id(self):
        """Gets the firewall_id of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501

        Uniquely specifies a Firewall.  # noqa: E501

        :return: The firewall_id of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501
        :rtype: object
        """
        return self._firewall_id

    @firewall_id.setter
    def firewall_id(self, firewall_id):
        """Sets the firewall_id of this ContinuoustestsFirewallIdUuidBody.

        Uniquely specifies a Firewall.  # noqa: E501

        :param firewall_id: The firewall_id of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501
        :type: object
        """

        self._firewall_id = firewall_id

    @property
    def test_run_incremental_config(self):
        """Gets the test_run_incremental_config of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501


        :return: The test_run_incremental_config of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501
        :rtype: TestrunTestRunIncrementalConfig
        """
        return self._test_run_incremental_config

    @test_run_incremental_config.setter
    def test_run_incremental_config(self, test_run_incremental_config):
        """Sets the test_run_incremental_config of this ContinuoustestsFirewallIdUuidBody.


        :param test_run_incremental_config: The test_run_incremental_config of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501
        :type: TestrunTestRunIncrementalConfig
        """

        self._test_run_incremental_config = test_run_incremental_config

    @property
    def override_existing_bins(self):
        """Gets the override_existing_bins of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501


        :return: The override_existing_bins of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501
        :rtype: bool
        """
        return self._override_existing_bins

    @override_existing_bins.setter
    def override_existing_bins(self, override_existing_bins):
        """Sets the override_existing_bins of this ContinuoustestsFirewallIdUuidBody.


        :param override_existing_bins: The override_existing_bins of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501
        :type: bool
        """

        self._override_existing_bins = override_existing_bins

    @property
    def agent_id(self):
        """Gets the agent_id of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501


        :return: The agent_id of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this ContinuoustestsFirewallIdUuidBody.


        :param agent_id: The agent_id of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501
        :type: RimeUUID
        """

        self._agent_id = agent_id

    @property
    def internal_created(self):
        """Gets the internal_created of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501

        This is set in the BE for jobs created by an internal worker.  # noqa: E501

        :return: The internal_created of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501
        :rtype: bool
        """
        return self._internal_created

    @internal_created.setter
    def internal_created(self, internal_created):
        """Sets the internal_created of this ContinuoustestsFirewallIdUuidBody.

        This is set in the BE for jobs created by an internal worker.  # noqa: E501

        :param internal_created: The internal_created of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501
        :type: bool
        """

        self._internal_created = internal_created

    @property
    def experimental_fields(self):
        """Gets the experimental_fields of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501

        Fields that enable experimental functionality.  WARNING: these fields are experimental; ie, their functionality may not be reliable or backwards-compatible. Do not use these fields in production.  # noqa: E501

        :return: The experimental_fields of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._experimental_fields

    @experimental_fields.setter
    def experimental_fields(self, experimental_fields):
        """Sets the experimental_fields of this ContinuoustestsFirewallIdUuidBody.

        Fields that enable experimental functionality.  WARNING: these fields are experimental; ie, their functionality may not be reliable or backwards-compatible. Do not use these fields in production.  # noqa: E501

        :param experimental_fields: The experimental_fields of this ContinuoustestsFirewallIdUuidBody.  # noqa: E501
        :type: dict(str, object)
        """

        self._experimental_fields = experimental_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContinuoustestsFirewallIdUuidBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContinuoustestsFirewallIdUuidBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
