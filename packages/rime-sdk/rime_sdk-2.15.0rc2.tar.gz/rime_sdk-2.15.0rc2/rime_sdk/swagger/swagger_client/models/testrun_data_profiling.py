# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestrunDataProfiling(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_quantiles': 'str',
        'num_subsets': 'str',
        'column_type_info': 'DataProfilingColumnTypeInfo',
        'feature_relationship_info': 'DataProfilingFeatureRelationshipInfo'
    }

    attribute_map = {
        'num_quantiles': 'numQuantiles',
        'num_subsets': 'numSubsets',
        'column_type_info': 'columnTypeInfo',
        'feature_relationship_info': 'featureRelationshipInfo'
    }

    def __init__(self, num_quantiles=None, num_subsets=None, column_type_info=None, feature_relationship_info=None):  # noqa: E501
        """TestrunDataProfiling - a model defined in Swagger"""  # noqa: E501
        self._num_quantiles = None
        self._num_subsets = None
        self._column_type_info = None
        self._feature_relationship_info = None
        self.discriminator = None
        if num_quantiles is not None:
            self.num_quantiles = num_quantiles
        if num_subsets is not None:
            self.num_subsets = num_subsets
        if column_type_info is not None:
            self.column_type_info = column_type_info
        if feature_relationship_info is not None:
            self.feature_relationship_info = feature_relationship_info

    @property
    def num_quantiles(self):
        """Gets the num_quantiles of this TestrunDataProfiling.  # noqa: E501

        The number of quantiles to split numeric subsets into.  # noqa: E501

        :return: The num_quantiles of this TestrunDataProfiling.  # noqa: E501
        :rtype: str
        """
        return self._num_quantiles

    @num_quantiles.setter
    def num_quantiles(self, num_quantiles):
        """Sets the num_quantiles of this TestrunDataProfiling.

        The number of quantiles to split numeric subsets into.  # noqa: E501

        :param num_quantiles: The num_quantiles of this TestrunDataProfiling.  # noqa: E501
        :type: str
        """

        self._num_quantiles = num_quantiles

    @property
    def num_subsets(self):
        """Gets the num_subsets of this TestrunDataProfiling.  # noqa: E501

        The number of subsets to test. This field is sorted by count.  # noqa: E501

        :return: The num_subsets of this TestrunDataProfiling.  # noqa: E501
        :rtype: str
        """
        return self._num_subsets

    @num_subsets.setter
    def num_subsets(self, num_subsets):
        """Sets the num_subsets of this TestrunDataProfiling.

        The number of subsets to test. This field is sorted by count.  # noqa: E501

        :param num_subsets: The num_subsets of this TestrunDataProfiling.  # noqa: E501
        :type: str
        """

        self._num_subsets = num_subsets

    @property
    def column_type_info(self):
        """Gets the column_type_info of this TestrunDataProfiling.  # noqa: E501


        :return: The column_type_info of this TestrunDataProfiling.  # noqa: E501
        :rtype: DataProfilingColumnTypeInfo
        """
        return self._column_type_info

    @column_type_info.setter
    def column_type_info(self, column_type_info):
        """Sets the column_type_info of this TestrunDataProfiling.


        :param column_type_info: The column_type_info of this TestrunDataProfiling.  # noqa: E501
        :type: DataProfilingColumnTypeInfo
        """

        self._column_type_info = column_type_info

    @property
    def feature_relationship_info(self):
        """Gets the feature_relationship_info of this TestrunDataProfiling.  # noqa: E501


        :return: The feature_relationship_info of this TestrunDataProfiling.  # noqa: E501
        :rtype: DataProfilingFeatureRelationshipInfo
        """
        return self._feature_relationship_info

    @feature_relationship_info.setter
    def feature_relationship_info(self, feature_relationship_info):
        """Sets the feature_relationship_info of this TestrunDataProfiling.


        :param feature_relationship_info: The feature_relationship_info of this TestrunDataProfiling.  # noqa: E501
        :type: DataProfilingFeatureRelationshipInfo
        """

        self._feature_relationship_info = feature_relationship_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestrunDataProfiling, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestrunDataProfiling):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
