# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RiskscoreRiskScore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'RiskscoreRiskCategoryType',
        'severity': 'RimeSeverity',
        'score': 'float'
    }

    attribute_map = {
        'type': 'type',
        'severity': 'severity',
        'score': 'score'
    }

    def __init__(self, type=None, severity=None, score=None):  # noqa: E501
        """RiskscoreRiskScore - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._severity = None
        self._score = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if severity is not None:
            self.severity = severity
        if score is not None:
            self.score = score

    @property
    def type(self):
        """Gets the type of this RiskscoreRiskScore.  # noqa: E501


        :return: The type of this RiskscoreRiskScore.  # noqa: E501
        :rtype: RiskscoreRiskCategoryType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RiskscoreRiskScore.


        :param type: The type of this RiskscoreRiskScore.  # noqa: E501
        :type: RiskscoreRiskCategoryType
        """

        self._type = type

    @property
    def severity(self):
        """Gets the severity of this RiskscoreRiskScore.  # noqa: E501


        :return: The severity of this RiskscoreRiskScore.  # noqa: E501
        :rtype: RimeSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this RiskscoreRiskScore.


        :param severity: The severity of this RiskscoreRiskScore.  # noqa: E501
        :type: RimeSeverity
        """

        self._severity = severity

    @property
    def score(self):
        """Gets the score of this RiskscoreRiskScore.  # noqa: E501

        A risk score is a value between 0 and 1, where 0 is the lowest risk and 1 is the highest risk.  # noqa: E501

        :return: The score of this RiskscoreRiskScore.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this RiskscoreRiskScore.

        A risk score is a value between 0 and 1, where 0 is the lowest risk and 1 is the highest risk.  # noqa: E501

        :param score: The score of this RiskscoreRiskScore.  # noqa: E501
        :type: float
        """

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiskscoreRiskScore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskscoreRiskScore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
