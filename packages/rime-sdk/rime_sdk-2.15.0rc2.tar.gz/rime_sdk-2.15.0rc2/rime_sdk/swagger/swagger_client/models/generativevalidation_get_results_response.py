# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativevalidationGetResultsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'results': 'list[GenerativevalidationGenerativeValidationResult]',
        'next_page_token': 'str',
        'has_more': 'bool',
        'job_id': 'RimeUUID',
        'job_status': 'RimeJobStatus'
    }

    attribute_map = {
        'results': 'results',
        'next_page_token': 'nextPageToken',
        'has_more': 'hasMore',
        'job_id': 'jobId',
        'job_status': 'jobStatus'
    }

    def __init__(self, results=None, next_page_token=None, has_more=None, job_id=None, job_status=None):  # noqa: E501
        """GenerativevalidationGetResultsResponse - a model defined in Swagger"""  # noqa: E501
        self._results = None
        self._next_page_token = None
        self._has_more = None
        self._job_id = None
        self._job_status = None
        self.discriminator = None
        if results is not None:
            self.results = results
        if next_page_token is not None:
            self.next_page_token = next_page_token
        if has_more is not None:
            self.has_more = has_more
        if job_id is not None:
            self.job_id = job_id
        if job_status is not None:
            self.job_status = job_status

    @property
    def results(self):
        """Gets the results of this GenerativevalidationGetResultsResponse.  # noqa: E501

        The list of generative testing results.  # noqa: E501

        :return: The results of this GenerativevalidationGetResultsResponse.  # noqa: E501
        :rtype: list[GenerativevalidationGenerativeValidationResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this GenerativevalidationGetResultsResponse.

        The list of generative testing results.  # noqa: E501

        :param results: The results of this GenerativevalidationGetResultsResponse.  # noqa: E501
        :type: list[GenerativevalidationGenerativeValidationResult]
        """

        self._results = results

    @property
    def next_page_token(self):
        """Gets the next_page_token of this GenerativevalidationGetResultsResponse.  # noqa: E501

        A token representing the next page from the list returned by a query.  # noqa: E501

        :return: The next_page_token of this GenerativevalidationGetResultsResponse.  # noqa: E501
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this GenerativevalidationGetResultsResponse.

        A token representing the next page from the list returned by a query.  # noqa: E501

        :param next_page_token: The next_page_token of this GenerativevalidationGetResultsResponse.  # noqa: E501
        :type: str
        """

        self._next_page_token = next_page_token

    @property
    def has_more(self):
        """Gets the has_more of this GenerativevalidationGetResultsResponse.  # noqa: E501

        A Boolean flag that specifies whether there are more results to return.  # noqa: E501

        :return: The has_more of this GenerativevalidationGetResultsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this GenerativevalidationGetResultsResponse.

        A Boolean flag that specifies whether there are more results to return.  # noqa: E501

        :param has_more: The has_more of this GenerativevalidationGetResultsResponse.  # noqa: E501
        :type: bool
        """

        self._has_more = has_more

    @property
    def job_id(self):
        """Gets the job_id of this GenerativevalidationGetResultsResponse.  # noqa: E501


        :return: The job_id of this GenerativevalidationGetResultsResponse.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this GenerativevalidationGetResultsResponse.


        :param job_id: The job_id of this GenerativevalidationGetResultsResponse.  # noqa: E501
        :type: RimeUUID
        """

        self._job_id = job_id

    @property
    def job_status(self):
        """Gets the job_status of this GenerativevalidationGetResultsResponse.  # noqa: E501


        :return: The job_status of this GenerativevalidationGetResultsResponse.  # noqa: E501
        :rtype: RimeJobStatus
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this GenerativevalidationGetResultsResponse.


        :param job_status: The job_status of this GenerativevalidationGetResultsResponse.  # noqa: E501
        :type: RimeJobStatus
        """

        self._job_status = job_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativevalidationGetResultsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativevalidationGetResultsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
