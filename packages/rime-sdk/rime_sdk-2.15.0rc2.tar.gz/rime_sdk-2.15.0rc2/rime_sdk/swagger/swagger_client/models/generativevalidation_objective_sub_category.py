# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativevalidationObjectiveSubCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    UNSPECIFIED = "OBJECTIVE_SUB_CATEGORY_UNSPECIFIED"
    THEFT = "OBJECTIVE_SUB_CATEGORY_THEFT"
    POISONING = "OBJECTIVE_SUB_CATEGORY_POISONING"
    STALKING = "OBJECTIVE_SUB_CATEGORY_STALKING"
    TERRORISM = "OBJECTIVE_SUB_CATEGORY_TERRORISM"
    BOMB = "OBJECTIVE_SUB_CATEGORY_BOMB"
    MURDER = "OBJECTIVE_SUB_CATEGORY_MURDER"
    PII_US_SSN = "OBJECTIVE_SUB_CATEGORY_PII_US_SSN"
    PII_PHONE_NUMBER = "OBJECTIVE_SUB_CATEGORY_PII_PHONE_NUMBER"
    PII_CREDIT_CARD_NUMBER = "OBJECTIVE_SUB_CATEGORY_PII_CREDIT_CARD_NUMBER"
    PII_EMAIL = "OBJECTIVE_SUB_CATEGORY_PII_EMAIL"
    PII_US_PASSPORT_NUMBER = "OBJECTIVE_SUB_CATEGORY_PII_US_PASSPORT_NUMBER"
    PIRACY = "OBJECTIVE_SUB_CATEGORY_PIRACY"
    VIRUS = "OBJECTIVE_SUB_CATEGORY_VIRUS"
    MISINFORMATION = "OBJECTIVE_SUB_CATEGORY_MISINFORMATION"
    FINANCIAL_ADVICE = "OBJECTIVE_SUB_CATEGORY_FINANCIAL_ADVICE"
    PII = "OBJECTIVE_SUB_CATEGORY_PII"
    PROMPT_EXTRACTION = "OBJECTIVE_SUB_CATEGORY_PROMPT_EXTRACTION"
    COPYRIGHT_EXTRACTION = "OBJECTIVE_SUB_CATEGORY_COPYRIGHT_EXTRACTION"
    LONG_PROMPTS = "OBJECTIVE_SUB_CATEGORY_LONG_PROMPTS"
    DRUGS = "OBJECTIVE_SUB_CATEGORY_DRUGS"
    SUICIDE = "OBJECTIVE_SUB_CATEGORY_SUICIDE"
    IDENTITY_THEFT = "OBJECTIVE_SUB_CATEGORY_IDENTITY_THEFT"
    ANIMAL_VIOLENCE = "OBJECTIVE_SUB_CATEGORY_ANIMAL_VIOLENCE"
    POLITICAL_OPINIONS = "OBJECTIVE_SUB_CATEGORY_POLITICAL_OPINIONS"
    BRANDED_CONTENT = "OBJECTIVE_SUB_CATEGORY_BRANDED_CONTENT"
    BULLYING = "OBJECTIVE_SUB_CATEGORY_BULLYING"
    CELEBRITY_PII = "OBJECTIVE_SUB_CATEGORY_CELEBRITY_PII"
    CHEATING = "OBJECTIVE_SUB_CATEGORY_CHEATING"
    CHILD_SEXUAL_ABUSE_MATERIAL = "OBJECTIVE_SUB_CATEGORY_CHILD_SEXUAL_ABUSE_MATERIAL"
    ROLE_PLAYING = "OBJECTIVE_SUB_CATEGORY_ROLE_PLAYING"
    DISABILITIES = "OBJECTIVE_SUB_CATEGORY_DISABILITIES"
    TROLLING = "OBJECTIVE_SUB_CATEGORY_TROLLING"
    ECONOMIC_CLASS = "OBJECTIVE_SUB_CATEGORY_ECONOMIC_CLASS"
    EMOTIONAL_ABUSE = "OBJECTIVE_SUB_CATEGORY_EMOTIONAL_ABUSE"
    FIREARMS = "OBJECTIVE_SUB_CATEGORY_FIREARMS"
    HUMAN_EXPLOITATION = "OBJECTIVE_SUB_CATEGORY_HUMAN_EXPLOITATION"
    IMMIGRATION_STATUS = "OBJECTIVE_SUB_CATEGORY_IMMIGRATION_STATUS"
    IMPERSONATION_IMPOSTOR_CONTENT = "OBJECTIVE_SUB_CATEGORY_IMPERSONATION_IMPOSTOR_CONTENT"
    INTELLECTUAL_PROPERTY_PIRACY = "OBJECTIVE_SUB_CATEGORY_INTELLECTUAL_PROPERTY_PIRACY"
    LOGOS = "OBJECTIVE_SUB_CATEGORY_LOGOS"
    MARITAL_STATUS = "OBJECTIVE_SUB_CATEGORY_MARITAL_STATUS"
    MOVIE_QUOTES = "OBJECTIVE_SUB_CATEGORY_MOVIE_QUOTES"
    PERSONAL_IDENTIFICATION_NUMBERS = "OBJECTIVE_SUB_CATEGORY_PERSONAL_IDENTIFICATION_NUMBERS"
    PHISHING = "OBJECTIVE_SUB_CATEGORY_PHISHING"
    PLAGIARISM = "OBJECTIVE_SUB_CATEGORY_PLAGIARISM"
    PORNOGRAPHIC_DEPICTIONS = "OBJECTIVE_SUB_CATEGORY_PORNOGRAPHIC_DEPICTIONS"
    RELIGIOUS_BELIEFS = "OBJECTIVE_SUB_CATEGORY_RELIGIOUS_BELIEFS"
    RISKY_FINANCIAL_PRACTICES = "OBJECTIVE_SUB_CATEGORY_RISKY_FINANCIAL_PRACTICES"
    RISKY_PRANKS = "OBJECTIVE_SUB_CATEGORY_RISKY_PRANKS"
    SCAMS = "OBJECTIVE_SUB_CATEGORY_SCAMS"
    SONG_LYRICS = "OBJECTIVE_SUB_CATEGORY_SONG_LYRICS"
    SPAM = "OBJECTIVE_SUB_CATEGORY_SPAM"
    SURVEILLANCE = "OBJECTIVE_SUB_CATEGORY_SURVEILLANCE"
    SYSTEMIC_RACISM = "OBJECTIVE_SUB_CATEGORY_SYSTEMIC_RACISM"
    THREATS_AND_INTIMIDATION = "OBJECTIVE_SUB_CATEGORY_THREATS_AND_INTIMIDATION"
    TOXIC_CHEMICALS = "OBJECTIVE_SUB_CATEGORY_TOXIC_CHEMICALS"
    UNSAFE_HEALTH_PRACTICES = "OBJECTIVE_SUB_CATEGORY_UNSAFE_HEALTH_PRACTICES"
    WAR_CRIMES = "OBJECTIVE_SUB_CATEGORY_WAR_CRIMES"
    WORKPLACE_DISCRIMINATION = "OBJECTIVE_SUB_CATEGORY_WORKPLACE_DISCRIMINATION"
    FUNCTION_CALL_EXTRACTION = "OBJECTIVE_SUB_CATEGORY_FUNCTION_CALL_EXTRACTION"
    MALWARE_VIRUS = "OBJECTIVE_SUB_CATEGORY_MALWARE_VIRUS"
    VULN_EXPLOIT = "OBJECTIVE_SUB_CATEGORY_VULN_EXPLOIT"
    RANSOMWARE_OPS = "OBJECTIVE_SUB_CATEGORY_RANSOMWARE_OPS"
    NETWORK_ATTACK_OPS = "OBJECTIVE_SUB_CATEGORY_NETWORK_ATTACK_OPS"
    SOCIAL_ENGG = "OBJECTIVE_SUB_CATEGORY_SOCIAL_ENGG"
    MALICIOUS_INFRA_OPS = "OBJECTIVE_SUB_CATEGORY_MALICIOUS_INFRA_OPS"
    COMPROMISED_ASSET_TRADE = "OBJECTIVE_SUB_CATEGORY_COMPROMISED_ASSET_TRADE"
    NUCLEAR_THREAT = "OBJECTIVE_SUB_CATEGORY_NUCLEAR_THREAT"
    BIO_WEAPON = "OBJECTIVE_SUB_CATEGORY_BIO_WEAPON"
    DOMESTIC_ABUSE = "OBJECTIVE_SUB_CATEGORY_DOMESTIC_ABUSE"
    TORTURE_METHODS = "OBJECTIVE_SUB_CATEGORY_TORTURE_METHODS"
    BOMB_THREATS = "OBJECTIVE_SUB_CATEGORY_BOMB_THREATS"
    VIOLENCE_OR_ASSAULT = "OBJECTIVE_SUB_CATEGORY_VIOLENCE_OR_ASSAULT"
    VIOLENT_REVOLT = "OBJECTIVE_SUB_CATEGORY_VIOLENT_REVOLT"
    MASS_ATTACK = "OBJECTIVE_SUB_CATEGORY_MASS_ATTACK"
    FIREARMS_WEAPONS_MAKING = "OBJECTIVE_SUB_CATEGORY_FIREARMS_WEAPONS_MAKING"
    FIREARMS_WEAPONS_GENERIC = "OBJECTIVE_SUB_CATEGORY_FIREARMS_WEAPONS_GENERIC"
    SWATTING_ATTACK = "OBJECTIVE_SUB_CATEGORY_SWATTING_ATTACK"
    ANIMAL_ABUSE = "OBJECTIVE_SUB_CATEGORY_ANIMAL_ABUSE"
    RACISM = "OBJECTIVE_SUB_CATEGORY_RACISM"
    HATE_SPEECH = "OBJECTIVE_SUB_CATEGORY_HATE_SPEECH"
    RELIGIOUS_BIAS = "OBJECTIVE_SUB_CATEGORY_RELIGIOUS_BIAS"
    ECONOMY_CLASS_BIAS = "OBJECTIVE_SUB_CATEGORY_ECONOMY_CLASS_BIAS"
    DISABILITY_BIAS = "OBJECTIVE_SUB_CATEGORY_DISABILITY_BIAS"
    WORKPLACE_BIAS = "OBJECTIVE_SUB_CATEGORY_WORKPLACE_BIAS"
    THREATS_INTIMIDATION = "OBJECTIVE_SUB_CATEGORY_THREATS_INTIMIDATION"
    HUMAN_EXPLOIT = "OBJECTIVE_SUB_CATEGORY_HUMAN_EXPLOIT"
    CYBERBULLYING = "OBJECTIVE_SUB_CATEGORY_CYBERBULLYING"
    SOCIAL_MEDIA_HARASSMENT = "OBJECTIVE_SUB_CATEGORY_SOCIAL_MEDIA_HARASSMENT"
    SEXUAL_CONTENT = "OBJECTIVE_SUB_CATEGORY_SEXUAL_CONTENT"
    SEXUAL_HARASSMENT = "OBJECTIVE_SUB_CATEGORY_SEXUAL_HARASSMENT"
    CHILD_SEX_ABUSE = "OBJECTIVE_SUB_CATEGORY_CHILD_SEX_ABUSE"
    SEXUAL_ABUSE = "OBJECTIVE_SUB_CATEGORY_SEXUAL_ABUSE"
    SEXTORTION = "OBJECTIVE_SUB_CATEGORY_SEXTORTION"
    SEXUAL_ROLEPLAY = "OBJECTIVE_SUB_CATEGORY_SEXUAL_ROLEPLAY"
    SEXUAL_SERVICES = "OBJECTIVE_SUB_CATEGORY_SEXUAL_SERVICES"
    SEXUAL_VULGARITY = "OBJECTIVE_SUB_CATEGORY_SEXUAL_VULGARITY"
    GENERAL_VULGARITY = "OBJECTIVE_SUB_CATEGORY_GENERAL_VULGARITY"
    VIOLENT_PROFANITY = "OBJECTIVE_SUB_CATEGORY_VIOLENT_PROFANITY"
    CODED_PROFANITY = "OBJECTIVE_SUB_CATEGORY_CODED_PROFANITY"
    ORGAN_TRAFFICKING = "OBJECTIVE_SUB_CATEGORY_ORGAN_TRAFFICKING"
    GOLD_TRAFFICKING = "OBJECTIVE_SUB_CATEGORY_GOLD_TRAFFICKING"
    SMUGGLING = "OBJECTIVE_SUB_CATEGORY_SMUGGLING"
    WEAPONS_TRAFFICKING = "OBJECTIVE_SUB_CATEGORY_WEAPONS_TRAFFICKING"
    BANK_FRAUD = "OBJECTIVE_SUB_CATEGORY_BANK_FRAUD"
    INVESTMENT_FRAUD = "OBJECTIVE_SUB_CATEGORY_INVESTMENT_FRAUD"
    CRYPTO_FRAUD = "OBJECTIVE_SUB_CATEGORY_CRYPTO_FRAUD"
    FINANCIAL_SCAM = "OBJECTIVE_SUB_CATEGORY_FINANCIAL_SCAM"
    ILLICIT_FINANCIAL_ADVICE = "OBJECTIVE_SUB_CATEGORY_ILLICIT_FINANCIAL_ADVICE"
    IMMIGRATION_ABUSE = "OBJECTIVE_SUB_CATEGORY_IMMIGRATION_ABUSE"
    IMMIGRATION_SCAM = "OBJECTIVE_SUB_CATEGORY_IMMIGRATION_SCAM"
    LAND_EXPLOITATION = "OBJECTIVE_SUB_CATEGORY_LAND_EXPLOITATION"
    FOREST_EXPLOITATION = "OBJECTIVE_SUB_CATEGORY_FOREST_EXPLOITATION"
    WATER_EXPLOITATION = "OBJECTIVE_SUB_CATEGORY_WATER_EXPLOITATION"
    POLLUTION_GENERIC = "OBJECTIVE_SUB_CATEGORY_POLLUTION_GENERIC"
    ECOSYSTEM_DISRUPTION = "OBJECTIVE_SUB_CATEGORY_ECOSYSTEM_DISRUPTION"
    TECH_SUPPORT_SCAM = "OBJECTIVE_SUB_CATEGORY_TECH_SUPPORT_SCAM"
    DIGITAL_SPAM = "OBJECTIVE_SUB_CATEGORY_DIGITAL_SPAM"
    PROPRIETARY_CODE_ABUSE = "OBJECTIVE_SUB_CATEGORY_PROPRIETARY_CODE_ABUSE"
    REVERSE_ENGINEERING_CODE = "OBJECTIVE_SUB_CATEGORY_REVERSE_ENGINEERING_CODE"
    LICENSE_BYPASS_SPOOFING = "OBJECTIVE_SUB_CATEGORY_LICENSE_BYPASS_SPOOFING"
    COUNTERFEITING = "OBJECTIVE_SUB_CATEGORY_COUNTERFEITING"
    FAKE_SERVICES = "OBJECTIVE_SUB_CATEGORY_FAKE_SERVICES"
    FOOD_FRAUD = "OBJECTIVE_SUB_CATEGORY_FOOD_FRAUD"
    CHEATING_OR_PLAGIARISM = "OBJECTIVE_SUB_CATEGORY_CHEATING_OR_PLAGIARISM"
    EVIDENCE_TAMPERING = "OBJECTIVE_SUB_CATEGORY_EVIDENCE_TAMPERING"
    TERROR_PROPAGANDA = "OBJECTIVE_SUB_CATEGORY_TERROR_PROPAGANDA"
    TERROR_GROUP = "OBJECTIVE_SUB_CATEGORY_TERROR_GROUP"
    TERROR_ACTIONS = "OBJECTIVE_SUB_CATEGORY_TERROR_ACTIONS"
    MODEL_INFORMATION_EXTRACTION = "OBJECTIVE_SUB_CATEGORY_MODEL_INFORMATION_EXTRACTION"
    DISINFORMATION = "OBJECTIVE_SUB_CATEGORY_DISINFORMATION"
    IMPERSONATION_IMPOSTER_CONTENT = "OBJECTIVE_SUB_CATEGORY_IMPERSONATION_IMPOSTER_CONTENT"
    SUICIDE_METHODS = "OBJECTIVE_SUB_CATEGORY_SUICIDE_METHODS"
    SUICIDE_ENCOURAGE = "OBJECTIVE_SUB_CATEGORY_SUICIDE_ENCOURAGE"
    SELFHARM_TECHNIQUE = "OBJECTIVE_SUB_CATEGORY_SELFHARM_TECHNIQUE"
    SUICIDE_PACT = "OBJECTIVE_SUB_CATEGORY_SUICIDE_PACT"
    SUICIDE_NOTE = "OBJECTIVE_SUB_CATEGORY_SUICIDE_NOTE"
    COPYRIGHT_CONTENT = "OBJECTIVE_SUB_CATEGORY_COPYRIGHT_CONTENT"
    SONGS_PIRACY_AND_INFRINGEMENT = "OBJECTIVE_SUB_CATEGORY_SONGS_PIRACY_AND_INFRINGEMENT"
    MOVIES_PIRACY_AND_INFRINGEMENT = "OBJECTIVE_SUB_CATEGORY_MOVIES_PIRACY_AND_INFRINGEMENT"
    TV_CONTENT_PIRACY_AND_INFRINGEMENT = "OBJECTIVE_SUB_CATEGORY_TV_CONTENT_PIRACY_AND_INFRINGEMENT"
    LITERATURE_PIRACY_AND_INFRINGEMENT = "OBJECTIVE_SUB_CATEGORY_LITERATURE_PIRACY_AND_INFRINGEMENT"
    UNSAFE_ACTIONS = "OBJECTIVE_SUB_CATEGORY_UNSAFE_ACTIONS"
    DANGEROUS_GAMES = "OBJECTIVE_SUB_CATEGORY_DANGEROUS_GAMES"
    UNSAFE_MEDS_ADVICE = "OBJECTIVE_SUB_CATEGORY_UNSAFE_MEDS_ADVICE"
    UNSAFE_MEDICAL_PROCEDURES = "OBJECTIVE_SUB_CATEGORY_UNSAFE_MEDICAL_PROCEDURES"
    ILLEGAL_REPRODUCTIVE_PRACTICES = "OBJECTIVE_SUB_CATEGORY_ILLEGAL_REPRODUCTIVE_PRACTICES"
    PERSONAL_IDENTIFICATION_NUMBER = "OBJECTIVE_SUB_CATEGORY_PERSONAL_IDENTIFICATION_NUMBER"
    TARGETED_PERSON_PII = "OBJECTIVE_SUB_CATEGORY_TARGETED_PERSON_PII"
    HACKING = "OBJECTIVE_SUB_CATEGORY_HACKING"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """GenerativevalidationObjectiveSubCategory - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativevalidationObjectiveSubCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativevalidationObjectiveSubCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
