# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativefirewallModelResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'entities': 'list[str]',
        'techniques': 'list[str]',
        'standards': 'list[str]'
    }

    attribute_map = {
        'status': 'status',
        'entities': 'entities',
        'techniques': 'techniques',
        'standards': 'standards'
    }

    def __init__(self, status=None, entities=None, techniques=None, standards=None):  # noqa: E501
        """GenerativefirewallModelResponse - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._entities = None
        self._techniques = None
        self._standards = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if entities is not None:
            self.entities = entities
        if techniques is not None:
            self.techniques = techniques
        if standards is not None:
            self.standards = standards

    @property
    def status(self):
        """Gets the status of this GenerativefirewallModelResponse.  # noqa: E501

        Whether the detection is safe or unsafe.  # noqa: E501

        :return: The status of this GenerativefirewallModelResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GenerativefirewallModelResponse.

        Whether the detection is safe or unsafe.  # noqa: E501

        :param status: The status of this GenerativefirewallModelResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def entities(self):
        """Gets the entities of this GenerativefirewallModelResponse.  # noqa: E501

        Entities that were identified in the input. Only relevant for PII, PHI, and PCI rulesets.  # noqa: E501

        :return: The entities of this GenerativefirewallModelResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this GenerativefirewallModelResponse.

        Entities that were identified in the input. Only relevant for PII, PHI, and PCI rulesets.  # noqa: E501

        :param entities: The entities of this GenerativefirewallModelResponse.  # noqa: E501
        :type: list[str]
        """

        self._entities = entities

    @property
    def techniques(self):
        """Gets the techniques of this GenerativefirewallModelResponse.  # noqa: E501

        Techniques used in a prompt injection attack (and thus only relevant for the prompt injection ruleset).  # noqa: E501

        :return: The techniques of this GenerativefirewallModelResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._techniques

    @techniques.setter
    def techniques(self, techniques):
        """Sets the techniques of this GenerativefirewallModelResponse.

        Techniques used in a prompt injection attack (and thus only relevant for the prompt injection ruleset).  # noqa: E501

        :param techniques: The techniques of this GenerativefirewallModelResponse.  # noqa: E501
        :type: list[str]
        """

        self._techniques = techniques

    @property
    def standards(self):
        """Gets the standards of this GenerativefirewallModelResponse.  # noqa: E501

        Security standards encodes which regulatory standards (MITRE, OWASP) are addressed by this firewall rule.  # noqa: E501

        :return: The standards of this GenerativefirewallModelResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._standards

    @standards.setter
    def standards(self, standards):
        """Sets the standards of this GenerativefirewallModelResponse.

        Security standards encodes which regulatory standards (MITRE, OWASP) are addressed by this firewall rule.  # noqa: E501

        :param standards: The standards of this GenerativefirewallModelResponse.  # noqa: E501
        :type: list[str]
        """

        self._standards = standards

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativefirewallModelResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativefirewallModelResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
