# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestrunCustomMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'file_path': 'str',
        'range_lower_bound': 'float',
        'range_upper_bound': 'float',
        'run_subset_performance': 'bool',
        'run_subset_performance_drift': 'bool',
        'run_overall_performance': 'bool',
        'metadata': 'CustomMetricCustomMetricMetadata'
    }

    attribute_map = {
        'name': 'name',
        'file_path': 'filePath',
        'range_lower_bound': 'rangeLowerBound',
        'range_upper_bound': 'rangeUpperBound',
        'run_subset_performance': 'runSubsetPerformance',
        'run_subset_performance_drift': 'runSubsetPerformanceDrift',
        'run_overall_performance': 'runOverallPerformance',
        'metadata': 'metadata'
    }

    def __init__(self, name=None, file_path=None, range_lower_bound=None, range_upper_bound=None, run_subset_performance=None, run_subset_performance_drift=None, run_overall_performance=None, metadata=None):  # noqa: E501
        """TestrunCustomMetric - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._file_path = None
        self._range_lower_bound = None
        self._range_upper_bound = None
        self._run_subset_performance = None
        self._run_subset_performance_drift = None
        self._run_overall_performance = None
        self._metadata = None
        self.discriminator = None
        self.name = name
        self.file_path = file_path
        if range_lower_bound is not None:
            self.range_lower_bound = range_lower_bound
        if range_upper_bound is not None:
            self.range_upper_bound = range_upper_bound
        if run_subset_performance is not None:
            self.run_subset_performance = run_subset_performance
        if run_subset_performance_drift is not None:
            self.run_subset_performance_drift = run_subset_performance_drift
        if run_overall_performance is not None:
            self.run_overall_performance = run_overall_performance
        if metadata is not None:
            self.metadata = metadata

    @property
    def name(self):
        """Gets the name of this TestrunCustomMetric.  # noqa: E501

        Name of the custom metric.  # noqa: E501

        :return: The name of this TestrunCustomMetric.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TestrunCustomMetric.

        Name of the custom metric.  # noqa: E501

        :param name: The name of this TestrunCustomMetric.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def file_path(self):
        """Gets the file_path of this TestrunCustomMetric.  # noqa: E501

        Path to the file with metric definition.  # noqa: E501

        :return: The file_path of this TestrunCustomMetric.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this TestrunCustomMetric.

        Path to the file with metric definition.  # noqa: E501

        :param file_path: The file_path of this TestrunCustomMetric.  # noqa: E501
        :type: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")  # noqa: E501

        self._file_path = file_path

    @property
    def range_lower_bound(self):
        """Gets the range_lower_bound of this TestrunCustomMetric.  # noqa: E501

        Valid range lower bound.  # noqa: E501

        :return: The range_lower_bound of this TestrunCustomMetric.  # noqa: E501
        :rtype: float
        """
        return self._range_lower_bound

    @range_lower_bound.setter
    def range_lower_bound(self, range_lower_bound):
        """Sets the range_lower_bound of this TestrunCustomMetric.

        Valid range lower bound.  # noqa: E501

        :param range_lower_bound: The range_lower_bound of this TestrunCustomMetric.  # noqa: E501
        :type: float
        """

        self._range_lower_bound = range_lower_bound

    @property
    def range_upper_bound(self):
        """Gets the range_upper_bound of this TestrunCustomMetric.  # noqa: E501

        Valid range upper bound.  # noqa: E501

        :return: The range_upper_bound of this TestrunCustomMetric.  # noqa: E501
        :rtype: float
        """
        return self._range_upper_bound

    @range_upper_bound.setter
    def range_upper_bound(self, range_upper_bound):
        """Sets the range_upper_bound of this TestrunCustomMetric.

        Valid range upper bound.  # noqa: E501

        :param range_upper_bound: The range_upper_bound of this TestrunCustomMetric.  # noqa: E501
        :type: float
        """

        self._range_upper_bound = range_upper_bound

    @property
    def run_subset_performance(self):
        """Gets the run_subset_performance of this TestrunCustomMetric.  # noqa: E501

        Should run subset performance.  # noqa: E501

        :return: The run_subset_performance of this TestrunCustomMetric.  # noqa: E501
        :rtype: bool
        """
        return self._run_subset_performance

    @run_subset_performance.setter
    def run_subset_performance(self, run_subset_performance):
        """Sets the run_subset_performance of this TestrunCustomMetric.

        Should run subset performance.  # noqa: E501

        :param run_subset_performance: The run_subset_performance of this TestrunCustomMetric.  # noqa: E501
        :type: bool
        """

        self._run_subset_performance = run_subset_performance

    @property
    def run_subset_performance_drift(self):
        """Gets the run_subset_performance_drift of this TestrunCustomMetric.  # noqa: E501

        Should run subset performance drift.  # noqa: E501

        :return: The run_subset_performance_drift of this TestrunCustomMetric.  # noqa: E501
        :rtype: bool
        """
        return self._run_subset_performance_drift

    @run_subset_performance_drift.setter
    def run_subset_performance_drift(self, run_subset_performance_drift):
        """Sets the run_subset_performance_drift of this TestrunCustomMetric.

        Should run subset performance drift.  # noqa: E501

        :param run_subset_performance_drift: The run_subset_performance_drift of this TestrunCustomMetric.  # noqa: E501
        :type: bool
        """

        self._run_subset_performance_drift = run_subset_performance_drift

    @property
    def run_overall_performance(self):
        """Gets the run_overall_performance of this TestrunCustomMetric.  # noqa: E501

        Should run overall performance.  # noqa: E501

        :return: The run_overall_performance of this TestrunCustomMetric.  # noqa: E501
        :rtype: bool
        """
        return self._run_overall_performance

    @run_overall_performance.setter
    def run_overall_performance(self, run_overall_performance):
        """Sets the run_overall_performance of this TestrunCustomMetric.

        Should run overall performance.  # noqa: E501

        :param run_overall_performance: The run_overall_performance of this TestrunCustomMetric.  # noqa: E501
        :type: bool
        """

        self._run_overall_performance = run_overall_performance

    @property
    def metadata(self):
        """Gets the metadata of this TestrunCustomMetric.  # noqa: E501


        :return: The metadata of this TestrunCustomMetric.  # noqa: E501
        :rtype: CustomMetricCustomMetricMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TestrunCustomMetric.


        :param metadata: The metadata of this TestrunCustomMetric.  # noqa: E501
        :type: CustomMetricCustomMetricMetadata
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestrunCustomMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestrunCustomMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
