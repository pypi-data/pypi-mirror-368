# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeTestMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metric': 'str',
        'category': 'RimeTestMetricCategory',
        'int_value': 'str',
        'float_value': 'float',
        'empty': 'object',
        'str_value': 'str',
        'int_list': 'RimeIntList',
        'float_list': 'RimeFloatList',
        'str_list': 'RimeStrList',
        'test_case_monitor_info': 'RimeTestCaseMonitorInfo'
    }

    attribute_map = {
        'metric': 'metric',
        'category': 'category',
        'int_value': 'intValue',
        'float_value': 'floatValue',
        'empty': 'empty',
        'str_value': 'strValue',
        'int_list': 'intList',
        'float_list': 'floatList',
        'str_list': 'strList',
        'test_case_monitor_info': 'testCaseMonitorInfo'
    }

    def __init__(self, metric=None, category=None, int_value=None, float_value=None, empty=None, str_value=None, int_list=None, float_list=None, str_list=None, test_case_monitor_info=None):  # noqa: E501
        """RimeTestMetric - a model defined in Swagger"""  # noqa: E501
        self._metric = None
        self._category = None
        self._int_value = None
        self._float_value = None
        self._empty = None
        self._str_value = None
        self._int_list = None
        self._float_list = None
        self._str_list = None
        self._test_case_monitor_info = None
        self.discriminator = None
        if metric is not None:
            self.metric = metric
        if category is not None:
            self.category = category
        if int_value is not None:
            self.int_value = int_value
        if float_value is not None:
            self.float_value = float_value
        if empty is not None:
            self.empty = empty
        if str_value is not None:
            self.str_value = str_value
        if int_list is not None:
            self.int_list = int_list
        if float_list is not None:
            self.float_list = float_list
        if str_list is not None:
            self.str_list = str_list
        if test_case_monitor_info is not None:
            self.test_case_monitor_info = test_case_monitor_info

    @property
    def metric(self):
        """Gets the metric of this RimeTestMetric.  # noqa: E501


        :return: The metric of this RimeTestMetric.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this RimeTestMetric.


        :param metric: The metric of this RimeTestMetric.  # noqa: E501
        :type: str
        """

        self._metric = metric

    @property
    def category(self):
        """Gets the category of this RimeTestMetric.  # noqa: E501


        :return: The category of this RimeTestMetric.  # noqa: E501
        :rtype: RimeTestMetricCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this RimeTestMetric.


        :param category: The category of this RimeTestMetric.  # noqa: E501
        :type: RimeTestMetricCategory
        """

        self._category = category

    @property
    def int_value(self):
        """Gets the int_value of this RimeTestMetric.  # noqa: E501


        :return: The int_value of this RimeTestMetric.  # noqa: E501
        :rtype: str
        """
        return self._int_value

    @int_value.setter
    def int_value(self, int_value):
        """Sets the int_value of this RimeTestMetric.


        :param int_value: The int_value of this RimeTestMetric.  # noqa: E501
        :type: str
        """

        self._int_value = int_value

    @property
    def float_value(self):
        """Gets the float_value of this RimeTestMetric.  # noqa: E501


        :return: The float_value of this RimeTestMetric.  # noqa: E501
        :rtype: float
        """
        return self._float_value

    @float_value.setter
    def float_value(self, float_value):
        """Sets the float_value of this RimeTestMetric.


        :param float_value: The float_value of this RimeTestMetric.  # noqa: E501
        :type: float
        """

        self._float_value = float_value

    @property
    def empty(self):
        """Gets the empty of this RimeTestMetric.  # noqa: E501


        :return: The empty of this RimeTestMetric.  # noqa: E501
        :rtype: object
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this RimeTestMetric.


        :param empty: The empty of this RimeTestMetric.  # noqa: E501
        :type: object
        """

        self._empty = empty

    @property
    def str_value(self):
        """Gets the str_value of this RimeTestMetric.  # noqa: E501


        :return: The str_value of this RimeTestMetric.  # noqa: E501
        :rtype: str
        """
        return self._str_value

    @str_value.setter
    def str_value(self, str_value):
        """Sets the str_value of this RimeTestMetric.


        :param str_value: The str_value of this RimeTestMetric.  # noqa: E501
        :type: str
        """

        self._str_value = str_value

    @property
    def int_list(self):
        """Gets the int_list of this RimeTestMetric.  # noqa: E501


        :return: The int_list of this RimeTestMetric.  # noqa: E501
        :rtype: RimeIntList
        """
        return self._int_list

    @int_list.setter
    def int_list(self, int_list):
        """Sets the int_list of this RimeTestMetric.


        :param int_list: The int_list of this RimeTestMetric.  # noqa: E501
        :type: RimeIntList
        """

        self._int_list = int_list

    @property
    def float_list(self):
        """Gets the float_list of this RimeTestMetric.  # noqa: E501


        :return: The float_list of this RimeTestMetric.  # noqa: E501
        :rtype: RimeFloatList
        """
        return self._float_list

    @float_list.setter
    def float_list(self, float_list):
        """Sets the float_list of this RimeTestMetric.


        :param float_list: The float_list of this RimeTestMetric.  # noqa: E501
        :type: RimeFloatList
        """

        self._float_list = float_list

    @property
    def str_list(self):
        """Gets the str_list of this RimeTestMetric.  # noqa: E501


        :return: The str_list of this RimeTestMetric.  # noqa: E501
        :rtype: RimeStrList
        """
        return self._str_list

    @str_list.setter
    def str_list(self, str_list):
        """Sets the str_list of this RimeTestMetric.


        :param str_list: The str_list of this RimeTestMetric.  # noqa: E501
        :type: RimeStrList
        """

        self._str_list = str_list

    @property
    def test_case_monitor_info(self):
        """Gets the test_case_monitor_info of this RimeTestMetric.  # noqa: E501


        :return: The test_case_monitor_info of this RimeTestMetric.  # noqa: E501
        :rtype: RimeTestCaseMonitorInfo
        """
        return self._test_case_monitor_info

    @test_case_monitor_info.setter
    def test_case_monitor_info(self, test_case_monitor_info):
        """Sets the test_case_monitor_info of this RimeTestMetric.


        :param test_case_monitor_info: The test_case_monitor_info of this RimeTestMetric.  # noqa: E501
        :type: RimeTestCaseMonitorInfo
        """

        self._test_case_monitor_info = test_case_monitor_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeTestMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeTestMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
