# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FeatureflagsCustomerNameBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'signed_jwt_token_str': 'str'
    }

    attribute_map = {
        'signed_jwt_token_str': 'signedJwtTokenStr'
    }

    def __init__(self, signed_jwt_token_str=None):  # noqa: E501
        """FeatureflagsCustomerNameBody - a model defined in Swagger"""  # noqa: E501
        self._signed_jwt_token_str = None
        self.discriminator = None
        self.signed_jwt_token_str = signed_jwt_token_str

    @property
    def signed_jwt_token_str(self):
        """Gets the signed_jwt_token_str of this FeatureflagsCustomerNameBody.  # noqa: E501

        This is the signed JWT token (with RI private key that we don't share). We embed the public key in FeatureFlag server on startup. The jwt token str is decode with public key, and only updates DB on successful decoding (means it was encoded with right private key).  # noqa: E501

        :return: The signed_jwt_token_str of this FeatureflagsCustomerNameBody.  # noqa: E501
        :rtype: str
        """
        return self._signed_jwt_token_str

    @signed_jwt_token_str.setter
    def signed_jwt_token_str(self, signed_jwt_token_str):
        """Sets the signed_jwt_token_str of this FeatureflagsCustomerNameBody.

        This is the signed JWT token (with RI private key that we don't share). We embed the public key in FeatureFlag server on startup. The jwt token str is decode with public key, and only updates DB on successful decoding (means it was encoded with right private key).  # noqa: E501

        :param signed_jwt_token_str: The signed_jwt_token_str of this FeatureflagsCustomerNameBody.  # noqa: E501
        :type: str
        """
        if signed_jwt_token_str is None:
            raise ValueError("Invalid value for `signed_jwt_token_str`, must not be `None`")  # noqa: E501

        self._signed_jwt_token_str = signed_jwt_token_str

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeatureflagsCustomerNameBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureflagsCustomerNameBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
