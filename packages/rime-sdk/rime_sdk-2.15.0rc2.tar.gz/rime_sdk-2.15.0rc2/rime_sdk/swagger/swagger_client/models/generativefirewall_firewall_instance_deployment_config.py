# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativefirewallFirewallInstanceDeploymentConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pod_annotations': 'dict(str, str)',
        'kubernetes_resource_config': 'GenerativefirewallKubernetesResourceConfig'
    }

    attribute_map = {
        'pod_annotations': 'podAnnotations',
        'kubernetes_resource_config': 'kubernetesResourceConfig'
    }

    def __init__(self, pod_annotations=None, kubernetes_resource_config=None):  # noqa: E501
        """GenerativefirewallFirewallInstanceDeploymentConfig - a model defined in Swagger"""  # noqa: E501
        self._pod_annotations = None
        self._kubernetes_resource_config = None
        self.discriminator = None
        if pod_annotations is not None:
            self.pod_annotations = pod_annotations
        if kubernetes_resource_config is not None:
            self.kubernetes_resource_config = kubernetes_resource_config

    @property
    def pod_annotations(self):
        """Gets the pod_annotations of this GenerativefirewallFirewallInstanceDeploymentConfig.  # noqa: E501


        :return: The pod_annotations of this GenerativefirewallFirewallInstanceDeploymentConfig.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._pod_annotations

    @pod_annotations.setter
    def pod_annotations(self, pod_annotations):
        """Sets the pod_annotations of this GenerativefirewallFirewallInstanceDeploymentConfig.


        :param pod_annotations: The pod_annotations of this GenerativefirewallFirewallInstanceDeploymentConfig.  # noqa: E501
        :type: dict(str, str)
        """

        self._pod_annotations = pod_annotations

    @property
    def kubernetes_resource_config(self):
        """Gets the kubernetes_resource_config of this GenerativefirewallFirewallInstanceDeploymentConfig.  # noqa: E501


        :return: The kubernetes_resource_config of this GenerativefirewallFirewallInstanceDeploymentConfig.  # noqa: E501
        :rtype: GenerativefirewallKubernetesResourceConfig
        """
        return self._kubernetes_resource_config

    @kubernetes_resource_config.setter
    def kubernetes_resource_config(self, kubernetes_resource_config):
        """Sets the kubernetes_resource_config of this GenerativefirewallFirewallInstanceDeploymentConfig.


        :param kubernetes_resource_config: The kubernetes_resource_config of this GenerativefirewallFirewallInstanceDeploymentConfig.  # noqa: E501
        :type: GenerativefirewallKubernetesResourceConfig
        """

        self._kubernetes_resource_config = kubernetes_resource_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativefirewallFirewallInstanceDeploymentConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativefirewallFirewallInstanceDeploymentConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
