# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeCategoryMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'value': 'float',
        'threshold': 'MonitorThreshold',
        'description': 'str',
        'risk_category_type': 'RiskscoreRiskCategoryType'
    }

    attribute_map = {
        'name': 'name',
        'value': 'value',
        'threshold': 'threshold',
        'description': 'description',
        'risk_category_type': 'riskCategoryType'
    }

    def __init__(self, name=None, value=None, threshold=None, description=None, risk_category_type=None):  # noqa: E501
        """RimeCategoryMetric - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._value = None
        self._threshold = None
        self._description = None
        self._risk_category_type = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if threshold is not None:
            self.threshold = threshold
        if description is not None:
            self.description = description
        if risk_category_type is not None:
            self.risk_category_type = risk_category_type

    @property
    def name(self):
        """Gets the name of this RimeCategoryMetric.  # noqa: E501


        :return: The name of this RimeCategoryMetric.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RimeCategoryMetric.


        :param name: The name of this RimeCategoryMetric.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this RimeCategoryMetric.  # noqa: E501


        :return: The value of this RimeCategoryMetric.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RimeCategoryMetric.


        :param value: The value of this RimeCategoryMetric.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def threshold(self):
        """Gets the threshold of this RimeCategoryMetric.  # noqa: E501


        :return: The threshold of this RimeCategoryMetric.  # noqa: E501
        :rtype: MonitorThreshold
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this RimeCategoryMetric.


        :param threshold: The threshold of this RimeCategoryMetric.  # noqa: E501
        :type: MonitorThreshold
        """

        self._threshold = threshold

    @property
    def description(self):
        """Gets the description of this RimeCategoryMetric.  # noqa: E501


        :return: The description of this RimeCategoryMetric.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RimeCategoryMetric.


        :param description: The description of this RimeCategoryMetric.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def risk_category_type(self):
        """Gets the risk_category_type of this RimeCategoryMetric.  # noqa: E501


        :return: The risk_category_type of this RimeCategoryMetric.  # noqa: E501
        :rtype: RiskscoreRiskCategoryType
        """
        return self._risk_category_type

    @risk_category_type.setter
    def risk_category_type(self, risk_category_type):
        """Sets the risk_category_type of this RimeCategoryMetric.


        :param risk_category_type: The risk_category_type of this RimeCategoryMetric.  # noqa: E501
        :type: RiskscoreRiskCategoryType
        """

        self._risk_category_type = risk_category_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeCategoryMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeCategoryMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
