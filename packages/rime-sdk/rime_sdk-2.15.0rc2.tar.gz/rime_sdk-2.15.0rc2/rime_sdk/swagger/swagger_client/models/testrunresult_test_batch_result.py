# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestrunresultTestBatchResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_run_id': 'str',
        'test_type': 'str',
        'test_name': 'str',
        'description': 'str',
        'test_category': 'TestrunTestCategoryType',
        'category': 'str',
        'duration_in_millis': 'str',
        'severity': 'RimeSeverity',
        'summary_counts': 'TestrunresultResultSummaryCounts',
        'failing_features': 'list[str]',
        'metrics': 'list[RimeTestMetric]',
        'show_in_test_comparisons': 'bool',
        'display': 'TestrunresultTestBatchResultDisplay',
        'failing_rows_result': 'RimeFailingRowsResult',
        'security_test_details': 'DetectionSecurityEventDetails'
    }

    attribute_map = {
        'test_run_id': 'testRunId',
        'test_type': 'testType',
        'test_name': 'testName',
        'description': 'description',
        'test_category': 'testCategory',
        'category': 'category',
        'duration_in_millis': 'durationInMillis',
        'severity': 'severity',
        'summary_counts': 'summaryCounts',
        'failing_features': 'failingFeatures',
        'metrics': 'metrics',
        'show_in_test_comparisons': 'showInTestComparisons',
        'display': 'display',
        'failing_rows_result': 'failingRowsResult',
        'security_test_details': 'securityTestDetails'
    }

    def __init__(self, test_run_id=None, test_type=None, test_name=None, description=None, test_category=None, category=None, duration_in_millis=None, severity=None, summary_counts=None, failing_features=None, metrics=None, show_in_test_comparisons=None, display=None, failing_rows_result=None, security_test_details=None):  # noqa: E501
        """TestrunresultTestBatchResult - a model defined in Swagger"""  # noqa: E501
        self._test_run_id = None
        self._test_type = None
        self._test_name = None
        self._description = None
        self._test_category = None
        self._category = None
        self._duration_in_millis = None
        self._severity = None
        self._summary_counts = None
        self._failing_features = None
        self._metrics = None
        self._show_in_test_comparisons = None
        self._display = None
        self._failing_rows_result = None
        self._security_test_details = None
        self.discriminator = None
        if test_run_id is not None:
            self.test_run_id = test_run_id
        if test_type is not None:
            self.test_type = test_type
        if test_name is not None:
            self.test_name = test_name
        if description is not None:
            self.description = description
        if test_category is not None:
            self.test_category = test_category
        if category is not None:
            self.category = category
        if duration_in_millis is not None:
            self.duration_in_millis = duration_in_millis
        if severity is not None:
            self.severity = severity
        if summary_counts is not None:
            self.summary_counts = summary_counts
        if failing_features is not None:
            self.failing_features = failing_features
        if metrics is not None:
            self.metrics = metrics
        if show_in_test_comparisons is not None:
            self.show_in_test_comparisons = show_in_test_comparisons
        if display is not None:
            self.display = display
        if failing_rows_result is not None:
            self.failing_rows_result = failing_rows_result
        if security_test_details is not None:
            self.security_test_details = security_test_details

    @property
    def test_run_id(self):
        """Gets the test_run_id of this TestrunresultTestBatchResult.  # noqa: E501

        Uniquely specifies a parent Test Run.  # noqa: E501

        :return: The test_run_id of this TestrunresultTestBatchResult.  # noqa: E501
        :rtype: str
        """
        return self._test_run_id

    @test_run_id.setter
    def test_run_id(self, test_run_id):
        """Sets the test_run_id of this TestrunresultTestBatchResult.

        Uniquely specifies a parent Test Run.  # noqa: E501

        :param test_run_id: The test_run_id of this TestrunresultTestBatchResult.  # noqa: E501
        :type: str
        """

        self._test_run_id = test_run_id

    @property
    def test_type(self):
        """Gets the test_type of this TestrunresultTestBatchResult.  # noqa: E501


        :return: The test_type of this TestrunresultTestBatchResult.  # noqa: E501
        :rtype: str
        """
        return self._test_type

    @test_type.setter
    def test_type(self, test_type):
        """Sets the test_type of this TestrunresultTestBatchResult.


        :param test_type: The test_type of this TestrunresultTestBatchResult.  # noqa: E501
        :type: str
        """

        self._test_type = test_type

    @property
    def test_name(self):
        """Gets the test_name of this TestrunresultTestBatchResult.  # noqa: E501

        The display-friendly name; for example: 'Categorical Feature Drift'.  # noqa: E501

        :return: The test_name of this TestrunresultTestBatchResult.  # noqa: E501
        :rtype: str
        """
        return self._test_name

    @test_name.setter
    def test_name(self, test_name):
        """Sets the test_name of this TestrunresultTestBatchResult.

        The display-friendly name; for example: 'Categorical Feature Drift'.  # noqa: E501

        :param test_name: The test_name of this TestrunresultTestBatchResult.  # noqa: E501
        :type: str
        """

        self._test_name = test_name

    @property
    def description(self):
        """Gets the description of this TestrunresultTestBatchResult.  # noqa: E501

        The description of the test. Note: this is currently identical to the display.description_html field.  # noqa: E501

        :return: The description of this TestrunresultTestBatchResult.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TestrunresultTestBatchResult.

        The description of the test. Note: this is currently identical to the display.description_html field.  # noqa: E501

        :param description: The description of this TestrunresultTestBatchResult.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def test_category(self):
        """Gets the test_category of this TestrunresultTestBatchResult.  # noqa: E501


        :return: The test_category of this TestrunresultTestBatchResult.  # noqa: E501
        :rtype: TestrunTestCategoryType
        """
        return self._test_category

    @test_category.setter
    def test_category(self, test_category):
        """Sets the test_category of this TestrunresultTestBatchResult.


        :param test_category: The test_category of this TestrunresultTestBatchResult.  # noqa: E501
        :type: TestrunTestCategoryType
        """

        self._test_category = test_category

    @property
    def category(self):
        """Gets the category of this TestrunresultTestBatchResult.  # noqa: E501

        The string field `category` is deprecated in v2.1 and will be removed in v2.3. Please use the enum field test_category instead, which provides the same info.  # noqa: E501

        :return: The category of this TestrunresultTestBatchResult.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TestrunresultTestBatchResult.

        The string field `category` is deprecated in v2.1 and will be removed in v2.3. Please use the enum field test_category instead, which provides the same info.  # noqa: E501

        :param category: The category of this TestrunresultTestBatchResult.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def duration_in_millis(self):
        """Gets the duration_in_millis of this TestrunresultTestBatchResult.  # noqa: E501

        The duration of the test run.  # noqa: E501

        :return: The duration_in_millis of this TestrunresultTestBatchResult.  # noqa: E501
        :rtype: str
        """
        return self._duration_in_millis

    @duration_in_millis.setter
    def duration_in_millis(self, duration_in_millis):
        """Sets the duration_in_millis of this TestrunresultTestBatchResult.

        The duration of the test run.  # noqa: E501

        :param duration_in_millis: The duration_in_millis of this TestrunresultTestBatchResult.  # noqa: E501
        :type: str
        """

        self._duration_in_millis = duration_in_millis

    @property
    def severity(self):
        """Gets the severity of this TestrunresultTestBatchResult.  # noqa: E501


        :return: The severity of this TestrunresultTestBatchResult.  # noqa: E501
        :rtype: RimeSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this TestrunresultTestBatchResult.


        :param severity: The severity of this TestrunresultTestBatchResult.  # noqa: E501
        :type: RimeSeverity
        """

        self._severity = severity

    @property
    def summary_counts(self):
        """Gets the summary_counts of this TestrunresultTestBatchResult.  # noqa: E501


        :return: The summary_counts of this TestrunresultTestBatchResult.  # noqa: E501
        :rtype: TestrunresultResultSummaryCounts
        """
        return self._summary_counts

    @summary_counts.setter
    def summary_counts(self, summary_counts):
        """Sets the summary_counts of this TestrunresultTestBatchResult.


        :param summary_counts: The summary_counts of this TestrunresultTestBatchResult.  # noqa: E501
        :type: TestrunresultResultSummaryCounts
        """

        self._summary_counts = summary_counts

    @property
    def failing_features(self):
        """Gets the failing_features of this TestrunresultTestBatchResult.  # noqa: E501

        The list of failing features.  # noqa: E501

        :return: The failing_features of this TestrunresultTestBatchResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._failing_features

    @failing_features.setter
    def failing_features(self, failing_features):
        """Sets the failing_features of this TestrunresultTestBatchResult.

        The list of failing features.  # noqa: E501

        :param failing_features: The failing_features of this TestrunresultTestBatchResult.  # noqa: E501
        :type: list[str]
        """

        self._failing_features = failing_features

    @property
    def metrics(self):
        """Gets the metrics of this TestrunresultTestBatchResult.  # noqa: E501


        :return: The metrics of this TestrunresultTestBatchResult.  # noqa: E501
        :rtype: list[RimeTestMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this TestrunresultTestBatchResult.


        :param metrics: The metrics of this TestrunresultTestBatchResult.  # noqa: E501
        :type: list[RimeTestMetric]
        """

        self._metrics = metrics

    @property
    def show_in_test_comparisons(self):
        """Gets the show_in_test_comparisons of this TestrunresultTestBatchResult.  # noqa: E501

        A Boolean that specifies whether to include the test batch in the test comparison page in the web UI. This field is no longer used, and will be removed in 2.3.  # noqa: E501

        :return: The show_in_test_comparisons of this TestrunresultTestBatchResult.  # noqa: E501
        :rtype: bool
        """
        return self._show_in_test_comparisons

    @show_in_test_comparisons.setter
    def show_in_test_comparisons(self, show_in_test_comparisons):
        """Sets the show_in_test_comparisons of this TestrunresultTestBatchResult.

        A Boolean that specifies whether to include the test batch in the test comparison page in the web UI. This field is no longer used, and will be removed in 2.3.  # noqa: E501

        :param show_in_test_comparisons: The show_in_test_comparisons of this TestrunresultTestBatchResult.  # noqa: E501
        :type: bool
        """

        self._show_in_test_comparisons = show_in_test_comparisons

    @property
    def display(self):
        """Gets the display of this TestrunresultTestBatchResult.  # noqa: E501


        :return: The display of this TestrunresultTestBatchResult.  # noqa: E501
        :rtype: TestrunresultTestBatchResultDisplay
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this TestrunresultTestBatchResult.


        :param display: The display of this TestrunresultTestBatchResult.  # noqa: E501
        :type: TestrunresultTestBatchResultDisplay
        """

        self._display = display

    @property
    def failing_rows_result(self):
        """Gets the failing_rows_result of this TestrunresultTestBatchResult.  # noqa: E501


        :return: The failing_rows_result of this TestrunresultTestBatchResult.  # noqa: E501
        :rtype: RimeFailingRowsResult
        """
        return self._failing_rows_result

    @failing_rows_result.setter
    def failing_rows_result(self, failing_rows_result):
        """Sets the failing_rows_result of this TestrunresultTestBatchResult.


        :param failing_rows_result: The failing_rows_result of this TestrunresultTestBatchResult.  # noqa: E501
        :type: RimeFailingRowsResult
        """

        self._failing_rows_result = failing_rows_result

    @property
    def security_test_details(self):
        """Gets the security_test_details of this TestrunresultTestBatchResult.  # noqa: E501


        :return: The security_test_details of this TestrunresultTestBatchResult.  # noqa: E501
        :rtype: DetectionSecurityEventDetails
        """
        return self._security_test_details

    @security_test_details.setter
    def security_test_details(self, security_test_details):
        """Sets the security_test_details of this TestrunresultTestBatchResult.


        :param security_test_details: The security_test_details of this TestrunresultTestBatchResult.  # noqa: E501
        :type: DetectionSecurityEventDetails
        """

        self._security_test_details = security_test_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestrunresultTestBatchResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestrunresultTestBatchResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
