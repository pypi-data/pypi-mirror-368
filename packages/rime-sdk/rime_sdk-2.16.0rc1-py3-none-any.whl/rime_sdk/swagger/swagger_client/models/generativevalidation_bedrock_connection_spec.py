# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativevalidationBedrockConnectionSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_id': 'str',
        'response_json_path': 'str',
        'body_template': 'object',
        'assume_role_arn': 'str',
        'aws_access_key': 'GenerativevalidationAWSAccessKey',
        'inference_config': 'GenerativevalidationBedrockInferenceConfig',
        'additional_config': 'object',
        'region': 'GenerativevalidationAWSRegion'
    }

    attribute_map = {
        'model_id': 'modelId',
        'response_json_path': 'responseJsonPath',
        'body_template': 'bodyTemplate',
        'assume_role_arn': 'assumeRoleArn',
        'aws_access_key': 'awsAccessKey',
        'inference_config': 'inferenceConfig',
        'additional_config': 'additionalConfig',
        'region': 'region'
    }

    def __init__(self, model_id=None, response_json_path=None, body_template=None, assume_role_arn=None, aws_access_key=None, inference_config=None, additional_config=None, region=None):  # noqa: E501
        """GenerativevalidationBedrockConnectionSpec - a model defined in Swagger"""  # noqa: E501
        self._model_id = None
        self._response_json_path = None
        self._body_template = None
        self._assume_role_arn = None
        self._aws_access_key = None
        self._inference_config = None
        self._additional_config = None
        self._region = None
        self.discriminator = None
        if model_id is not None:
            self.model_id = model_id
        if response_json_path is not None:
            self.response_json_path = response_json_path
        if body_template is not None:
            self.body_template = body_template
        if assume_role_arn is not None:
            self.assume_role_arn = assume_role_arn
        if aws_access_key is not None:
            self.aws_access_key = aws_access_key
        if inference_config is not None:
            self.inference_config = inference_config
        if additional_config is not None:
            self.additional_config = additional_config
        if region is not None:
            self.region = region

    @property
    def model_id(self):
        """Gets the model_id of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501

        Specifies the model id to use.  # noqa: E501

        :return: The model_id of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this GenerativevalidationBedrockConnectionSpec.

        Specifies the model id to use.  # noqa: E501

        :param model_id: The model_id of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def response_json_path(self):
        """Gets the response_json_path of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501

        A json path specifying where in the response json payload we can find the LLM's response response string. Note that the path must point to a string value in the json payload. Whitespace and other special characters can be encoded as unicode (\\u0020). Periods in json fields can be escaped with a backslash.  # noqa: E501

        :return: The response_json_path of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501
        :rtype: str
        """
        return self._response_json_path

    @response_json_path.setter
    def response_json_path(self, response_json_path):
        """Sets the response_json_path of this GenerativevalidationBedrockConnectionSpec.

        A json path specifying where in the response json payload we can find the LLM's response response string. Note that the path must point to a string value in the json payload. Whitespace and other special characters can be encoded as unicode (\\u0020). Periods in json fields can be escaped with a backslash.  # noqa: E501

        :param response_json_path: The response_json_path of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501
        :type: str
        """

        self._response_json_path = response_json_path

    @property
    def body_template(self):
        """Gets the body_template of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501


        :return: The body_template of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501
        :rtype: object
        """
        return self._body_template

    @body_template.setter
    def body_template(self, body_template):
        """Sets the body_template of this GenerativevalidationBedrockConnectionSpec.


        :param body_template: The body_template of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501
        :type: object
        """

        self._body_template = body_template

    @property
    def assume_role_arn(self):
        """Gets the assume_role_arn of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501


        :return: The assume_role_arn of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501
        :rtype: str
        """
        return self._assume_role_arn

    @assume_role_arn.setter
    def assume_role_arn(self, assume_role_arn):
        """Sets the assume_role_arn of this GenerativevalidationBedrockConnectionSpec.


        :param assume_role_arn: The assume_role_arn of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501
        :type: str
        """

        self._assume_role_arn = assume_role_arn

    @property
    def aws_access_key(self):
        """Gets the aws_access_key of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501


        :return: The aws_access_key of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501
        :rtype: GenerativevalidationAWSAccessKey
        """
        return self._aws_access_key

    @aws_access_key.setter
    def aws_access_key(self, aws_access_key):
        """Sets the aws_access_key of this GenerativevalidationBedrockConnectionSpec.


        :param aws_access_key: The aws_access_key of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501
        :type: GenerativevalidationAWSAccessKey
        """

        self._aws_access_key = aws_access_key

    @property
    def inference_config(self):
        """Gets the inference_config of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501


        :return: The inference_config of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501
        :rtype: GenerativevalidationBedrockInferenceConfig
        """
        return self._inference_config

    @inference_config.setter
    def inference_config(self, inference_config):
        """Sets the inference_config of this GenerativevalidationBedrockConnectionSpec.


        :param inference_config: The inference_config of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501
        :type: GenerativevalidationBedrockInferenceConfig
        """

        self._inference_config = inference_config

    @property
    def additional_config(self):
        """Gets the additional_config of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501


        :return: The additional_config of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501
        :rtype: object
        """
        return self._additional_config

    @additional_config.setter
    def additional_config(self, additional_config):
        """Sets the additional_config of this GenerativevalidationBedrockConnectionSpec.


        :param additional_config: The additional_config of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501
        :type: object
        """

        self._additional_config = additional_config

    @property
    def region(self):
        """Gets the region of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501


        :return: The region of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501
        :rtype: GenerativevalidationAWSRegion
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this GenerativevalidationBedrockConnectionSpec.


        :param region: The region of this GenerativevalidationBedrockConnectionSpec.  # noqa: E501
        :type: GenerativevalidationAWSRegion
        """

        self._region = region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativevalidationBedrockConnectionSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativevalidationBedrockConnectionSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
