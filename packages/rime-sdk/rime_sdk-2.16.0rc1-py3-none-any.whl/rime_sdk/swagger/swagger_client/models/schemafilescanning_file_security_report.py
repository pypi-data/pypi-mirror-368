# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SchemafilescanningFileSecurityReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filename': 'str',
        'path': 'str',
        'size': 'str',
        'sha256': 'str',
        'creation_time': 'datetime',
        'last_modified_time': 'datetime',
        'dependencies': 'list[str]',
        'unexpected_dependencies': 'list[str]',
        'unsafe_dependencies': 'list[str]'
    }

    attribute_map = {
        'filename': 'filename',
        'path': 'path',
        'size': 'size',
        'sha256': 'sha256',
        'creation_time': 'creationTime',
        'last_modified_time': 'lastModifiedTime',
        'dependencies': 'dependencies',
        'unexpected_dependencies': 'unexpectedDependencies',
        'unsafe_dependencies': 'unsafeDependencies'
    }

    def __init__(self, filename=None, path=None, size=None, sha256=None, creation_time=None, last_modified_time=None, dependencies=None, unexpected_dependencies=None, unsafe_dependencies=None):  # noqa: E501
        """SchemafilescanningFileSecurityReport - a model defined in Swagger"""  # noqa: E501
        self._filename = None
        self._path = None
        self._size = None
        self._sha256 = None
        self._creation_time = None
        self._last_modified_time = None
        self._dependencies = None
        self._unexpected_dependencies = None
        self._unsafe_dependencies = None
        self.discriminator = None
        self.filename = filename
        if path is not None:
            self.path = path
        if size is not None:
            self.size = size
        if sha256 is not None:
            self.sha256 = sha256
        if creation_time is not None:
            self.creation_time = creation_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if dependencies is not None:
            self.dependencies = dependencies
        if unexpected_dependencies is not None:
            self.unexpected_dependencies = unexpected_dependencies
        if unsafe_dependencies is not None:
            self.unsafe_dependencies = unsafe_dependencies

    @property
    def filename(self):
        """Gets the filename of this SchemafilescanningFileSecurityReport.  # noqa: E501

        The name of the file that was scanned.  # noqa: E501

        :return: The filename of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this SchemafilescanningFileSecurityReport.

        The name of the file that was scanned.  # noqa: E501

        :param filename: The filename of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :type: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501

        self._filename = filename

    @property
    def path(self):
        """Gets the path of this SchemafilescanningFileSecurityReport.  # noqa: E501


        :return: The path of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SchemafilescanningFileSecurityReport.


        :param path: The path of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def size(self):
        """Gets the size of this SchemafilescanningFileSecurityReport.  # noqa: E501

        The size of the file in bytes.  # noqa: E501

        :return: The size of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SchemafilescanningFileSecurityReport.

        The size of the file in bytes.  # noqa: E501

        :param size: The size of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def sha256(self):
        """Gets the sha256 of this SchemafilescanningFileSecurityReport.  # noqa: E501


        :return: The sha256 of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :rtype: str
        """
        return self._sha256

    @sha256.setter
    def sha256(self, sha256):
        """Sets the sha256 of this SchemafilescanningFileSecurityReport.


        :param sha256: The sha256 of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :type: str
        """

        self._sha256 = sha256

    @property
    def creation_time(self):
        """Gets the creation_time of this SchemafilescanningFileSecurityReport.  # noqa: E501

        The time when the file was created.  # noqa: E501

        :return: The creation_time of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this SchemafilescanningFileSecurityReport.

        The time when the file was created.  # noqa: E501

        :param creation_time: The creation_time of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this SchemafilescanningFileSecurityReport.  # noqa: E501

        The time when the file was last modified.  # noqa: E501

        :return: The last_modified_time of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this SchemafilescanningFileSecurityReport.

        The time when the file was last modified.  # noqa: E501

        :param last_modified_time: The last_modified_time of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :type: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def dependencies(self):
        """Gets the dependencies of this SchemafilescanningFileSecurityReport.  # noqa: E501

        The list of all dependencies in the file.  # noqa: E501

        :return: The dependencies of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :rtype: list[str]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this SchemafilescanningFileSecurityReport.

        The list of all dependencies in the file.  # noqa: E501

        :param dependencies: The dependencies of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :type: list[str]
        """

        self._dependencies = dependencies

    @property
    def unexpected_dependencies(self):
        """Gets the unexpected_dependencies of this SchemafilescanningFileSecurityReport.  # noqa: E501

        The list of unexpected dependencies.  # noqa: E501

        :return: The unexpected_dependencies of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :rtype: list[str]
        """
        return self._unexpected_dependencies

    @unexpected_dependencies.setter
    def unexpected_dependencies(self, unexpected_dependencies):
        """Sets the unexpected_dependencies of this SchemafilescanningFileSecurityReport.

        The list of unexpected dependencies.  # noqa: E501

        :param unexpected_dependencies: The unexpected_dependencies of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :type: list[str]
        """

        self._unexpected_dependencies = unexpected_dependencies

    @property
    def unsafe_dependencies(self):
        """Gets the unsafe_dependencies of this SchemafilescanningFileSecurityReport.  # noqa: E501

        The list of unsafe dependencies.  # noqa: E501

        :return: The unsafe_dependencies of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :rtype: list[str]
        """
        return self._unsafe_dependencies

    @unsafe_dependencies.setter
    def unsafe_dependencies(self, unsafe_dependencies):
        """Sets the unsafe_dependencies of this SchemafilescanningFileSecurityReport.

        The list of unsafe dependencies.  # noqa: E501

        :param unsafe_dependencies: The unsafe_dependencies of this SchemafilescanningFileSecurityReport.  # noqa: E501
        :type: list[str]
        """

        self._unsafe_dependencies = unsafe_dependencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemafilescanningFileSecurityReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemafilescanningFileSecurityReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
