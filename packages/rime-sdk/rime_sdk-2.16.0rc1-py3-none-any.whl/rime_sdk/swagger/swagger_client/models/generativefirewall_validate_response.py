# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativefirewallValidateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'validation_types': 'list[GenerativefirewallValidationType]',
        'flagged_validation_types': 'list[GenerativefirewallValidationType]',
        'flagged_rules': 'dict(str, GenerativefirewallRuleDetails)',
        'allowed_rules': 'dict(str, GenerativefirewallRuleDetails)',
        'vendor_name': 'str',
        'product': 'str',
        'firewall_instance_id': 'RimeUUID',
        'version': 'str',
        'schema_version': 'str',
        'request': 'ValidateResponseProcessedRequest',
        'validation_time': 'datetime',
        'trace_id': 'RimeUUID',
        'language': 'str'
    }

    attribute_map = {
        'validation_types': 'validationTypes',
        'flagged_validation_types': 'flaggedValidationTypes',
        'flagged_rules': 'flaggedRules',
        'allowed_rules': 'allowedRules',
        'vendor_name': 'vendorName',
        'product': 'product',
        'firewall_instance_id': 'firewallInstanceId',
        'version': 'version',
        'schema_version': 'schemaVersion',
        'request': 'request',
        'validation_time': 'validationTime',
        'trace_id': 'traceId',
        'language': 'language'
    }

    def __init__(self, validation_types=None, flagged_validation_types=None, flagged_rules=None, allowed_rules=None, vendor_name=None, product=None, firewall_instance_id=None, version=None, schema_version=None, request=None, validation_time=None, trace_id=None, language=None):  # noqa: E501
        """GenerativefirewallValidateResponse - a model defined in Swagger"""  # noqa: E501
        self._validation_types = None
        self._flagged_validation_types = None
        self._flagged_rules = None
        self._allowed_rules = None
        self._vendor_name = None
        self._product = None
        self._firewall_instance_id = None
        self._version = None
        self._schema_version = None
        self._request = None
        self._validation_time = None
        self._trace_id = None
        self._language = None
        self.discriminator = None
        if validation_types is not None:
            self.validation_types = validation_types
        if flagged_validation_types is not None:
            self.flagged_validation_types = flagged_validation_types
        if flagged_rules is not None:
            self.flagged_rules = flagged_rules
        if allowed_rules is not None:
            self.allowed_rules = allowed_rules
        if vendor_name is not None:
            self.vendor_name = vendor_name
        if product is not None:
            self.product = product
        if firewall_instance_id is not None:
            self.firewall_instance_id = firewall_instance_id
        if version is not None:
            self.version = version
        if schema_version is not None:
            self.schema_version = schema_version
        if request is not None:
            self.request = request
        if validation_time is not None:
            self.validation_time = validation_time
        if trace_id is not None:
            self.trace_id = trace_id
        if language is not None:
            self.language = language

    @property
    def validation_types(self):
        """Gets the validation_types of this GenerativefirewallValidateResponse.  # noqa: E501

        Lists what was scanned- the input, the output, or both.  # noqa: E501

        :return: The validation_types of this GenerativefirewallValidateResponse.  # noqa: E501
        :rtype: list[GenerativefirewallValidationType]
        """
        return self._validation_types

    @validation_types.setter
    def validation_types(self, validation_types):
        """Sets the validation_types of this GenerativefirewallValidateResponse.

        Lists what was scanned- the input, the output, or both.  # noqa: E501

        :param validation_types: The validation_types of this GenerativefirewallValidateResponse.  # noqa: E501
        :type: list[GenerativefirewallValidationType]
        """

        self._validation_types = validation_types

    @property
    def flagged_validation_types(self):
        """Gets the flagged_validation_types of this GenerativefirewallValidateResponse.  # noqa: E501

        Lists what was flagged- the input, the output, or both. This is always a subset of validation_types.  # noqa: E501

        :return: The flagged_validation_types of this GenerativefirewallValidateResponse.  # noqa: E501
        :rtype: list[GenerativefirewallValidationType]
        """
        return self._flagged_validation_types

    @flagged_validation_types.setter
    def flagged_validation_types(self, flagged_validation_types):
        """Sets the flagged_validation_types of this GenerativefirewallValidateResponse.

        Lists what was flagged- the input, the output, or both. This is always a subset of validation_types.  # noqa: E501

        :param flagged_validation_types: The flagged_validation_types of this GenerativefirewallValidateResponse.  # noqa: E501
        :type: list[GenerativefirewallValidationType]
        """

        self._flagged_validation_types = flagged_validation_types

    @property
    def flagged_rules(self):
        """Gets the flagged_rules of this GenerativefirewallValidateResponse.  # noqa: E501

        Complete list of all rules that flagged the input or output.  # noqa: E501

        :return: The flagged_rules of this GenerativefirewallValidateResponse.  # noqa: E501
        :rtype: dict(str, GenerativefirewallRuleDetails)
        """
        return self._flagged_rules

    @flagged_rules.setter
    def flagged_rules(self, flagged_rules):
        """Sets the flagged_rules of this GenerativefirewallValidateResponse.

        Complete list of all rules that flagged the input or output.  # noqa: E501

        :param flagged_rules: The flagged_rules of this GenerativefirewallValidateResponse.  # noqa: E501
        :type: dict(str, GenerativefirewallRuleDetails)
        """

        self._flagged_rules = flagged_rules

    @property
    def allowed_rules(self):
        """Gets the allowed_rules of this GenerativefirewallValidateResponse.  # noqa: E501

        Complete list of all rules that allowed the input or output.  # noqa: E501

        :return: The allowed_rules of this GenerativefirewallValidateResponse.  # noqa: E501
        :rtype: dict(str, GenerativefirewallRuleDetails)
        """
        return self._allowed_rules

    @allowed_rules.setter
    def allowed_rules(self, allowed_rules):
        """Sets the allowed_rules of this GenerativefirewallValidateResponse.

        Complete list of all rules that allowed the input or output.  # noqa: E501

        :param allowed_rules: The allowed_rules of this GenerativefirewallValidateResponse.  # noqa: E501
        :type: dict(str, GenerativefirewallRuleDetails)
        """

        self._allowed_rules = allowed_rules

    @property
    def vendor_name(self):
        """Gets the vendor_name of this GenerativefirewallValidateResponse.  # noqa: E501

        The name of the entity that manages the Firewall Instance.  # noqa: E501

        :return: The vendor_name of this GenerativefirewallValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name):
        """Sets the vendor_name of this GenerativefirewallValidateResponse.

        The name of the entity that manages the Firewall Instance.  # noqa: E501

        :param vendor_name: The vendor_name of this GenerativefirewallValidateResponse.  # noqa: E501
        :type: str
        """

        self._vendor_name = vendor_name

    @property
    def product(self):
        """Gets the product of this GenerativefirewallValidateResponse.  # noqa: E501

        The name of the product that is processing this request.  # noqa: E501

        :return: The product of this GenerativefirewallValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this GenerativefirewallValidateResponse.

        The name of the product that is processing this request.  # noqa: E501

        :param product: The product of this GenerativefirewallValidateResponse.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def firewall_instance_id(self):
        """Gets the firewall_instance_id of this GenerativefirewallValidateResponse.  # noqa: E501


        :return: The firewall_instance_id of this GenerativefirewallValidateResponse.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._firewall_instance_id

    @firewall_instance_id.setter
    def firewall_instance_id(self, firewall_instance_id):
        """Sets the firewall_instance_id of this GenerativefirewallValidateResponse.


        :param firewall_instance_id: The firewall_instance_id of this GenerativefirewallValidateResponse.  # noqa: E501
        :type: RimeUUID
        """

        self._firewall_instance_id = firewall_instance_id

    @property
    def version(self):
        """Gets the version of this GenerativefirewallValidateResponse.  # noqa: E501

        Firewall semantic version.  # noqa: E501

        :return: The version of this GenerativefirewallValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GenerativefirewallValidateResponse.

        Firewall semantic version.  # noqa: E501

        :param version: The version of this GenerativefirewallValidateResponse.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def schema_version(self):
        """Gets the schema_version of this GenerativefirewallValidateResponse.  # noqa: E501

        API schema version is the version of the API response. This should be updated whenever we make semantic changes to the response.  # noqa: E501

        :return: The schema_version of this GenerativefirewallValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this GenerativefirewallValidateResponse.

        API schema version is the version of the API response. This should be updated whenever we make semantic changes to the response.  # noqa: E501

        :param schema_version: The schema_version of this GenerativefirewallValidateResponse.  # noqa: E501
        :type: str
        """

        self._schema_version = schema_version

    @property
    def request(self):
        """Gets the request of this GenerativefirewallValidateResponse.  # noqa: E501


        :return: The request of this GenerativefirewallValidateResponse.  # noqa: E501
        :rtype: ValidateResponseProcessedRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this GenerativefirewallValidateResponse.


        :param request: The request of this GenerativefirewallValidateResponse.  # noqa: E501
        :type: ValidateResponseProcessedRequest
        """

        self._request = request

    @property
    def validation_time(self):
        """Gets the validation_time of this GenerativefirewallValidateResponse.  # noqa: E501

        Date and time at which the Firewall allowed or denied this request.  # noqa: E501

        :return: The validation_time of this GenerativefirewallValidateResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._validation_time

    @validation_time.setter
    def validation_time(self, validation_time):
        """Sets the validation_time of this GenerativefirewallValidateResponse.

        Date and time at which the Firewall allowed or denied this request.  # noqa: E501

        :param validation_time: The validation_time of this GenerativefirewallValidateResponse.  # noqa: E501
        :type: datetime
        """

        self._validation_time = validation_time

    @property
    def trace_id(self):
        """Gets the trace_id of this GenerativefirewallValidateResponse.  # noqa: E501


        :return: The trace_id of this GenerativefirewallValidateResponse.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """Sets the trace_id of this GenerativefirewallValidateResponse.


        :param trace_id: The trace_id of this GenerativefirewallValidateResponse.  # noqa: E501
        :type: RimeUUID
        """

        self._trace_id = trace_id

    @property
    def language(self):
        """Gets the language of this GenerativefirewallValidateResponse.  # noqa: E501


        :return: The language of this GenerativefirewallValidateResponse.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this GenerativefirewallValidateResponse.


        :param language: The language of this GenerativefirewallValidateResponse.  # noqa: E501
        :type: str
        """

        self._language = language

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativefirewallValidateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativefirewallValidateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
