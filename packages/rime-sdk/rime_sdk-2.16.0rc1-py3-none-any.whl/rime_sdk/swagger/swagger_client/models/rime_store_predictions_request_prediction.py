# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeStorePredictionsRequestPrediction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datapoint_id': 'RimeUUID',
        'prediction': 'str'
    }

    attribute_map = {
        'datapoint_id': 'datapointId',
        'prediction': 'prediction'
    }

    def __init__(self, datapoint_id=None, prediction=None):  # noqa: E501
        """RimeStorePredictionsRequestPrediction - a model defined in Swagger"""  # noqa: E501
        self._datapoint_id = None
        self._prediction = None
        self.discriminator = None
        if datapoint_id is not None:
            self.datapoint_id = datapoint_id
        self.prediction = prediction

    @property
    def datapoint_id(self):
        """Gets the datapoint_id of this RimeStorePredictionsRequestPrediction.  # noqa: E501


        :return: The datapoint_id of this RimeStorePredictionsRequestPrediction.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._datapoint_id

    @datapoint_id.setter
    def datapoint_id(self, datapoint_id):
        """Sets the datapoint_id of this RimeStorePredictionsRequestPrediction.


        :param datapoint_id: The datapoint_id of this RimeStorePredictionsRequestPrediction.  # noqa: E501
        :type: RimeUUID
        """

        self._datapoint_id = datapoint_id

    @property
    def prediction(self):
        """Gets the prediction of this RimeStorePredictionsRequestPrediction.  # noqa: E501

        A JSON-encoded prediction dictionary.  # noqa: E501

        :return: The prediction of this RimeStorePredictionsRequestPrediction.  # noqa: E501
        :rtype: str
        """
        return self._prediction

    @prediction.setter
    def prediction(self, prediction):
        """Sets the prediction of this RimeStorePredictionsRequestPrediction.

        A JSON-encoded prediction dictionary.  # noqa: E501

        :param prediction: The prediction of this RimeStorePredictionsRequestPrediction.  # noqa: E501
        :type: str
        """
        if prediction is None:
            raise ValueError("Invalid value for `prediction`, must not be `None`")  # noqa: E501

        self._prediction = prediction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeStorePredictionsRequestPrediction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeStorePredictionsRequestPrediction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
