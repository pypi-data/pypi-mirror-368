# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativevalidationThreat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    UNSPECIFIED = "THREAT_UNSPECIFIED"
    VIOLENCE_UNSAFE_ACTIONS = "THREAT_VIOLENCE_UNSAFE_ACTIONS"
    ILLEGAL_ACTIVITIES = "THREAT_ILLEGAL_ACTIVITIES"
    PRIVACY_ATTACKS = "THREAT_PRIVACY_ATTACKS"
    SENSITIVE_INFORMATION_DISCLOSURE = "THREAT_SENSITIVE_INFORMATION_DISCLOSURE"
    FACTUAL_INCONSISTENCIES = "THREAT_FACTUAL_INCONSISTENCIES"
    MALICIOUS_CODE_GENERATION = "THREAT_MALICIOUS_CODE_GENERATION"
    META_PROMPT_EXTRACTION = "THREAT_META_PROMPT_EXTRACTION"
    SELF_HARM = "THREAT_SELF_HARM"
    UNETHICAL_ACTIONS = "THREAT_UNETHICAL_ACTIONS"
    CONTROVERSIAL_TOPICS = "THREAT_CONTROVERSIAL_TOPICS"
    COPYRIGHT_INFRINGEMENT = "THREAT_COPYRIGHT_INFRINGEMENT"
    DISINFORMATION = "THREAT_DISINFORMATION"
    HARASSMENT = "THREAT_HARASSMENT"
    HATE_SPEECH_AND_DISCRIMINATION = "THREAT_HATE_SPEECH_AND_DISCRIMINATION"
    JAILBREAKS = "THREAT_JAILBREAKS"
    MODEL_DENIAL_OF_SERVICE = "THREAT_MODEL_DENIAL_OF_SERVICE"
    SEXUAL_CONTENT = "THREAT_SEXUAL_CONTENT"
    SOCIAL_ENGINEERING = "THREAT_SOCIAL_ENGINEERING"
    VIOLENCE_PUBLIC_SAFETY = "THREAT_VIOLENCE_PUBLIC_SAFETY"
    ENVIRONMENTAL_HARM = "THREAT_ENVIRONMENTAL_HARM"
    FINANCIAL_HARM = "THREAT_FINANCIAL_HARM"
    HALLUCINATIONS = "THREAT_HALLUCINATIONS"
    HATE_SPEECH = "THREAT_HATE_SPEECH"
    IP_THEFT = "THREAT_IP_THEFT"
    MODEL_EXTRACTION = "THREAT_MODEL_EXTRACTION"
    NON_VIOLENT_CRIME = "THREAT_NON_VIOLENT_CRIME"
    PII = "THREAT_PII"
    PROFANITY = "THREAT_PROFANITY"
    SCAMS_DECEPTION = "THREAT_SCAMS_DECEPTION"
    SEXUAL_CONTENT_EXPLOITATION = "THREAT_SEXUAL_CONTENT_EXPLOITATION"
    SOCIAL_DIVISION_POLARIZATION = "THREAT_SOCIAL_DIVISION_POLARIZATION"
    SPECIALIZED_ADVICE = "THREAT_SPECIALIZED_ADVICE"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """GenerativevalidationThreat - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativevalidationThreat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativevalidationThreat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
