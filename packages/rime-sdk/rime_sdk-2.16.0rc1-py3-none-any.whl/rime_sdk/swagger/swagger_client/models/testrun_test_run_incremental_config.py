# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestrunTestRunIncrementalConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eval_dataset_id': 'str',
        'run_time_info': 'RuntimeinfoRunTimeInfo'
    }

    attribute_map = {
        'eval_dataset_id': 'evalDatasetId',
        'run_time_info': 'runTimeInfo'
    }

    def __init__(self, eval_dataset_id=None, run_time_info=None):  # noqa: E501
        """TestrunTestRunIncrementalConfig - a model defined in Swagger"""  # noqa: E501
        self._eval_dataset_id = None
        self._run_time_info = None
        self.discriminator = None
        if eval_dataset_id is not None:
            self.eval_dataset_id = eval_dataset_id
        if run_time_info is not None:
            self.run_time_info = run_time_info

    @property
    def eval_dataset_id(self):
        """Gets the eval_dataset_id of this TestrunTestRunIncrementalConfig.  # noqa: E501

        Uniquely specifies an evaluation Dataset.  # noqa: E501

        :return: The eval_dataset_id of this TestrunTestRunIncrementalConfig.  # noqa: E501
        :rtype: str
        """
        return self._eval_dataset_id

    @eval_dataset_id.setter
    def eval_dataset_id(self, eval_dataset_id):
        """Sets the eval_dataset_id of this TestrunTestRunIncrementalConfig.

        Uniquely specifies an evaluation Dataset.  # noqa: E501

        :param eval_dataset_id: The eval_dataset_id of this TestrunTestRunIncrementalConfig.  # noqa: E501
        :type: str
        """

        self._eval_dataset_id = eval_dataset_id

    @property
    def run_time_info(self):
        """Gets the run_time_info of this TestrunTestRunIncrementalConfig.  # noqa: E501


        :return: The run_time_info of this TestrunTestRunIncrementalConfig.  # noqa: E501
        :rtype: RuntimeinfoRunTimeInfo
        """
        return self._run_time_info

    @run_time_info.setter
    def run_time_info(self, run_time_info):
        """Sets the run_time_info of this TestrunTestRunIncrementalConfig.


        :param run_time_info: The run_time_info of this TestrunTestRunIncrementalConfig.  # noqa: E501
        :type: RuntimeinfoRunTimeInfo
        """

        self._run_time_info = run_time_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestrunTestRunIncrementalConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestrunTestRunIncrementalConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
