# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeAttackTechnique(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    UNSPECIFIED = "ATTACK_TECHNIQUE_UNSPECIFIED"
    TASTLE = "ATTACK_TECHNIQUE_TASTLE"
    SYSTEM_INSTRUCTION_MODIFICATION = "ATTACK_TECHNIQUE_SYSTEM_INSTRUCTION_MODIFICATION"
    ROLE_PLAY_JAIL_BREAKS = "ATTACK_TECHNIQUE_ROLE_PLAY_JAIL_BREAKS"
    SYSTEM_INSTRUCTION_OVERRIDE = "ATTACK_TECHNIQUE_SYSTEM_INSTRUCTION_OVERRIDE"
    GLITCH_TOKENS = "ATTACK_TECHNIQUE_GLITCH_TOKENS"
    DRA_JAILBREAK = "ATTACK_TECHNIQUE_DRA_JAILBREAK"
    DEEP_INCEPTION = "ATTACK_TECHNIQUE_DEEP_INCEPTION"
    SIMPLE_ADAPTIVE_JAILBREAK = "ATTACK_TECHNIQUE_SIMPLE_ADAPTIVE_JAILBREAK"
    BOOST_STOP_TOKENS = "ATTACK_TECHNIQUE_BOOST_STOP_TOKENS"
    JAMBENCH = "ATTACK_TECHNIQUE_JAMBENCH"
    RENELLM = "ATTACK_TECHNIQUE_RENELLM"
    MARKDOWN_EXFILTRATION = "ATTACK_TECHNIQUE_MARKDOWN_EXFILTRATION"
    TAP = "ATTACK_TECHNIQUE_TAP"
    PLINY_GEMINI_JAILBREAK = "ATTACK_TECHNIQUE_PLINY_GEMINI_JAILBREAK"
    WIPI_PROMPT_INJECTION = "ATTACK_TECHNIQUE_WIPI_PROMPT_INJECTION"
    COMMON_PIT = "ATTACK_TECHNIQUE_COMMON_PIT"
    SKELETON_KEY = "ATTACK_TECHNIQUE_SKELETON_KEY"
    PLINY_GENERIC = "ATTACK_TECHNIQUE_PLINY_GENERIC"
    POLICY_PUPPETRY = "ATTACK_TECHNIQUE_POLICY_PUPPETRY"
    SEQAR_JAILBREAK = "ATTACK_TECHNIQUE_SEQAR_JAILBREAK"
    FLIP_ATTACK = "ATTACK_TECHNIQUE_FLIP_ATTACK"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """RimeAttackTechnique - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeAttackTechnique, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeAttackTechnique):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
