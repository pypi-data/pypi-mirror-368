# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestrunProfilingConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_profiling': 'TestrunDataProfiling',
        'model_profiling': 'TestrunModelProfiling'
    }

    attribute_map = {
        'data_profiling': 'dataProfiling',
        'model_profiling': 'modelProfiling'
    }

    def __init__(self, data_profiling=None, model_profiling=None):  # noqa: E501
        """TestrunProfilingConfig - a model defined in Swagger"""  # noqa: E501
        self._data_profiling = None
        self._model_profiling = None
        self.discriminator = None
        if data_profiling is not None:
            self.data_profiling = data_profiling
        if model_profiling is not None:
            self.model_profiling = model_profiling

    @property
    def data_profiling(self):
        """Gets the data_profiling of this TestrunProfilingConfig.  # noqa: E501


        :return: The data_profiling of this TestrunProfilingConfig.  # noqa: E501
        :rtype: TestrunDataProfiling
        """
        return self._data_profiling

    @data_profiling.setter
    def data_profiling(self, data_profiling):
        """Sets the data_profiling of this TestrunProfilingConfig.


        :param data_profiling: The data_profiling of this TestrunProfilingConfig.  # noqa: E501
        :type: TestrunDataProfiling
        """

        self._data_profiling = data_profiling

    @property
    def model_profiling(self):
        """Gets the model_profiling of this TestrunProfilingConfig.  # noqa: E501


        :return: The model_profiling of this TestrunProfilingConfig.  # noqa: E501
        :rtype: TestrunModelProfiling
        """
        return self._model_profiling

    @model_profiling.setter
    def model_profiling(self, model_profiling):
        """Sets the model_profiling of this TestrunProfilingConfig.


        :param model_profiling: The model_profiling of this TestrunProfilingConfig.  # noqa: E501
        :type: TestrunModelProfiling
        """

        self._model_profiling = model_profiling

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestrunProfilingConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestrunProfilingConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
