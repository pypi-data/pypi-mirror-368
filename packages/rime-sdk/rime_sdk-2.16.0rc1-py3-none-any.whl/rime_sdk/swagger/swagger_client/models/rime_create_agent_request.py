# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeCreateAgentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'local_config': 'CreateAgentRequestLocalConfig',
        'aws_config': 'CreateAgentRequestAWSConfig',
        'gcp_config': 'CreateAgentRequestGCPConfig',
        'azure_config': 'CreateAgentRequestAzureConfig'
    }

    attribute_map = {
        'name': 'name',
        'local_config': 'localConfig',
        'aws_config': 'awsConfig',
        'gcp_config': 'gcpConfig',
        'azure_config': 'azureConfig'
    }

    def __init__(self, name=None, local_config=None, aws_config=None, gcp_config=None, azure_config=None):  # noqa: E501
        """RimeCreateAgentRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._local_config = None
        self._aws_config = None
        self._gcp_config = None
        self._azure_config = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if local_config is not None:
            self.local_config = local_config
        if aws_config is not None:
            self.aws_config = aws_config
        if gcp_config is not None:
            self.gcp_config = gcp_config
        if azure_config is not None:
            self.azure_config = azure_config

    @property
    def name(self):
        """Gets the name of this RimeCreateAgentRequest.  # noqa: E501

        Agent name given by the user.  # noqa: E501

        :return: The name of this RimeCreateAgentRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RimeCreateAgentRequest.

        Agent name given by the user.  # noqa: E501

        :param name: The name of this RimeCreateAgentRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def local_config(self):
        """Gets the local_config of this RimeCreateAgentRequest.  # noqa: E501


        :return: The local_config of this RimeCreateAgentRequest.  # noqa: E501
        :rtype: CreateAgentRequestLocalConfig
        """
        return self._local_config

    @local_config.setter
    def local_config(self, local_config):
        """Sets the local_config of this RimeCreateAgentRequest.


        :param local_config: The local_config of this RimeCreateAgentRequest.  # noqa: E501
        :type: CreateAgentRequestLocalConfig
        """

        self._local_config = local_config

    @property
    def aws_config(self):
        """Gets the aws_config of this RimeCreateAgentRequest.  # noqa: E501


        :return: The aws_config of this RimeCreateAgentRequest.  # noqa: E501
        :rtype: CreateAgentRequestAWSConfig
        """
        return self._aws_config

    @aws_config.setter
    def aws_config(self, aws_config):
        """Sets the aws_config of this RimeCreateAgentRequest.


        :param aws_config: The aws_config of this RimeCreateAgentRequest.  # noqa: E501
        :type: CreateAgentRequestAWSConfig
        """

        self._aws_config = aws_config

    @property
    def gcp_config(self):
        """Gets the gcp_config of this RimeCreateAgentRequest.  # noqa: E501


        :return: The gcp_config of this RimeCreateAgentRequest.  # noqa: E501
        :rtype: CreateAgentRequestGCPConfig
        """
        return self._gcp_config

    @gcp_config.setter
    def gcp_config(self, gcp_config):
        """Sets the gcp_config of this RimeCreateAgentRequest.


        :param gcp_config: The gcp_config of this RimeCreateAgentRequest.  # noqa: E501
        :type: CreateAgentRequestGCPConfig
        """

        self._gcp_config = gcp_config

    @property
    def azure_config(self):
        """Gets the azure_config of this RimeCreateAgentRequest.  # noqa: E501


        :return: The azure_config of this RimeCreateAgentRequest.  # noqa: E501
        :rtype: CreateAgentRequestAzureConfig
        """
        return self._azure_config

    @azure_config.setter
    def azure_config(self, azure_config):
        """Sets the azure_config of this RimeCreateAgentRequest.


        :param azure_config: The azure_config of this RimeCreateAgentRequest.  # noqa: E501
        :type: CreateAgentRequestAzureConfig
        """

        self._azure_config = azure_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeCreateAgentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeCreateAgentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
