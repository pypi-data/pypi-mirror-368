# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestrunresultTestRunDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_run_id': 'str',
        'name': 'str',
        'project_id': 'RimeUUID',
        'testing_type': 'RimeTestType',
        'model_task': 'RimeModelTask',
        'ref_data_id': 'str',
        'eval_data_id': 'str',
        'model_id': 'RimeUUID',
        'upload_time': 'datetime',
        'web_app_url': 'RimeSafeURL',
        'test_categories': 'list[TestrunTestCategoryType]',
        'metrics': 'TestrunresultTestRunMetrics',
        'status': 'RimeTestTaskStatus',
        'progress': 'str',
        'rime_version': 'str',
        'bin_time_interval': 'RimeTimeInterval',
        'ref_data_sampling_pct': 'float',
        'eval_data_sampling_pct': 'float',
        'schedule_id': 'RimeUUID'
    }

    attribute_map = {
        'test_run_id': 'testRunId',
        'name': 'name',
        'project_id': 'projectId',
        'testing_type': 'testingType',
        'model_task': 'modelTask',
        'ref_data_id': 'refDataId',
        'eval_data_id': 'evalDataId',
        'model_id': 'modelId',
        'upload_time': 'uploadTime',
        'web_app_url': 'webAppUrl',
        'test_categories': 'testCategories',
        'metrics': 'metrics',
        'status': 'status',
        'progress': 'progress',
        'rime_version': 'rimeVersion',
        'bin_time_interval': 'binTimeInterval',
        'ref_data_sampling_pct': 'refDataSamplingPct',
        'eval_data_sampling_pct': 'evalDataSamplingPct',
        'schedule_id': 'scheduleId'
    }

    def __init__(self, test_run_id=None, name=None, project_id=None, testing_type=None, model_task=None, ref_data_id=None, eval_data_id=None, model_id=None, upload_time=None, web_app_url=None, test_categories=None, metrics=None, status=None, progress=None, rime_version=None, bin_time_interval=None, ref_data_sampling_pct=None, eval_data_sampling_pct=None, schedule_id=None):  # noqa: E501
        """TestrunresultTestRunDetail - a model defined in Swagger"""  # noqa: E501
        self._test_run_id = None
        self._name = None
        self._project_id = None
        self._testing_type = None
        self._model_task = None
        self._ref_data_id = None
        self._eval_data_id = None
        self._model_id = None
        self._upload_time = None
        self._web_app_url = None
        self._test_categories = None
        self._metrics = None
        self._status = None
        self._progress = None
        self._rime_version = None
        self._bin_time_interval = None
        self._ref_data_sampling_pct = None
        self._eval_data_sampling_pct = None
        self._schedule_id = None
        self.discriminator = None
        if test_run_id is not None:
            self.test_run_id = test_run_id
        if name is not None:
            self.name = name
        if project_id is not None:
            self.project_id = project_id
        if testing_type is not None:
            self.testing_type = testing_type
        if model_task is not None:
            self.model_task = model_task
        if ref_data_id is not None:
            self.ref_data_id = ref_data_id
        if eval_data_id is not None:
            self.eval_data_id = eval_data_id
        if model_id is not None:
            self.model_id = model_id
        if upload_time is not None:
            self.upload_time = upload_time
        if web_app_url is not None:
            self.web_app_url = web_app_url
        if test_categories is not None:
            self.test_categories = test_categories
        if metrics is not None:
            self.metrics = metrics
        if status is not None:
            self.status = status
        if progress is not None:
            self.progress = progress
        if rime_version is not None:
            self.rime_version = rime_version
        if bin_time_interval is not None:
            self.bin_time_interval = bin_time_interval
        if ref_data_sampling_pct is not None:
            self.ref_data_sampling_pct = ref_data_sampling_pct
        if eval_data_sampling_pct is not None:
            self.eval_data_sampling_pct = eval_data_sampling_pct
        if schedule_id is not None:
            self.schedule_id = schedule_id

    @property
    def test_run_id(self):
        """Gets the test_run_id of this TestrunresultTestRunDetail.  # noqa: E501

        Uniquely specifies a Test Run.  # noqa: E501

        :return: The test_run_id of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._test_run_id

    @test_run_id.setter
    def test_run_id(self, test_run_id):
        """Sets the test_run_id of this TestrunresultTestRunDetail.

        Uniquely specifies a Test Run.  # noqa: E501

        :param test_run_id: The test_run_id of this TestrunresultTestRunDetail.  # noqa: E501
        :type: str
        """

        self._test_run_id = test_run_id

    @property
    def name(self):
        """Gets the name of this TestrunresultTestRunDetail.  # noqa: E501

        The name of the Test Run.  # noqa: E501

        :return: The name of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TestrunresultTestRunDetail.

        The name of the Test Run.  # noqa: E501

        :param name: The name of this TestrunresultTestRunDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The project_id of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TestrunresultTestRunDetail.


        :param project_id: The project_id of this TestrunresultTestRunDetail.  # noqa: E501
        :type: RimeUUID
        """

        self._project_id = project_id

    @property
    def testing_type(self):
        """Gets the testing_type of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The testing_type of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: RimeTestType
        """
        return self._testing_type

    @testing_type.setter
    def testing_type(self, testing_type):
        """Sets the testing_type of this TestrunresultTestRunDetail.


        :param testing_type: The testing_type of this TestrunresultTestRunDetail.  # noqa: E501
        :type: RimeTestType
        """

        self._testing_type = testing_type

    @property
    def model_task(self):
        """Gets the model_task of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The model_task of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: RimeModelTask
        """
        return self._model_task

    @model_task.setter
    def model_task(self, model_task):
        """Sets the model_task of this TestrunresultTestRunDetail.


        :param model_task: The model_task of this TestrunresultTestRunDetail.  # noqa: E501
        :type: RimeModelTask
        """

        self._model_task = model_task

    @property
    def ref_data_id(self):
        """Gets the ref_data_id of this TestrunresultTestRunDetail.  # noqa: E501

        Uniquely specifies a reference dataset.  # noqa: E501

        :return: The ref_data_id of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._ref_data_id

    @ref_data_id.setter
    def ref_data_id(self, ref_data_id):
        """Sets the ref_data_id of this TestrunresultTestRunDetail.

        Uniquely specifies a reference dataset.  # noqa: E501

        :param ref_data_id: The ref_data_id of this TestrunresultTestRunDetail.  # noqa: E501
        :type: str
        """

        self._ref_data_id = ref_data_id

    @property
    def eval_data_id(self):
        """Gets the eval_data_id of this TestrunresultTestRunDetail.  # noqa: E501

        Uniquely specifies an evaluation dataset.  # noqa: E501

        :return: The eval_data_id of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._eval_data_id

    @eval_data_id.setter
    def eval_data_id(self, eval_data_id):
        """Sets the eval_data_id of this TestrunresultTestRunDetail.

        Uniquely specifies an evaluation dataset.  # noqa: E501

        :param eval_data_id: The eval_data_id of this TestrunresultTestRunDetail.  # noqa: E501
        :type: str
        """

        self._eval_data_id = eval_data_id

    @property
    def model_id(self):
        """Gets the model_id of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The model_id of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this TestrunresultTestRunDetail.


        :param model_id: The model_id of this TestrunresultTestRunDetail.  # noqa: E501
        :type: RimeUUID
        """

        self._model_id = model_id

    @property
    def upload_time(self):
        """Gets the upload_time of this TestrunresultTestRunDetail.  # noqa: E501

        The upload time of the test run.  # noqa: E501

        :return: The upload_time of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._upload_time

    @upload_time.setter
    def upload_time(self, upload_time):
        """Sets the upload_time of this TestrunresultTestRunDetail.

        The upload time of the test run.  # noqa: E501

        :param upload_time: The upload_time of this TestrunresultTestRunDetail.  # noqa: E501
        :type: datetime
        """

        self._upload_time = upload_time

    @property
    def web_app_url(self):
        """Gets the web_app_url of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The web_app_url of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: RimeSafeURL
        """
        return self._web_app_url

    @web_app_url.setter
    def web_app_url(self, web_app_url):
        """Sets the web_app_url of this TestrunresultTestRunDetail.


        :param web_app_url: The web_app_url of this TestrunresultTestRunDetail.  # noqa: E501
        :type: RimeSafeURL
        """

        self._web_app_url = web_app_url

    @property
    def test_categories(self):
        """Gets the test_categories of this TestrunresultTestRunDetail.  # noqa: E501

        The list of child references to the category tests belonging to this test run.  # noqa: E501

        :return: The test_categories of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: list[TestrunTestCategoryType]
        """
        return self._test_categories

    @test_categories.setter
    def test_categories(self, test_categories):
        """Sets the test_categories of this TestrunresultTestRunDetail.

        The list of child references to the category tests belonging to this test run.  # noqa: E501

        :param test_categories: The test_categories of this TestrunresultTestRunDetail.  # noqa: E501
        :type: list[TestrunTestCategoryType]
        """

        self._test_categories = test_categories

    @property
    def metrics(self):
        """Gets the metrics of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The metrics of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: TestrunresultTestRunMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this TestrunresultTestRunDetail.


        :param metrics: The metrics of this TestrunresultTestRunDetail.  # noqa: E501
        :type: TestrunresultTestRunMetrics
        """

        self._metrics = metrics

    @property
    def status(self):
        """Gets the status of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The status of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: RimeTestTaskStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TestrunresultTestRunDetail.


        :param status: The status of this TestrunresultTestRunDetail.  # noqa: E501
        :type: RimeTestTaskStatus
        """

        self._status = status

    @property
    def progress(self):
        """Gets the progress of this TestrunresultTestRunDetail.  # noqa: E501

        Human-readable succinct message about the progress of the test run.  # noqa: E501

        :return: The progress of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this TestrunresultTestRunDetail.

        Human-readable succinct message about the progress of the test run.  # noqa: E501

        :param progress: The progress of this TestrunresultTestRunDetail.  # noqa: E501
        :type: str
        """

        self._progress = progress

    @property
    def rime_version(self):
        """Gets the rime_version of this TestrunresultTestRunDetail.  # noqa: E501

        The version of Robust Intelligence that ran this test.  # noqa: E501

        :return: The rime_version of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._rime_version

    @rime_version.setter
    def rime_version(self, rime_version):
        """Sets the rime_version of this TestrunresultTestRunDetail.

        The version of Robust Intelligence that ran this test.  # noqa: E501

        :param rime_version: The rime_version of this TestrunresultTestRunDetail.  # noqa: E501
        :type: str
        """

        self._rime_version = rime_version

    @property
    def bin_time_interval(self):
        """Gets the bin_time_interval of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The bin_time_interval of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: RimeTimeInterval
        """
        return self._bin_time_interval

    @bin_time_interval.setter
    def bin_time_interval(self, bin_time_interval):
        """Sets the bin_time_interval of this TestrunresultTestRunDetail.


        :param bin_time_interval: The bin_time_interval of this TestrunresultTestRunDetail.  # noqa: E501
        :type: RimeTimeInterval
        """

        self._bin_time_interval = bin_time_interval

    @property
    def ref_data_sampling_pct(self):
        """Gets the ref_data_sampling_pct of this TestrunresultTestRunDetail.  # noqa: E501

        Percentage of the reference dataset used for this test. If no sampling occurred, this will be 1.0.  # noqa: E501

        :return: The ref_data_sampling_pct of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: float
        """
        return self._ref_data_sampling_pct

    @ref_data_sampling_pct.setter
    def ref_data_sampling_pct(self, ref_data_sampling_pct):
        """Sets the ref_data_sampling_pct of this TestrunresultTestRunDetail.

        Percentage of the reference dataset used for this test. If no sampling occurred, this will be 1.0.  # noqa: E501

        :param ref_data_sampling_pct: The ref_data_sampling_pct of this TestrunresultTestRunDetail.  # noqa: E501
        :type: float
        """

        self._ref_data_sampling_pct = ref_data_sampling_pct

    @property
    def eval_data_sampling_pct(self):
        """Gets the eval_data_sampling_pct of this TestrunresultTestRunDetail.  # noqa: E501

        Percentage of the evaluation dataset used for this test. If no sampling occurred, this will be 1.0.  # noqa: E501

        :return: The eval_data_sampling_pct of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: float
        """
        return self._eval_data_sampling_pct

    @eval_data_sampling_pct.setter
    def eval_data_sampling_pct(self, eval_data_sampling_pct):
        """Sets the eval_data_sampling_pct of this TestrunresultTestRunDetail.

        Percentage of the evaluation dataset used for this test. If no sampling occurred, this will be 1.0.  # noqa: E501

        :param eval_data_sampling_pct: The eval_data_sampling_pct of this TestrunresultTestRunDetail.  # noqa: E501
        :type: float
        """

        self._eval_data_sampling_pct = eval_data_sampling_pct

    @property
    def schedule_id(self):
        """Gets the schedule_id of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The schedule_id of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._schedule_id

    @schedule_id.setter
    def schedule_id(self, schedule_id):
        """Sets the schedule_id of this TestrunresultTestRunDetail.


        :param schedule_id: The schedule_id of this TestrunresultTestRunDetail.  # noqa: E501
        :type: RimeUUID
        """

        self._schedule_id = schedule_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestrunresultTestRunDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestrunresultTestRunDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
