"""ZK-SNARK utilities using PySNARK.

This module provides high level helpers for generating and verifying
zk-SNARK proofs with PySNARK. It includes a simple example proving
knowledge of a SHA-256 preimage. The underlying dependency is optional
and the module gracefully degrades when PySNARK is not installed.
"""
from __future__ import annotations

from typing import Tuple

from ..errors import MissingDependencyError

try:  # pragma: no cover - optional dependency
    from pysnark.runtime import PrivVal, snark, run
    from pysnark.hash import sha256 as snark_sha256
    from pysnark import snarksetup

    ZKSNARK_AVAILABLE = True
except Exception:  # pragma: no cover - library missing
    PrivVal = None  # type: ignore[assignment]
    snark = None  # type: ignore[assignment]
    run = None  # type: ignore[assignment]
    snark_sha256 = None  # type: ignore[assignment]
    snarksetup = None  # type: ignore[assignment]
    ZKSNARK_AVAILABLE = False


def setup() -> None:
    """Run the trusted setup ceremony for PySNARK.

    Raises
    ------
    MissingDependencyError
        If PySNARK is not installed.
    """
    if not ZKSNARK_AVAILABLE:
        raise MissingDependencyError("PySNARK is required for zk-SNARK proofs")
    snarksetup("groth16")


def prove(preimage: bytes) -> Tuple[str, str]:
    """Generate a zk-SNARK proof for a SHA-256 preimage.

    Parameters
    ----------
    preimage:
        Secret byte string whose SHA-256 hash will be made public.

    Returns
    -------
    Tuple[str, str]
        A tuple ``(hash_hex, proof_path)`` containing the hexadecimal digest
        of ``preimage`` and the path to the generated proof file.
    """
    if not ZKSNARK_AVAILABLE:
        raise MissingDependencyError("PySNARK is required for zk-SNARK proofs")

    secret = PrivVal(int.from_bytes(preimage, "big"))
    digest_bits = snark_sha256(secret)
    digest = int(digest_bits.val).to_bytes(32, "big")
    hash_hex = digest.hex()
    proof_path = snark.prove()
    return hash_hex, proof_path


def verify(hash_hex: str, proof_path: str) -> bool:
    """Verify a zk-SNARK proof.

    Parameters
    ----------
    hash_hex:
        Hexadecimal digest that was proved.
    proof_path:
        Path to the proof file generated by :func:`prove`.

    Returns
    -------
    bool
        ``True`` if the proof is valid, ``False`` otherwise.
    """
    if not ZKSNARK_AVAILABLE:
        raise MissingDependencyError("PySNARK is required for zk-SNARK proofs")
    return run.verify(hash_hex, proof_path)
