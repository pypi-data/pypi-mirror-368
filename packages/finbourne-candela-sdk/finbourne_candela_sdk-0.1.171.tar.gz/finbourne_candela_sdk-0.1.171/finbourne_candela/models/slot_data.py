# coding: utf-8

"""
    FINBOURNE Candela Platform Web API

    FINBOURNE Technology  # noqa: E501

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr 
from finbourne_candela.models.slot_state import SlotState

class SlotData(BaseModel):
    """
    SlotData
    """
    slot_id:  StrictStr = Field(...,alias="slot_id") 
    slot_type:  StrictStr = Field(...,alias="slot_type") 
    domain:  StrictStr = Field(...,alias="domain") 
    state: Optional[SlotState] = None
    assigned_to:  Optional[StrictStr] = Field(None,alias="assigned_to") 
    url:  Optional[StrictStr] = Field(None,alias="url") 
    created: Optional[datetime] = None
    assigned: Optional[datetime] = None
    disposed: Optional[datetime] = None
    ready: Optional[datetime] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["slot_id", "slot_type", "domain", "state", "assigned_to", "url", "created", "assigned", "disposed", "ready"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SlotData:
        """Create an instance of SlotData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if assigned_to (nullable) is None
        # and __fields_set__ contains the field
        if self.assigned_to is None and "assigned_to" in self.__fields_set__:
            _dict['assigned_to'] = None

        # set to None if url (nullable) is None
        # and __fields_set__ contains the field
        if self.url is None and "url" in self.__fields_set__:
            _dict['url'] = None

        # set to None if created (nullable) is None
        # and __fields_set__ contains the field
        if self.created is None and "created" in self.__fields_set__:
            _dict['created'] = None

        # set to None if assigned (nullable) is None
        # and __fields_set__ contains the field
        if self.assigned is None and "assigned" in self.__fields_set__:
            _dict['assigned'] = None

        # set to None if disposed (nullable) is None
        # and __fields_set__ contains the field
        if self.disposed is None and "disposed" in self.__fields_set__:
            _dict['disposed'] = None

        # set to None if ready (nullable) is None
        # and __fields_set__ contains the field
        if self.ready is None and "ready" in self.__fields_set__:
            _dict['ready'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SlotData:
        """Create an instance of SlotData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SlotData.parse_obj(obj)

        _obj = SlotData.parse_obj({
            "slot_id": obj.get("slot_id"),
            "slot_type": obj.get("slot_type"),
            "domain": obj.get("domain"),
            "state": obj.get("state"),
            "assigned_to": obj.get("assigned_to"),
            "url": obj.get("url"),
            "created": obj.get("created"),
            "assigned": obj.get("assigned"),
            "disposed": obj.get("disposed"),
            "ready": obj.get("ready")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
