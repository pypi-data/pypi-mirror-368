from _typeshed import Incomplete
from abc import ABC
from dependency.core.declaration import Component, Provider
from typing import Callable

class Module(ABC):
    module_cls: Incomplete
    imports: Incomplete
    declaration: Incomplete
    bootstrap: Incomplete
    def __init__(self, module_cls: type, imports: list['Module'], declaration: list[Component], bootstrap: list[Component]) -> None: ...
    def declare_providers(self) -> None: ...
    @property
    def modules(self) -> list['Module']: ...
    @property
    def providers(self) -> list[Provider]: ...
    @property
    def bootstraps(self) -> list[Component]: ...
    def init_providers(self) -> list[Provider]: ...
    def init_bootstrap(self) -> None: ...

def module(imports: list[type[Module]] = [], declaration: list[type[Component]] = [], bootstrap: list[type[Component]] = []) -> Callable[[type[Module]], Module]: ...
