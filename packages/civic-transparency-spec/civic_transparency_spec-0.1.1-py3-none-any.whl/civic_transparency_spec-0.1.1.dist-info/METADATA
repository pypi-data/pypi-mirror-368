Metadata-Version: 2.4
Name: civic-transparency-spec
Version: 0.1.1
Summary: Civic Transparency specification schemas (JSON Schema Draft-07)
Author: Civic Interconnect
License: MIT License
        
        Copyright (c) 2025 Civic Interconnect
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the “Software”), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in
        all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
        THE SOFTWARE.
        
Project-URL: Homepage, https://github.com/civic-interconnect/civic-transparency-spec
Project-URL: Repository, https://github.com/civic-interconnect/civic-transparency-spec
Project-URL: Documentation, https://civic-interconnect.github.io/civic-transparency-spec/latest/
Keywords: civic,transparency,jsonschema,specification
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Topic :: Software Development :: Libraries
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: docs
Requires-Dist: mkdocs; extra == "docs"
Requires-Dist: mkdocs-material; extra == "docs"
Requires-Dist: mkdocs-static-i18n; extra == "docs"
Requires-Dist: mkdocs-include-markdown-plugin; extra == "docs"
Requires-Dist: mkdocs-git-revision-date-localized-plugin; extra == "docs"
Requires-Dist: mkdocs-minify-plugin; extra == "docs"
Requires-Dist: mike; extra == "docs"
Provides-Extra: test
Requires-Dist: pytest; extra == "test"
Requires-Dist: pytest-cov; extra == "test"
Provides-Extra: lint
Requires-Dist: ruff; extra == "lint"
Provides-Extra: build
Requires-Dist: build; extra == "build"
Provides-Extra: validate
Requires-Dist: jsonschema; extra == "validate"
Requires-Dist: openapi-spec-validator; extra == "validate"
Provides-Extra: dev
Requires-Dist: mkdocs; extra == "dev"
Requires-Dist: mkdocs-material; extra == "dev"
Requires-Dist: mkdocs-static-i18n; extra == "dev"
Requires-Dist: mkdocs-include-markdown-plugin; extra == "dev"
Requires-Dist: mkdocs-git-revision-date-localized-plugin; extra == "dev"
Requires-Dist: mkdocs-minify-plugin; extra == "dev"
Requires-Dist: mike; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: ruff; extra == "dev"
Requires-Dist: build; extra == "dev"
Requires-Dist: jsonschema; extra == "dev"
Requires-Dist: openapi-spec-validator; extra == "dev"
Dynamic: license-file

# Civic Transparency – Specifications

[![Docs](https://img.shields.io/badge/docs-mkdocs--material-blue)](https://civic-interconnect.github.io/civic-transparency-spec/)
[![PyPI](https://img.shields.io/pypi/v/civic-transparency-spec.svg)](https://pypi.org/project/civic-transparency-spec/)
[![Python 3.11](https://img.shields.io/badge/python-3.11-blue?logo=python)](#)
[![CI Status](https://github.com/civic-interconnect/civic-transparency-spec/actions/workflows/ci.yml/badge.svg?branch=main
)](https://github.com/civic-interconnect/civic-transparency-spec/actions/workflows/ci.yml)
[![JSON Schema: Draft-07](https://img.shields.io/badge/JSON%20Schema-Draft--07-orange)](#)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](./LICENSE)

> **Verified Provenance & Behavior Transparency Standard**

> Civic Transparency is an open specification for privacy-preserving, non-partisan visibility into how content spreads online.
> It defines machine-readable provenance tags and aggregated behavioral metrics that platforms can expose via a low-cost API, enabling journalists, watchdogs, and civic groups to detect coordination patterns and automation without exposing personal data or judging content.

> Maintained by **[Civic Interconnect](https://github.com/civic-interconnect)**.

- [Documentation](https://civic-interconnect.github.io/civic-transparency-spec/)
- [Schemas](./specs/schema_index.md)
- [Contributing](./CONTRIBUTING.md)

---

## Install

```bash
pip install civic-transparency-spec
```

---

## Install (Unpinned or Pinned Version)

Choose one:

```bash
pip install civic-transparency-spec
pip install civic-transparency-spec==0.0.2
```

## Quick start (validate with JSON Schema)

The package ships the normative Draft-07 schemas.
Load them from the package and validate your data:

```python
from importlib.resources import files
import json
from jsonschema import Draft7Validator

# Load a schema (SeriesDoc shown here). Available files:
#   meta.schema.json, provenance_tag.schema.json, run.schema.json, scenario.schema.json, series.schema.json
schema_text = files("ci.transparency.spec.schemas").joinpath("series.schema.json").read_text(encoding="utf-8")
series_schema = json.loads(schema_text)

# Validate your payload (raises jsonschema.ValidationError if invalid)
Draft7Validator.check_schema(series_schema)  # optional: sanity check the schema itself
payload = {
    "topic": "#CityElection2026",
    "generated_at": "2026-02-07T00:00:00Z",
    "interval": "minute",
    "points": []
}
Draft7Validator(series_schema).validate(payload)
print("Success: Valid SeriesDoc")
```

List all bundled schemas:

```python
from importlib.resources import files
print([p.name for p in files("ci.transparency.spec.schemas").iterdir()])
```

## OpenAPI

The HTTP interface is documented on the docs site.
Response bodies should validate against the JSON Schemas above.  
See: [Transparency API](https://civic-interconnect.github.io/civic-transparency-spec/specs/transparency_api/)

## Notes

- Target Python: **3.11** (CI runs on 3.11).
- Schemas: **JSON Schema Draft-07**; OpenAPI: **3.1**.
- This repo is a **specification**; the primary artifacts are schemas + documentation.

---

## About

Civic Transparency is an open specification for privacy-preserving, non-partisan visibility into **how** content spreads online (not what it says). 
 
