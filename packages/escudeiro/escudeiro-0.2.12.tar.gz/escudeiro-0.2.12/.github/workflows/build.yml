
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build:
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12, 3.13]
        compatibility: [manylinux_2_17, manylinux_2_28, manylinux_2_34]
        target: [x86_64-unknown-linux-gnu]
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv and maturin
        run: |
          pip install uv maturin

      - name: Build wheel
        run: |
          uv run --isolated --python "${{ matrix.python-version }}" maturin build \
            --release \
            --target "${{ matrix.target }}" \
            --compatibility "${{ matrix.compatibility }}" \
            --zig

      - name: Build sdist
        if: matrix.compatibility == 'manylinux_2_34'
        run: |
          uv run --isolated --python "${{ matrix.python-version }}" maturin build \
            --target "${{ matrix.target }}" \
            --release \
            --sdist

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: target/wheels/*

      - name: Publish to PyPI
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          maturin upload --username __token__ --password $MATURIN_PYPI_TOKEN target/wheels/*

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12, 3.13]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install tox and uv
        run: pip install tox uv

      - name: Sync dependencies
        run: uv sync --all-extras

      - name: Run tests with tox
        run: tox p

  musllinux-build:
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12, 3.13]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build musllinux image
        run: |
          docker build -f ./docker/musllinux.dockerfile --build-arg PYVER=${{ matrix.python-version }} -t escudeiro-musllinux:${{ matrix.python-version }} .

      - name: Run musllinux container
        run: |
          mkdir -p ./musllinux/target
          docker run --rm -v ${{ github.workspace }}/musllinux/target:/musllinux/target escudeiro-musllinux:${{ matrix.python-version }}

      - name: Upload musllinux wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: musllinux-wheels
          path: musllinux/target/*

      - name: Publish musllinux wheels to PyPI
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          maturin upload --username __token__ --password $MATURIN_PYPI_TOKEN musllinux/target/*

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12, 3.13]
        compatibility: [manylinux_2_17, manylinux_2_28, manylinux_2_34]
        target: [x86_64-unknown-linux-gnu]
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv and maturin
        run: |
          pip install uv maturin

      - name: Build wheel
        run: |
          uv run --isolated --python "${{ matrix.python-version }}" maturin build \
            --release \
            --target "${{ matrix.target }}" \
            --compatibility "${{ matrix.compatibility }}" \
            --zig

      - name: Build sdist
        if: matrix.compatibility == 'manylinux_2_34'
        run: |
          uv run --isolated --python "${{ matrix.python-version }}" maturin build \
            --target "${{ matrix.target }}" \
            --release \
            --sdist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: target/wheels/*
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12, 3.13]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install tox and uv
        run: pip install tox uv

      - name: Sync dependencies
        run: uv sync --all-extras

      - name: Run tests with tox
        run: tox p

  musllinux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12, 3.13]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build musllinux image
        run: |
          docker build -f ./docker/musllinux.dockerfile --build-arg PYVER=${{ matrix.python-version }} -t escudeiro-musllinux:${{ matrix.python-version }} .

      - name: Run musllinux container
        run: |
          mkdir -p ./musllinux/target
          docker run --rm -v ${{ github.workspace }}/musllinux/target:/musllinux/target escudeiro-musllinux:${{ matrix.python-version }}
