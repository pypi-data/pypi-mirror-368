"""Accessibility utilities for Tailwind CSS"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utilities/accessibility.ipynb.

# %% auto 0
__all__ = ['FORCED_COLOR_ADJUST_VALUES', 'forced_color_adjust', 'test_accessibility_forced_color_adjust_examples',
           'test_accessibility_screen_reader_examples', 'test_accessibility_practical_examples',
           'test_accessibility_factory_documentation', 'visually_hidden', 'high_contrast_safe',
           'test_accessibility_helper_examples']

# %% ../../nbs/utilities/accessibility.ipynb 3
from typing import Dict, Any
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from ..builders.scales import SimpleFactory

# %% ../../nbs/utilities/accessibility.ipynb 5
# Forced color adjust utilities
FORCED_COLOR_ADJUST_VALUES = {
    "auto": "forced-color-adjust-auto",
    "none": "forced-color-adjust-none"
}

# Create forced color adjust factory
forced_color_adjust = SimpleFactory(
    FORCED_COLOR_ADJUST_VALUES, 
    "Forced color adjust utilities for opting in and out of forced colors (e.g., Windows High Contrast Mode)"
) # The forced color adjust factory

# %% ../../nbs/utilities/accessibility.ipynb 6
def test_accessibility_forced_color_adjust_examples(
):
    """Test forced color adjust utilities."""
    # Test forced color adjust utilities with dot notation
    assert str(forced_color_adjust.auto) == "forced-color-adjust-auto"
    assert str(forced_color_adjust.none) == "forced-color-adjust-none"

# Run the tests
test_accessibility_forced_color_adjust_examples()

# %% ../../nbs/utilities/accessibility.ipynb 8
# Import screen reader utilities from layout module
from .layout import sr_only, not_sr_only

# %% ../../nbs/utilities/accessibility.ipynb 9
def test_accessibility_screen_reader_examples(
):
    """Test screen reader utilities imported from layout module."""
    # Test screen reader utilities
    assert str(sr_only) == "sr-only"
    assert str(not_sr_only) == "not-sr-only"

# Run the tests
test_accessibility_screen_reader_examples()

# %% ../../nbs/utilities/accessibility.ipynb 11
def test_accessibility_practical_examples(
):
    """Test accessibility utilities in practical FastHTML component examples."""
    from fasthtml.common import Div, Button, Span, Input, Label, Nav, A
    from cjm_fasthtml_tailwind.utilities.layout import position, top, left, display_tw
    from cjm_fasthtml_tailwind.utilities.backgrounds import bg
    from cjm_fasthtml_tailwind.utilities.spacing import p
    from cjm_fasthtml_tailwind.utilities.borders import rounded, border, border_color
    from cjm_fasthtml_tailwind.utilities.sizing import w, h
    from cjm_fasthtml_tailwind.utilities.typography import text
    from cjm_fasthtml_tailwind.utilities.transitions_and_animation import animate
    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, items
    from cjm_fasthtml_tailwind.core.base import combine_classes
    from cjm_fasthtml_tailwind.utilities.layout import sr_only, not_sr_only
    from cjm_fasthtml_tailwind.utilities.accessibility import forced_color_adjust
    
    # Skip link for keyboard navigation
    skip_link = A(
        "Skip to main content",
        href="#main-content",
        cls=combine_classes(
            sr_only,
            not_sr_only.focus,
            position.absolute.focus,
            top(4).focus,
            left(4).focus,
            bg.white,
            p(2),
            rounded.full
        )
    )
    assert "sr-only" in skip_link.attrs['class']
    assert "focus:not-sr-only" in skip_link.attrs['class']
    
    # Form with screen reader only label
    form_field = Div(
        Label("Search", cls=str(sr_only), for_="search"),
        Input(
            type="search",
            id="search",
            placeholder="Search...",
            cls=combine_classes(w.full, p.x(4), p.y(2), border._1, rounded.full)
        )
    )
    assert form_field.children[0].attrs['class'] == "sr-only"
    
    # Icon button with screen reader text
    icon_button = Button(
        # Icon would go here (e.g., SVG)
        Span("Close dialog", cls=str(sr_only)),
        cls=combine_classes(p(2), rounded.full, bg.gray._100.hover),
        aria_label="Close dialog"
    )
    assert icon_button.children[0].attrs['class'] == "sr-only"
    
    # Navigation with forced color adjustments
    high_contrast_nav = Nav(
        A("Home", href="/", cls=combine_classes(forced_color_adjust.none, text.blue._600)),
        A("About", href="/about", cls=combine_classes(forced_color_adjust.none, text.blue._600)),
        A("Contact", href="/contact", cls=combine_classes(forced_color_adjust.none, text.blue._600)),
        cls=combine_classes(forced_color_adjust.auto, display_tw.flex, gap(4))
    )
    assert high_contrast_nav.attrs['class'] == "forced-color-adjust-auto flex gap-4"
    assert "forced-color-adjust-none" in high_contrast_nav.children[0].attrs['class']
    
    # Loading spinner with screen reader text
    loading_spinner = Div(
        Div(cls=combine_classes(
            animate.spin,
            h(5),
            w(5),
            border._2,
            border_color.gray._900,
            rounded.full,
            border_color.t.transparent
        )),
        Span("Loading...", cls=str(sr_only)),
        cls=combine_classes(display_tw.inline_flex, items.center)
    )
    assert loading_spinner.children[1].attrs['class'] == "sr-only"

# Run the tests
test_accessibility_practical_examples()

# %% ../../nbs/utilities/accessibility.ipynb 13
def test_accessibility_factory_documentation(
):
    """Test that factories have accessible documentation."""
    # Test factory documentation
    assert forced_color_adjust.describe() == "Forced color adjust utilities for opting in and out of forced colors (e.g., Windows High Contrast Mode)"
    
    # Test SingleValueFactory documentation for imported utilities
    assert sr_only.describe() == "Hide element visually but keep it available to screen readers"
    assert not_sr_only.describe() == "Undo sr-only, making element visible again"
    
    # Test get_info method
    info = forced_color_adjust.get_info()
    assert info['description'] == "Forced color adjust utilities for opting in and out of forced colors (e.g., Windows High Contrast Mode)"
    assert 'available_values' in info['options']
    assert 'auto' in info['options']['available_values']
    assert 'none' in info['options']['available_values']

# Run the tests
test_accessibility_factory_documentation()

# %% ../../nbs/utilities/accessibility.ipynb 15
def visually_hidden(
    focusable: bool = False  # Whether the element should be visible when focused
) -> str:  # CSS classes for hiding element visually
    """
    Hide an element visually but keep it available to screen readers.
    
    Args:
        focusable: If True, element becomes visible when focused (useful for skip links)
    
    Returns:
        CSS classes for visual hiding with optional focus visibility
    """
    if focusable:
        return combine_classes(sr_only, "focus:not-sr-only")
    return str(sr_only)

# %% ../../nbs/utilities/accessibility.ipynb 16
def high_contrast_safe(
    *classes: str  # Additional CSS classes to combine
) -> str:  # CSS classes including forced color adjust
    """
    Create classes that work well with high contrast mode.
    
    Args:
        *classes: Additional CSS classes to include
    
    Returns:
        Combined CSS classes with forced-color-adjust-auto
    """
    return combine_classes(forced_color_adjust.auto, *classes)

# %% ../../nbs/utilities/accessibility.ipynb 17
def test_accessibility_helper_examples(
):
    """Test helper functions for common accessibility patterns."""
    # Test visually_hidden helper
    assert visually_hidden() == "sr-only"
    assert visually_hidden(focusable=True) == "sr-only focus:not-sr-only"
    
    # Test high_contrast_safe helper
    assert high_contrast_safe() == "forced-color-adjust-auto"
    assert high_contrast_safe("bg-blue-500", "text-white") == "forced-color-adjust-auto bg-blue-500 text-white"

# Run the tests
test_accessibility_helper_examples()
