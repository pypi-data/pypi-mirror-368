"""Typography utilities for Tailwind CSS"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utilities/typography.ipynb.

# %% auto 0
__all__ = ['font', 'TEXT_SIZE_CONFIG', 'text', 'antialiased', 'subpixel_antialiased', 'italic', 'not_italic', 'font_stretch',
           'normal_nums', 'ordinal', 'slashed_zero', 'lining_nums', 'oldstyle_nums', 'proportional_nums',
           'tabular_nums', 'diagonal_fractions', 'stacked_fractions', 'TRACKING_CONFIG', 'tracking',
           'LINE_CLAMP_CONFIG', 'line_clamp', 'LEADING_CONFIG', 'leading', 'list_image', 'list_position', 'list_style',
           'text_align', 'underline', 'overline', 'line_through', 'no_underline', 'decoration', 'decoration_style',
           'DECORATION_THICKNESS_CONFIG', 'decoration_thickness', 'UNDERLINE_OFFSET_CONFIG', 'underline_offset',
           'uppercase', 'lowercase', 'capitalize', 'normal_case', 'truncate', 'text_ellipsis', 'text_clip', 'text_wrap',
           'text_nowrap', 'text_balance', 'text_pretty', 'indent', 'align', 'whitespace', 'break_normal', 'break_all',
           'break_keep', 'wrap_break_word', 'wrap_anywhere', 'wrap_normal', 'hyphens', 'content',
           'test_typography_font_family_examples', 'test_typography_font_size_examples',
           'test_typography_font_smoothing_examples', 'test_typography_font_style_examples', 'FontFactory',
           'test_typography_font_weight_examples', 'test_typography_font_stretch_examples',
           'test_typography_font_variant_numeric_examples', 'test_typography_spacing_examples', 'LineClampFactory',
           'test_typography_line_clamp_examples', 'LeadingFactory', 'test_typography_line_height_examples',
           'ListImageUtility', 'ListImageFactory', 'test_typography_list_image_examples',
           'test_typography_list_styles_examples', 'test_typography_text_alignment_examples', 'TextFactory',
           'test_typography_text_color_examples', 'test_typography_text_decoration_examples',
           'test_typography_underline_offset_examples', 'test_typography_text_transform_examples',
           'test_typography_text_overflow_examples', 'test_typography_text_wrap_examples',
           'test_typography_text_indent_examples', 'test_typography_vertical_align_examples',
           'test_typography_whitespace_examples', 'test_typography_word_break_examples',
           'test_typography_overflow_wrap_examples', 'test_typography_hyphens_examples', 'ContentUtility',
           'ContentFactory', 'test_typography_content_examples', 'test_typography_practical_examples',
           'test_typography_factory_documentation']

# %% ../../nbs/utilities/typography.ipynb 3
from typing import Optional, Union, Dict, Any, List
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, BaseFactory, BaseUtility, StandardUtility,
    combine_classes, TailwindValue, NamedScale
)
from ..builders.colors import ColoredFactory, ColorValue
from cjm_fasthtml_tailwind.builders.scales import (
    SimpleFactory, ScaledFactory, ScaleConfig, DirectionalScaledFactory, SPACING_CONFIG, NUMERIC_SCALE
)

# %% ../../nbs/utilities/typography.ipynb 5
font = SimpleFactory(
    {
        "sans": "font-sans",
        "serif": "font-serif",
        "mono": "font-mono"
    },
    "Font family utilities for controlling the font stack of an element"
) # Font family factory

# %% ../../nbs/utilities/typography.ipynb 6
def test_typography_font_family_examples():
    """Test font family utilities."""
    assert str(font.sans) == "font-sans"
    assert str(font.serif) == "font-serif"
    assert str(font.mono) == "font-mono"

# Run the tests
test_typography_font_family_examples()

# %% ../../nbs/utilities/typography.ipynb 8
# Font size with line height config
TEXT_SIZE_CONFIG = ScaleConfig(
    numeric=False,
    decimals=False,
    fractions=False,
    named=[
        NamedScale("xs", "--text-xs", "0.75rem (12px)"),
        NamedScale("sm", "--text-sm", "0.875rem (14px)"),
        NamedScale("base", "--text-base", "1rem (16px)"),
        NamedScale("lg", "--text-lg", "1.125rem (18px)"),
        NamedScale("xl", "--text-xl", "1.25rem (20px)"),
        NamedScale("2xl", "--text-2xl", "1.5rem (24px)"),
        NamedScale("3xl", "--text-3xl", "1.875rem (30px)"),
        NamedScale("4xl", "--text-4xl", "2.25rem (36px)"),
        NamedScale("5xl", "--text-5xl", "3rem (48px)"),
        NamedScale("6xl", "--text-6xl", "3.75rem (60px)"),
        NamedScale("7xl", "--text-7xl", "4.5rem (72px)"),
        NamedScale("8xl", "--text-8xl", "6rem (96px)"),
        NamedScale("9xl", "--text-9xl", "8rem (128px)")
    ],
    special={},
    negative=False
)

text = ScaledFactory("text", TEXT_SIZE_CONFIG, "Font size utilities that also set default line heights") # Font size factory

# %% ../../nbs/utilities/typography.ipynb 9
def test_typography_font_size_examples():
    """Test font size utilities."""
    assert str(text.xs) == "text-xs"
    assert str(text.sm) == "text-sm"
    assert str(text.base) == "text-base"
    assert str(text.lg) == "text-lg"
    assert str(text.xl) == "text-xl"
    assert str(text._2xl) == "text-2xl"
    assert str(text._3xl) == "text-3xl"
    assert str(text._4xl) == "text-4xl"
    assert str(text._5xl) == "text-5xl"
    assert str(text._6xl) == "text-6xl"
    assert str(text._7xl) == "text-7xl"
    assert str(text._8xl) == "text-8xl"
    assert str(text._9xl) == "text-9xl"
    
    # Arbitrary values
    assert str(text("10px")) == "text-[10px]"
    assert str(text("1.5rem")) == "text-[1.5rem]"
    assert str(text("--custom-size")) == "text-(--custom-size)"

# Run the tests
test_typography_font_size_examples()

# %% ../../nbs/utilities/typography.ipynb 11
antialiased = SingleValueFactory("antialiased", "Applies antialiased font smoothing") # Antialiased font smoothing
subpixel_antialiased = SingleValueFactory("subpixel-antialiased", "Applies subpixel antialiased font smoothing") # Subpixel antialiased font smoothing

# %% ../../nbs/utilities/typography.ipynb 12
def test_typography_font_smoothing_examples():
    """Test font smoothing utilities."""
    assert str(antialiased) == "antialiased"
    assert str(subpixel_antialiased) == "subpixel-antialiased"

# Run the tests
test_typography_font_smoothing_examples()

# %% ../../nbs/utilities/typography.ipynb 14
italic = SingleValueFactory("italic", "Sets font style to italic") # Italic font style
not_italic = SingleValueFactory("not-italic", "Sets font style to normal") # Normal font style

# %% ../../nbs/utilities/typography.ipynb 15
def test_typography_font_style_examples():
    """Test font style utilities."""
    assert str(italic) == "italic"
    assert str(not_italic) == "not-italic"

# Run the tests
test_typography_font_style_examples()

# %% ../../nbs/utilities/typography.ipynb 17
# Enhanced font factory that handles both family and weight
class FontFactory(BaseFactory):
    """Factory for font utilities including family and weight."""
    
    def __init__(self):
        """Initialize font factory with families and weights."""
        super().__init__("Font utilities for family and weight control")
        
        # Font families
        self.sans = "font-sans"
        self.serif = "font-serif"
        self.mono = "font-mono"
        
        # Font weights
        self.thin = "font-thin"
        self.extralight = "font-extralight"
        self.light = "font-light"
        self.normal = "font-normal"
        self.medium = "font-medium"
        self.semibold = "font-semibold"
        self.bold = "font-bold"
        self.extrabold = "font-extrabold"
        self.black = "font-black"
    
    def __call__(
        self,
        value: Union[int, str]  # Font weight number (100-900) or arbitrary value
    ) -> str:  # The font class string
        """Create font weight with numeric or arbitrary value."""
        if isinstance(value, int) and 100 <= value <= 900:
            return f"font-[{value}]"
        elif isinstance(value, str):
            # Handle custom properties
            if value.startswith("--"):
                return f"font-({value})"
            else:
                return f"font-[{value}]"
        return f"font-[{value}]"
    
    def get_info(
        self
    ) -> Dict[str, Any]:  # Factory information
        """Get information about the font factory."""
        return {
            'description': self._doc,
            'valid_inputs': {
                'families': ['sans', 'serif', 'mono'],
                'weights': {
                    'thin': '100',
                    'extralight': '200',
                    'light': '300',
                    'normal': '400',
                    'medium': '500',
                    'semibold': '600',
                    'bold': '700',
                    'extrabold': '800',
                    'black': '900'
                },
                'numeric': 'Any value from 100-900',
                'custom_properties': '--font-weight-name',
                'arbitrary': 'Any valid CSS font-weight value'
            }
        }

# Create the enhanced font factory
font = FontFactory() # Enhanced font factory for family and weight

# %% ../../nbs/utilities/typography.ipynb 18
def test_typography_font_weight_examples():
    """Test font weight utilities."""
    # Named weights
    assert font.thin == "font-thin"
    assert font.extralight == "font-extralight"
    assert font.light == "font-light"
    assert font.normal == "font-normal"
    assert font.medium == "font-medium"
    assert font.semibold == "font-semibold"
    assert font.bold == "font-bold"
    assert font.extrabold == "font-extrabold"
    assert font.black == "font-black"
    
    # Numeric weights
    assert font(100) == "font-[100]"
    assert font(400) == "font-[400]"
    assert font(700) == "font-[700]"
    assert font(900) == "font-[900]"
    
    # Custom properties
    assert font("--custom-weight") == "font-(--custom-weight)"
    
    # Arbitrary values
    assert font("lighter") == "font-[lighter]"
    assert font("bolder") == "font-[bolder]"

# Run the tests
test_typography_font_weight_examples()

# %% ../../nbs/utilities/typography.ipynb 20
font_stretch = SimpleFactory(
    {
        "ultra_condensed": "font-stretch-ultra-condensed",
        "extra_condensed": "font-stretch-extra-condensed",
        "condensed": "font-stretch-condensed",
        "semi_condensed": "font-stretch-semi-condensed",
        "normal": "font-stretch-normal",
        "semi_expanded": "font-stretch-semi-expanded",
        "expanded": "font-stretch-expanded",
        "extra_expanded": "font-stretch-extra-expanded",
        "ultra_expanded": "font-stretch-ultra-expanded"
    },
    "Font stretch utilities for controlling the width of a font face"
) # Font stretch factory

# %% ../../nbs/utilities/typography.ipynb 21
def test_typography_font_stretch_examples():
    """Test font stretch utilities."""
    assert str(font_stretch.ultra_condensed) == "font-stretch-ultra-condensed"
    assert str(font_stretch.extra_condensed) == "font-stretch-extra-condensed"
    assert str(font_stretch.condensed) == "font-stretch-condensed"
    assert str(font_stretch.semi_condensed) == "font-stretch-semi-condensed"
    assert str(font_stretch.normal) == "font-stretch-normal"
    assert str(font_stretch.semi_expanded) == "font-stretch-semi-expanded"
    assert str(font_stretch.expanded) == "font-stretch-expanded"
    assert str(font_stretch.extra_expanded) == "font-stretch-extra-expanded"
    assert str(font_stretch.ultra_expanded) == "font-stretch-ultra-expanded"

# Run the tests
test_typography_font_stretch_examples()

# %% ../../nbs/utilities/typography.ipynb 25
# Font variant numeric utilities
normal_nums = SingleValueFactory("normal-nums", "Normal numeric font variant") # Normal numbers
ordinal = SingleValueFactory("ordinal", "Ordinal numeric markers") # Ordinal numbers
slashed_zero = SingleValueFactory("slashed-zero", "Force zero with slash") # Slashed zero
lining_nums = SingleValueFactory("lining-nums", "Lining figures") # Lining numbers
oldstyle_nums = SingleValueFactory("oldstyle-nums", "Old-style figures") # Old-style numbers
proportional_nums = SingleValueFactory("proportional-nums", "Proportional figures") # Proportional numbers
tabular_nums = SingleValueFactory("tabular-nums", "Tabular figures") # Tabular numbers
diagonal_fractions = SingleValueFactory("diagonal-fractions", "Diagonal fractions") # Diagonal fractions
stacked_fractions = SingleValueFactory("stacked-fractions", "Stacked fractions") # Stacked fractions

# %% ../../nbs/utilities/typography.ipynb 26
def test_typography_font_variant_numeric_examples():
    """Test font variant numeric utilities."""
    assert str(normal_nums) == "normal-nums"
    assert str(ordinal) == "ordinal"
    assert str(slashed_zero) == "slashed-zero"
    assert str(lining_nums) == "lining-nums"
    assert str(oldstyle_nums) == "oldstyle-nums"
    assert str(proportional_nums) == "proportional-nums"
    assert str(tabular_nums) == "tabular-nums"
    assert str(diagonal_fractions) == "diagonal-fractions"
    assert str(stacked_fractions) == "stacked-fractions"

# Run the tests
test_typography_font_variant_numeric_examples()

# %% ../../nbs/utilities/typography.ipynb 30
# Letter spacing config
TRACKING_CONFIG = ScaleConfig(
    numeric=False,
    decimals=False,
    fractions=False,
    named=[
        NamedScale("tighter", "--tracking-tighter", "-0.05em"),
        NamedScale("tight", "--tracking-tight", "-0.025em"),
        NamedScale("normal", "--tracking-normal", "0em"),
        NamedScale("wide", "--tracking-wide", "0.025em"),
        NamedScale("wider", "--tracking-wider", "0.05em"),
        NamedScale("widest", "--tracking-widest", "0.1em")
    ],
    special={},
    negative=False
)

tracking = ScaledFactory("tracking", TRACKING_CONFIG, "Letter spacing utilities for controlling tracking") # Letter spacing factory

# %% ../../nbs/utilities/typography.ipynb 31
def test_typography_spacing_examples():
    """Test letter spacing utilities."""
    # Letter spacing
    assert str(tracking.tighter) == "tracking-tighter"
    assert str(tracking.tight) == "tracking-tight"
    assert str(tracking.normal) == "tracking-normal"
    assert str(tracking.wide) == "tracking-wide"
    assert str(tracking.wider) == "tracking-wider"
    assert str(tracking.widest) == "tracking-widest"
    assert str(tracking("0.05em")) == "tracking-[0.05em]"
    assert str(tracking("--custom-tracking")) == "tracking-(--custom-tracking)"

# Run the tests
test_typography_spacing_examples()

# %% ../../nbs/utilities/typography.ipynb 33
# Line clamp config - numeric values for number of lines
LINE_CLAMP_CONFIG = ScaleConfig(
    numeric=True,  # 1-6 are valid
    decimals=False,
    fractions=False,
    named=None,
    special={
        "none": "none"
    },
    negative=False
)

# Custom line clamp factory
class LineClampFactory(ScaledFactory):
    """Factory for line clamp utilities."""
    
    def __call__(
        self,
        value: Optional[TailwindValue] = None,  # Number of lines to clamp
        negative: bool = False  # Not used
    ) -> StandardUtility:  # A utility instance
        """Create line clamp utility."""
        # For numeric values, only common ones are 1-6
        if isinstance(value, int) and value > 6:
            # Treat as arbitrary value
            return super().__call__(f"[{value}]", negative)
        return super().__call__(value, negative)

line_clamp = LineClampFactory("line-clamp", LINE_CLAMP_CONFIG, "Line clamp utilities for limiting text lines") # Line clamp factory

# %% ../../nbs/utilities/typography.ipynb 34
def test_typography_line_clamp_examples():
    """Test line clamp utilities."""
        
    # Line clamp
    assert str(line_clamp.none) == "line-clamp-none"
    assert str(line_clamp(1)) == "line-clamp-1"
    assert str(line_clamp(2)) == "line-clamp-2"
    assert str(line_clamp(3)) == "line-clamp-3"
    assert str(line_clamp(4)) == "line-clamp-4"
    assert str(line_clamp(5)) == "line-clamp-5"
    assert str(line_clamp(6)) == "line-clamp-6"
    assert str(line_clamp(10)) == "line-clamp-[10]"  # Arbitrary for > 6

# Run the tests
test_typography_line_clamp_examples()

# %% ../../nbs/utilities/typography.ipynb 37
# Line height config - uses numeric scale plus none
LEADING_CONFIG = ScaleConfig(
    numeric=True,  # 3-10 are valid
    decimals=False,
    fractions=False,
    named=None,
    special={
        "none": "none"
    },
    negative=False
)

# Custom leading factory that filters numeric values
class LeadingFactory(ScaledFactory):
    """Factory for line height utilities with restricted numeric range."""
    
    def __call__(
        self,
        value: Optional[TailwindValue] = None,  # The value to apply
        negative: bool = False  # Not used for leading
    ) -> StandardUtility:  # A utility instance
        """Create leading utility with value validation."""
        # For numeric values, only allow 3-10
        if isinstance(value, (int, float)) and not (3 <= value <= 10):
            # Treat as arbitrary value
            return super().__call__(f"[{value}]", negative)
        return super().__call__(value, negative)

leading = LeadingFactory("leading", LEADING_CONFIG, "Line height utilities for controlling leading") # Line height factory

# %% ../../nbs/utilities/typography.ipynb 38
def test_typography_line_height_examples():
    """Test line height utilities."""
    # Line height
    assert str(leading.none) == "leading-none"
    assert str(leading(3)) == "leading-3"
    assert str(leading(4)) == "leading-4"
    assert str(leading(5)) == "leading-5"
    assert str(leading(6)) == "leading-6"
    assert str(leading(7)) == "leading-7"
    assert str(leading(8)) == "leading-8"
    assert str(leading(9)) == "leading-9"
    assert str(leading(10)) == "leading-10"
    # assert str(leading("1.5")) == "leading-[1.5]"
    assert str(leading("20px")) == "leading-[20px]"
    assert str(leading("--custom-leading")) == "leading-(--custom-leading)"

# Run the tests
test_typography_line_height_examples()

# %% ../../nbs/utilities/typography.ipynb 41
class ListImageUtility(BaseUtility):
    """Utility class for list-style-image with arbitrary value support."""
    
    def _format_value(
        self,
        value: TailwindValue  # The value to format
    ) -> str:  # The formatted value string
        """Format list image value."""
        value_str = str(value)
        
        # Handle none value
        if value_str == "none":
            return "none"
        
        # Handle custom properties
        if value_str.startswith("--"):
            return f"({value_str})"
        
        # All other values are arbitrary
        return f"[{value_str}]"

class ListImageFactory(BaseFactory):
    """Factory for list-style-image utilities."""
    
    def __init__(self):
        """Initialize list image factory."""
        super().__init__("List style image utilities for controlling list item marker images")
        self.none = ListImageUtility("list-image")
        self.none._value = "none"
    
    def __call__(
        self,
        value: str  # Image URL or value
    ) -> ListImageUtility:  # A list image utility instance
        """Create list image utility with value."""
        utility = ListImageUtility("list-image")
        utility._value = utility._format_value(value)
        return utility
    
    def get_info(
        self
    ) -> Dict[str, Any]:  # Factory information
        """Get information about the list image factory."""
        return {
            'description': self._doc,
            'valid_inputs': [
                'none: Remove list marker image',
                'URL values: url(path/to/image.svg)',
                'Custom properties: --list-marker-image',
                'Arbitrary values: Any valid CSS list-style-image value'
            ],
            'options': {}
        }

list_image = ListImageFactory() # List image factory

# %% ../../nbs/utilities/typography.ipynb 42
def test_typography_list_image_examples():
    """Test list style image utilities."""
    assert str(list_image.none) == "list-image-none"
    assert str(list_image("url(/path/to/marker.svg)")) == "list-image-[url(/path/to/marker.svg)]"
    assert str(list_image("--custom-marker")) == "list-image-(--custom-marker)"
    assert str(list_image("url('star.png')")) == "list-image-[url('star.png')]"

# Run the tests
test_typography_list_image_examples()

# %% ../../nbs/utilities/typography.ipynb 44
# List style position
list_position = SimpleFactory(
    {
        "inside": "list-inside",
        "outside": "list-outside"
    },
    "List style position utilities"
) # List position factory

# List style type
list_style = SimpleFactory(
    {
        "disc": "list-disc",
        "decimal": "list-decimal",
        "none": "list-none"
    },
    "List style type utilities"
) # List style factory

# %% ../../nbs/utilities/typography.ipynb 45
def test_typography_list_styles_examples():
    """Test list styles utilities."""
    
    # List styles
    assert str(list_position.inside) == "list-inside"
    assert str(list_position.outside) == "list-outside"
    assert str(list_style.disc) == "list-disc"
    assert str(list_style.decimal) == "list-decimal"
    assert str(list_style.none) == "list-none"

# Run the tests
test_typography_list_styles_examples()

# %% ../../nbs/utilities/typography.ipynb 47
text_align = SimpleFactory(
    {
        "left": "text-left",
        "center": "text-center",
        "right": "text-right",
        "justify": "text-justify",
        "start": "text-start",
        "end": "text-end"
    },
    "Text alignment utilities for controlling text alignment"
) # Text alignment factory

# %% ../../nbs/utilities/typography.ipynb 48
def test_typography_text_alignment_examples():
    """Test text alignment utilities."""
    # Text alignment
    assert str(text_align.left) == "text-left"
    assert str(text_align.center) == "text-center"
    assert str(text_align.right) == "text-right"
    assert str(text_align.justify) == "text-justify"
    assert str(text_align.start) == "text-start"
    assert str(text_align.end) == "text-end"

# Run the tests
test_typography_text_alignment_examples()

# %% ../../nbs/utilities/typography.ipynb 50
class TextFactory(ColoredFactory):
    """Enhanced text factory that supports both font sizes and text colors."""
    
    def __init__(self):
        """Initialize text factory with size support."""
        super().__init__("text", "Text utilities for font size and color")
        
        # Add font size properties
        self.xs = StandardUtility("text")
        self.xs._value = "xs"
        self.sm = StandardUtility("text")
        self.sm._value = "sm"
        self.base = StandardUtility("text")
        self.base._value = "base"
        self.lg = StandardUtility("text")
        self.lg._value = "lg"
        self.xl = StandardUtility("text")
        self.xl._value = "xl"
        
        # Multi-character sizes need underscore prefix
        self._2xl = StandardUtility("text")
        self._2xl._value = "2xl"
        self._3xl = StandardUtility("text")
        self._3xl._value = "3xl"
        self._4xl = StandardUtility("text")
        self._4xl._value = "4xl"
        self._5xl = StandardUtility("text")
        self._5xl._value = "5xl"
        self._6xl = StandardUtility("text")
        self._6xl._value = "6xl"
        self._7xl = StandardUtility("text")
        self._7xl._value = "7xl"
        self._8xl = StandardUtility("text")
        self._8xl._value = "8xl"
        self._9xl = StandardUtility("text")
        self._9xl._value = "9xl"
    
    def __getattr__(
        self,
        name: str  # Attribute name (color or size)
    ) -> Any:  # Utility instance or color proxy
        """Handle attribute access for both sizes and colors."""
        
        # Otherwise, use parent's color handling
        return super().__getattr__(name)

# Create the enhanced text factory
text = TextFactory() # Enhanced text factory for size and color

# %% ../../nbs/utilities/typography.ipynb 51
def test_typography_text_color_examples():
    """Test text color utilities."""
    # Standard colors
    assert str(text.red._500) == "text-red-500"
    assert str(text.blue._300) == "text-blue-300"
    assert str(text.green._600) == "text-green-600"

    # Test all 22 color families
    assert str(text.red._500) == "text-red-500"
    assert str(text.orange._500) == "text-orange-500"
    assert str(text.amber._500) == "text-amber-500"
    assert str(text.yellow._500) == "text-yellow-500"
    assert str(text.lime._500) == "text-lime-500"
    assert str(text.green._500) == "text-green-500"
    assert str(text.emerald._500) == "text-emerald-500"
    assert str(text.teal._500) == "text-teal-500"
    assert str(text.cyan._500) == "text-cyan-500"
    assert str(text.sky._500) == "text-sky-500"
    assert str(text.blue._500) == "text-blue-500"
    assert str(text.indigo._500) == "text-indigo-500"
    assert str(text.violet._500) == "text-violet-500"
    assert str(text.purple._500) == "text-purple-500"
    assert str(text.fuchsia._500) == "text-fuchsia-500"
    assert str(text.pink._500) == "text-pink-500"
    assert str(text.rose._500) == "text-rose-500"
    assert str(text.slate._500) == "text-slate-500"
    assert str(text.gray._500) == "text-gray-500"
    assert str(text.zinc._500) == "text-zinc-500"
    assert str(text.neutral._500) == "text-neutral-500"
    assert str(text.stone._500) == "text-stone-500"
    
    # Special colors
    assert str(text.transparent) == "text-transparent"
    assert str(text.black) == "text-black"
    assert str(text.white) == "text-white"
    assert str(text.current) == "text-current"
    assert str(text.inherit) == "text-inherit"
    
    # With opacity
    assert str(text.red._500.opacity(50)) == "text-red-500/50"
    assert str(text.blue._300.opacity(75)) == "text-blue-300/75"
    
    # Arbitrary values
    assert str(text("#ff0000")) == "text-[#ff0000]"
    assert str(text("rgb(255, 0, 0)")) == "text-[rgb(255, 0, 0)]"
    assert str(text("--custom-color")) == "text-(--custom-color)"
    
    # Test that font sizes still work
    assert str(text.xs) == "text-xs"
    assert str(text._2xl) == "text-2xl"

# Run the tests
test_typography_text_color_examples()

# %% ../../nbs/utilities/typography.ipynb 53
underline = SingleValueFactory("underline", "Underline text decoration") # Underline text
overline = SingleValueFactory("overline", "Overline text decoration") # Overline text
line_through = SingleValueFactory("line-through", "Line through text decoration") # Line through text
no_underline = SingleValueFactory("no-underline", "Remove text decoration") # No text decoration

# %% ../../nbs/utilities/typography.ipynb 55
decoration = ColoredFactory("decoration", "Text decoration color utilities") # Text decoration color factory

# %% ../../nbs/utilities/typography.ipynb 57
decoration_style = SimpleFactory(
    {
        "solid": "decoration-solid",
        "double": "decoration-double",
        "dotted": "decoration-dotted",
        "dashed": "decoration-dashed",
        "wavy": "decoration-wavy"
    },
    "Text decoration style utilities for controlling decoration line style"
) # Text decoration style factory

# %% ../../nbs/utilities/typography.ipynb 59
# Decoration thickness config
DECORATION_THICKNESS_CONFIG = ScaleConfig(
    numeric=True,  # 0, 1, 2, 4, 8
    decimals=False,
    fractions=False,
    named=None,
    special={
        "auto": "auto",
        "from-font": "from-font"
    },
    negative=False
)

decoration_thickness = ScaledFactory("decoration", DECORATION_THICKNESS_CONFIG, "Text decoration thickness utilities") # Text decoration thickness factory

# %% ../../nbs/utilities/typography.ipynb 60
def test_typography_text_decoration_examples():
    """Test text decoration utilities."""
    # Decoration lines
    assert str(underline) == "underline"
    assert str(overline) == "overline"
    assert str(line_through) == "line-through"
    assert str(no_underline) == "no-underline"
    
    # Decoration colors
    assert str(decoration.red._500) == "decoration-red-500"
    assert str(decoration.blue._300) == "decoration-blue-300"
    assert str(decoration.inherit) == "decoration-inherit"
    assert str(decoration.current) == "decoration-current"
    assert str(decoration.transparent) == "decoration-transparent"

    # Test all 22 color families
    assert str(decoration.red._500) == "decoration-red-500"
    assert str(decoration.orange._500) == "decoration-orange-500"
    assert str(decoration.amber._500) == "decoration-amber-500"
    assert str(decoration.yellow._500) == "decoration-yellow-500"
    assert str(decoration.lime._500) == "decoration-lime-500"
    assert str(decoration.green._500) == "decoration-green-500"
    assert str(decoration.emerald._500) == "decoration-emerald-500"
    assert str(decoration.teal._500) == "decoration-teal-500"
    assert str(decoration.cyan._500) == "decoration-cyan-500"
    assert str(decoration.sky._500) == "decoration-sky-500"
    assert str(decoration.blue._500) == "decoration-blue-500"
    assert str(decoration.indigo._500) == "decoration-indigo-500"
    assert str(decoration.violet._500) == "decoration-violet-500"
    assert str(decoration.purple._500) == "decoration-purple-500"
    assert str(decoration.fuchsia._500) == "decoration-fuchsia-500"
    assert str(decoration.pink._500) == "decoration-pink-500"
    assert str(decoration.rose._500) == "decoration-rose-500"
    assert str(decoration.slate._500) == "decoration-slate-500"
    assert str(decoration.gray._500) == "decoration-gray-500"
    assert str(decoration.zinc._500) == "decoration-zinc-500"
    assert str(decoration.neutral._500) == "decoration-neutral-500"
    assert str(decoration.stone._500) == "decoration-stone-500"
    
    # Decoration styles
    assert str(decoration_style.solid) == "decoration-solid"
    assert str(decoration_style.double) == "decoration-double"
    assert str(decoration_style.dotted) == "decoration-dotted"
    assert str(decoration_style.dashed) == "decoration-dashed"
    assert str(decoration_style.wavy) == "decoration-wavy"
    
    # Decoration thickness
    assert str(decoration_thickness(0)) == "decoration-0"
    assert str(decoration_thickness(1)) == "decoration-1"
    assert str(decoration_thickness(2)) == "decoration-2"
    assert str(decoration_thickness(4)) == "decoration-4"
    assert str(decoration_thickness(8)) == "decoration-8"
    assert str(decoration_thickness.auto) == "decoration-auto"
    assert str(decoration_thickness.from_font) == "decoration-from-font"
    assert str(decoration_thickness("3px")) == "decoration-[3px]"
    assert str(decoration_thickness("--line-thickness")) == "decoration-(--line-thickness)"

# Run the tests
test_typography_text_decoration_examples()

# %% ../../nbs/utilities/typography.ipynb 62
# Underline offset config
UNDERLINE_OFFSET_CONFIG = ScaleConfig(
    numeric=True,  # 0, 1, 2, 4, 8
    decimals=False,
    fractions=False,
    named=None,
    special={
        "auto": "auto"
    },
    negative=True  # Supports negative values
)

underline_offset = ScaledFactory("underline-offset", UNDERLINE_OFFSET_CONFIG, "Text underline offset utilities") # Text underline offset factory

# %% ../../nbs/utilities/typography.ipynb 63
def test_typography_underline_offset_examples():
    """Test underline offset utilities."""    
    # Underline offset
    assert str(underline_offset(0)) == "underline-offset-0"
    assert str(underline_offset(1)) == "underline-offset-1"
    assert str(underline_offset(2)) == "underline-offset-2"
    assert str(underline_offset(4)) == "underline-offset-4"
    assert str(underline_offset(8)) == "underline-offset-8"
    assert str(underline_offset.auto) == "underline-offset-auto"
    assert str(underline_offset.negative(1)) == "-underline-offset-1"
    assert str(underline_offset.negative(2)) == "-underline-offset-2"
    assert str(underline_offset("3px")) == "underline-offset-[3px]"

# Run the tests
test_typography_underline_offset_examples()

# %% ../../nbs/utilities/typography.ipynb 65
uppercase = SingleValueFactory("uppercase", "Transform text to uppercase") # Uppercase text
lowercase = SingleValueFactory("lowercase", "Transform text to lowercase") # Lowercase text
capitalize = SingleValueFactory("capitalize", "Capitalize first letter of each word") # Capitalize text
normal_case = SingleValueFactory("normal-case", "Preserve original text case") # Normal case text

# %% ../../nbs/utilities/typography.ipynb 66
def test_typography_text_transform_examples():
    """Test text transform utilities."""    
    # Text transform
    assert str(uppercase) == "uppercase"
    assert str(lowercase) == "lowercase"
    assert str(capitalize) == "capitalize"
    assert str(normal_case) == "normal-case"

# Run the tests
test_typography_text_transform_examples()

# %% ../../nbs/utilities/typography.ipynb 68
truncate = SingleValueFactory("truncate", "Truncate text with ellipsis when it overflows") # Truncate overflow text
text_ellipsis = SingleValueFactory("text-ellipsis", "Use ellipsis for text overflow") # Text ellipsis
text_clip = SingleValueFactory("text-clip", "Clip text when it overflows") # Text clip

# %% ../../nbs/utilities/typography.ipynb 69
def test_typography_text_overflow_examples():
    """Test text overflow utilities."""
    # Text overflow
    assert str(truncate) == "truncate"
    assert str(text_ellipsis) == "text-ellipsis"
    assert str(text_clip) == "text-clip"

# Run the tests
test_typography_text_overflow_examples()

# %% ../../nbs/utilities/typography.ipynb 71
text_wrap = SingleValueFactory("text-wrap", "Allow text to wrap normally") # Text wrap
text_nowrap = SingleValueFactory("text-nowrap", "Prevent text from wrapping") # Text no wrap
text_balance = SingleValueFactory("text-balance", "Balance text for better readability") # Text balance
text_pretty = SingleValueFactory("text-pretty", "Optimize text wrapping for readability") # Text pretty

# %% ../../nbs/utilities/typography.ipynb 72
def test_typography_text_wrap_examples():
    """Test text wrap utilities."""
    
    # Text wrap
    assert str(text_wrap) == "text-wrap"
    assert str(text_nowrap) == "text-nowrap"
    assert str(text_balance) == "text-balance"
    assert str(text_pretty) == "text-pretty"

# Run the tests
test_typography_text_wrap_examples()

# %% ../../nbs/utilities/typography.ipynb 74
# Text indent uses spacing scale
indent = DirectionalScaledFactory("indent", SPACING_CONFIG, "Text indentation utilities") # Text indent factory

# %% ../../nbs/utilities/typography.ipynb 75
def test_typography_text_indent_examples():
    """Test text indent utilities."""
        
    # Text indent
    assert str(indent(0)) == "indent-0"
    assert str(indent(4)) == "indent-4"
    assert str(indent(8)) == "indent-8"
    assert str(indent.px) == "indent-px"
    assert str(indent.negative(4)) == "-indent-4"
    assert str(indent("10px")) == "indent-[10px]"

# Run the tests
test_typography_text_indent_examples()

# %% ../../nbs/utilities/typography.ipynb 77
align = SimpleFactory(
    {
        "baseline": "align-baseline",
        "top": "align-top",
        "middle": "align-middle",
        "bottom": "align-bottom",
        "text_top": "align-text-top",
        "text_bottom": "align-text-bottom",
        "sub": "align-sub",
        "super": "align-super"
    },
    "Vertical alignment utilities for inline or table-cell elements"
) # Vertical align factory

# %% ../../nbs/utilities/typography.ipynb 78
def test_typography_vertical_align_examples():
    """Test vertical align utilities."""
    
    # Vertical align
    assert str(align.baseline) == "align-baseline"
    assert str(align.top) == "align-top"
    assert str(align.middle) == "align-middle"
    assert str(align.bottom) == "align-bottom"
    assert str(align.text_top) == "align-text-top"
    assert str(align.text_bottom) == "align-text-bottom"
    assert str(align.sub) == "align-sub"
    assert str(align.super) == "align-super"

# Run the tests
test_typography_vertical_align_examples()

# %% ../../nbs/utilities/typography.ipynb 80
whitespace = SimpleFactory(
    {
        "normal": "whitespace-normal",
        "nowrap": "whitespace-nowrap",
        "pre": "whitespace-pre",
        "pre_line": "whitespace-pre-line",
        "pre_wrap": "whitespace-pre-wrap",
        "break_spaces": "whitespace-break-spaces"
    },
    "White space utilities for controlling how white space is handled"
) # White space factory

# %% ../../nbs/utilities/typography.ipynb 81
def test_typography_whitespace_examples():
    """Test whitespace utilities."""
    
    # White space
    assert str(whitespace.normal) == "whitespace-normal"
    assert str(whitespace.nowrap) == "whitespace-nowrap"
    assert str(whitespace.pre) == "whitespace-pre"
    assert str(whitespace.pre_line) == "whitespace-pre-line"
    assert str(whitespace.pre_wrap) == "whitespace-pre-wrap"
    assert str(whitespace.break_spaces) == "whitespace-break-spaces"

# Run the tests
test_typography_whitespace_examples()

# %% ../../nbs/utilities/typography.ipynb 83
break_normal = SingleValueFactory("break-normal", "Normal word breaking behavior") # Normal word break
break_all = SingleValueFactory("break-all", "Break words at any character") # Break all
break_keep = SingleValueFactory("break-keep", "Prevent word breaks") # Keep words together

# %% ../../nbs/utilities/typography.ipynb 84
def test_typography_word_break_examples():
    """Test word break utilities."""
    
    # Word break
    assert str(break_normal) == "break-normal"
    assert str(break_all) == "break-all"
    assert str(break_keep) == "break-keep"

# Run the tests
test_typography_word_break_examples()

# %% ../../nbs/utilities/typography.ipynb 86
wrap_break_word = SingleValueFactory("wrap-break-word", "Break long words at arbitrary points") # Break word wrap
wrap_anywhere = SingleValueFactory("wrap-anywhere", "Break at any point if needed") # Wrap anywhere
wrap_normal = SingleValueFactory("wrap-normal", "Break only at normal break points") # Normal wrap

# %% ../../nbs/utilities/typography.ipynb 87
def test_typography_overflow_wrap_examples():
    """Test overflow wrap utilities."""
    
    # Overflow wrap
    assert str(wrap_break_word) == "wrap-break-word"
    assert str(wrap_anywhere) == "wrap-anywhere"
    assert str(wrap_normal) == "wrap-normal"

# Run the tests
test_typography_overflow_wrap_examples()

# %% ../../nbs/utilities/typography.ipynb 89
hyphens = SimpleFactory(
    {
        "none": "hyphens-none",
        "manual": "hyphens-manual",
        "auto": "hyphens-auto"
    },
    "Hyphenation utilities for controlling word hyphenation"
) # Hyphens factory

# %% ../../nbs/utilities/typography.ipynb 90
def test_typography_hyphens_examples():
    """Test hyphens utilities."""
    
    # Hyphens
    assert str(hyphens.none) == "hyphens-none"
    assert str(hyphens.manual) == "hyphens-manual"
    assert str(hyphens.auto) == "hyphens-auto"

# Run the tests
test_typography_hyphens_examples()

# %% ../../nbs/utilities/typography.ipynb 92
class ContentUtility(BaseUtility):
    """Utility class for content with arbitrary value support."""
    
    def _format_value(
        self,
        value: TailwindValue  # The value to format
    ) -> str:  # The formatted value string
        """Format content value."""
        value_str = str(value)
        
        # Handle none value
        if value_str == "none":
            return "none"
        
        # Handle custom properties
        if value_str.startswith("--"):
            return f"({value_str})"
        
        # All other values are arbitrary
        return f"[{value_str}]"

class ContentFactory(BaseFactory):
    """Factory for content utilities for pseudo-elements."""
    
    def __init__(self):
        """Initialize content factory."""
        super().__init__("Content utilities for controlling before and after pseudo-element content")
        self.none = ContentUtility("content")
        self.none._value = "none"
    
    def __call__(
        self,
        value: str  # Content value
    ) -> ContentUtility:  # A content utility instance
        """Create content utility with value."""
        utility = ContentUtility("content")
        utility._value = utility._format_value(value)
        return utility
    
    def get_info(
        self
    ) -> Dict[str, Any]:  # Factory information
        """Get information about the content factory."""
        return {
            'description': self._doc,
            'valid_inputs': [
                'none: Remove content',
                'String values: "Hello" or \'World\'',
                'Attribute values: attr(data-content)',
                'Custom properties: --content-before',
                'Special values: open-quote, close-quote, no-open-quote, no-close-quote',
                'Arbitrary values: Any valid CSS content value'
            ],
            'options': {}
        }

content = ContentFactory() # Content factory

# %% ../../nbs/utilities/typography.ipynb 93
def test_typography_content_examples():
    """Test content utilities for pseudo-elements."""
    assert str(content.none) == "content-none"
    assert str(content("'Hello'")) == "content-['Hello']"
    assert str(content('"→"')) == 'content-["→"]'
    assert str(content("attr(data-label)")) == "content-[attr(data-label)]"
    assert str(content("--custom-content")) == "content-(--custom-content)"
    assert str(content("open-quote")) == "content-[open-quote]"
    assert str(content("' (' attr(href) ')'")) == "content-[' (' attr(href) ')']"

# Run the tests
test_typography_content_examples()

# %% ../../nbs/utilities/typography.ipynb 97
def test_typography_practical_examples():
    """Test typography utilities in practical FastHTML component examples."""
    from fasthtml.common import H1, H2, P, Div, Span, A, Ul, Li, Blockquote
    from cjm_fasthtml_tailwind.utilities.sizing import max_w
    from cjm_fasthtml_tailwind.utilities.backgrounds import bg
    from cjm_fasthtml_tailwind.utilities.spacing import p
    from cjm_fasthtml_tailwind.utilities.borders import rounded, border, border_color
    
    # Heading with multiple typography utilities
    heading = H1(
        "Welcome to Our Site",
        cls=combine_classes(
            text._4xl,
            font.bold,
            text.gray._900,
            tracking.tight,
            leading(8)
        )
    )
    assert "text-4xl" in heading.attrs['class']
    assert "font-bold" in heading.attrs['class']
    assert "text-gray-900" in heading.attrs['class']
    assert "tracking-tight" in heading.attrs['class']
    assert "leading-8" in heading.attrs['class']
    
    # Paragraph with text styling
    paragraph = P(
        "This is a sample paragraph with various text styles applied.",
        cls=combine_classes(
            text.base,
            text.gray._600,
            leading(7),
            text_align.justify
        )
    )
    assert "text-base" in paragraph.attrs['class']
    assert "text-gray-600" in paragraph.attrs['class']
    
    # Link with underline and hover effects
    link = A(
        "Click here",
        href="#",
        cls=combine_classes(
            text.blue._600,
            underline,
            decoration_style.dotted,
            decoration_thickness(2),
            font.medium
        )
    )
    assert "text-blue-600" in link.attrs['class']
    assert "underline" in link.attrs['class']
    assert "decoration-dotted" in link.attrs['class']
    
    # Truncated text
    truncated = Div(
        "This is a very long text that should be truncated with an ellipsis when it overflows the container width.",
        cls=combine_classes(truncate, max_w.xs)
    )
    assert "truncate" in truncated.attrs['class']
    
    # Multi-line clamp
    clamped = P(
        "This is a longer paragraph that spans multiple lines. It will be clamped to show only 3 lines with an ellipsis at the end if the content exceeds that limit.",
        cls=str(line_clamp(3))
    )
    assert clamped.attrs['class'] == "line-clamp-3"
    
    # Code block with monospace font
    code = Div(
        "const greeting = 'Hello, World!';",
        cls=combine_classes(
            font.mono,
            text.sm,
            text.gray._800,
            whitespace.pre,
            bg.gray._100,
            p(4),
            rounded()
        )
    )
    assert "font-mono" in code.attrs['class']
    assert "whitespace-pre" in code.attrs['class']
    
    # List with custom styles
    custom_list = Ul(
        Li("First item"),
        Li("Second item"),
        Li("Third item"),
        cls=combine_classes(
            list_style.disc,
            list_position.inside,
            text.gray._700
        )
    )
    assert "list-disc" in custom_list.attrs['class']
    assert "list-inside" in custom_list.attrs['class']
    
    # Text with transform
    transformed = Span(
        "uppercase text",
        cls=combine_classes(uppercase, tracking.wider)
    )
    assert "uppercase" in transformed.attrs['class']
    assert "tracking-wider" in transformed.attrs['class']
    
    # Blockquote with indent
    quote = Blockquote(
        "The only way to do great work is to love what you do.",
        cls=combine_classes(
            text.lg,
            italic,
            text.gray._600,
            indent(8),
            border.l._4,
            border_color.gray._300,
            p.l(4)
        )
    )
    assert "text-lg" in quote.attrs['class']
    assert "italic" in quote.attrs['class']
    assert "indent-8" in quote.attrs['class']

# Run the tests
test_typography_practical_examples()

# %% ../../nbs/utilities/typography.ipynb 99
def test_typography_factory_documentation():
    """Test that typography factories have accessible documentation."""
    # Font factory
    assert font.describe() == "Font utilities for family and weight control"
    font_info = font.get_info()
    assert 'families' in font_info['valid_inputs']
    assert 'weights' in font_info['valid_inputs']
    
    # Text factory (with color support)
    assert text.describe() == "Text utilities for font size and color"
    text_info = text.get_info()
    assert 'color_families' in text_info['valid_inputs']
    
    # Other factories
    assert tracking.describe() == "Letter spacing utilities for controlling tracking"
    assert leading.describe() == "Line height utilities for controlling leading"
    assert decoration.describe() == "Text decoration color utilities"
    assert decoration_thickness.describe() == "Text decoration thickness utilities"
    assert underline_offset.describe() == "Text underline offset utilities"
    assert line_clamp.describe() == "Line clamp utilities for limiting text lines"
    assert indent.describe() == "Text indentation utilities"
    
    # Simple factories
    assert text_align.describe() == "Text alignment utilities for controlling text alignment"
    assert whitespace.describe() == "White space utilities for controlling how white space is handled"
    assert hyphens.describe() == "Hyphenation utilities for controlling word hyphenation"
    assert align.describe() == "Vertical alignment utilities for inline or table-cell elements"
    assert list_position.describe() == "List style position utilities"
    assert list_style.describe() == "List style type utilities"
    assert decoration_style.describe() == "Text decoration style utilities for controlling decoration line style"
    assert font_stretch.describe() == "Font stretch utilities for controlling the width of a font face"
    
    # New factories
    assert list_image.describe() == "List style image utilities for controlling list item marker images"
    assert content.describe() == "Content utilities for controlling before and after pseudo-element content"
    
    # Single value factories
    assert antialiased.describe() == "Applies antialiased font smoothing"
    assert subpixel_antialiased.describe() == "Applies subpixel antialiased font smoothing"
    assert italic.describe() == "Sets font style to italic"
    assert not_italic.describe() == "Sets font style to normal"
    assert underline.describe() == "Underline text decoration"
    assert overline.describe() == "Overline text decoration"
    assert line_through.describe() == "Line through text decoration"
    assert no_underline.describe() == "Remove text decoration"
    assert uppercase.describe() == "Transform text to uppercase"
    assert lowercase.describe() == "Transform text to lowercase"
    assert capitalize.describe() == "Capitalize first letter of each word"
    assert normal_case.describe() == "Preserve original text case"
    assert truncate.describe() == "Truncate text with ellipsis when it overflows"
    assert text_ellipsis.describe() == "Use ellipsis for text overflow"
    assert text_clip.describe() == "Clip text when it overflows"
    assert text_wrap.describe() == "Allow text to wrap normally"
    assert text_nowrap.describe() == "Prevent text from wrapping"
    assert text_balance.describe() == "Balance text for better readability"
    assert text_pretty.describe() == "Optimize text wrapping for readability"
    assert break_normal.describe() == "Normal word breaking behavior"
    assert break_all.describe() == "Break words at any character"
    assert break_keep.describe() == "Prevent word breaks"
    assert wrap_break_word.describe() == "Break long words at arbitrary points"
    assert wrap_anywhere.describe() == "Break at any point if needed"
    assert wrap_normal.describe() == "Break only at normal break points"
    
    # Font variant numeric utilities
    assert normal_nums.describe() == "Normal numeric font variant"
    assert ordinal.describe() == "Ordinal numeric markers"
    assert slashed_zero.describe() == "Force zero with slash"
    assert lining_nums.describe() == "Lining figures"
    assert oldstyle_nums.describe() == "Old-style figures"
    assert proportional_nums.describe() == "Proportional figures"
    assert tabular_nums.describe() == "Tabular figures"
    assert diagonal_fractions.describe() == "Diagonal fractions"
    assert stacked_fractions.describe() == "Stacked fractions"

# Run the tests
test_typography_factory_documentation()
