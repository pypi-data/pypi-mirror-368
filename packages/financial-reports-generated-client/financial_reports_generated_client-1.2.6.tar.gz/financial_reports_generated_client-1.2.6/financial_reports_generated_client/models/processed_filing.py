# coding: utf-8

"""
    Financial Reports API

    API for accessing company filings, financial data, industry classifications, and related information.

    The version of the OpenAPI document: 1.0.0
    Contact: api@financialreports.eu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProcessedFiling(BaseModel):
    """
    ProcessedFiling
    """ # noqa: E501
    id: StrictInt
    filing_id: StrictInt = Field(description="ID of the original Filing.")
    content_markdown: StrictStr = Field(description="The processed filing content in Markdown format.")
    content_json: Optional[Any] = Field(description="Optional structured JSON representation of the content.")
    processor: StrictStr = Field(description="Identifier for the tool/method used to process the filing.")
    added_at: datetime = Field(description="Timestamp when the processed content was added.")
    updated_at: datetime = Field(description="Timestamp when the processed content was last updated.")
    __properties: ClassVar[List[str]] = ["id", "filing_id", "content_markdown", "content_json", "processor", "added_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProcessedFiling from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "filing_id",
            "content_markdown",
            "content_json",
            "processor",
            "added_at",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if content_json (nullable) is None
        # and model_fields_set contains the field
        if self.content_json is None and "content_json" in self.model_fields_set:
            _dict['content_json'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProcessedFiling from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "filing_id": obj.get("filing_id"),
            "content_markdown": obj.get("content_markdown"),
            "content_json": obj.get("content_json"),
            "processor": obj.get("processor"),
            "added_at": obj.get("added_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


