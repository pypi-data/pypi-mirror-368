# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    Order
    """ # noqa: E501
    order_index: StrictInt
    client_order_index: StrictInt
    order_id: StrictStr
    client_order_id: StrictStr
    market_index: StrictInt
    owner_account_index: StrictInt
    initial_base_amount: StrictStr
    price: StrictStr
    nonce: StrictInt
    remaining_base_amount: StrictStr
    is_ask: StrictBool
    base_size: StrictInt
    base_price: StrictInt
    filled_base_amount: StrictStr
    filled_quote_amount: StrictStr
    side: StrictStr = Field(description=" TODO: remove this")
    type: StrictStr
    time_in_force: StrictStr
    reduce_only: StrictBool
    trigger_price: StrictStr
    order_expiry: StrictInt
    status: StrictStr
    trigger_status: StrictStr
    trigger_time: StrictInt
    parent_order_index: StrictInt
    parent_order_id: StrictStr
    to_trigger_order_id_0: StrictStr
    to_trigger_order_id_1: StrictStr
    to_cancel_order_id_0: StrictStr
    block_height: StrictInt
    timestamp: StrictInt
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["order_index", "client_order_index", "order_id", "client_order_id", "market_index", "owner_account_index", "initial_base_amount", "price", "nonce", "remaining_base_amount", "is_ask", "base_size", "base_price", "filled_base_amount", "filled_quote_amount", "side", "type", "time_in_force", "reduce_only", "trigger_price", "order_expiry", "status", "trigger_status", "trigger_time", "parent_order_index", "parent_order_id", "to_trigger_order_id_0", "to_trigger_order_id_1", "to_cancel_order_id_0", "block_height", "timestamp"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['limit', 'market', 'stop-loss', 'stop-loss-limit', 'take-profit', 'take-profit-limit', 'twap', 'twap-sub', 'liquidation']):
            raise ValueError("must be one of enum values ('limit', 'market', 'stop-loss', 'stop-loss-limit', 'take-profit', 'take-profit-limit', 'twap', 'twap-sub', 'liquidation')")
        return value

    @field_validator('time_in_force')
    def time_in_force_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['good-till-time', 'immediate-or-cancel', 'post-only', 'Unknown']):
            raise ValueError("must be one of enum values ('good-till-time', 'immediate-or-cancel', 'post-only', 'Unknown')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['in-progress', 'pending', 'open', 'filled', 'canceled', 'canceled-post-only', 'canceled-reduce-only', 'canceled-position-not-allowed', 'canceled-margin-not-allowed', 'canceled-too-much-slippage', 'canceled-not-enough-liquidity', 'canceled-self-trade', 'canceled-expired', 'canceled-oco', 'canceled-child', 'canceled-liquidation']):
            raise ValueError("must be one of enum values ('in-progress', 'pending', 'open', 'filled', 'canceled', 'canceled-post-only', 'canceled-reduce-only', 'canceled-position-not-allowed', 'canceled-margin-not-allowed', 'canceled-too-much-slippage', 'canceled-not-enough-liquidity', 'canceled-self-trade', 'canceled-expired', 'canceled-oco', 'canceled-child', 'canceled-liquidation')")
        return value

    @field_validator('trigger_status')
    def trigger_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['na', 'ready', 'mark-price', 'twap', 'parent-order']):
            raise ValueError("must be one of enum values ('na', 'ready', 'mark-price', 'twap', 'parent-order')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "order_index": obj.get("order_index"),
            "client_order_index": obj.get("client_order_index"),
            "order_id": obj.get("order_id"),
            "client_order_id": obj.get("client_order_id"),
            "market_index": obj.get("market_index"),
            "owner_account_index": obj.get("owner_account_index"),
            "initial_base_amount": obj.get("initial_base_amount"),
            "price": obj.get("price"),
            "nonce": obj.get("nonce"),
            "remaining_base_amount": obj.get("remaining_base_amount"),
            "is_ask": obj.get("is_ask"),
            "base_size": obj.get("base_size"),
            "base_price": obj.get("base_price"),
            "filled_base_amount": obj.get("filled_base_amount"),
            "filled_quote_amount": obj.get("filled_quote_amount"),
            "side": obj.get("side") if obj.get("side") is not None else 'buy',
            "type": obj.get("type"),
            "time_in_force": obj.get("time_in_force") if obj.get("time_in_force") is not None else 'good-till-time',
            "reduce_only": obj.get("reduce_only"),
            "trigger_price": obj.get("trigger_price"),
            "order_expiry": obj.get("order_expiry"),
            "status": obj.get("status"),
            "trigger_status": obj.get("trigger_status"),
            "trigger_time": obj.get("trigger_time"),
            "parent_order_index": obj.get("parent_order_index"),
            "parent_order_id": obj.get("parent_order_id"),
            "to_trigger_order_id_0": obj.get("to_trigger_order_id_0"),
            "to_trigger_order_id_1": obj.get("to_trigger_order_id_1"),
            "to_cancel_order_id_0": obj.get("to_cancel_order_id_0"),
            "block_height": obj.get("block_height"),
            "timestamp": obj.get("timestamp")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


