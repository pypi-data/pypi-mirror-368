# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from lighter.models.tx import Tx
from typing import Optional, Set
from typing_extensions import Self

class Block(BaseModel):
    """
    Block
    """ # noqa: E501
    commitment: StrictStr
    height: StrictInt
    state_root: StrictStr
    priority_operations: StrictInt
    on_chain_l2_operations: StrictInt
    pending_on_chain_operations_pub_data: StrictStr
    committed_tx_hash: StrictStr
    committed_at: StrictInt
    verified_tx_hash: StrictStr
    verified_at: StrictInt
    txs: List[Tx]
    status: StrictInt
    size: StrictInt
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["commitment", "height", "state_root", "priority_operations", "on_chain_l2_operations", "pending_on_chain_operations_pub_data", "committed_tx_hash", "committed_at", "verified_tx_hash", "verified_at", "txs", "status", "size"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Block from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in txs (list)
        _items = []
        if self.txs:
            for _item in self.txs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['txs'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Block from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commitment": obj.get("commitment"),
            "height": obj.get("height"),
            "state_root": obj.get("state_root"),
            "priority_operations": obj.get("priority_operations"),
            "on_chain_l2_operations": obj.get("on_chain_l2_operations"),
            "pending_on_chain_operations_pub_data": obj.get("pending_on_chain_operations_pub_data"),
            "committed_tx_hash": obj.get("committed_tx_hash"),
            "committed_at": obj.get("committed_at"),
            "verified_tx_hash": obj.get("verified_tx_hash"),
            "verified_at": obj.get("verified_at"),
            "txs": [Tx.from_dict(_item) for _item in obj["txs"]] if obj.get("txs") is not None else None,
            "status": obj.get("status"),
            "size": obj.get("size")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


