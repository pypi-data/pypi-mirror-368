# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class Trade(BaseModel):
    """
    Trade
    """ # noqa: E501
    trade_id: StrictInt
    tx_hash: StrictStr
    type: StrictStr
    market_id: StrictInt
    size: StrictStr
    price: StrictStr
    usd_amount: StrictStr
    ask_id: StrictInt
    bid_id: StrictInt
    ask_account_id: StrictInt
    bid_account_id: StrictInt
    is_maker_ask: StrictBool
    block_height: StrictInt
    timestamp: StrictInt
    taker_fee: Optional[StrictInt]
    taker_position_size_before: StrictStr
    taker_entry_quote_before: StrictStr
    taker_initial_margin_fraction_before: Optional[StrictInt]
    taker_position_sign_changed: Optional[StrictBool]
    maker_fee: Optional[StrictInt]
    maker_position_size_before: StrictStr
    maker_entry_quote_before: StrictStr
    maker_initial_margin_fraction_before: Optional[StrictInt]
    maker_position_sign_changed: Optional[StrictBool]
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["trade_id", "tx_hash", "type", "market_id", "size", "price", "usd_amount", "ask_id", "bid_id", "ask_account_id", "bid_account_id", "is_maker_ask", "block_height", "timestamp", "taker_fee", "taker_position_size_before", "taker_entry_quote_before", "taker_initial_margin_fraction_before", "taker_position_sign_changed", "maker_fee", "maker_position_size_before", "maker_entry_quote_before", "maker_initial_margin_fraction_before", "maker_position_sign_changed"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['trade', 'liquidation', 'deleverage']):
            raise ValueError("must be one of enum values ('trade', 'liquidation', 'deleverage')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Trade from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Trade from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "trade_id": obj.get("trade_id"),
            "tx_hash": obj.get("tx_hash"),
            "type": obj.get("type"),
            "market_id": obj.get("market_id"),
            "size": obj.get("size"),
            "price": obj.get("price"),
            "usd_amount": obj.get("usd_amount"),
            "ask_id": obj.get("ask_id"),
            "bid_id": obj.get("bid_id"),
            "ask_account_id": obj.get("ask_account_id"),
            "bid_account_id": obj.get("bid_account_id"),
            "is_maker_ask": obj.get("is_maker_ask"),
            "block_height": obj.get("block_height"),
            "timestamp": obj.get("timestamp"),
            "taker_fee": obj.get("taker_fee"),
            "taker_position_size_before": obj.get("taker_position_size_before"),
            "taker_entry_quote_before": obj.get("taker_entry_quote_before"),
            "taker_initial_margin_fraction_before": obj.get("taker_initial_margin_fraction_before"),
            "taker_position_sign_changed": obj.get("taker_position_sign_changed"),
            "maker_fee": obj.get("maker_fee"),
            "maker_position_size_before": obj.get("maker_position_size_before"),
            "maker_entry_quote_before": obj.get("maker_entry_quote_before"),
            "maker_initial_margin_fraction_before": obj.get("maker_initial_margin_fraction_before"),
            "maker_position_sign_changed": obj.get("maker_position_sign_changed")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


