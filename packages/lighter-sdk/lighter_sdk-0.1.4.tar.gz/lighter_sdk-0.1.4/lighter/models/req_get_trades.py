# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ReqGetTrades(BaseModel):
    """
    ReqGetTrades
    """ # noqa: E501
    auth: Optional[StrictStr] = None
    market_id: Optional[StrictInt] = None
    account_index: Optional[StrictInt] = -1
    order_index: Optional[StrictInt] = None
    sort_by: StrictStr
    sort_dir: Optional[StrictStr] = 'desc'
    cursor: Optional[StrictStr] = None
    var_from: Optional[StrictInt] = Field(default=-1, alias="from")
    ask_filter: Optional[StrictInt] = None
    limit: Annotated[int, Field(le=100, strict=True, ge=1)]
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["auth", "market_id", "account_index", "order_index", "sort_by", "sort_dir", "cursor", "from", "ask_filter", "limit"]

    @field_validator('sort_by')
    def sort_by_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['block_height', 'timestamp', 'trade_id']):
            raise ValueError("must be one of enum values ('block_height', 'timestamp', 'trade_id')")
        return value

    @field_validator('sort_dir')
    def sort_dir_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['desc']):
            raise ValueError("must be one of enum values ('desc')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReqGetTrades from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReqGetTrades from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auth": obj.get("auth"),
            "market_id": obj.get("market_id"),
            "account_index": obj.get("account_index") if obj.get("account_index") is not None else -1,
            "order_index": obj.get("order_index"),
            "sort_by": obj.get("sort_by"),
            "sort_dir": obj.get("sort_dir") if obj.get("sort_dir") is not None else 'desc',
            "cursor": obj.get("cursor"),
            "from": obj.get("from") if obj.get("from") is not None else -1,
            "ask_filter": obj.get("ask_filter"),
            "limit": obj.get("limit")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


