[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "thoth-vdbmanager"
version = "0.7.0"
authors = [
    {name = "Marco Pancotti", email = "mp@tylconsulting.it"},
]
description = "A vector database management module for ThothAI Project"
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["vector-database", "ai", "machine-learning", "embeddings", "similarity-search"]
dependencies = [
    # Core dependencies
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    # Haystack framework (for document store compatibility)
    "haystack-ai>=2.12.0",
    # External embedding providers
    "openai>=1.0.0",
    "cohere>=4.0.0",
    "mistralai>=0.1.0",
    "requests>=2.25.0",
    "aiohttp>=3.8.0",
    "tenacity>=8.0.0",
    "qdrant-haystack>=9.1.1,<9.2.0",
    "qdrant-client>=1.15.0,<1.16.0",
    "chroma-haystack>=3.0.0",
    "chromadb>=1.0.0",
    "pgvector-haystack>=5.0.0",
    "pgvector>=0.4.0",
    "psycopg>=3.0.0",
    "milvus-haystack>=0.0.16",
    "pymilvus>=2.5.0",
]

[project.urls]
"Homepage" = "https://github.com/mptyl/thoth_vdb2"
"Bug Tracker" = "https://github.com/mptyl/thoth_vdb2/issues"
"Documentation" = "https://github.com/mptyl/thoth_vdb2#readme"
"Source Code" = "https://github.com/mptyl/thoth_vdb2"

[project.optional-dependencies]
# Test dependencies
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "docker>=7.0.0",
    "PyYAML>=6.0.0",
]


# Vector database backends - Core (no grpcio conflicts)
qdrant = [
    "qdrant-haystack>=9.1.1,<9.2.0",
    "qdrant-client>=1.15.0,<1.16.0",
]
chroma = [
    "chroma-haystack>=3.0.0",
    "chromadb>=1.0.0",
]
pgvector = [
    "pgvector-haystack>=5.0.0",
    "pgvector>=0.4.0",
    "psycopg>=3.0.0",
]
milvus = [
    "milvus-haystack>=0.0.16",
    "pymilvus>=2.5.0",
    "grpcio>=1.49.1,<=1.67.1",  # Explicit constraint to prevent conflicts
    "protobuf>=5.26.1,<6.0.0",  # Compatible with grpcio<=1.67.1
]

# Convenience groups
all = [
    # All supported backends
    "qdrant-haystack>=9.1.1,<9.2.0",
    "qdrant-client>=1.15.0,<1.16.0",
    "chroma-haystack>=3.0.0",
    "chromadb>=1.0.0",
    "pgvector-haystack>=5.0.0",
    "pgvector>=0.4.0",
    "psycopg>=3.0.0",
    "milvus-haystack>=0.0.16",
    "pymilvus>=2.5.0",
    "grpcio>=1.49.1,<=1.67.1",
    "protobuf>=5.26.1,<6.0.0",
]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "docker>=7.0.0",
    "PyYAML>=6.0.0",
]

# uv configuration
[tool.uv]
dev-dependencies = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "docker>=7.0.0",
    "PyYAML>=6.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "build>=1.0.0",
    "twine>=4.0.0",
]

[tool.uv.sources]
# Use local development version when available
thoth-vdbmanager = { workspace = true }

# Hatch configuration for package discovery
[tool.hatch.build.targets.wheel]
packages = ["thoth_vdbmanager"]

[tool.hatch.build.targets.sdist]
include = [
    "/thoth_vdbmanager",
    "/README.md",
    "/LICENSE.md",
]
exclude = [
    "/tests",
    "/test_*",
    "/docker-compose*.yml",
    "/test_config.yaml",
]

# Tool configurations
[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["B011"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "docker.*",
    "qdrant_client.*",
    "chromadb.*",
    "pymilvus.*",
    "pgvector.*",
    "haystack.*",
    "openai.*",
    "cohere.*",
    "mistralai.*",
    "requests.*",
    "aiohttp.*",
    "tenacity.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["test_e2e_vectordb"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["thoth_vdbmanager"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
