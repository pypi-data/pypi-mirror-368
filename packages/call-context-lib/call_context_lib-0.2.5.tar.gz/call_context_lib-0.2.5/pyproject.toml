[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "call-context-lib"
version = "0.2.5"
description = "A context management library for Python applications with callback support"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
authors = [
    {name = "Jihoon Kim", email = "pigberger70@gmail.com"},
]
maintainers = [
    {name = "Jihoon Kim", email = "pigberger70@gmail.com"},
]
keywords = ["context", "callback", "context-management", "library", "python"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Typing :: Typed",
]
dependencies = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0",
    "build>=0.10.0",
    "twine>=4.0.0",
    "setuptools>=78.1.1",
    "pip-audit>=2.7.0",
    "bandit>=1.7.0",
]

[project.urls]
"Homepage" = "https://github.com/jitokim/call-context-lib"
"Bug Tracker" = "https://github.com/jitokim/call-context-lib/issues"
"Repository" = "https://github.com/jitokim/call-context-lib"
"Documentation" = "https://jitokim.github.io/call-context-lib"

[tool.hatch.build.targets.wheel]
packages = ["libs/call_context_lib/src/call_context_lib"]

[tool.hatch.build.targets.sdist]
include = [
    "/libs",
    "/tests",
    "/examples",
    "/README.md",
    "/LICENSE",
]

[tool.ruff]
target-version = "py39"
line-length = 100

[tool.ruff.lint]
select = [
    "E",
    "F",
    "I",
    "B",
    "UP",
]
ignore = [
    "E501",
    "E731",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "ANN",
    "SIM",
]
"examples/**/*" = [
    "ANN",
]

[tool.ruff.lint.isort]
known-first-party = ["call_context_lib"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["libs/call_context_lib"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
