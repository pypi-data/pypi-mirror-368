# Python package configuration
# ============================================================================ #
[build-system]
requires = [
    "scikit-build-core",
    "f90wrap",
    "numpy>=2",  # for f2py
]
build-backend = "scikit_build_core.build"

# ============================================================================ #
[project]
name = "gvec"
description = "Galerkin Variational Equilibrium Code"
dependencies = [
    "PyYAML",
    "f90wrap",
    "netcdf4",
    "numpy>=2",
    "pyevtk",
    "requests",
    "scipy",
    "tomlkit",
    "tqdm",
    "xarray",
]
authors = [
    {name = "Florian Hindenlang"},
    {name = "Robert Babin"},
    # with additional contributions from a number of people. Thank you!
]
maintainers = [
    {name = "Florian Hindenlang", email = "florian.hindenlang@ipp.mpg.de"},
    {name = "Robert Babin", email = "robert.babin@ipp.mpg.de"},
]
requires-python = ">=3.10"
# match-case, intrinsic typing union
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Fortran",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Physics",
]
keywords = ["plasma", "mhd", "equilibrium"]
readme.file = "README.md"
readme.content-type = "text/markdown"
license.file = "LICENSE.txt"
dynamic = ["version"]

[project.urls]
Homepage = "https://gitlab.mpcdf.mpg.de/gvec-group/gvec"
Documentation = "https://gvec.readthedocs.io/latest"
Repository = "https://gitlab.mpcdf.mpg.de/gvec-group/gvec"
Mirror = "https://github.com/gvec-group/gvec"
Issues = "https://gitlab.mpcdf.mpg.de/gvec-group/gvec/-/issues"

[project.optional-dependencies]
dev = ["pytest"]
examples = ["matplotlib", "jupyter", "ipywidgets", "ipympl", "simsopt"]

[project.scripts]
pygvec = "gvec.scripts.main:main"

# ============================================================================ #
[tool.scikit-build]
minimum-version = "0.8"
logging.level = "DEBUG"
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = [
    "python/gvec/_version.py",
]
sdist.exclude = [
    "CI_templates",
    "CI_images",
    "docs",
    "template",
    "test-CI",
    "tools",
]
build-dir = "pybuild"
editable.rebuild = false

[tool.scikit-build.cmake]
verbose = true
version = ">=3.22"

[tool.scikit-build.cmake.define]
CMAKE_BUILD_TYPE = "Release"
CMAKE_HOSTNAME = {env="CMAKE_HOSTNAME"}
COMPILE_PYGVEC = "On"
COMPILE_GVEC = "On"
COMPILE_GVEC_TO_CASTOR3D = "On"
COMPILE_GVEC_TO_GENE = "On"
COMPILE_GVEC_TO_JOREK = "On"
COMPILE_GVEC_TO_HOPR = "On"
LINK_GVEC_TO_NETCDF = "On"
COMPILE_GVEC_AS_STATIC_LIB = "On"
USE_OPENMP = "On"
USE_MPI = "Off"
USE_FTIMINGS = "Off"

[tool.setuptools_scm]
version_file = "python/gvec/_version.py"

# ============================================================================ #
[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
]
markers = [
    "example: mark test as a example, which are all tests specified in `test-CI/examples`, executed in folder `rundir/example`",
    "restart: mark test as a restart (deduced from example folder name). Needs the example to be run first!",
    "shortrun: mark test as a short run  (executed in folder `rundir/shortrun`, overwrites parameters: `testlevel=-1` and `MaxIter=1`)",
    "debugrun: mark test as a debug run (executed in folder `rundir/debugrun`, overwrites parameters: `testlevel=2` and `MaxIter=1`)",
    "run_stage: mark test belonging to the run stage (executed for all testgroups into a `rundir`)",
    "post_stage: mark test belonging to the post-processing stage (executed for all testgroups into a `postdir/post`, activates visualization parameters). Needs `run_stage` to be executed before in a given `rundir` directory.",
    "regression_stage: mark test belonging to the regression stage (compares files from `rundir` and  `refdir`. The `--refdir` argument is mandatory!",
    "converter_stage: mark test belonging to the post-processing converter stage (executed for all testgroups into a `postdir/converter-name`, for all compiled converters). Needs `run_stage` to be executed before in a given `rundir` directory.",
    "unit: mark test as a unittest - a test that is isolated and tests a specific functionality",
    "pygvec: mark test that are related to the python bindings",
]

[tool.ruff]
line-length = 96

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["F841"]
"*.py" = ["F401"]
"docs/conf.py" = ["E402"]
