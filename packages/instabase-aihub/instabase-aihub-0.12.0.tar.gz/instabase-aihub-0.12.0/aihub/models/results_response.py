# coding: utf-8

"""
    AI Hub API

    The AI Hub REST API. See https://docs.instabase.com/api-sdk/ for more details.

    The version of the OpenAPI document: 0.1
    Contact: support@instabase.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from aihub.models.file_with_documents import FileWithDocuments
from aihub.models.results_response_keys import ResultsResponseKeys
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ResultsResponse(BaseModel):
    """
    ResultsResponse
    """ # noqa: E501
    batch_id: Optional[StrictStr] = Field(default=None, description="The batch ID used as input for this run, if run using a batch.")
    files: Optional[List[FileWithDocuments]] = None
    keys: Optional[ResultsResponseKeys] = None
    has_more: Optional[StrictBool] = Field(default=None, description="Indicates whether additional results are available beyond those included in the current response. Use the `file_offset` query parameter to specify the starting point when fetching the next set of results.")
    review_completed: Optional[StrictBool] = Field(default=None, description="Indicates whether the run or document has completed review.")
    __properties: ClassVar[List[str]] = ["batch_id", "files", "keys", "has_more", "review_completed"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ResultsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item in self.files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['files'] = _items
        # override the default output from pydantic by calling `to_dict()` of keys
        if self.keys:
            _dict['keys'] = self.keys.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ResultsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batch_id": obj.get("batch_id"),
            "files": [FileWithDocuments.from_dict(_item) for _item in obj.get("files")] if obj.get("files") is not None else None,
            "keys": ResultsResponseKeys.from_dict(obj.get("keys")) if obj.get("keys") is not None else None,
            "has_more": obj.get("has_more"),
            "review_completed": obj.get("review_completed")
        })
        return _obj


