[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "llamaagent"
dynamic = ["version"]
description = "Advanced AI Agent Framework with Enterprise Features"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Nik Jois", email = "nikjois@llamasearch.ai" }
]
maintainers = [
    { name = "Nik Jois", email = "nikjois@llamasearch.ai" }
]
keywords = [
    "ai", "agent", "llm", "automation", "enterprise", "distributed",
    "orchestration", "tools", "reasoning", "multimodal"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.11"

# Core dependencies with version ranges for compatibility
dependencies = [
    # Core framework
    "pydantic>=2.0.0,<3.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "structlog>=23.0.0,<24.0.0",
    "rich>=13.0.0,<14.0.0",
    "typer>=0.9.0,<1.0.0",
    "click>=8.1.0,<9.0.0",
    "datasette>=0.64",
    "sqlite-utils>=3.36",

    # Async and HTTP
    "httpx>=0.25.0,<1.0.0",
    "aiofiles>=23.0.0,<24.0.0",

    # AI and LLM (simplified)
    "openai>=1.0.0,<2.0.0",

    # Web framework
    "fastapi>=0.100.0,<1.0.0",
    "uvicorn[standard]>=0.23.0,<1.0.0",
    "starlette>=0.27.0,<1.0.0",

    # Database and storage (lightweight)
    "sqlalchemy>=2.0.0,<3.0.0",

    # Data processing
    "numpy>=1.24.0,<2.0.0",
    "pyyaml>=6.0.0,<7.0.0",

    # Monitoring and observability
    "prometheus-client>=0.17.0,<1.0.0",
    "psutil>=5.9.0,<6.0.0",

    # Security
    "cryptography>=41.0.0,<43.0.0",
    "bcrypt>=4.0.0,<5.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-xdist>=3.3.0,<4.0.0",
    "pytest-mock>=3.11.0,<4.0.0",
    "coverage[toml]>=7.0.0,<8.0.0",
    "pre-commit>=3.5.0,<4.0.0",
    "mypy>=1.8.0,<2.0.0",
    "ruff>=0.1.0,<1.0.0",
    "black>=23.7.0,<24.0.0",
    "isort>=5.12.0,<6.0.0",
    "basedpyright>=1.10.0,<2.0.0",
]

# Enhanced AI capabilities
ai-extended = [
    "anthropic>=0.3.0,<1.0.0",
    "sentence-transformers>=2.2.0,<3.0.0",
    "tiktoken>=0.5.0,<1.0.0",
]

# Redis and caching
redis = [
    "redis>=4.6.0,<5.0.0",
    "aioredis>=2.0.0,<3.0.0",
]

# Data processing
data = [
    "pandas>=2.0.0,<3.0.0",
    "asyncio-throttle>=1.0.0,<2.0.0",
]

# Security and auth
auth = [
    "python-jose[cryptography]>=3.3.0,<4.0.0",
]

# Database drivers (optional)
postgres = [
    "asyncpg>=0.28.0,<1.0.0",
    "psycopg2-binary>=2.9.0,<3.0.0",
]

# Vector databases and search
vector = [
    "chromadb>=0.4.0,<1.0.0",
]

# Distributed computing
distributed = [
    "celery>=5.3.0,<6.0.0",
    "redis>=4.6.0,<5.0.0",
]

# Monitoring and observability
monitoring = [
    "prometheus-client>=0.17.0,<1.0.0",
    "psutil>=5.9.0,<6.0.0",
]

# Enterprise features
enterprise = [
    "docker>=6.0.0,<7.0.0",
]

# Documentation
docs = [
    "sphinx>=7.0.0,<8.0.0",
    "sphinx-rtd-theme>=2.0.0,<3.0.0",
    "sphinx-autodoc-typehints>=1.24.0,<2.0.0",
    "myst-parser>=2.0.0,<3.0.0",
]

# All optional dependencies
all = [
    "llamaagent[ai-extended,redis,data,auth,postgres,vector,distributed,monitoring,enterprise]"
]

[project.urls]
Homepage = "https://github.com/nikjois/llamaagent"
Documentation = "https://nikjois.github.io/llamaagent"
Repository = "https://github.com/nikjois/llamaagent"
"Bug Tracker" = "https://github.com/nikjois/llamaagent/issues"
Changelog = "https://github.com/nikjois/llamaagent/releases"

[project.scripts]
llamaagent = "llamaagent.cli:main"
llamaagent-server = "llamaagent.api:run_server"
llm-cmd = "llamaagent.cli.llm_cmd:cli"

[project.entry-points."llamaagent.tools"]
calculator = "llamaagent.tools.calculator:CalculatorTool"
python_repl = "llamaagent.tools.python_repl:PythonREPLTool"

[tool.hatch.version]
path = "src/llamaagent/_version.py"

[tool.hatch.build]
include = [
    "/src/llamaagent",
    "/tests",
    "/docs",
    "/scripts",
    "/README.md",
    "/LICENSE",
]
exclude = [
    "/.git",
    "/.venv",
    "/venv",
    "/__pycache__",
    "/*.egg-info",
    "/build",
    "/dist",
    "/.pytest_cache",
    "/.mypy_cache",
    "/.ruff_cache",
    "/node_modules",
]

[tool.basedpyright]
include = ["src/**/*.py"]
exclude = ["**/__pycache__", "**/node_modules", "**/.venv"]
reportMissingImports = false
reportMissingTypeStubs = false
reportMissingModuleSource = false
reportUnusedImport = false
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportConstantRedefinition = false
pythonVersion = "3.11"
pythonPlatform = "All"
typeCheckingMode = "basic"
useLibraryCodeForTypes = true

[tool.pyright]
include = ["src/**/*.py"]
exclude = ["**/__pycache__", "**/node_modules", "**/.venv"]
reportMissingImports = false
reportMissingTypeStubs = false
reportMissingModuleSource = "warning"
reportUnusedImport = false
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportConstantRedefinition = false
pythonVersion = "3.11"
pythonPlatform = "All"
typeCheckingMode = "basic"
useLibraryCodeForTypes = true

[tool.hatch.build.sources]
"src" = "."

[tool.hatch.build.targets.wheel]
packages = ["src/llamaagent"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/scripts",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

# Environment configurations
[tool.hatch.envs.default]
python = "3.11"
dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "coverage[toml]>=7.0.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "black>=23.7.0",
    "pre-commit>=3.5.0",
]

[tool.hatch.envs.default.scripts]
# Testing scripts
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
test-cov-report = [
    "test-cov",
    "coverage report",
    "coverage html"
]
test-fast = "pytest -x --ff {args:tests}"
test-parallel = "pytest -n auto {args:tests}"

# Code quality scripts
lint = [
    "ruff check {args:src tests}",
    "black --check {args:src tests}",
    "mypy {args:src}"
]
format = [
    "black {args:src tests}",
    "ruff check --fix {args:src tests}",
    "ruff format {args:src tests}"
]
check = [
    "format",
    "lint",
    "test"
]

# Development scripts
install-dev = "pip install -e .[dev,all]"
setup-dev = [
    "install-dev",
    "pre-commit install"
]

[tool.hatch.envs.test]
template = "default"
dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "coverage[toml]>=7.0.0",
]

[[tool.hatch.envs.test.matrix]]
python = ["3.11", "3.12"]

[tool.hatch.envs.docs]
dependencies = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build -b html docs docs/_build/html"
serve = "python -m http.server 8000 --directory docs/_build/html"
clean = "rm -rf docs/_build"

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "black>=23.7.0",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/llamaagent tests}"
style = [
    "ruff check {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff check --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

# Tool configurations
[tool.black]
target-version = ["py311"]
line-length = 88
skip-string-normalization = true
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
]
unfixable = [
    "ERA001", # commented out code
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]
"scripts/**/*" = ["T201"]
"docs/**/*" = ["T201"]

[tool.ruff.isort]
known-first-party = ["llamaagent"]
force-single-line = true

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-type-checking]
strict = true

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
implicit_reexport = false
strict_equality = true
show_error_codes = true
show_column_numbers = true

# Per-module settings
[[tool.mypy.overrides]]
module = [
    "kafka.*",
    "redis.*",
    "psycopg2.*",
    "sqlalchemy.*",
    "openai.*",
    "anthropic.*",
    "transformers.*",
    "torch.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=llamaagent",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.paths]
llamaagent = ["src/llamaagent", "*/llamaagent/src/llamaagent"]
tests = ["tests", "*/llamaagent/tests"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = false
precision = 2
fail_under = 0
