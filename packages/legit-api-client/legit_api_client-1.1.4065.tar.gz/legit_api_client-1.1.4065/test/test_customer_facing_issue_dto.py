# coding: utf-8

"""
    Inventory

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from legit_api_client.models.customer_facing_issue_dto import CustomerFacingIssueDto

class TestCustomerFacingIssueDto(unittest.TestCase):
    """CustomerFacingIssueDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CustomerFacingIssueDto:
        """Test CustomerFacingIssueDto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CustomerFacingIssueDto`
        """
        model = CustomerFacingIssueDto()
        if include_optional:
            return CustomerFacingIssueDto(
                id = '',
                title = '',
                detected_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_closed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_action_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                status = 'Open',
                issue_type = 'Misconfiguration',
                severity = 'Low',
                policy_severity = 'Low',
                closing_reason = 'Unknown',
                closing_location = 'Unknown',
                status_changed_note = '',
                remediation_steps = [
                    ''
                    ],
                snoozed_type = 'DueDate',
                snoozed_until = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                score = 1.337,
                epss_score = 1.337,
                additional_data = None,
                ai_validation_result = 'NotValidated',
                dast_confidence_level = 'Unknown',
                validity_status = 'NotApplicable',
                validity_check_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                verified_validation_url = '',
                minimal_dependency_fix_type = 'NotApplicable',
                sources = [
                    legit_api_client.models.customer_facing_issue_source_dto.CustomerFacingIssueSourceDto(
                        integration_id = '', 
                        name = '', )
                    ],
                comments = [
                    legit_api_client.models.issue_comment_dto.IssueCommentDto(
                        id = '', 
                        commented_by = '', 
                        comment = '', 
                        creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        is_edited = True, 
                        is_deleted = True, )
                    ],
                tags = [
                    legit_api_client.models.issue_tag_dto.IssueTagDto(
                        tag_id = '', 
                        tag_name = '', 
                        time_added = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                tickets = [
                    ''
                    ],
                origin_id = '',
                origin_type = 'Collaborator',
                origin_link = '',
                action_id = '',
                policy_name = '',
                product_ids = [
                    ''
                    ],
                assigned_user_id = ''
            )
        else:
            return CustomerFacingIssueDto(
        )
        """

    def testCustomerFacingIssueDto(self):
        """Test CustomerFacingIssueDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
