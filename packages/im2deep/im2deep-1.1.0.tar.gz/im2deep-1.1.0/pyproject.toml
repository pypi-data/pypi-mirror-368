[project]
name = "im2deep"
description = "Framework for prediction of collisional cross-section of peptides."
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["proteomics", "peptide", "timsTOF", "CCS"]
authors = [
    { name = "Robbe Devreese", email = "robbe.devreese@ugent.be" },
    { name = "Robbin Bouwmeester", email = "robbin.bouwmeester@ugent.be" },
    { name = "Ralf Gabriels", email = "ralf@gabriels.dev" },
]
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]
dynamic = ["version"]
requires-python = ">=3.10"
dependencies = [
    "click",
    "deeplc<4",
    "psm_utils",
    "pandas",
    "numpy==1.26.0",
    "rich",
]

[project.optional-dependencies]
dev = [
    "black>=23.0",
    "isort>=5.12",
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "mypy>=1.0",
    "pre-commit>=3.0"
]
docs = [
    "sphinx>=6.0",
    "numpydoc>=1.5",
    "recommonmark>=0.7",
    "sphinx-mdinclude>=0.5",
    "toml>=0.10",
    "semver>=2.13",
    "sphinx_rtd_theme>=1.2",
    "sphinx-autobuild>=2021.3"
]
er = [
    "im2deeptrainer", 
    "torch==2.3.0"]

[project.urls]
GitHub = "https://github.com/CompOmics/IM2Deep"
CompOmics = "https://www.compomics.com"

[project.scripts]
im2deep = "im2deep.__main__:main"

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
version = {attr = "im2deep.__version__"}

[tool.isort]
profile = "black"
line_length = 99
known_first_party = ["im2deep"]
known_third_party = ["click", "deeplc", "psm_utils", "pandas", "numpy", "rich"]

[tool.black]
line-length = 99
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "deeplc.*",
    "torch.*",
    "im2deeptrainer.*",
    "psm_utils.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config"
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["im2deep"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.ruff]
line-length = 99
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
