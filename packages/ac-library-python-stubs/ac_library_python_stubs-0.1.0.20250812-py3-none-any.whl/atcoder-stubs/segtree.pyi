from typing import Callable, Generic, TypeVar

S = TypeVar("S")

class SegTree(Generic[S]):
    def __init__(self, op: Callable[[S, S], S], e: S, v: int | list[S]) -> None: ...
    def set(self, p: int, x: S) -> None: ...
    def get(self, p: int) -> S: ...
    def prod(self, left: int, right: int) -> S: ...
    def all_prod(self) -> S: ...
    def max_right(self, left: int, f: Callable[[S], bool]) -> int: ...
    def min_left(self, right: int, f: Callable[[S], bool]) -> int: ...
    def _update(self, k: int) -> None: ...
