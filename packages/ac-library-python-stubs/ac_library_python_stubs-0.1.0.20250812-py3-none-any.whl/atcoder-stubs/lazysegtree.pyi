from typing import Callable, Generic, TypeVar

S = TypeVar("S")
F = TypeVar("F")

class LazySegTree(Generic[S, F]):
    def __init__(
        self,
        op: Callable[[S, S], S],
        e: S,
        mapping: Callable[[F, S], S],
        composition: Callable[[F, F], F],
        id_: F,
        v: int | list[S],
    ) -> None: ...
    def set(self, p: int, x: S) -> None: ...
    def get(self, p: int) -> S: ...
    def prod(self, left: int, right: int) -> S: ...
    def all_prod(self) -> S: ...
    def apply(
        self, left: int, right: int | None = None, f: F | None = None
    ) -> None: ...
    def max_right(self, left: int, g: Callable[[S], bool]) -> int: ...
    def min_left(self, right: int, g: Callable[[S], bool]) -> int: ...
    def _update(self, k: int) -> None: ...
    def _all_apply(self, k: int, f: F) -> None: ...
    def _push(self, k: int) -> None: ...
