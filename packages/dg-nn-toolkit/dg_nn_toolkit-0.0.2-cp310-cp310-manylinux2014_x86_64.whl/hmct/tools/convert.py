import argparse
import logging

from onnxmltools.utils import float16_converter

from horizon_nn.ir.onnx_utils import load_model, save_model


def convert_float_to_float16(onnx_model):
    fp16_model = float16_converter.convert_float_to_float16(
        onnx_model,
        keep_io_types=True,
    )
    # TODO(hdy): The model generated by convert_float_to_float16
    # may fail the check.
    # checker.check_model(fp16_model)
    save_model(fp16_model, "fp16_model.onnx")


def convert_float16_to_float(onnx_model):
    raise ValueError("To be supported!")


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--onnx_model",
        "-om",
        type=str,
        required=True,
        help="Input onnx model(.onnx) file.",
    )
    parser.add_argument(
        "--convert_to",
        "-ct",
        type=str,
        choices=["fp16", "fp32", "opset11"],
        required=True,
        help="Convert the model to the specified type.",
    )

    return parser.parse_args()


def main():
    logging.basicConfig(level=logging.INFO)
    args = get_args()
    onnx_model = load_model(args.onnx_model)
    if args.convert_to == "fp16":
        convert_float_to_float16(onnx_model)
    if args.convert_to == "fp32":
        convert_float16_to_float(onnx_model)


if __name__ == "__main__":
    main()
