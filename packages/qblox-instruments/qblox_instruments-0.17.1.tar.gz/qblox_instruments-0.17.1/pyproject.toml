[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "qblox_instruments"
dynamic = ["version"]
dependencies = [
    "fastjsonschema",
    "ifaddr",
    "numpy",
    "qcodes>=0.20.0,!=0.41.0",
    "spirack",
]
requires-python = ">=3.9"
authors = [
    {name = "Qblox BV", email = "support@qblox.com"},
]
description = "Instrument drivers for Qblox devices."
readme = "README.rst"
license = {text = "BSD 4-Clause"}
keywords = ["Qblox", "QCoDeS", "instrument", "driver"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-runner",
    "ruff==0.9.*",
    "scipy",
    "twine!=5.1.0",  # see twine upstream issue: https://github.com/pypa/twine/issues/1125
    "typos",  # Finds and corrects spelling mistakes among source code
]

[project.urls]
Homepage = "https://www.qblox.com/"
Documentation = "https://docs.qblox.com/en/main/index.html"
Repository = "https://gitlab.com/qblox/packages/software/qblox_instruments"
"Bug Tracker" = "https://gitlab.com/qblox/packages/software/qblox_instruments/-/issues"
Changelog = "https://gitlab.com/qblox/packages/software/qblox_instruments/-/blob/main/HISTORY.rst"

[project.scripts]
qblox-cfg = "qblox_instruments.cfg_man.main:_main"
qblox-pnp = "qblox_instruments.pnp.main:_main"


[tool.setuptools.packages.find]
include = [
    "qblox_instruments",
    "qblox_instruments/assemblers",
    "qblox_instruments.cfg_man",
    "qblox_instruments.pnp",
    "qblox_instruments.ieee488_2",
    "qblox_instruments.scpi",
    "qblox_instruments.simulations",
    "qblox_instruments.native",
    "qblox_instruments.native.spi_rack_modules",
    "qblox_instruments.qcodes_drivers",
    "qblox_instruments.qcodes_drivers.spi_rack_modules",
]
namespaces = false

[tool.setuptools.package-data]
"*" = ["LICENSE", "README.rst", "AUTHORS.rst", "HISTORY.rst"]
"qblox_instruments" = [
    "assemblers/q1asm_linux",
    "assemblers/q1asm_macos",
    "assemblers/q1asm_windows.exe",
]


[tool.ruff]
exclude = [
    ".venv",
    "**/scpi/cluster.py",  # Autogenerated code
    "**/scpi/cfg_man.py",  # Autogenerated code
    "generic_func.py",  # Deprecated code
    "setup.py",
]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "F",     # Pyflakes
    "E",     # pycodestyle
    "W",     # pycodestyle
#    "C90",   # mccabe
    "I",     # isort
    "N",     # pep8-naming
#    "D",     # pydocstyle
    "UP",    # pyupgrade
#    "ANN",   # flake8-annotations
#    "A",     # flake8-builtins
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TC",    # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PL",    # Pylint (PLC, PLE, PLR, PLW)
    "FLY",   # flynt
    "NPY",   # NumPy-specific rules
    "PERF",  # Perfint
    "RUF",   # Ruff-specific rules
    "ANN2",  # Missing return type annotation
    "D202",  # No blank lines allowed after function docstring
    "D414",  # No empty sections in docstrings
]
ignore = [
    "D105",     # Missing docstring in magic method
    "D107",     # Missing docstring in `__init__` (it should be completely absent in our convention)
    "D203",     # 1 blank line required before class docstring  (conflict with D211)
    "D205",     # blank-line-after-summary (Conflicts when summary is too large
    "D212",     # Multi-line docstring summary should start at the first line (conflict with D213)
    "D401",     # Docstrings should be in imperative mood
    "ARG002",   # Unused method argument
    "PLR0912",  # Too many branches (... > 12)
    "PLR0913",  # Too many arguments to function call (... > 5)
    "PLR0915",  # Too many statements (... > 50)
    "PLR2004",  # Magic value used in comparison, consider replacing `...` with a constant variable
    "N803",     # Argument name `...` should be lowercase
    "N806",     # Variable `...` in function should be lowercase
    "N815",     # Variable `...` in class scope should not be mixedCase
    "UP015",    # Unnecessary open mode parameters
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104", "D205", "D415", "D400", "I001"]
# Use ternary operator instead of `if`-`else`-block
"**/ieee488_2/dummy_transport.py" = ["SIM108"]
"**/ieee488_2/module_dummy_transport.py" = ["SIM108"]
"**/native/cluster.py" = ["SIM108"]
# Enable rule ONLY for this file
"!**/native/cluster.py" = ["D202"]
# Test don't need to be properly linted
"tests/**/*.py" = ["ANN", "ARG001", "PERF203"]


[tool.typos]
files.extend-exclude = [
    "**/scpi/cluster.py",
    "**/scpi/cfg_man.py",
    "*.svg",
]
default.extend-ignore-identifiers-re = [
    "CAPTure",
    "CAke",
    "FREQuency",
    "GENeral",
    "[A-Z0-9]{8}",
    "^AFE",
    "_afe_",
    "ser",
]


[tool.pytest.ini_options]
testpaths = [
    "tests",
]
markers = [
    "regression(issue_id=...): mark the test as a regression with an optional ID from the issue tracking system"
]
