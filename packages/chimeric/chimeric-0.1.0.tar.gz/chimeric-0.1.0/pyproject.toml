[project]
name = "chimeric"
dynamic = ["version"]
description = "Unified interface for multiple LLM providers with automatic provider detection and seamless switching"
authors = [
    { name = "Harvey Tseng", email = "harveytseng2@gmail.com" },
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11,<4.0"
keywords = ["llm", "ai", "openai", "gemini", "anthropic", "unified-interface", "multi-provider"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = [
    "pydantic>=2.11.5",
]


[project.urls]
Repository = "https://github.com/Verdenroz/chimeric"
Issues = "https://github.com/Verdenroz/chimeric/issues"
Documentation = "https://verdenroz.github.io/chimeric/"
Changelog = "https://github.com/Verdenroz/chimeric/blob/main/CHANGELOG.md"


[dependency-groups]
dev = [
    # Testing
    "pytest>=8.3.5",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "pytest-sugar>=1.0.0",
    "pytest-xdist>=3.5.0", # Parallel test execution
    # Code quality
    "ruff>=0.11.9",
    "basedpyright>=1.29.1",
    "codespell>=2.4.1",
    # Development utilities
    "rich>=14.0.0",
    "funlog>=0.2.1",
    "pre-commit>=3.6.0",
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocs-autorefs>=0.5.0",
    "mkdocstrings[python]>=0.24.0",
    "nox>=2025.5.1",
    "vcrpy>=7.0.0",
    "pytest-vcr>=1.0.2",
    "python-dotenv>=1.1.1",
]

[project.optional-dependencies]
openai = [
    "openai>=1.84.0",
]
anthropic = [
    "anthropic>=0.52.2",
]
google = [
    "google-genai>=1.2.0",
]
cohere = [
    "cohere>=5.15.0",
]
groq = [
    "groq>=0.4.0",
]
cerebras = [
    "cerebras-cloud-sdk>=1.35.0",
]
grok = [
    "xai-sdk>=1.0.0",
]
all = [
    "openai>=1.84.0",
    "anthropic>=0.52.2",
    "google-genai>=1.2.0",
    "cohere>=5.15.0",
    "groq>=0.4.0",
    "cerebras-cloud-sdk>=1.35.0",
    "xai-sdk>=1.0.0",
]


[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = true

[tool.hatch.build.targets.wheel]
packages = ["src/chimeric"]


[tool.ruff]
line-length = 100
target-version = "py311"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    # Pyflakes
    "F",
    # pycodestyle
    "E", "W",
    # isort
    "I",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # flake8-comprehensions
    "C4",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-pytest-style
    "PT",
    # flake8-return
    "RET",
    # flake8-self
    "SLF",
    # flake8-type-checking
    "TCH",
    # tryceratops
    "TRY",
    # Ruff-specific rules
    "RUF",
]

ignore = [
    # Line length handled by formatter
    "E501",
    # Module import not at top of file (sometimes needed for conditional imports)
    "E402",
    # Disable some overly strict docstring rules
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
    # Allow implicit string concatenation for readability
    "ISC001",
    # Allow raising vanilla exceptions in some cases
    "TRY003",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D", # Don't require docstrings in tests
    "SLF001", # Allow private member access in tests
    "PT011", # Allow broad pytest.raises
]

[tool.ruff.lint.isort]
known-first-party = ["chimeric"]
force-sort-within-sections = true


[tool.basedpyright]
include = ["src", "tests"]
executionEnvironments = [
  # Tests folder: disable private-usage and unknown-parameter warnings
  { root = "tests", reportPrivateUsage = false, reportUnknownParameterType = false },
  # Default for the rest of your code
  { root = "src" }
]
pythonVersion = "3.11"
pythonPlatform = "All"

# Core type checking settings
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportUnknownVariableType = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportMissingParameterType = false
reportUnnecessaryTypeIgnoreComment = true
reportUnusedCallResult = false

# Provider-specific adjustments (external libraries may have incomplete types)
reportAttributeAccessIssue = false
reportOptionalMemberAccess = false


[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=chimeric",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=100",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "openai: tests requiring OpenAI provider",
    "anthropic: tests requiring Anthropic provider",
    "google: tests requiring Google provider",
    "cerebras: tests requiring Cerebras provider",
    "cohere: tests requiring Cohere provider",
    "grok: tests requiring Grok provider",
    "groq: tests requiring Groq provider",
    "bare_install: tests with no optional dependencies",
    "all_extras: tests with all optional dependencies",
    "vcr: tests using VCR cassettes",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning:pkg_resources.*",
]


[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.codespell]
skip = "*.git,*.lock,*.json,__pycache__,*.pyc,*.egg-info,htmlcov,.coverage,coverage.xml,tests/integration/cassettes"
