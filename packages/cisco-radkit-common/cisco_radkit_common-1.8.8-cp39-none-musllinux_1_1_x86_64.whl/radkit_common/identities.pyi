from _typeshed import Incomplete
from pydantic import GetCoreSchemaHandler as GetCoreSchemaHandler
from pydantic_core import core_schema

class InvalidEndpointIDError(Exception): ...

class Email(str):
    def __new__(cls, value: str) -> Email: ...
    def __init__(self, value: str) -> None: ...
    @classmethod
    def __get_pydantic_core_schema__(cls, source: type, handler: GetCoreSchemaHandler) -> core_schema.CoreSchema: ...

class ClientID(Email): ...

class ServiceID(str):
    def __new__(cls, value: str) -> ServiceID: ...
    prefix: Incomplete
    def __init__(self, value: str) -> None: ...
    @classmethod
    def __get_pydantic_core_schema__(cls, source: type, handler: GetCoreSchemaHandler) -> core_schema.CoreSchema: ...
EndpointID = ClientID | ServiceID

def parse_endpoint_id(identity: str) -> EndpointID: ...

Identity: Incomplete
