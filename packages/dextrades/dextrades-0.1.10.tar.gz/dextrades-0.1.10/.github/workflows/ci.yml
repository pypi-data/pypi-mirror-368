name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.12']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Create virtual environment
        run: python -m venv .venv
      - name: Build and install with maturin (develop)
        uses: PyO3/maturin-action@v1
        env:
          VIRTUAL_ENV: ${{ github.workspace }}/.venv
        with:
          rust-toolchain: stable
          command: develop
          args: --release
      - name: Smoke test import
        shell: bash
        run: |
          PY=.venv/bin/python
          [ -f .venv/Scripts/python.exe ] && PY=.venv/Scripts/python
          "$PY" - << 'PY'
          import dextrades
          print('dextrades imported:', dextrades.__name__)
          c = dextrades.PyConfigBuilder()
          print('builder OK')
          PY
      - name: Install pytest
        shell: bash
        run: |
          PY=".venv/bin/python"
          if [ -f ".venv/Scripts/python.exe" ]; then PY=".venv/Scripts/python.exe"; fi
          "$PY" -m pip install --upgrade pip pytest
      - name: Run tests
        shell: bash
        run: |
          PY=".venv/bin/python"
          if [ -f ".venv/Scripts/python.exe" ]; then PY=".venv/Scripts/python.exe"; fi
          "$PY" -m pytest -v
      - name: Smoke test CLI import
        shell: bash
        run: |
          PY=".venv/bin/python"
          if [ -f ".venv/Scripts/python.exe" ]; then PY=".venv/Scripts/python.exe"; fi
          "$PY" - << 'PY'
          import dextrades_cli.cli as cli
          print('cli import OK')
          PY
