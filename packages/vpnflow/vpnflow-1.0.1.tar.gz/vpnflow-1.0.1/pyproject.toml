[tool.poetry]
name = "vpnflow"
version = "1.0.1"
description = "VPN FLOW"
license = "AGPL"
authors = ["Michael R. Kisel <aioboy@yandex.com>"]
maintainers = ["Michael R. Kisel <aioboy@yandex.com>"]
readme = "README.md"
keywords = ['vpn', 'flow']
classifiers = [
        "Development Status :: 5 - Production/Stable",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11"
]
packages = [{include = "vpnflow"}]

[tool.poetry.urls]
homepage = "https://pypi.org/project/vpnflow"

[tool.poetry.dependencies]
python = ">=3.8.1,<3.13"
aiogram = "3.13.1"
fastapi = "0.115.6"
uvicorn = "0.33.0"
SQLAlchemy = "2.0.37"
alembic = "1.14.0"
pydantic = "2.7.0"
pydantic-settings = "2.7.1"
asyncpg = "0.30.0"
PyYAML = "6.0.2"
asyncmy = "0.2.10"
redis = "5.2.1"
Jinja2 = "3.1.5"
prometheus-fastapi-instrumentator = "7.0.0"
aiocache = "0.12.3"
schedule = "1.2.2"
requests = "2.32.3"

[tool.poetry.dev-dependencies]
aiosqlite = "0.20.0"

[tool.poetry.group.optional.dependencies]
dagster = "1.8.13"
dagit = "1.8.13"

[tool.poetry.group.lint.dependencies]
black = "^24.8.0"
mypy = "^1.14.1"
pylint = "^3.2.7"
radon = "6.0.1"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"
coverage-badge = "^1.1.2"
httpx = "0.28.1"
locust = "2.25.0"

[tool.poetry.group.docs.dependencies]
pdoc3 = "^0.11.0"

[tool.poetry.scripts]
vpnflow = "vpnflow.__main__:main"

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
addopts = "--cov=vpnflow"
testpaths = ["tests"]

[tool.coverage.run]
omit = [
        "test_*", "vpnflow/bot/*",
        "vpnflow/db/tools.py", "vpnflow/flows/*",
        "vpnflow/services/*"
        ]

[tool.black]
quiet = true

[tool.mypy]
ignore_missing_imports = true
no_implicit_optional = true
check_untyped_defs = true
python_version = "3.8"
# files = "bot.py"
# plugins = "pydantic.mypy"
show_error_codes = true
show_error_context = true
pretty = true

[tool.locust]
locustfile = "tests/locustfile.py"
headless = true
host = "http://127.0.0.1:80"
users = 10
spawn-rate = 10
run-time = "1h30m"
csv = true

[tool.dagster]
module_name = "vpnflow.flows._dagster"
code_location_name = "vpnflow"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pylint.MASTER]
fail-under=8.0
ignore="test_*.py"
jobs=1
limit-inference-results=100
persistent="no" # yes
py-version="3.8"
recursive="no"
suggestion-mode="yes"
unsafe-load-any-extension="no"

[tool.pylint.'MESSAGES CONTROL']
disable="""raw-checker-failed,
        bad-inline-option,
        locally-disabled,
        file-ignored,
        suppressed-message,
        useless-suppression,
        deprecated-pragma,
        use-symbolic-message-instead,
        redefined-outer-name,
        missing-module-docstring,
        invalid-name,
        too-many-instance-attributes,
        too-few-public-methods,
        inconsistent-return-statements,
        logging-fstring-interpolation,
        no-else-return,
        consider-using-dict-items,
        no-member,
        anomalous-backslash-in-string"""
enable="c-extension-no-member"

[tool.pylint.REPORTS]
evaluation="max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format="text"
reports="no"
score="yes"

[tool.pylint.REFACTORING]
max-nested-blocks=5
never-returning-functions="sys.exit,argparse.parse_error"

[tool.pylint.BASIC]
argument-naming-style="snake_case"
attr-naming-style="snake_case"
bad-names="""foo,
          bar,
          baz,
          toto,
          tutu,
          tata"""
class-attribute-naming-style="any"
class-const-naming-style="UPPER_CASE"
class-naming-style="PascalCase"
const-naming-style="UPPER_CASE"
docstring-min-length=-1
function-naming-style="snake_case"
good-names="""i,
           j,
           k,
           ex,
           Run,
           _"""
include-naming-hint="no"
inlinevar-naming-style="any"
method-naming-style="snake_case"
module-naming-style="snake_case"
property-classes="abc.abstractproperty"
variable-naming-style="snake_case"

[tool.pylint.FORMAT]
indent-after-paren=4
indent-string='    '
max-line-length=120
max-module-lines=1000
single-line-class-stmt="no"
single-line-if-stmt="no"

[tool.pylint.LOGGING]
logging-format-style="old"
logging-modules="logging"

[tool.pylint.MISCELLANEOUS]
notes="FIXME, XXX, TODO"

[tool.pylint.SIMILARITIES]
ignore-comments="yes"
ignore-docstrings="yes"
ignore-imports="no"
ignore-signatures="no"
min-similarity-lines=4

[tool.pylint.SPELLING]
max-spelling-suggestions=4
spelling-ignore-comment-directives="fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"
spelling-store-unknown-words="no"

[tool.pylint.STRING]
check-quote-consistency="no"
check-str-concat-over-line-jumps="no"

[tool.pylint.TYPECHECK]
contextmanager-decorators="contextlib.contextmanager"
ignore-mixin-members="yes"
ignore-none="yes"
ignore-on-opaque-inference="yes"
ignored-classes="optparse.Values,thread._local,_thread._local"
missing-member-hint="yes"
missing-member-hint-distance=1
missing-member-max-choices=1
mixin-class-rgx=".*[Mm]ixin"

[tool.pylint.VARIABLES]
allow-global-unused-variables="yes"
dummy-variables-rgx="_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names="_.*|^ignored_|^unused_"
init-import="no"
redefining-builtins-modules="six.moves,past.builtins,future.builtins,builtins,io"

[tool.pylint.CLASSES]
check-protected-access-in-special-methods="no"
defining-attr-methods="__init__, __new__, setUp, __post_init__"
exclude-protected="_asdict, _fields, _replace, _source, _make"
valid-classmethod-first-arg="cls"
valid-metaclass-classmethod-first-arg="cls"

[tool.pylint.DESIGN]
max-args=5
max-attributes=7
max-bool-expr=5
max-branches=12
max-locals=15
max-parents=7
max-public-methods=20
max-returns=6
max-statements=50
min-public-methods=2

[tool.pylint.IMPORTS]
allow-wildcard-with-all="no"
analyse-fallback-blocks="no"
known-third-party="enchant"

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions="BaseException, Exception"
