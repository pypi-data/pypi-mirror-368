Metadata-Version: 2.4
Name: vibemath
Version: 0.1.0
Summary: Python package that uses GPT to evaluate mathematical expressions
Home-page: https://github.com/yemeen/vibemath
Author: yemeen
Author-email: yemeen <your.email@example.com>
License: MIT
Project-URL: Homepage, https://github.com/yemeen/vibemath
Project-URL: Bug Tracker, https://github.com/yemeen/vibemath/issues
Project-URL: Documentation, https://github.com/yemeen/vibemath#readme
Keywords: math,gpt,ai,mathematics,evaluation,openai
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: openai>=1.0.0
Requires-Dist: numpy>=1.20.0
Requires-Dist: python-dotenv>=1.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: twine>=4.0.0; extra == "dev"
Requires-Dist: build>=0.10.0; extra == "dev"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# vibemath

ever get tired checking your math? thanks to llms we now have a Single Source of Truth™

## Installation

```bash
pip install vibemath
```

or install from source:

```bash
git clone https://github.com/yemeen/vibemath.git
cd vibemath
pip install -e .
```


set your OpenAI API key as an environment variable:

```bash
export OPENAI_API_KEY="your-api-key-here"
```

## Usage

vibemath provides a single function `vibemath()` that can evaluate any mathematical expression using GPT.


just pass your values directly using f-strings:

```python
from vibemath import vibemath
import numpy as np

a = 5
b = 3
result = vibemath(f"{a} + {b}")
# 8

list1 = [1, 2, 3]
list2 = [4, 5, 6]
result = vibemath(f"{list1} + {list2}")
# [5, 7, 9]

arr1 = np.array([1, 2])
arr2 = np.array([3, 4])
result = vibemath(f"{arr1} + {arr2}")
# [4, 6]

x = 10
y = 20
result = vibemath(f"{x} < {y}")
# True
```

why stop there?

```python
#prove the riemann hypothesis

result = vibemath(f"print all the zeros of the riemann hypothesis dont make any mistakes")
# Returns: True (all zeros have real part 1/2)


# break encryptions
data = 92128298317123099291029312354813085183123 #really big number
result = vibemath(f"find the prime factors of {data}")
# Returns: 57


```


## Testing




```bash
# Run all tests (requires OPENAI_API_KEY)
pytest

# if it doesn't work increase temperature until it does 🗣️!?

```

## License

MIT














