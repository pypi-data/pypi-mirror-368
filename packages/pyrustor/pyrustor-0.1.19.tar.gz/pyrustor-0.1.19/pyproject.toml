[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "pyrustor"
description = "A high-performance Python code parsing and refactoring tool written in Rust"
readme = "README.md"
authors = [
    {name = "Hal", email = "hal.long@outlook.com"},
]
license = {file = "LICENSE"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Text Processing :: Linguistic",
]
keywords = ["python", "parser", "refactoring", "ast", "code-analysis", "rust"]
dynamic = ["version"]
dependencies = []

[dependency-groups]
test = [
    "pytest>=7.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",  # parallel testing
    "coverage[toml]>=7.0.0", # coverage with TOML support
    "psutil>=5.9.0",
]
benchmark = [
    { include-group = "test" },
]
dev = [
    { include-group = "benchmark" },
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pyo3-stubgen>=0.3.0",
    "maturin>=1.0.0",
    "safety>=3.6.0",
    "bandit>=1.7.10",
]

[project.urls]
Homepage = "https://github.com/loonghao/PyRustor"
Repository = "https://github.com/loonghao/PyRustor"
Documentation = "https://github.com/loonghao/PyRustor"
"Bug Tracker" = "https://github.com/loonghao/PyRustor/issues"

[tool.maturin]
features = ["pyo3/extension-module"]
python-source = "python"
python-packages = ["pyrustor"]
module-name = "pyrustor._pyrustor"
bindings = "pyo3"
manifest-path = "crates/pyrustor-python/Cargo.toml"
include = ["LICENSE", "README.md", "README_zh.md"]

[tool.ruff]
line-length = 88
target-version = "py38"
# Only check core Python source files
include = ["python/pyrustor/**/*.py"]
exclude = [
    "tests/**",
    "scripts/**",
    "benchmarks/**",
    "examples/**",
    "*.py", # Exclude root level Python files
    "python/pyrustor/__pycache__/**",
    "python/pyrustor/*.pyd",
    "python/pyrustor/*.so"
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "W293", # blank line contains whitespace
    "B904", # raise ... from err
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra", "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=pyrustor",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-branch",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "benchmark: Benchmark tests (deselect with '-m \"not benchmark\"')",
    "slow: Slow running tests (deselect with '-m \"not slow\"')",
    "network: Network access required tests",
    "parser: Parser-related tests",
    "refactor: Refactor-related tests",
    "error_handling: Error handling tests",
    "edge_case: Edge case tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["python/pyrustor"]
relative_files = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
precision = 2
skip_covered = false


