# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Create Release and Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      git_ref:
        description: pick a specific commit to release
        type: string
      version:
        description: release type
        required: true
        type: choice
        default: "patch"
        options:
          - "patch"
          - "minor"
          - "major"
      release_message:
        description: additional release message
        default: ''
        type: string

permissions:
  contents: write

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout specific ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref || 'main' }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
      
      - name: Set up Python
        run: uv python install 3.11
      
      - name: Bump version
        run: |
          # NOTE: put your own version bump steps here.
          uv version --bump ${{ inputs.version }}

      - name: Commit version bump
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "action@github.com"
          git add pyproject.toml
          git commit -m "Automated version bump & release ${{ inputs.release_message }}" -a
          git push

      - name: Build release distributions
        run: |
          # NOTE: put your own distribution build steps here.
          uv build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Create Tag & Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          version=$(uv version | awk '{print $2}')
          gh release create "$version" \
                --title="Release ${version}: ${{ inputs.release_message }}" \
                --generate-notes

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      url: https://pypi.org/p/ner-util/
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
