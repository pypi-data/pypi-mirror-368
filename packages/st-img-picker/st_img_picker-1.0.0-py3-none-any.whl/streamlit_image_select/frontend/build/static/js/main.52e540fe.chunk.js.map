{"version":3,"sources":["index.tsx"],"names":["labelDiv","document","body","appendChild","createElement","label","createTextNode","container","classList","add","Streamlit","events","addEventListener","RENDER_EVENT","event","data","detail","theme","style","font","color","textColor","base","querySelectorAll","forEach","el","remove","textContent","args","images","captions","allowMultiple","selectedIndices","Array","isArray","childNodes","length","image","i","item","box","img","src","caption","includes","onclick","filter","idx","push","setComponentValue","setFrameHeight","setComponentReady"],"mappings":"iKAAA,kBAEMA,EAAWC,SAASC,KAAKC,YAAYF,SAASG,cAAc,UAC5DC,EAAQL,EAASG,YAAYF,SAASK,eAAe,KACrDC,EAAYN,SAASC,KAAKC,YAAYF,SAASG,cAAc,QACnEG,EAAUC,UAAUC,IAAI,aAmGxBC,IAAUC,OAAOC,iBAAiBF,IAAUG,cA5F5C,SAAkBC,GAEhB,IAAMC,EAAQD,EAAkCE,OAE5CD,EAAKE,QACPjB,EAASkB,MAAMC,KAAOJ,EAAKE,MAAME,KACjCnB,EAASkB,MAAME,MAAQL,EAAKE,MAAMI,UACV,SAApBN,EAAKE,MAAMK,KACbrB,SAASC,KAAKqB,iBAAiB,kBAAkBC,SAAQ,SAACC,GACxDA,EAAGjB,UAAUC,IAAI,WAGnBR,SAASC,KAAKqB,iBAAiB,kBAAkBC,SAAQ,SAACC,GACxDA,EAAGjB,UAAUkB,OAAO,YAO1BrB,EAAMsB,YAAcZ,EAAKa,KAAL,MACpB,IAAIC,EAASd,EAAKa,KAAL,OACTE,EAAWf,EAAKa,KAAL,SACXG,EAAgBhB,EAAKa,KAAL,eAChBI,EAA4BD,EAC3BE,MAAMC,QAAQnB,EAAKa,KAAL,OAAsBb,EAAKa,KAAL,MAAqB,GAC1D,CAACb,EAAKa,KAAL,OAE+B,IAAhCrB,EAAU4B,WAAWC,QACvBP,EAAOL,SAAQ,SAACa,EAAeC,GAC7B,IAAIC,EAAOhC,EAAUJ,YAAYF,SAASG,cAAc,QACxDmC,EAAK/B,UAAUC,IAAI,SACsB,IAArCM,EAAKa,KAAL,qBACFW,EAAK/B,UAAUC,IAAI,WAGrB,IAAI+B,EAAMD,EAAKpC,YAAYF,SAASG,cAAc,QAClDoC,EAAIhC,UAAUC,IAAI,aAElB,IAAIgC,EAAMD,EAAIrC,YAAYF,SAASG,cAAc,QAIjD,GAHAqC,EAAIjC,UAAUC,IAAI,SAClBgC,EAAIC,IAAML,EAENP,EAAU,CACZ,IAAIa,EAAUJ,EAAKpC,YAAYF,SAASG,cAAc,QACtDuC,EAAQnC,UAAUC,IAAI,WACtBkC,EAAQhB,YAAcG,EAASQ,GAG7BN,EAAgBY,SAASN,KAC3BE,EAAIhC,UAAUC,IAAI,YAClBgC,EAAIjC,UAAUC,IAAI,aAGpBgC,EAAII,QAAU,WACRd,GAEiBC,EAAgBY,SAASN,IAG1CN,EAAkBA,EAAgBc,QAAO,SAAAC,GAAG,OAAIA,IAAQT,KACxDE,EAAIhC,UAAUkB,OAAO,YACrBe,EAAIjC,UAAUkB,OAAO,cAGrBM,EAAgBgB,KAAKV,GACrBE,EAAIhC,UAAUC,IAAI,YAClBgC,EAAIjC,UAAUC,IAAI,aAEpBC,IAAUuC,kBAAkBjB,KAG5BzB,EAAUgB,iBAAiB,aAAaC,SAAQ,SAACC,GAC/CA,EAAGjB,UAAUkB,OAAO,eAEtBM,EAAkB,CAACM,GACnB5B,IAAUuC,kBAAkBX,GAC5BE,EAAIhC,UAAUC,IAAI,YAClBgC,EAAIjC,UAAUC,IAAI,iBAU1BC,IAAUwC,oBAQZxC,IAAUyC,oBAIVzC,IAAUwC,mB","file":"static/js/main.52e540fe.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\n\nconst labelDiv = document.body.appendChild(document.createElement(\"label\"))\nconst label = labelDiv.appendChild(document.createTextNode(\"\"))\nconst container = document.body.appendChild(document.createElement(\"div\"))\ncontainer.classList.add(\"container\")\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  if (data.theme) {\n    labelDiv.style.font = data.theme.font\n    labelDiv.style.color = data.theme.textColor\n    if (data.theme.base === \"dark\") {\n      document.body.querySelectorAll(\".box, .caption\").forEach((el) => {\n        el.classList.add(\"dark\")\n      })\n    } else {\n      document.body.querySelectorAll(\".box, .caption\").forEach((el) => {\n        el.classList.remove(\"dark\")\n      })\n    }\n\n    // TODO: Gray out the component if it's disabled.\n  }\n\n  label.textContent = data.args[\"label\"]\n  let images = data.args[\"images\"]\n  let captions = data.args[\"captions\"]\n  let allowMultiple = data.args[\"allow_multiple\"]\n  let selectedIndices: number[] = allowMultiple \n    ? (Array.isArray(data.args[\"index\"]) ? data.args[\"index\"] : [])\n    : [data.args[\"index\"]]\n\n  if (container.childNodes.length === 0) {\n    images.forEach((image: string, i: number) => {\n      let item = container.appendChild(document.createElement(\"div\"))\n      item.classList.add(\"item\")\n      if (data.args[\"use_container_width\"] === true) {\n        item.classList.add(\"stretch\")\n      }\n\n      let box = item.appendChild(document.createElement(\"div\"))\n      box.classList.add(\"image-box\")\n\n      let img = box.appendChild(document.createElement(\"img\"))\n      img.classList.add(\"image\")\n      img.src = image\n\n      if (captions) {\n        let caption = item.appendChild(document.createElement(\"div\"))\n        caption.classList.add(\"caption\")\n        caption.textContent = captions[i]\n      }\n\n      if (selectedIndices.includes(i)) {\n        box.classList.add(\"selected\")\n        img.classList.add(\"selected\")\n      }\n\n      img.onclick = function () {\n        if (allowMultiple) {\n          // Toggle selection for multi-select\n          const isSelected = selectedIndices.includes(i)\n          if (isSelected) {\n            // Remove from selection\n            selectedIndices = selectedIndices.filter(idx => idx !== i)\n            box.classList.remove(\"selected\")\n            img.classList.remove(\"selected\")\n          } else {\n            // Add to selection\n            selectedIndices.push(i)\n            box.classList.add(\"selected\")\n            img.classList.add(\"selected\")\n          }\n          Streamlit.setComponentValue(selectedIndices)\n        } else {\n          // Single selection behavior (original logic)\n          container.querySelectorAll(\".selected\").forEach((el) => {\n            el.classList.remove(\"selected\")\n          })\n          selectedIndices = [i]\n          Streamlit.setComponentValue(i)\n          box.classList.add(\"selected\")\n          img.classList.add(\"selected\")\n        }\n      }\n    })\n  }\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"sourceRoot":""}