# grafana.py -- Generated by AI

"""Generate the code for Test case grafana.py based on the provided code of "retrieve.py" Keep it simple and test different scenarios"""

from datetime import datetime
from ..api import get_grafana_url

# config
TABLE = "rainn"
VALUE_COL = "Rainfall"


# Test 1: Default parameters (full range, limit=1000)
url1 = get_grafana_url(TABLE, VALUE_COL)
assert isinstance(url1, str)
assert "/explore?" in url1
assert "limit=1000" in url1


# Test 2: ISO-format string range + custom limit
url2 = get_grafana_url(
    TABLE,
    VALUE_COL,
    from_time="2025-03-01T00:00:00Z",
    to_time="2025-03-02T00:00:00Z",
    limit=2500,
)
assert "from" in url2 and "to" in url2
assert "limit=2500" in url2


# Test 3: Python datetime objects for range
start = datetime(2025, 3, 1, 0, 0)
end = datetime(2025, 3, 1, 12, 0)
url3 = get_grafana_url(TABLE, VALUE_COL, from_time=start, to_time=end)
# should embed the correct dates
assert "2025-03-01" in url3
assert "limit=1000" in url3  # default limit


# Test 4: Custom datasource & org_id
url4 = get_grafana_url(TABLE, VALUE_COL, datasource="MyCustomDS", org_id=2)
assert "datasource" in url4
assert "orgId=2" in url4


print("test_grafana_url passed")

print("URL1:", url1)
print("URL2:", url2)
print("URL3:", url3)
print("URL4:", url4)
