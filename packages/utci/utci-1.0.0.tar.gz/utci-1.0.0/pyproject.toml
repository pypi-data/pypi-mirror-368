[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "utci"
version = "1.0.0"
description = "Python implementation of Universal Thermal Climate Index (UTCI)"
authors = [
    {name = "Alex Zemliakov", email = "alex@ndr.su"},
]
maintainers = [
    {name = "Alex Zemliakov", email = "alex@ndr.su"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
keywords = [
    "utci",
    "thermal-comfort", 
    "biometeorology",
    "climate",
    "temperature",
    "heat-index",
    "thermal-stress",
    "environmental-science"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]

dependencies = [
    "numpy>=1.20.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.0.0",
    "pre-commit>=3.0.0",
]

docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.0.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "tox>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/marvell/utci"
Repository = "https://github.com/marvell/utci"
Documentation = "https://github.com/marvell/utci#readme"
"Bug Tracker" = "https://github.com/marvell/utci/issues"
Changelog = "https://github.com/marvell/utci/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["src"]
include = ["utci*"]

[tool.setuptools.package-data]
utci = ["py.typed"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["src"]
addopts = [
    "--verbose",
    "--cov=utci",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src/utci"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.8"
packages = ["src/utci"]
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true
namespace_packages = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "numpy.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py38"
line-length = 100
fix = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # Line too long
    "B008",  # Do not perform function call in argument defaults
    "C901",  # Too complex
    "W191",  # Indentation contains tabs
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["utci"]

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100