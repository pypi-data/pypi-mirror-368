from _typeshed import Incomplete
from collections.abc import Generator, Mapping
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from uuid import UUID, uuid4

__all__ = ['ConnectionStatus', 'Connection', 'AsyncConnection', 'AsyncConnections', 'AsyncEndpointConnections', 'AsyncEndpointConnectionsDict']

class ConnectionStatus(Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    FAILED = 'FAILED'

@dataclass
class Connection:
    endpoint: str
    uuid: UUID = field(default_factory=uuid4)
    status: ConnectionStatus = ...
    opened: datetime = field(default_factory=Incomplete)
    closed: datetime | None = ...
    exception: BaseException | None = ...

@dataclass(repr=False)
class AsyncConnection:
    __pt_repr__ = ...
    def uuid(self) -> UUID: ...
    def endpoint(self) -> str: ...
    def status(self) -> ConnectionStatus: ...
    def opened(self) -> datetime: ...
    def closed(self) -> datetime | None: ...
    def exception(self) -> BaseException | None: ...

@dataclass(repr=False)
class AsyncConnections(Mapping[int, AsyncConnection]):
    __pt_repr__ = ...
    def __iter__(self) -> Generator[int, None, None]: ...
    def __getitem__(self, index: int) -> AsyncConnection: ...
    def __len__(self) -> int: ...

@dataclass(repr=False)
class AsyncEndpointConnections:
    __pt_repr__ = ...
    def connections(self) -> AsyncConnections: ...

@dataclass(repr=False)
class AsyncEndpointConnectionsDict(Mapping[str, AsyncEndpointConnections]):
    __pt_repr__ = ...
    def __iter__(self) -> Generator[str, None, None]: ...
    def __getitem__(self, endpoint: str) -> AsyncEndpointConnections: ...
    def __len__(self) -> int: ...
