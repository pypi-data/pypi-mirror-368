from _typeshed import Incomplete
from anyio.abc import TaskGroup
from collections.abc import AsyncGenerator, Iterator, Mapping, Sequence
from contextlib import AbstractAsyncContextManager, asynccontextmanager
from enum import Enum
from typing import Protocol
from typing_extensions import Self

__all__ = ['AsyncTask', 'AsyncJoinedTasks', 'async_join', 'JoinedTasksStatus']

class AsyncTask(Protocol):
    async def wait(self) -> object: ...
    def status(self) -> object: ...

class JoinedTasksStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCESS = 'SUCCESS'
    PARTIAL_SUCCESS = 'PARTIAL_SUCCESS'
    FAILED = 'FAILED'

class AsyncJoinedTasks(Mapping[int, AsyncTask]):
    __pt_repr__: Incomplete
    def __init__(self, awaitables: Sequence[AsyncTask], task_group: TaskGroup) -> None: ...
    @classmethod
    @asynccontextmanager
    async def create(cls, awaitables: Sequence[AsyncTask]) -> AsyncGenerator[Self, None]: ...
    def __getitem__(self, key: int) -> AsyncTask: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def status(self) -> JoinedTasksStatus: ...
    async def wait(self, timeout: float | None = None) -> None: ...
    async def as_completed(self) -> AsyncGenerator[AsyncTask, None]: ...
    async def show_progress(self, label: str = 'Tasks completed') -> None: ...
    def done_count(self) -> int: ...
    def success_count(self) -> int: ...
    def failure_count(self) -> int: ...

def async_join(*tasks: AsyncTask) -> AbstractAsyncContextManager[AsyncJoinedTasks]: ...
