from ..device import AsyncDevice, AsyncDeviceDict
from ..request import AsyncTransformedFillerRequest
from ..state import AsyncServiceState
from .xpath_results import AsyncDeviceToSingleXPathResultDict, AsyncDeviceToXPathResultsDict, AsyncGetSingleXPathResult
from collections.abc import Iterator, Mapping
from prompt_toolkit.formatted_text import AnyFormattedText
from radkit_common.protocol.device_actions import DeviceAction, DeviceActionPartialResponse
from radkit_common.protocol.netconf import GetNetconfXpaths
from typing import Any
from uuid import UUID

__all__ = ['AsyncYangNode', 'AsyncSingleDeviceYangNode']

class AsyncYangNode(Mapping[str, 'AsyncYangNode']):
    def __pt_repr__(self) -> AnyFormattedText: ...
    def __init__(self, service_state: AsyncServiceState, device_uuids: set[UUID], path: tuple[str, ...] = ()) -> None: ...
    def name(self) -> str: ...
    def devices(self) -> AsyncDeviceDict: ...
    def xpath(self) -> str: ...
    def namespaces(self) -> dict[str, str]: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: str) -> AsyncYangNode: ...
    def get(self, synced: bool = False) -> AsyncTransformedFillerRequest[DeviceAction[GetNetconfXpaths], DeviceActionPartialResponse[dict[str, Any]], AsyncDeviceToXPathResultsDict, AsyncDeviceToSingleXPathResultDict]: ...

class AsyncSingleDeviceYangNode(Mapping[str, 'AsyncSingleDeviceYangNode']):
    def __pt_repr__(self) -> AnyFormattedText: ...
    def __init__(self, service_state: AsyncServiceState, uuid: UUID, path: tuple[str, ...] = ()) -> None: ...
    def name(self) -> str: ...
    def xpath(self) -> str: ...
    def device_name(self) -> str: ...
    def device(self) -> AsyncDevice: ...
    def namespaces(self) -> dict[str, str]: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: str) -> AsyncSingleDeviceYangNode: ...
    def get(self) -> AsyncTransformedFillerRequest[DeviceAction[GetNetconfXpaths], DeviceActionPartialResponse[dict[str, Any]], AsyncDeviceToXPathResultsDict, AsyncGetSingleXPathResult]: ...
