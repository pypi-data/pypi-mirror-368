from .authenticators import AnyAsyncCXDAuthenticator
from .token_data import CXDTokenData
from _typeshed import Incomplete
from collections.abc import Generator, Mapping
from dataclasses import dataclass
from radkit_client.async_.state import AsyncClientState
from radkit_common.domains import Domain
from radkit_common.protocol.upload_parameters import HTTPUploadParameters
from radkit_common.types import CustomSecretStr
from typing_extensions import TypeAlias

__all__ = ['AsyncCXDTarget', 'AsyncOfflineCXDTarget', 'AnyAsyncCXDTarget', 'CXDUploadURLTemplates', 'AsyncCXDTargetsDict']

class AsyncCXDTarget:
    __pt_repr__: Incomplete
    def __init__(self, target: str, authenticator: AnyAsyncCXDAuthenticator) -> None: ...
    def target(self) -> str: ...
    def authenticator(self) -> AnyAsyncCXDAuthenticator: ...
    def domain(self) -> Domain: ...
    async def get_upload_templates(self, force: bool = False) -> CXDUploadURLTemplates: ...

class AsyncOfflineCXDTarget:
    __pt_repr__: Incomplete
    def __init__(self, target: str, token: CustomSecretStr, hostname: str, domain: Domain) -> None: ...
    def target(self) -> str: ...
    def token(self) -> CustomSecretStr: ...
    def hostname(self) -> str: ...
    def domain(self) -> Domain: ...
    async def get_upload_templates(self, force: bool = False) -> CXDUploadURLTemplates: ...
AnyAsyncCXDTarget: TypeAlias = AsyncCXDTarget | AsyncOfflineCXDTarget

@dataclass
class CXDUploadURLTemplates:
    target: str
    token_data: CXDTokenData
    def ftp(self, device_name: str, file_name: str) -> str: ...
    def ftps(self, device_name: str, file_name: str) -> str: ...
    def sftp(self, device_name: str, file_name: str) -> str: ...
    def scp(self, device_name: str, file_name: str) -> str: ...
    def https(self, device_name: str, file_name: str) -> str: ...
    def to_http_upload_parameters(self, destination_file_name: str, device_name: str, notify_applications: list[str]) -> HTTPUploadParameters: ...

class AsyncCXDTargetsDict(Mapping[str, AnyAsyncCXDTarget]):
    __pt_repr__: Incomplete
    def __init__(self, client_state: AsyncClientState) -> None: ...
    def __iter__(self) -> Generator[str, None, None]: ...
    def __getitem__(self, index: str) -> AnyAsyncCXDTarget: ...
    def __len__(self) -> int: ...
