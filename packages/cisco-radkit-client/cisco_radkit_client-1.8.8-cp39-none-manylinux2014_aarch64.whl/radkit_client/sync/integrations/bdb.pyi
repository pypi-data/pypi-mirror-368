from _typeshed import Incomplete
from collections.abc import Sequence
from importlib.abc import Loader, MetaPathFinder
from importlib.machinery import ModuleSpec
from radkit_client.async_.integrations.bdb import AsyncBDB, BDBError as BDBError, BDBPermissions, BDBTaskCode, BDBTaskDict, DefaultFromSettings
from radkit_client.sync.cloud_connections import CloudConnection
from radkit_client.sync.from_async import SyncWrapper
from types import ModuleType
from typing import Any

__all__ = ['BDB', 'BDBError', 'BDBTaskFinder']

class _BDBTaskLoader(Loader):
    def __init__(self, package_name: str, bdb: BDB) -> None: ...
    def create_module(self, spec: ModuleSpec) -> ModuleType: ...
    def exec_module(self, module: ModuleType) -> None: ...
    def task_exists(self) -> bool: ...

class BDBTaskFinder(MetaPathFinder):
    is_experimental: Incomplete
    allow_external: Incomplete
    def __init__(self, bdb: BDB, is_experimental: bool = False, allow_external: bool = False) -> None: ...
    def find_spec(self, fullname: str, path: Sequence[str] | None = None, target: ModuleType | None = None) -> ModuleSpec | None: ...

class BDB(SyncWrapper[AsyncBDB]):
    def run_script(self, script: str, input: dict[str, str | int | float | bool] | None = None, asynchronous: bool = False, timeout: float | None | DefaultFromSettings = ..., connection: CloudConnection | None = None) -> Any: ...
    def upload_file(self, filepath: str, connection: CloudConnection | None = None) -> None: ...
    def upload_string_as_file(self, input: str, filename: str, connection: CloudConnection | None = None) -> None: ...
    def get_tasks(self, labels: list[str] | None = None, service: str = 'radkit3.9', connection: CloudConnection | None = None) -> BDBTaskDict: ...
    def get_task_code(self, task_name: str, file_name: str = '__init__.py', connection: CloudConnection | None = None) -> BDBTaskCode: ...
    def get_task_meta(self, task_name: str, connection: CloudConnection | None = None) -> Any: ...
    def permissions(self, reload: bool = False, connection: CloudConnection | None = None) -> BDBPermissions: ...
    def install_importhook(self) -> None: ...
    def uninstall_importhook(self) -> None: ...

class BDBImportHookAlreadyInstalledError(Exception): ...
