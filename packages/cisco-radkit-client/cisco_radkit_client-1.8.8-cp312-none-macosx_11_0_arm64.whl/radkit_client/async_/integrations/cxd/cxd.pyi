from .authenticators import AnyAsyncCXDAuthenticator
from .targets import AnyAsyncCXDTarget, AsyncCXDTargetsDict
from _typeshed import Incomplete
from radkit_client.async_.cloud_connections import AsyncCloudConnection
from radkit_client.async_.state import AsyncClientState
from radkit_common.domains import Domain
from radkit_common.identities import Email, Identity
from radkit_common.protocol.upload_parameters import HTTPUploadParameters
from typing import overload

__all__ = ['AsyncCXD']

class AsyncCXD:
    __pt_repr__: Incomplete
    logger: Incomplete
    def __init__(self, client_state: AsyncClientState) -> None: ...
    def targets(self) -> AsyncCXDTargetsDict: ...
    async def set_default_authenticator_from_cloud_connection(self, connection: AsyncCloudConnection) -> None: ...
    async def set_default_authenticator_from_oauth_token(self, token: str, domain: Domain | str | None = None) -> None: ...
    async def set_default_authenticator_from_client_id_secret(self, client_id: Identity, client_secret: str, user_email: Email, domain: Domain | str | None = None) -> None: ...
    def add_target_from_upload_token(self, target: str, token: str, hostname: str = 'cxd.cisco.com', domain: Domain | str | None = None, set_default: bool = False) -> None: ...
    def add_target_from_cloud_connection(self, target: str, connection: AsyncCloudConnection | None = None, set_default: bool = False) -> None: ...
    def add_target_from_oauth_token(self, target: str, token: str, domain: Domain | str | None = None, set_default: bool = False) -> None: ...
    async def add_target_from_client_id_secret(self, target: str, client_id: Identity, client_secret: str, user_email: Email, domain: Domain | str | None = None, set_default: bool = False) -> None: ...
    def add_target_from_default_authenticator(self, target: str, set_default: bool = False) -> None: ...
    def remove_target(self, target: str) -> None: ...
    def default_authenticator(self) -> AnyAsyncCXDAuthenticator | None: ...
    def set_default_target(self, target: str) -> None: ...
    def default_target(self) -> AnyAsyncCXDTarget | None: ...
    async def get_upload_parameters(self, target: str | None, file_name: str, *, prefix: str = 'radkit', notify_applications: list[str] | str | None = None) -> HTTPUploadParameters: ...
    @overload
    async def upload_to_cxd(self, target: str | None, *, data: str | bytes | None = ..., destination_file_name: str | None = None, prefix: str = ..., notify_applications: list[str] | str | None = ...) -> str: ...
    @overload
    async def upload_to_cxd(self, target: str | None, local_file_name: str | None = ..., *, destination_file_name: str | None = ..., prefix: str = ..., notify_applications: list[str] | str | None = ...) -> str: ...
