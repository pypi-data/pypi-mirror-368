from .client import Client
from .device import Device
from .device_flow import DeviceFlow as DeviceFlow, DeviceFlowMode
from .exec import ExecResponse_ByCommand_ToSingle, SingleExecResponse
from .request import FillerRequest, TransformedFillerRequest
from .terminal import InteractiveConnection
from _typeshed import Incomplete
from pydantic import BaseModel

__all__ = ['CatalystCenter', 'DeviceFlow', 'FlowMode']

BM = BaseModel
AnyTransformedFillerRequest = TransformedFillerRequest[BM, BM, object, object]
AnyFillerRequest = FillerRequest[BM, BM, object]

class TokenException(Exception): ...
class SWIMSException(Exception): ...

class CatalystCenter:
    logger: Incomplete
    catalyst_center: Device
    radkit_client: Client
    challenge: None | str
    swims_token: None | str
    raw_challenge: None | str
    raw_generated_challenge: None | str
    proxy: Incomplete
    def __init__(self, catalyst_center: Device) -> None: ...
    def check_consent_token_mode(self) -> bool: ...
    def refresh_challenge(self) -> None: ...
    def get_challenge(self, terminal: InteractiveConnection | None = None) -> str: ...
    def get_token(self, terminal: InteractiveConnection | None = None) -> str: ...
    def invalidate_token(self) -> None: ...
    def terminal(self) -> InteractiveConnection: ...
    def admin_terminal(self) -> InteractiveConnection: ...
    def interactive(self) -> None: ...
    def admin_interactive(self) -> None: ...
    def exec(self, commands: str | list[str], timeout: int = 0, reset_before: bool = False, reset_after: bool = False) -> SingleExecResponse[str] | ExecResponse_ByCommand_ToSingle[str]: ...
    def admin_exec(self, commands: str | list[str], timeout: int = 0, reset_before: bool = False, reset_after: bool = False) -> SingleExecResponse[str] | ExecResponse_ByCommand_ToSingle[str]: ...
FlowMode = DeviceFlowMode
