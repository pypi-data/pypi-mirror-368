from ..client import AsyncClient
from ..device import AsyncDevice, AsyncDeviceDict
from ..service import AsyncService
from .filter import ExecFilterFunction, ExecMapFunction, ExecRecord, ExecSortFunction
from .reactive import Reactive
from .state import AsyncExecState, AsyncSimpleExecRequest
from .status import ExecStatus
from _typeshed import Incomplete
from collections.abc import Iterator, Mapping, Sequence
from dataclasses import dataclass
from prompt_toolkit.formatted_text import AnyFormattedText
from radkit_common.identities import ClientID, ServiceID
from typing import Generic, final, overload
from typing_extensions import Self
from uuid import UUID

__all__ = ['AsyncExecResponseBase', 'AsyncExecResponse_ByIndex', 'AsyncExecResponse_ByStatus', 'AsyncExecResponse_ByCommand', 'AsyncExecResponse_ByDevice_ByCommand', 'AsyncExecResponse_ByCommand_ToSingle', 'AsyncExecResponse_ByDevice_ToSingle', 'AsyncSingleExecResponse']

@dataclass(frozen=True)
class _ViewParams(Generic[_DataType]):
    state: AsyncExecState
    exec_records: Reactive[Sequence[Reactive[ExecRecord[_DataType]]]]
    @classmethod
    def default_from_state(cls, state: AsyncExecState) -> _ViewParams[str]: ...
    def chain_filter(self, filter: ExecFilterFunction[_DataType]) -> _ViewParams[_DataType]: ...
    def chain_slice(self, slice: slice) -> _ViewParams[_DataType]: ...
    def chain_map(self, map_func: ExecMapFunction[_DataType, _DataType2]) -> _ViewParams[_DataType2]: ...
    def chain_sort(self, sort_key_func: ExecSortFunction[_DataType]) -> _ViewParams[_DataType]: ...

class AsyncExecResponseBase(Generic[_DataType]):
    def __init__(self, view_params: _ViewParams[_DataType]) -> None: ...
    def __len__(self) -> int: ...
    def __pt_repr__(self) -> AnyFormattedText: ...
    @final
    def sudo(self) -> bool: ...
    @final
    def requests(self) -> Sequence[AsyncSimpleExecRequest]: ...
    @final
    def cancel(self) -> None: ...
    @final
    def status(self) -> ExecStatus: ...
    @final
    def success(self) -> bool: ...
    @final
    async def wait(self, timeout: float | None = None) -> Self: ...
    @final
    async def show_progress(self) -> None: ...
    @final
    def commands(self) -> Sequence[str]: ...
    @final
    def device_names(self) -> Sequence[str]: ...
    @final
    def devices(self) -> AsyncDeviceDict: ...
    @final
    def client(self) -> AsyncClient: ...
    @final
    def excluded_commands(self) -> frozenset[str]: ...
    @final
    def excluded_device_uuids(self) -> frozenset[UUID]: ...
    @final
    def excluded_device_names(self) -> frozenset[str]: ...
    @final
    def excluded_devices(self) -> AsyncDeviceDict: ...
    @final
    def unfiltered(self) -> AsyncExecResponse_ByIndex[str]: ...
    @final
    def filter(self, filter_func: ExecFilterFunction[_DataType]) -> AsyncExecResponse_ByIndex[_DataType]: ...
    @final
    def map(self, map_func: ExecMapFunction[_DataType, _DataType2]) -> AsyncExecResponse_ByIndex[_DataType2]: ...
    @final
    def sort(self, sort_key_func: ExecSortFunction[_DataType]) -> AsyncExecResponse_ByIndex[_DataType]: ...
    @final
    def by_index(self) -> AsyncExecResponse_ByIndex[_DataType]: ...
    @final
    def by_status(self) -> AsyncExecResponse_ByStatus[_DataType]: ...
    @final
    def by_device(self) -> AsyncExecResponse_ByDevice[_DataType]: ...
    @final
    def by_device_type(self) -> AsyncExecResponse_ByDeviceType[_DataType]: ...
    @final
    def by_command(self) -> AsyncExecResponse_ByCommand[_DataType]: ...
    @final
    def by_device_by_command(self) -> AsyncExecResponse_ByDevice_ByCommand[_DataType]: ...
    @final
    def by_command_to_single(self, device_uuid: UUID) -> AsyncExecResponse_ByCommand_ToSingle[_DataType]: ...
    @final
    def by_device_to_single(self, command: str) -> AsyncExecResponse_ByDevice_ToSingle[_DataType]: ...
    @final
    def sort_by_device(self) -> AsyncExecResponse_ByIndex[_DataType]: ...
    @final
    def sort_by_command(self) -> AsyncExecResponse_ByIndex[_DataType]: ...
    @final
    def sort_by_status(self) -> AsyncExecResponse_ByIndex[_DataType]: ...
    @final
    def sort_by_device_type(self) -> AsyncExecResponse_ByIndex[_DataType]: ...

class AsyncExecResponse_ByIndex(AsyncExecResponseBase[_DataType], Mapping[int, 'AsyncSingleExecResponse[_DataType]'], Generic[_DataType]):
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    @overload
    def __getitem__(self, index: int) -> AsyncSingleExecResponse[_DataType]: ...
    @overload
    def __getitem__(self, index: slice) -> AsyncExecResponse_ByIndex[_DataType]: ...

class AsyncExecResponse_ByStatus(AsyncExecResponseBase[_DataType], Mapping[str | ExecStatus, 'AsyncExecResponse_ByIndex[_DataType]'], Generic[_DataType]):
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[str]: ...
    def __getitem__(self, key: str | ExecStatus) -> AsyncExecResponse_ByIndex[_DataType]: ...

class AsyncExecResponse_ByDevice_ByCommand(AsyncExecResponseBase[_DataType], Mapping[str, 'AsyncExecResponse_ByCommand_ToSingle[_DataType]'], Generic[_DataType]):
    @classmethod
    def from_exec_state(cls, exec_state: AsyncExecState) -> AsyncExecResponse_ByDevice_ByCommand[str]: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[str]: ...
    def __getitem__(self, device_name: str) -> AsyncExecResponse_ByCommand_ToSingle[_DataType]: ...

class AsyncExecResponse_ByCommand(AsyncExecResponseBase[_DataType], Mapping[str, 'AsyncExecResponse_ByIndex[_DataType]'], Generic[_DataType]):
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[str]: ...
    def __getitem__(self, command: str) -> AsyncExecResponse_ByIndex[_DataType]: ...

class AsyncExecResponse_ByDevice(AsyncExecResponseBase[_DataType], Mapping[str, 'AsyncExecResponse_ByIndex[_DataType]'], Generic[_DataType]):
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[str]: ...
    def __getitem__(self, device_name: str) -> AsyncExecResponse_ByIndex[_DataType]: ...

class AsyncExecResponse_ByDeviceType(AsyncExecResponseBase[_DataType], Mapping[str, 'AsyncExecResponse_ByIndex[_DataType]'], Generic[_DataType]):
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[str]: ...
    def __getitem__(self, device_type: str) -> AsyncExecResponse_ByIndex[_DataType]: ...

class AsyncExecResponse_ByCommand_ToSingle(AsyncExecResponseBase[_DataType], Mapping[str, 'AsyncSingleExecResponse[_DataType]'], Generic[_DataType]):
    def __init__(self, view_params: _ViewParams[_DataType], device_uuid: UUID) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[str]: ...
    def __getitem__(self, command: str) -> AsyncSingleExecResponse[_DataType]: ...
    def device(self) -> AsyncDevice: ...
    def device_name(self) -> str: ...

class AsyncExecResponse_ByDevice_ToSingle(AsyncExecResponseBase[_DataType], Mapping[str, 'AsyncSingleExecResponse[_DataType]'], Generic[_DataType]):
    def __init__(self, view_params: _ViewParams[_DataType], command: str) -> None: ...
    def command(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[str]: ...
    def __getitem__(self, device_name: str) -> AsyncSingleExecResponse[_DataType]: ...

class AsyncSingleExecResponse(AsyncExecResponseBase[_DataType], Generic[_DataType]):
    __pt_repr__: Incomplete
    __to_std_object__: Incomplete
    def __init__(self, view_params: _ViewParams[_DataType], record_id: int) -> None: ...
    @classmethod
    def from_device_and_command(cls, view_params: _ViewParams[_DataType], device_uuid: UUID, command: str) -> Self: ...
    def client_id(self) -> ClientID | None: ...
    def service_id(self) -> ServiceID | None: ...
    def command(self) -> str: ...
    def device(self) -> AsyncDevice: ...
    def device_uuid(self) -> UUID: ...
    def device_name(self) -> str: ...
    def device_type(self) -> str: ...
    def service(self) -> AsyncService: ...
    def raw_data(self) -> str: ...
    def data(self) -> _DataType: ...
    def errors(self) -> Sequence[str]: ...
    def request(self) -> AsyncSimpleExecRequest: ...
