from .service import AsyncService
from .state import AsyncClientState, AsyncServiceState
from _typeshed import Incomplete
from anyio import Event
from collections.abc import AsyncGenerator, Callable
from contextlib import AbstractAsyncContextManager, asynccontextmanager
from pathlib import Path
from prompt_toolkit.formatted_text import AnyFormattedText
from radkit_common.domains import Domain
from radkit_common.forwarder.client import ConnectionStatus
from radkit_common.identities import Email, ServiceID
from radkit_common.types import CustomSecretStr
from radkit_service.backends.credentials_backend import CredentialsBackend
from radkit_service.backends.devices_backend import DevicesBackend
from radkit_service.control.async_control_api import AsyncControlAPI
from radkit_service.launcher import ServiceState as Service_ServiceState

__all__ = ['create_integrated_service_state', 'AsyncIntegratedService', 'AsyncIntegratedServiceUiWebserver', 'AsyncIntegratedServiceDirectRpc', 'AsyncIntegratedServiceCloudRpc', 'AsyncIntegratedServiceSessionLogs', 'AsyncIntegratedServiceSecrets']

@asynccontextmanager
async def create_integrated_service_state(headless: bool = False, create_extra_devices_backend: Callable[[], AbstractAsyncContextManager[DevicesBackend]] | None = None, superadmin_password: CustomSecretStr | None = None) -> AsyncGenerator[Service_ServiceState, None]: ...

class AsyncIntegratedService:
    def __init__(self, service_state: AsyncServiceState, service_service_state: Service_ServiceState, control_api: AsyncControlAPI, terminate_event: Event) -> None: ...
    def __pt_repr__(self) -> AnyFormattedText: ...
    def service(self) -> AsyncService: ...
    def control_api(self) -> AsyncControlAPI: ...
    def e2ee_sha256_fingerprint(self) -> str | None: ...
    def ui_webserver(self) -> AsyncIntegratedServiceUiWebserver: ...
    def direct_rpc(self) -> AsyncIntegratedServiceDirectRpc: ...
    def cloud_rpc(self) -> AsyncIntegratedServiceCloudRpc: ...
    def secrets(self) -> AsyncIntegratedServiceSecrets: ...
    def session_logs(self) -> AsyncIntegratedServiceSessionLogs: ...
    async def panel(self) -> None: ...
    def total_request_count(self) -> int: ...
    def active_request_count(self) -> int: ...
    def suppress_logs(self) -> None: ...
    def unsuppress_logs(self) -> None: ...
    def terminate(self) -> None: ...

class AsyncIntegratedServiceCloudRpc:
    __pt_repr__: Incomplete
    def __init__(self, service_service_state: Service_ServiceState, client_state: AsyncClientState, control_api: AsyncControlAPI) -> None: ...
    def enable(self) -> None: ...
    def disable(self) -> None: ...
    def is_enabled(self) -> bool: ...
    def domain(self) -> Domain: ...
    def is_enrolled(self) -> bool: ...
    def service_id(self) -> ServiceID | None: ...
    def status(self) -> ConnectionStatus | None: ...
    async def enroll(self, service_id: ServiceID | str | None = None, service_owner_email: Email | str | None = None, description: str = '') -> None: ...

class AsyncIntegratedServiceDirectRpc:
    __pt_repr__: Incomplete
    def __init__(self, service_service_state: Service_ServiceState) -> None: ...
    def enable(self) -> None: ...
    def disable(self) -> None: ...
    def is_enabled(self) -> bool: ...
    def endpoints(self) -> list[str]: ...
    def sha256_fingerprint(self) -> str | None: ...

class AsyncIntegratedServiceUiWebserver:
    __pt_repr__: Incomplete
    def __init__(self, service_service_state: Service_ServiceState) -> None: ...
    def enable(self) -> None: ...
    def disable(self) -> None: ...
    def is_enabled(self) -> bool: ...
    def address(self) -> str | None: ...
    def sha256_fingerprint(self) -> str | None: ...

class AsyncIntegratedServiceSessionLogs:
    __pt_repr__: Incomplete
    def __init__(self, service_service_state: Service_ServiceState) -> None: ...
    def directory(self) -> Path: ...
    def max_age_in_days(self) -> int: ...

class AsyncIntegratedServiceSecrets:
    __pt_repr__: Incomplete
    def __init__(self, credentials_backend: CredentialsBackend) -> None: ...
    def path(self) -> Path: ...
