from collections.abc import Mapping, Sequence
from prompt_toolkit.formatted_text import StyleAndTextTuples
from typing import Any, AnyStr, Protocol

__all__ = ['ReprFunc', 'dict_repr', 'header', 'hint', 'styled_tabulate', 'raw_status', 'list_head', 'dict_rows', 'dict_cols', 'truncate', 'repr_or_head']

class ReprFunc(Protocol):
    def __call__(self, /, __obj: object) -> str: ...

def dict_repr(obj: Mapping[object, object]) -> str: ...
def repr_or_head(y: object) -> str: ...
def header(obj: object, blank: bool = True, repr_func: ReprFunc = ...) -> StyleAndTextTuples: ...
def hint(msg: str, blank: bool = True) -> StyleAndTextTuples: ...
def styled_tabulate(data: Sequence[Sequence[object]], style: str = '', style_map: Mapping[str, str] | None = None, alt_style: str = 'bg:#444444 fg:#ffffff', headers: Sequence[str] = ()) -> StyleAndTextTuples: ...
def raw_status(obj: object) -> str: ...
def list_head(items: Sequence[Any], n: int = 3, sep: str = ', ') -> str: ...
def dict_rows(data: Mapping[str, Any], title: str = '', headers: Sequence[str] = [], style: str = '', style_map: Mapping[str, str] | None = None, blank: bool = True) -> StyleAndTextTuples: ...
def dict_cols(data: Sequence[Mapping[str, Any]], title: str = '', style: str = '', style_map: Mapping[str, str] | None = None, blank: bool = True) -> StyleAndTextTuples: ...
def truncate(text: AnyStr, max_length: int = 80, left: bool = False) -> AnyStr: ...
