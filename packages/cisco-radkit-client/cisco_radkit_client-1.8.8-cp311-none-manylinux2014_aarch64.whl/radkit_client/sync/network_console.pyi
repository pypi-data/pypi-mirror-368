import click
from _typeshed import Incomplete
from collections.abc import Callable, Iterator, Sequence
from dataclasses import dataclass, field
from prompt_toolkit import PromptSession
from prompt_toolkit.completion import Completer, ThreadedCompleter
from prompt_toolkit.contrib.regular_languages.compiler import Variables, _CompiledGrammar
from prompt_toolkit.contrib.regular_languages.lexer import GrammarLexer
from prompt_toolkit.contrib.regular_languages.validation import GrammarValidator
from prompt_toolkit.formatted_text import AnyFormattedText
from radkit_client.sync.client import Client
from radkit_client.sync.cloud_connections import CloudConnection
from radkit_client.sync.port_forwarding import ProxyPortForwarder
from radkit_client.sync.service import Service
from radkit_client.sync.ssh_forwarding import ProxySshForwarder
from radkit_common.identities import ClientID, ServiceID
from typing import Annotated
from typing_extensions import Self

__all__ = ['NetworkConsole', 'run_network_console']

@dataclass
class SessionLogSettings:
    sr: str | None = ...
    auto_upload: bool = ...

@dataclass
class ParameterInfo:
    name: str
    hint: str
    pattern: str
    is_required: bool
    choices: Sequence[str] | Callable[[NetworkConsole], Sequence[str]] | None
    style: str | None

@dataclass(repr=False)
class OptionInfo(ParameterInfo): ...
@dataclass(repr=False)
class ArgumentInfo(ParameterInfo): ...
@dataclass(repr=False)
class SubcommandInfo(ParameterInfo): ...

@dataclass(repr=False)
class SelectedSubcommandInfo(SubcommandInfo):
    choice: str
    @classmethod
    def from_subcommand_info(cls, subcommand_info: SubcommandInfo, choice: str) -> Self: ...
AllParameterInfoTypes = OptionInfo | ArgumentInfo | SubcommandInfo
PermutationParameterInfoTypes = OptionInfo | ArgumentInfo | SelectedSubcommandInfo

@dataclass
class SuggestionElement:
    name: str
    display_name: str
    is_wildcard: bool = ...

@dataclass
class Suggestion:
    @classmethod
    def from_params(cls, params: list[PermutationParameterInfoTypes]) -> Self: ...
    def match(self, pieces: list[str]) -> str | None: ...

@dataclass
class ChoiceCombination:
    name: str
    choices: list[str]

@dataclass
class Command:
    name: str
    action: Callable[..., None]
    subcommand_group: CommandGroup = field(default_factory=Incomplete)
    suggestions = ...
    choices = ...
    regex = ...
    lexers = ...
    def __post_init__(self) -> None: ...
    def perform(self, vars: Variables) -> None: ...

@dataclass
class CommandGroup:
    def execute(self, cmd: str) -> None: ...
    def keys(self) -> list[str]: ...
    def __getitem__(self, key: str) -> Command: ...
    def __contains__(self, key: str) -> bool: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Command]: ...
    def __bool__(self) -> bool: ...
    def regex(self) -> str: ...
    @property
    def grammar(self) -> _CompiledGrammar: ...
    def get_completers(self, nc: NetworkConsole) -> dict[str, Completer]: ...
    def get_grammar_lexer(self) -> GrammarLexer: ...
    def get_grammar_validator(self) -> GrammarValidator: ...
    def get_suggestion(self, text: str) -> AnyFormattedText: ...

class NetworkConsole:
    logger: Incomplete
    intro: str
    client: Incomplete
    service: Service | None
    identity: ClientID | None
    cloud_connection: CloudConnection | None
    socks_proxy: ProxyPortForwarder | None
    http_proxy: ProxyPortForwarder | None
    ssh_proxy: ProxySshForwarder | None
    session_logs_settings: SessionLogSettings
    direct_connection_username: str | None
    commands: Incomplete
    promptsession: PromptSession[str]
    def __init__(self, client: Client, username: str | None = None, domain: str | None = None) -> None: ...
    def cmdloop(self) -> None: ...
    def execute(self, cmd: str) -> None: ...
    def do_help(self, help_action: Annotated[str | None, None]) -> None: ...
    def get_completer(self) -> ThreadedCompleter: ...
    def do_login(self, username: Annotated[str | None, None], domain: Annotated[str | None, None]) -> None: ...
    def do_logout(self) -> None: ...
    def do_upload(self, file_transfer_action: Annotated[str, None], device_name: Annotated[str, None], local_file: Annotated[str, None], remote_file: Annotated[str, None]) -> None: ...
    def do_cxd_upload(self, file_transfer_action: Annotated[str, None], device_name: Annotated[str, None], remote_file: Annotated[str, None], filename: Annotated[str | None, None]) -> None: ...
    def do_download(self, file_transfer_action: Annotated[str, None], device_name: Annotated[str, None], remote_file: Annotated[str, None], local_file: Annotated[str, None]) -> None: ...
    def do_reauthenticate(self) -> None: ...
    def do_service(self, service: Annotated[ServiceID, None], sr: Annotated[str | None, None], fingerprint: Annotated[str | None, None], access_token: Annotated[str | None, None], upload_method: Annotated[str | None, None]) -> None: ...
    def do_service_direct(self, host: Annotated[str, None], user: Annotated[str, None], fingerprint: Annotated[str | None, None], port: Annotated[int, None] = 8181) -> None: ...
    def do_service_direct_with_sso(self, service: Annotated[ServiceID, None], host: Annotated[str, None], fingerprint: Annotated[str | None, None], sr: Annotated[str | None, None], upload_method: Annotated[str | None, None], port: Annotated[int, None] = 8181) -> None: ...
    def do_update_inventory(self) -> None: ...
    def do_proxy_start(self, proxy_method: Annotated[str, None], proxy_port: Annotated[int, None]) -> None: ...
    def do_proxy_stop(self, proxy_method: Annotated[str, None]) -> None: ...
    def do_proxy(self, proxy_action: Annotated[str, None]) -> None: ...
    def do_show(self, show_action: Annotated[str, None]) -> None: ...
    def do_show_client(self) -> None: ...
    def do_show_service(self) -> None: ...
    def do_show_proxy(self) -> None: ...
    def do_show_version(self) -> None: ...
    def do_show_inventory(self, filter: Annotated[str | None, None]) -> None: ...
    def do_show_inventory_name(self, device_name: Annotated[str, None]) -> None: ...
    def do_show_inventory_description(self, description: Annotated[str, None]) -> None: ...
    def do_show_inventory_device_type(self, device_type: Annotated[str, None]) -> None: ...
    def do_show_port_forward_all(self) -> None: ...
    def do_show_port_forward(self, device_name: Annotated[str | None, None]) -> None: ...
    def do_port_forward(self, port_action: Annotated[str, None]) -> None: ...
    def do_port_forward_start(self, device_name: Annotated[str, None], remote_port: Annotated[int, None], local_port: Annotated[int, None]) -> None: ...
    def do_port_forward_stop(self, device_name: Annotated[str | None, None], forwarder_key: Annotated[int | None, None]) -> None: ...
    def do_show_sessions(self, device_name: Annotated[str | None, None]) -> None: ...
    def do_show_session_logs(self, device_name: Annotated[str | None, None]) -> None: ...
    def do_session_logs(self, log_action: Annotated[str, None]) -> None: ...
    def do_session_logs_upload_all(self) -> None: ...
    def do_session_logs_upload_from_device(self, device_name: Annotated[str, None]) -> None: ...
    def do_session_logs_upload(self, log_key: Annotated[int, None], new_filename: Annotated[str | None, None]) -> None: ...
    def do_session_logs_rotate(self, log_key: Annotated[int, None], new_filename: Annotated[str | None, None]) -> None: ...
    def do_attach(self, session_key: Annotated[int, None]) -> None: ...
    def do_interactive(self, terminal_device_name: Annotated[str, None]) -> None: ...
    def do_platform(self, platform: Annotated[str, None]) -> None: ...
    def do_linux(self, linux_device_name: Annotated[str, None], linux_action: Annotated[str, None]) -> None: ...
    def do_nso(self, nso_device_name: Annotated[str, None], nso_action: Annotated[str, None]) -> None: ...
    def do_crosswork(self, crosswork_device_name: Annotated[str, None], crosswork_action: Annotated[str, None]) -> None: ...
    def do_ftd(self, ftd_device_name: Annotated[str, None], ftd_action: Annotated[str, None]) -> None: ...
    def do_fmc(self, fmc_device_name: Annotated[str, None], fmc_action: Annotated[str, None]) -> None: ...
    def do_ccc(self, ccc_device_name: Annotated[str, None], ccc_action: Annotated[str, None]) -> None: ...
    def do_snmp(self, snmp_action: Annotated[str, None]) -> None: ...
    def do_snmp_get(self, snmp_device_name: Annotated[str, None], oid: Annotated[str, None], timeout: Annotated[float | None, None], retries: Annotated[int | None, None]) -> None: ...
    def do_snmp_walk(self, snmp_device_name: Annotated[str, None], oid: Annotated[str, None], timeout: Annotated[float | None, None], retries: Annotated[int | None, None]) -> None: ...
    def do_pwd(self) -> None: ...
    def do_cd(self, local_directory: Annotated[str | None, None]) -> None: ...
    def do_repl(self) -> None: ...
    def do_system(self, system_cmd: Annotated[str, None]) -> None: ...
    def do_exit(self) -> None: ...

def run_network_console(username: str | None = None, domain: str | None = None, interactive: bool = False, script: str | None = None) -> None: ...
