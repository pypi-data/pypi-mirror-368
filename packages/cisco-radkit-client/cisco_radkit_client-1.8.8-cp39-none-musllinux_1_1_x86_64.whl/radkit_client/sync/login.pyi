from .client import Client as Client
from .prompt import PromptInterrupted as PromptInterrupted
from .service import Service as Service
from collections.abc import Generator
from contextlib import contextmanager
from radkit_client.async_.settings import get_settings as get_settings
from radkit_common.access.oauth import OAuthConnectResponse as OAuthConnectResponse
from radkit_common.access.results import ErrorResult as ErrorResult
from radkit_common.domains import Domain
from radkit_common.identities import EndpointID as EndpointID
from radkit_common.types import CustomSecretStr as CustomSecretStr, OAuthProvider as OAuthProvider

@contextmanager
def sso_login(identity: EndpointID | None = None, domain: Domain | str | None = None, open_browser: bool | None = None, provider: OAuthProvider | None = None, oauth_connect_response: OAuthConnectResponse | None = None) -> Generator[Client, None, None]: ...
def certificate_login(identity: EndpointID | None = None, ca_path: str | None = None, cert_path: str | None = None, key_path: str | None = None, private_key_password: str | None = None, domain: Domain | str | None = None) -> Generator[Client, None, None]: ...
@contextmanager
def direct_login(username: str = 'superadmin', password: str | CustomSecretStr | None = None, rpc_url: str = 'https://localhost:8081/rpc', sha256_fingerprint: str | None = None) -> Generator[Service | PromptInterrupted, None, None]: ...
@contextmanager
def access_token_login(access_token: str, domain: Domain | str | None = None, provider: OAuthProvider | None = None) -> Generator[Client, None, None]: ...
def oauth_connect_only(identity: str | None = None, domain: Domain | str | None = None, provider: OAuthProvider | None = None) -> OAuthConnectResponse | ErrorResult | PromptInterrupted: ...
def enroll_client_from_otp(otp_access_token: str | None = None, private_key_password: str | None = None, overwrite_certificate: bool | None = None) -> None | PromptInterrupted: ...
def set_default_domain(domain: Domain | str) -> None: ...
