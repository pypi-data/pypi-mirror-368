from _typeshed import Incomplete
from collections.abc import Sequence

__all__ = ['get_content_decoder']

class ContentDecoder:
    def decode(self, data: bytes) -> bytes: ...
    def flush(self) -> bytes: ...

class IdentityDecoder(ContentDecoder):
    def decode(self, data: bytes) -> bytes: ...
    def flush(self) -> bytes: ...

class DeflateDecoder(ContentDecoder):
    first_attempt: bool
    decompressor: Incomplete
    def __init__(self) -> None: ...
    def decode(self, data: bytes) -> bytes: ...
    def flush(self) -> bytes: ...

class GZipDecoder(ContentDecoder):
    decompressor: Incomplete
    def __init__(self) -> None: ...
    def decode(self, data: bytes) -> bytes: ...
    def flush(self) -> bytes: ...

class MultiDecoder(ContentDecoder):
    children: Incomplete
    def __init__(self, children: Sequence[ContentDecoder]) -> None: ...
    def decode(self, data: bytes) -> bytes: ...
    def flush(self) -> bytes: ...

def get_content_decoder(response_headers: list[tuple[str, str]]) -> ContentDecoder: ...
