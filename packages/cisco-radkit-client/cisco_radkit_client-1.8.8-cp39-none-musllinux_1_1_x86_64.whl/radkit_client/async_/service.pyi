from .client import AsyncClient
from .cloud_connections import AsyncCloudConnection
from .device import AsyncDeviceDict
from .model import ServiceLoadingStatus
from .request import AsyncE2EEInformation, AsyncSimpleRequest
from .state import AsyncRequestsDict, AsyncServiceState, AsyncSessionLogsDict, AsyncSessionsDict, AsyncTCPPortForwardsDict
from _typeshed import Incomplete
from collections.abc import Iterator, Mapping
from dataclasses import dataclass
from enum import Enum
from radkit_common.domains import Domain
from radkit_common.identities import ClientID, ServiceID
from radkit_common.protocol import capabilities as c, inventory as p
from radkit_common.rpc import RPCCredentials, RPCName, RPCTarget
from radkit_common.types import CustomSecretStr
from typing import Any
from typing_extensions import Self

__all__ = ['Keep', 'AsyncServiceParameters', 'AsyncService', 'AsyncServiceCapabilities', 'ServiceStatus']

@dataclass(repr=False)
class AsyncServiceParameters:
    __pt_repr__ = ...
    def name(self) -> str: ...
    def client_id(self) -> ClientID | None: ...
    def service_id(self) -> ServiceID | None: ...
    def service(self) -> AsyncService: ...

class ServiceStatus(Enum):
    LOADING = 'LOADING'
    LOADING_FAILED = 'LOADING_FAILED'
    READY = 'READY'

class Keep: ...

class AsyncService:
    __pt_repr__: Incomplete
    __to_std_object__: Incomplete
    def __init__(self, service_state: AsyncServiceState) -> None: ...
    def reload(self, *, username: str = '', e2ee_fingerprint: str | None | Keep = ..., access_token: str | None | Keep = ...) -> Self: ...
    def logout(self) -> None: ...
    def set_e2ee_fingerprint(self, e2ee_fingerprint: str | None) -> None: ...
    def set_e2ee_credentials(self, *, username: str = '', access_token: str | CustomSecretStr) -> None: ...
    def set_e2ee_parameters(self, *, e2ee_fingerprint: str | None | Keep = ..., rpc_credentials: RPCCredentials | None | Keep = ..., always_invalidate_and_reload: bool = False) -> None: ...
    def reload_if_needed(self) -> None: ...
    async def wait(self, timeout: float | None = None) -> Self: ...
    def status(self) -> ServiceStatus: ...
    def target(self) -> RPCTarget: ...
    def domain(self) -> Domain | None: ...
    def domain_name(self) -> str | None: ...
    def name(self) -> str: ...
    def service_id(self) -> ServiceID | None: ...
    def client_id(self) -> ClientID | None: ...
    def connection(self) -> AsyncCloudConnection | None: ...
    def inventory(self) -> AsyncDeviceDict: ...
    def e2ee_active(self) -> bool: ...
    def direct_rpc_url(self) -> str | None: ...
    def version(self) -> str | None: ...
    def capabilities(self) -> AsyncServiceCapabilities: ...
    def e2ee_supported(self) -> bool: ...
    def supported_compression_methods(self) -> list[str] | None: ...
    def supports_h2_multiplexing(self) -> bool: ...
    def params(self) -> AsyncServiceParameters: ...
    def requests(self) -> AsyncRequestsDict: ...
    def sessions(self) -> AsyncSessionsDict: ...
    def session_logs(self) -> AsyncSessionLogsDict: ...
    def port_forwards(self) -> AsyncTCPPortForwardsDict: ...
    async def update_inventory(self, update_capabilities_timeout: float | None = None) -> AsyncSimpleRequest[p.GetBasicInventory, p.BasicInventoryResponse, InventoryUpdateResult]: ...
    def update_capabilities(self) -> AsyncSimpleRequest[c.GetCapabilities, c.GetCapabilitiesResponse, AsyncServiceCapabilities]: ...
    def loading_error(self) -> BaseException | None: ...
    async def ping(self, *, count: int = 4, payload_size: int = 56, concurrent: int = 1, interval: float = 1.0) -> None: ...
    async def get_e2ee_information(self) -> AsyncE2EEInformation: ...
    def client(self) -> AsyncClient: ...

@dataclass
class InventoryUpdateResult:
    __pt_repr__ = ...
    total_devices: int
    devices_added: int
    devices_removed: int

@dataclass(frozen=True)
class ServiceCapability:
    name: RPCName
    request_model_schema: Any
    response_model_schema: Any
    upload_model_schema: Any
    deprecated: bool

@dataclass(repr=False)
class AsyncServiceCapabilities(Mapping[int, ServiceCapability]):
    __pt_repr__ = ...
    def service_version(self) -> str | None: ...
    def service_name(self) -> str: ...
    def service_id(self) -> ServiceID | None: ...
    def __getitem__(self, key: int) -> ServiceCapability: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def status(self) -> ServiceLoadingStatus: ...
    async def wait(self, timeout: float | None = None) -> Self: ...
    def service(self) -> AsyncService: ...
