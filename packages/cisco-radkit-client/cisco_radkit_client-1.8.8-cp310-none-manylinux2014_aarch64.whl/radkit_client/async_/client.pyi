from .admin_client import AsyncAdminClient
from .cloud_connections import AsyncCloudConnection, AsyncCloudConnectionsDict
from .integrated import AsyncIntegratedService
from .integrations import AsyncIntegrations
from .model import ClientEnrollInfo, ServiceEnrollInfo
from .port_forwarding import AsyncProxyPortForwarder
from .service import AsyncService
from .settings import UseE2EE as UseE2EE
from .ssh_forwarding import AsyncProxySshForwarder
from .state import AsyncClientState, AsyncRequestsDict, AsyncSessionLogsDict, AsyncSessionsDict, AsyncTCPPortForwardsDict
from _typeshed import Incomplete
from collections.abc import AsyncGenerator, Callable, Generator, Iterator, Mapping
from contextlib import AbstractAsyncContextManager, asynccontextmanager
from dataclasses import dataclass
from enum import Enum
from radkit_client.async_.support_package import ClientSupportPackage
from radkit_common.access.auth import DomainOAuthProviderInfo
from radkit_common.access.oauth import OAuthConnectResponse, OAuthEnabledTools
from radkit_common.access.results import ErrorResult
from radkit_common.domains import Domain
from radkit_common.forwarder.client import ConnectionStatus, WebSocketForwarderAddress
from radkit_common.identities import ClientID, Email, EndpointID, ServiceID
from radkit_common.prompt import PromptInterrupted
from radkit_common.rpc import RPCTarget
from radkit_common.types import CustomSecretStr, OAuthProvider
from radkit_service.backends.devices_backend import DevicesBackend
from typing_extensions import Self

__all__ = ['AsyncClient', 'AsyncForwardersDict', 'AsyncServicesDict', 'UseE2EE', 'ForwarderInfo', 'ClientStatus', 'tSYS']

tSYS: Incomplete

class AsyncClient:
    __pt_repr__: Incomplete
    def __init__(self, client_state: AsyncClientState) -> None: ...
    @classmethod
    @asynccontextmanager
    async def create(cls, default_domain: Domain | str | None = None) -> AsyncGenerator[Self, None]: ...
    def status(self) -> ClientStatus: ...
    def service(self, service_id: ServiceID | str, *, connection: AsyncCloudConnection | None = None, e2ee_fingerprint: str | None = None, access_token: str | None = None, name: str | None = None) -> AsyncService: ...
    def services(self) -> AsyncServicesDict: ...
    def requests(self) -> AsyncRequestsDict: ...
    def sessions(self) -> AsyncSessionsDict: ...
    def session_logs(self) -> AsyncSessionLogsDict: ...
    def port_forwards(self) -> AsyncTCPPortForwardsDict: ...
    def socks_proxy(self) -> AsyncProxyPortForwarder | None: ...
    def http_proxy(self) -> AsyncProxyPortForwarder | None: ...
    async def start_socks_proxy(self, local_port: int, local_address: str = 'localhost', username: str | None = None, password: str | None = None, max_connections: int | None = 50, server_startup_timeout: float = 2.0, destroy_previous: bool = False) -> AsyncProxyPortForwarder: ...
    async def start_http_proxy(self, local_port: int, local_address: str = 'localhost', username: str | None = None, password: str | None = None, max_connections: int | None = 50, server_startup_timeout: float = 2.0, destroy_previous: bool = False) -> AsyncProxyPortForwarder: ...
    async def start_ssh_proxy(self, local_port: int, local_address: str = 'localhost', password: str | None = None, host_key: bytes | None = None, destroy_previous: bool = False) -> AsyncProxySshForwarder: ...
    async def stop_socks_proxy(self) -> None: ...
    async def stop_http_proxy(self) -> None: ...
    async def stop_ssh_proxy(self) -> None: ...
    def integrations(self) -> AsyncIntegrations: ...
    def cloud_connections(self) -> AsyncCloudConnectionsDict: ...
    def forwarders(self) -> AsyncForwardersDict: ...
    async def grant_service_otp(self, service_id: ServiceID | str | None = None, service_owner_email: Email | str | None = None, connection: AsyncCloudConnection | None = None, description: str = '') -> ServiceEnrollInfo | None: ...
    async def grant_client_otp(self, client_id: ClientID | str | None = None, client_owner_email: Email | str | None = None, connection: AsyncCloudConnection | None = None, description: str = '') -> ClientEnrollInfo | ErrorResult: ...
    async def enroll_client(self, client_id: ClientID | str | None = None, private_key_password: str | None = None, overwrite_certificate: bool | None = None, connection: AsyncCloudConnection | None = None, description: str = '') -> None: ...
    async def reauthenticate(self, access_token: str | None = None, basic_auth_password: str | None = None, oauth_connect_response: OAuthConnectResponse | None = None, connection: AsyncCloudConnection | None = None) -> None: ...
    async def access_token_login(self, access_token: str, domain: Domain | str | None = None, provider: OAuthProvider | None = None, admin_level: int = 0) -> Self: ...
    async def basic_login(self, identity: EndpointID | str | None = None, password: str | None = None, domain: Domain | str | None = None, admin_level: int = 0) -> Self: ...
    async def cloud_connection_from_sso_login(self, identity: Email | str | None = None, domain: Domain | str | None = None, open_browser: bool | None = None, provider: OAuthProvider | None = None, oauth_connect_response: OAuthConnectResponse | None = None, admin_level: int = 0, silent: bool = False) -> AsyncCloudConnection | PromptInterrupted: ...
    async def sso_login(self, identity: Email | str | None = None, domain: Domain | str | None = None, open_browser: bool | None = None, provider: OAuthProvider | None = None, oauth_connect_response: OAuthConnectResponse | None = None, admin_level: int = 0, silent: bool = False) -> Self | PromptInterrupted: ...
    async def certificate_login(self, identity: EndpointID | str | None = None, ca_path: str | None = None, cert_path: str | None = None, key_path: str | None = None, private_key_password: str | None = None, domain: Domain | str | None = None, admin_level: int = 0) -> Self | PromptInterrupted: ...
    async def create_service(self, *, suppress_logs: bool = False, headless: bool = False, superadmin_password: CustomSecretStr | str | None = None, create_extra_devices_backend: Callable[[], AbstractAsyncContextManager[DevicesBackend]] | None = None) -> AsyncIntegratedService: ...
    def service_from_rpc_target(self, rpc_target: RPCTarget, name: str | None = None) -> AsyncService: ...
    async def service_direct(self, username: str | None = None, password: CustomSecretStr | str | None = None, host: str = 'localhost', port: int = 8181, sha256_fingerprint: str | None = None, rpc_url: str = '') -> AsyncService | PromptInterrupted: ...
    def service_cloud(self, service_id: ServiceID | str, *, connection: AsyncCloudConnection | None = None, e2ee_fingerprint: str | None = None, access_token: str | None = None, name: str | None = None) -> AsyncService: ...
    def service_direct_with_sso(self, service_id: ServiceID | str, *, connection: AsyncCloudConnection | None = None, e2ee_fingerprint: str | None = None, host: str = 'localhost', port: int = 8181, name: str | None = None) -> AsyncService: ...
    async def logout(self, domain: Domain | str | None = None, client_id: ClientID | str | None = None) -> None: ...
    def set_default_domain(self, domain: Domain | str) -> None: ...
    def get_default_domain(self) -> Domain: ...
    def admin_client(self, connection: AsyncCloudConnection | None = None) -> AsyncAdminClient: ...
    async def get_oauth_provider_info(self, user_domain: str, provider: OAuthProvider = ..., tool: OAuthEnabledTools | str | None = None, domain: Domain | str | None = None) -> DomainOAuthProviderInfo | None: ...
    async def oauth_connect_only(self, identity: Email | str | None = None, domain: Domain | str | None = None, provider: OAuthProvider | None = None) -> OAuthConnectResponse | ErrorResult | PromptInterrupted: ...
    async def enroll_client_from_otp(self, otp_access_token: str | None = None, private_key_password: str | None = None, overwrite_certificate: bool | None = None) -> None | PromptInterrupted: ...
    def read_identity_certificate(self, identity: EndpointID | str, domain: Domain | str | None = None) -> tuple[str, str]: ...
    def write_identity_certificate(self, identity: EndpointID | str, cert: str, keypair: str, domain: Domain | str | None = None) -> None: ...
    async def support_package(self) -> ClientSupportPackage: ...

@dataclass(repr=False)
class AsyncServicesDict(Mapping[str, AsyncService]):
    __pt_repr__ = ...
    def client(self) -> AsyncClient: ...
    def __getitem__(self, service_id: str) -> AsyncService: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[str]: ...

class ForwarderInfo:
    __pt_repr__: Incomplete
    domain: Incomplete
    forwarder_address: Incomplete
    status: Incomplete
    ping_time_ms: Incomplete
    def __init__(self, domain: str, forwarder_address: WebSocketForwarderAddress, status: ConnectionStatus, ping_time_ms: int | None) -> None: ...
    @property
    def base_url(self) -> str: ...

class AsyncForwardersDict(Mapping[int, ForwarderInfo]):
    __pt_repr__: Incomplete
    def __init__(self, client_state: AsyncClientState) -> None: ...
    def __iter__(self) -> Generator[int, None, None]: ...
    def __getitem__(self, index: int) -> ForwarderInfo: ...
    def __len__(self) -> int: ...
    def client(self) -> AsyncClient: ...

class ClientStatus(Enum):
    NOT_CONNECTED = 'NOT_CONNECTED'
    CONNECTED = 'CONNECTED'
    TERMINATED = 'TERMINATED'
