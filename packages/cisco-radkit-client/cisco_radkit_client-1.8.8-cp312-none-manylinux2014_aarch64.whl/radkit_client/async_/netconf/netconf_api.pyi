from ..model import ServiceModel
from ..request import AsyncFillerRequest, AsyncTransformedFillerRequest
from ..state import AsyncServiceState
from .xpath_results import AsyncDeviceToSingleXPathResultDict, AsyncDeviceToXPathResultsDict, AsyncGetSingleXPathResult, AsyncGetXPathsResult
from .yang_model import AsyncSingleDeviceYangNode, AsyncYangNode
from _typeshed import Incomplete
from dataclasses import dataclass
from enum import Enum
from radkit_common.protocol.device_actions import DeviceAction, DeviceActionPartialResponse
from radkit_common.protocol.netconf import GetNetconfXpaths
from typing import Any, overload
from uuid import UUID

__all__ = ['AsyncNetconfCapabilities', 'NetconfAPIStatus', 'AsyncNetconfAPI', 'AsyncSingleDeviceNetconfAPI', 'XPathSplitter']

@dataclass(repr=False)
class AsyncNetconfCapabilities:
    __pt_repr__ = ...
    def __init__(self, service_model: ServiceModel, device_uuids: set[UUID]) -> None: ...
    def raw(self) -> dict[str, Any] | None: ...
    def namespaces(self) -> dict[str, str] | None: ...
    def hash(self) -> str | None: ...

class NetconfAPIStatus(Enum):
    UNKNOWN = 'UNKNOWN'
    NO_CONFIG = 'NO_CONFIG'
    CONFIGURED = 'CONFIGURED'
    AVAILABLE = 'AVAILABLE'
    UNAVAILABLE = 'UNAVAILABLE'
    HETEROGENOUS = 'HETEROGENOUS'

class AsyncNetconfAPI:
    __pt_repr__: Incomplete
    def __init__(self, service_state: AsyncServiceState, device_uuids: set[UUID]) -> None: ...
    def status(self) -> NetconfAPIStatus: ...
    def yang(self) -> AsyncYangNode: ...
    def capabilities(self) -> AsyncNetconfCapabilities: ...
    @overload
    def get_xpaths(self, xpaths: list[str], namespaces: dict[str, str] | None = ..., synced: bool = ...) -> AsyncFillerRequest[DeviceAction[GetNetconfXpaths], DeviceActionPartialResponse[dict[str, Any]], AsyncDeviceToXPathResultsDict]: ...
    @overload
    def get_xpaths(self, xpaths: str, namespaces: dict[str, str] | None = ..., synced: bool = ...) -> AsyncTransformedFillerRequest[DeviceAction[GetNetconfXpaths], DeviceActionPartialResponse[dict[str, Any]], AsyncDeviceToXPathResultsDict, AsyncDeviceToSingleXPathResultDict]: ...

class AsyncSingleDeviceNetconfAPI:
    __pt_repr__: Incomplete
    def __init__(self, service_state: AsyncServiceState, uuid: UUID) -> None: ...
    def status(self) -> NetconfAPIStatus: ...
    def yang(self) -> AsyncSingleDeviceYangNode: ...
    def capabilities(self) -> AsyncNetconfCapabilities: ...
    @overload
    def get_xpaths(self, xpaths: str, namespaces: dict[str, str] | None = ...) -> AsyncTransformedFillerRequest[DeviceAction[GetNetconfXpaths], DeviceActionPartialResponse[dict[str, Any]], AsyncDeviceToXPathResultsDict, AsyncGetSingleXPathResult]: ...
    @overload
    def get_xpaths(self, xpaths: list[str], namespaces: dict[str, str] | None = ...) -> AsyncTransformedFillerRequest[DeviceAction[GetNetconfXpaths], DeviceActionPartialResponse[dict[str, Any]], AsyncDeviceToXPathResultsDict, AsyncGetXPathsResult]: ...

class XPathSplitter:
    xpath: Incomplete
    steps: list[str]
    namespaces: list[str]
    def __init__(self, xpath: str) -> None: ...
