from ...device import AsyncDevice as AsyncDevice
from ..base import AnySocketStream as AnySocketStream
from .base import HttpRequest as HttpRequest, HttpRequestHandler as HttpRequestHandler, HttpStartResponse as HttpStartResponse, SocketStreamHandler as SocketStreamHandler, WebSocketRequestHandler as WebSocketRequestHandler
from .http11 import Http11Forwarder as Http11Forwarder
from .http2 import Http2Forwarder as Http2Forwarder
from .tls import TlsWrapper as TlsWrapper
from anyio.streams.memory import MemoryObjectReceiveStream as MemoryObjectReceiveStream, MemoryObjectSendStream as MemoryObjectSendStream

def request_error_to_http_response(device: AsyncDevice, request_error: str) -> tuple[HttpStartResponse, bytes]: ...
def create_http_error_handler(html_message: str, status_code: int = 400, response_headers: list[tuple[str, str]] | None = None) -> HttpRequestHandler: ...
async def forward_http_error(client_sock_stream: AnySocketStream, html_message: str, status_code: int = 400) -> None: ...
def create_domain_does_not_match_error_handler(address: str) -> SocketStreamHandler: ...
def create_device_not_found_error_handler(device_name: str, serial: str) -> SocketStreamHandler: ...
async def forward_http(socket_stream: AnySocketStream, request_handler: HttpRequestHandler, websocket_request_handler: WebSocketRequestHandler | None) -> None: ...
