from .auto_incrementing_id import Id
from .client import AsyncClient
from .state import AsyncClientState
from _typeshed import Incomplete
from collections.abc import Callable, Iterator, Mapping
from radkit_common.access.client import RADKitAccessClient
from radkit_common.access.client.auth_flows import AsyncAuthFlow, AuthFlowType
from radkit_common.access.oauth import OAuthConnectResponse
from radkit_common.domains import Domain
from radkit_common.identities import ClientID
from radkit_common.rpc import CloudConnectionId
from radkit_common.types import OAuthProvider
from typing_extensions import Self

__all__ = ['AllMatches', 'AsyncCloudConnection', 'AsyncCloudConnectionsDict', 'validate_connection_or_default', 'CloudConnectionError']

class AsyncCloudConnection:
    __pt_repr__: Incomplete
    def __init__(self, client_state: AsyncClientState, cloud_connection_id: CloudConnectionId) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def auth_flow(self) -> AsyncAuthFlow | None: ...
    def auth_flow_or_raise(self) -> AsyncAuthFlow: ...
    def access_client(self) -> RADKitAccessClient | None: ...
    def access_client_or_raise(self) -> RADKitAccessClient: ...
    def domain(self) -> Domain: ...
    def domain_name(self) -> str: ...
    def client_id(self) -> ClientID: ...
    def is_ready(self) -> bool: ...
    def type(self) -> AuthFlowType: ...
    def admin_level(self) -> int | None: ...
    def oauth_provider(self) -> str | OAuthProvider | None: ...
    def access_token(self) -> str | None: ...
    def is_default(self) -> bool: ...
    def logout(self) -> None: ...
    def client(self) -> AsyncClient: ...
    def rpc_cloud_connection_id(self) -> CloudConnectionId: ...
    async def reauthenticate(self, access_token: str | None = None, basic_password: str | None = None, oauth_connect_response: OAuthConnectResponse | None = None) -> None: ...

class AllMatches: ...

class AsyncCloudConnectionsDict(Mapping[Id, AsyncCloudConnection]):
    __pt_repr__: Incomplete
    def __init__(self, client_state: AsyncClientState, filter: Callable[[CloudConnectionId], bool]) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Id]: ...
    def __getitem__(self, index: Id) -> AsyncCloudConnection: ...
    def default(self) -> AsyncCloudConnection: ...
    def filter(self, domain: Domain | str | AllMatches = ..., client_id: ClientID | AllMatches = ..., provider: OAuthProvider | AllMatches | None = ...) -> AsyncCloudConnectionsDict: ...
    def first(self) -> AsyncCloudConnection | None: ...
    def client(self) -> AsyncClient: ...

def validate_connection_or_default(client_state: AsyncClientState, connection: AsyncCloudConnection | None) -> AsyncCloudConnection: ...

class CloudConnectionError(Exception):
    @classmethod
    def not_yet_connected(cls) -> Self: ...
    @classmethod
    def require_specifying_connection(cls) -> Self: ...
