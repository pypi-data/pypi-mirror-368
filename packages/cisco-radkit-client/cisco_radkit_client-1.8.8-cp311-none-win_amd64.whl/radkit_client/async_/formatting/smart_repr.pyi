from .utils import ReprFunc
from _typeshed import Incomplete
from collections.abc import Callable, Mapping, Sequence
from dataclasses import dataclass, field
from prompt_toolkit.formatted_text import AnyFormattedText, StyleAndTextTuples
from typing import Any, Generic, overload

__all__ = ['get_formatted_status', 'header_repr_for_mapping', 'SmartPtRepr', 'SmartMappingPtRepr', 'SmartRepr', 'SmartMappingRepr', 'SmartStr', 'BoundSmartPtRepr', 'BoundSmartRepr', 'BoundSmartMappingPtRepr']

def header_repr_for_mapping(obj: object, count: int | None = None) -> str: ...

@dataclass
class _SmartPtReprBase(Generic[_T]):
    getters: Mapping[str, Callable[[_T], object]] = field(default_factory=dict)
    with_status: bool = ...
    header_repr_func: ReprFunc | None = ...
    style_map: dict[str, str] = field(default_factory=dict)

@dataclass
class SmartMappingPtRepr(_SmartPtReprBase[_T], Generic[_T]):
    fields: list[str] | None = ...
    container_getters: Mapping[str, Callable[[Any, _T], object]] = field(default_factory=dict)
    exclude_fields: Sequence[str] | Callable[[Any], object] = ...
    hint: Callable[[Any], AnyFormattedText] | AnyFormattedText = ...
    title: str | Callable[[Any], object] = ...
    key_name: str = ...
    value_name: str = ...
    with_index: bool | int = ...
    index_name: str = ...
    swap: bool = ...
    sort_by: str | None = ...
    sort_disabled: bool = ...
    header_repr_func: ReprFunc = ...
    def __get__(self, obj: _T_Mapping[_T], objtype: type[_T_Mapping[_T]] | None = None) -> BoundSmartMappingPtRepr[_T]: ...

@dataclass
class SmartPtRepr(_SmartPtReprBase[_T], Generic[_T]):
    fields: list[str] | Callable[[_T], list[str]] = field(default_factory=Incomplete)
    hint: AnyFormattedText | Callable[[_T], AnyFormattedText] = ...
    title: str | Callable[[_T], str] = ...
    def __get__(self, obj: _T, objtype: type[_T] | None = None) -> BoundSmartPtRepr[_T]: ...

@dataclass
class _BoundSmartPtReprBase(Generic[_T]):
    smart_pt_repr: SmartPtRepr[_T] | SmartMappingPtRepr[_T]
    obj: object
    def __call__(self, body_only: bool = False, header_text: str | None = None) -> AnyFormattedText: ...

@dataclass
class BoundSmartMappingPtRepr(_BoundSmartPtReprBase[_T]):
    smart_pt_repr: SmartMappingPtRepr[_T]
    obj: _T_Mapping[_T]

@dataclass
class BoundSmartPtRepr(_BoundSmartPtReprBase[_T]):
    smart_pt_repr: SmartPtRepr[_T]
    obj: _T
    def get_fields(self) -> dict[str, object]: ...

def get_formatted_status(obj: object) -> StyleAndTextTuples: ...

@dataclass
class SmartRepr(Generic[_T]):
    fields: Sequence[str] = field(default_factory=tuple)
    def __call__(self, obj: Any) -> str: ...
    @overload
    def __get__(self, obj: None, objtype: None) -> UnboundSmartRepr[_T]: ...
    @overload
    def __get__(self, obj: _T, objtype: type[_T]) -> BoundSmartRepr[_T]: ...

@dataclass(frozen=True, eq=True)
class UnboundSmartRepr(Generic[_T]):
    fields: tuple[str, ...]
    def __call__(self, obj: _T) -> str: ...

@dataclass
class BoundSmartRepr(Generic[_T]):
    fields: tuple[str, ...]
    obj: _T
    def get_fields(self) -> dict[str, object]: ...
    def __call__(self, class_name: str | None = None) -> str: ...

@dataclass
class SmartMappingRepr(Generic[_T]):
    def __call__(self, obj: Any) -> str: ...
    def __get__(self, obj: _T_Mapping[_T], objtype: type[_T_Mapping[_T]] | None = None) -> Callable[[], str]: ...

class SmartStr:
    def __call__(self, obj: object) -> str: ...
    def __get__(self, obj: object, objtype: type[object] | None = None) -> _BoundSmartStr: ...

@dataclass
class _BoundSmartStr:
    obj: object
    def __call__(self) -> str: ...
