from collections.abc import Callable
from typing import Generic, NoReturn

__all__ = ['Future', 'FutureIsPending', 'InvalidStateError']

class Future(Generic[_T]):
    def __init__(self) -> None: ...
    def result(self) -> _T | FutureIsPending: ...
    def done(self) -> bool: ...
    def failed(self) -> bool: ...
    def success(self) -> bool: ...
    async def wait(self, timeout: float | None = None) -> _T: ...
    def set_result(self, result: _T) -> None: ...
    def set_exception(self, exception_func: Exception | Callable[[], NoReturn]) -> None: ...

class FutureIsPending: ...
class InvalidStateError(Exception): ...
