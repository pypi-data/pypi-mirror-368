import asyncssh
from _typeshed import Incomplete
from collections.abc import Generator, Mapping
from dataclasses import dataclass
from enum import Enum
from os import terminal_size
from radkit_client.async_.exceptions import ClientError
from radkit_client.async_.state import AsyncClientState
from radkit_common.identities import Identity
from radkit_common.types import CustomSecretStr

__all__ = ['AsyncSshSession', 'AsyncSshSessionsDict', 'AsyncSshConnection', 'AsyncSshConnectionsDict', 'AsyncProxySshForwarder', 'SessionStatus', 'RequestType', 'ConnectionStatus', 'SshForwarderStatus', 'SshForwarderInvalidStateError', 'AsyncSshHostKeyPair']

class SshForwarderInvalidStateError(ClientError): ...

class SessionStatus(Enum):
    ACTIVE = 'ACTIVE'
    FAILED = 'FAILED'
    CLOSED = 'CLOSED'

class RequestType(Enum):
    EXEC = 'EXEC'
    SHELL = 'SHELL'

@dataclass
class SshSession(asyncssh.SSHServerSession[bytes]):
    async_ssh_forwarder: AsyncProxySshForwarder
    session_id: str
    service_name: Identity
    device_name: str
    term: str | None = ...
    term_size: terminal_size | None = ...
    requested_pty: bool = ...
    status: SessionStatus = ...
    request_type: RequestType | None = ...
    exception: Exception | None = ...
    def __post_init__(self) -> None: ...
    def connection_made(self, chan: asyncssh.channel.SSHServerChannel[bytes]) -> None: ...
    def connection_lost(self, exc: Exception | None) -> None: ...
    def data_received(self, data: bytes, datatype: int | None) -> None: ...
    def pty_requested(self, term_type: str, term_size: tuple[int, int, int, int], term_modes: Mapping[int, int]) -> bool: ...
    def terminal_size_changed(self, width: int, height: int, pixwidth: int, pixheight: int) -> None: ...
    def shell_requested(self) -> bool: ...
    def exec_requested(self, command: str) -> bool: ...
    def subsystem_requested(self, subsystem: str) -> bool: ...
    def break_received(self, msec: int) -> bool: ...
    def signal_received(self, signal: str) -> None: ...
    def soft_eof_received(self) -> None: ...
    def eof_received(self) -> bool: ...
    def cleanup(self) -> None: ...

class ConnectionStatus(Enum):
    ACTIVE = 'ACTIVE'
    FAILED = 'FAILED'
    CLOSED = 'CLOSED'

@dataclass
class SshConnection(asyncssh.SSHServer):
    async_ssh_forwarder: AsyncProxySshForwarder
    device_name: str | None = ...
    service_name: Identity | None = ...
    status: ConnectionStatus = ...
    exception: Exception | None = ...
    def __post_init__(self) -> None: ...
    conn = ...
    def connection_made(self, conn: asyncssh.connection.SSHServerConnection) -> None: ...
    def connection_lost(self, exc: Exception | None) -> None: ...
    def begin_auth(self, username: str) -> bool: ...
    def password_auth_supported(self) -> bool: ...
    def validate_password(self, username: str, password: str) -> bool: ...
    def session_requested(self) -> asyncssh.misc.MaybeAwait[asyncssh.server._NewSession]: ...
    def cleanup(self) -> None: ...

@dataclass(repr=False)
class AsyncSshSession:
    __pt_repr__ = ...
    def device_name(self) -> str | None: ...
    def service_name(self) -> str | None: ...
    def status(self) -> SessionStatus: ...
    def request_type(self) -> RequestType | None: ...
    def term(self) -> str | None: ...
    def term_size(self) -> terminal_size | None: ...
    def pty_requested(self) -> bool: ...
    def exception(self) -> Exception | None: ...

@dataclass(repr=False)
class AsyncSshSessionsDict(Mapping[int, AsyncSshSession]):
    __pt_repr__ = ...
    def __iter__(self) -> Generator[int, None, None]: ...
    def __getitem__(self, i: int) -> AsyncSshSession: ...
    def __len__(self) -> int: ...

@dataclass(repr=False)
class AsyncSshConnection:
    __pt_repr__ = ...
    def device_name(self) -> str | None: ...
    def service_name(self) -> str | None: ...
    def status(self) -> ConnectionStatus: ...
    def exception(self) -> Exception | None: ...
    def sessions(self) -> AsyncSshSessionsDict: ...

@dataclass(repr=False)
class AsyncSshConnectionsDict(Mapping[int, AsyncSshConnection]):
    __pt_repr__ = ...
    def __iter__(self) -> Generator[int, None, None]: ...
    def __getitem__(self, i: int) -> AsyncSshConnection: ...
    def __len__(self) -> int: ...

class SshForwarderStatus(Enum):
    RUNNING = 'RUNNING'
    FAILED = 'FAILED'
    STOPPED = 'STOPPED'

class AsyncSshHostKeyPair:
    __pt_repr__: Incomplete
    def __init__(self, public_key: bytes, private_key: bytes, fingerprint_md5: str, fingerprint_sha256: str) -> None: ...
    def public_key(self) -> bytes: ...
    def private_key(self) -> bytes: ...
    def fingerprint_md5(self) -> str: ...
    def fingerprint_sha256(self) -> str: ...

class AsyncProxySshForwarder:
    __pt_repr__: Incomplete
    def __init__(self, client_state: AsyncClientState, host: str | None, port: int, password: CustomSecretStr | None, host_key: bytes | None) -> None: ...
    def status(self) -> SshForwarderStatus: ...
    async def start(self) -> None: ...
    async def stop(self) -> None: ...
    def requested_host(self) -> str | None: ...
    def requested_port(self) -> int: ...
    def addresses(self) -> str: ...
    def fingerprint_md5(self) -> str | None: ...
    def fingerprint_sha256(self) -> str | None: ...
    def host_key_pair(self) -> AsyncSshHostKeyPair: ...
    def connections(self) -> AsyncSshConnectionsDict: ...
