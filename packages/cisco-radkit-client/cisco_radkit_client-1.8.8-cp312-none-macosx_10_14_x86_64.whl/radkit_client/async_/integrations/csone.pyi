from pydantic import BaseModel
from radkit_client.async_.cloud_connections import AsyncCloudConnection
from radkit_client.async_.state import AsyncClientState
from radkit_common.access.integrations.csone import CSOneAutomationTag, CaseNote
from radkit_common.access.results import AnyResult, ErrorResult
from radkit_common.identities import ServiceID

__all__ = ['AsyncCSOne', 'CSOneIntegrationError', 'CSOneOperationAuthorizationError']

class CSOneIntegrationError(Exception): ...

class CSOneOperationAuthorizationError(BaseModel):
    authenticated: bool
    authorized: bool

class AsyncCSOne:
    def __init__(self, client_state: AsyncClientState) -> None: ...
    async def append_to_case_automations_tags(self, service_request: int, tag: CSOneAutomationTag, connection: AsyncCloudConnection | None = None) -> AnyResult | CSOneOperationAuthorizationError: ...
    async def get_case_radkit_services(self, service_request: int, connection: AsyncCloudConnection | None = None) -> list[str] | ErrorResult: ...
    async def attach_radkit_service_to_service_request(self, service_request: int, service_id: ServiceID, connection: AsyncCloudConnection | None = None) -> AnyResult | CSOneOperationAuthorizationError: ...
    async def detach_radkit_service_from_service_request(self, service_request: int, service_id: ServiceID, connection: AsyncCloudConnection | None = None) -> AnyResult | CSOneOperationAuthorizationError: ...
    async def add_note(self, service_request: int, note: CaseNote, connection: AsyncCloudConnection | None = None) -> AnyResult | CSOneOperationAuthorizationError: ...
    async def get_notes(self, service_request: int, connection: AsyncCloudConnection | None = None) -> list[CaseNote] | CSOneOperationAuthorizationError | ErrorResult: ...
