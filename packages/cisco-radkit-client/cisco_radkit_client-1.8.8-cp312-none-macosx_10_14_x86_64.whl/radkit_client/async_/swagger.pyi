from .device import AsyncDevice
from .exceptions import ClientError
from .formatting import SmartPtRepr
from .model import HttpVerb, SwaggerAPIStatus, SwaggerPathOperationParameterModel
from .request import AsyncFillerRequest
from .state import AsyncServiceState
from _typeshed import Incomplete
from collections.abc import Sequence
from dataclasses import dataclass
from prompt_toolkit.formatted_text import StyleAndTextTuples
from radkit_client.async_.http import ContentType, DataType, FilesType
from radkit_common.identities import ClientID, ServiceID
from radkit_common.protocol import swagger as p
from radkit_common.protocol.device_actions import DeviceAction, DeviceActionPartialResponse
from typing import Any
from typing_extensions import Self
from uuid import UUID

__all__ = ['AsyncSwaggerAPI', 'AsyncSwaggerPath', 'AsyncSwaggerPathsDict', 'AsyncSwaggerResponse', 'AsyncSwaggerPathOperation', 'AsyncSwaggerPathOperationsDict', 'sanitize_parameter_name']

def sanitize_parameter_name(name: str) -> str: ...

class SwaggerAPIError(ClientError): ...

class AsyncSwaggerAPI:
    __pt_repr__: SmartPtRepr[AsyncSwaggerAPI]
    __to_std_object__: Incomplete
    def __init__(self, service_state: AsyncServiceState, device_uuid: UUID) -> None: ...
    def status(self) -> SwaggerAPIStatus: ...
    def metadata(self) -> dict[str, Any]: ...
    def paths(self) -> AsyncSwaggerPathsDict: ...
    def call_path(self, path: str, method: HttpVerb, parameters: dict[str, str] | None = None, content: ContentType | None = None, data: DataType | None = None, files: FilesType | None = None, json: Any = None, timeout: float | None = None) -> AsyncFillerSwaggerRequest: ...
    def get(self, path: str, parameters: dict[str, str] | None = None, timeout: float | None = None) -> AsyncFillerSwaggerRequest: ...
    def post(self, path: str, parameters: dict[str, str] | None = None, content: ContentType | None = None, data: DataType | None = None, files: FilesType | None = None, json: Any = None, timeout: float | None = None) -> AsyncFillerSwaggerRequest: ...
    def patch(self, path: str, parameters: dict[str, str] | None = None, content: ContentType | None = None, data: DataType | None = None, files: FilesType | None = None, json: Any = None, timeout: float | None = None) -> AsyncFillerSwaggerRequest: ...
    def put(self, path: str, parameters: dict[str, str] | None = None, content: ContentType | None = None, data: DataType | None = None, files: FilesType | None = None, json: Any = None, timeout: float | None = None) -> AsyncFillerSwaggerRequest: ...
    def delete(self, path: str, parameters: dict[str, str] | None = None, timeout: float | None = None) -> AsyncFillerSwaggerRequest: ...

class AsyncSwaggerPath:
    __to_std_object__: Incomplete
    def __init__(self, service_state: AsyncServiceState, device_uuid: UUID, path: str) -> None: ...
    def operations(self) -> AsyncSwaggerPathOperationsDict: ...
    def path(self) -> str: ...
    def request(self, method: HttpVerb, parameters: dict[str, str] | None = None, content: ContentType | None = None, data: DataType | None = None, files: FilesType | None = None, json: Any = None, timeout: float | None = None) -> AsyncFillerSwaggerRequest: ...
    get: Incomplete
    post: Incomplete
    patch: Incomplete
    put: Incomplete
    delete: Incomplete
    def __pt_repr__(self) -> StyleAndTextTuples: ...

class AsyncSwaggerPathsDict(dict[str, AsyncSwaggerPath]):
    __pt_repr__: Incomplete

class AsyncSwaggerPathOperation:
    __pt_repr__: Incomplete
    def __init__(self, service_state: AsyncServiceState, device_uuid: UUID, path: str, operation: HttpVerb) -> None: ...
    def description(self) -> str: ...
    def parameters(self) -> Sequence[SwaggerPathOperationParameterModel]: ...
    def call(self, parameters: dict[str, str] | None = None, content: ContentType | None = None, data: DataType | None = None, files: FilesType | None = None, json: Any = None, timeout: float | None = None) -> AsyncFillerRequest[DeviceAction[p.CallSwaggerPath], DeviceActionPartialResponse[p.CallSwaggerPathResponse], AsyncSwaggerResponse]: ...

class AsyncSwaggerPathOperationsDict(dict[str, AsyncSwaggerPathOperation]):
    __pt_repr__: Incomplete

@dataclass(repr=False)
class AsyncSwaggerResponse:
    __pt_repr__ = ...
    __to_std_object__ = ...
    parameters: dict[str, str]
    def __post_init__(self) -> None: ...
    async def wait(self, timeout: float | None = None) -> Self: ...
    def device(self) -> AsyncDevice: ...
    def service_name(self) -> str: ...
    def device_name(self) -> str: ...
    def client_id(self) -> ClientID | None: ...
    def service_id(self) -> ServiceID | None: ...
    def method(self) -> str: ...
    def endpoint(self) -> str: ...
    def url(self) -> str: ...
    def response_code(self) -> int: ...
    def status_code(self) -> int: ...
    def status_phrase(self) -> str: ...
    def status_text(self) -> str: ...
    def content_type(self) -> str: ...
    def content(self) -> bytes: ...
    def text(self) -> str: ...
    def json(self) -> dict[str, Any]: ...
    def data(self) -> None: ...
