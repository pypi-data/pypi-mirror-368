from radkit_client.async_.integrations.csone import AsyncCSOne, CSOneOperationAuthorizationError
from radkit_client.sync.cloud_connections import CloudConnection
from radkit_client.sync.from_async import SyncWrapper
from radkit_common.access.integrations.csone import CSOneAutomationTag, CaseNote
from radkit_common.access.results import AnyResult, ErrorResult
from radkit_common.identities import ServiceID

__all__ = ['CSOne']

class CSOne(SyncWrapper[AsyncCSOne]):
    def append_to_case_automations_tags(self, service_request: int, tag: CSOneAutomationTag, connection: CloudConnection | None = None) -> AnyResult | CSOneOperationAuthorizationError: ...
    def get_case_radkit_services(self, service_request: int, connection: CloudConnection | None = None) -> list[str] | ErrorResult: ...
    def attach_radkit_service_to_service_request(self, service_request: int, service_id: ServiceID, connection: CloudConnection | None = None) -> AnyResult | CSOneOperationAuthorizationError: ...
    def detach_radkit_service_from_service_request(self, service_request: int, service_id: ServiceID, connection: CloudConnection | None = None) -> AnyResult | CSOneOperationAuthorizationError: ...
    def add_note(self, service_request: int, note: CaseNote, connection: CloudConnection | None = None) -> AnyResult | CSOneOperationAuthorizationError: ...
    def get_notes(self, service_request: int, connection: CloudConnection | None = None) -> list[CaseNote] | CSOneOperationAuthorizationError | ErrorResult: ...
