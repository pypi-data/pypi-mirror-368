from ..request import AsyncSimpleRequest
from ..service import AsyncServiceCapabilities, InventoryUpdateResult
from .device import DeviceModel
from _typeshed import Incomplete
from collections.abc import Iterable, Mapping
from dataclasses import dataclass, field
from enum import Enum
from multidict import CIMultiDict
from radkit_common.protocol import capabilities as c, inventory as p
from radkit_common.rpc import RPCCredentials, RPCTarget
from uuid import UUID

__all__ = ['ServiceLoadingStatus', 'ServiceModel']

class ServiceLoadingStatus(Enum):
    NOT_YET_STARTED = 'NOT_YET_STARTED'
    REQUEST_CREATED = 'REQUEST_CREATED'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'

@dataclass
class ServiceModel:
    rpc_target: RPCTarget
    inventory_loading_status: ServiceLoadingStatus = ...
    capabilities_loading_status: ServiceLoadingStatus = ...
    inventory_loading_error: BaseException | None = ...
    capabilities_loading_error: BaseException | None = ...
    capabilities: list[c.Capability] = field(default_factory=list)
    service_version: str | None = ...
    expected_e2ee_sha256_fingerprint: str | None = ...
    device_http_overlay_headers: dict[UUID, CIMultiDict[str]] = field(default_factory=Incomplete)
    require_e2ee: bool | None = ...
    require_e2ee_session_verification: bool | None = ...
    rpc_credentials: RPCCredentials | None = ...
    e2ee_sha256_fingerprint: str | None = ...
    supported_compression_methods: list[str] | None = ...
    supports_h2_multiplexing: bool = ...
    device_types: list[c.DeviceTypeEntry] | None = ...
    update_inventory_request: None | AsyncSimpleRequest[p.GetBasicInventory, p.BasicInventoryResponse, InventoryUpdateResult] = ...
    update_capabilities_request: None | AsyncSimpleRequest[c.GetCapabilities, c.GetCapabilitiesResponse, AsyncServiceCapabilities] = ...
    def __post_init__(self) -> None: ...
    def build_devices_cache(self) -> None: ...
    @property
    def devices(self) -> Mapping[UUID, DeviceModel]: ...
    @property
    def supports_e2ee(self) -> bool: ...
    @property
    def devices_uuids(self) -> frozenset[UUID]: ...
    def add_many_devices(self, devices: Iterable[DeviceModel]) -> None: ...
    def find_uuid_by_name(self, name: str) -> UUID | None: ...
    def remove_device(self, uuid: UUID) -> None: ...
    def remove_all_devices(self) -> None: ...
    def e2ee_active(self) -> bool: ...
    def e2ee_active_repr(self) -> str: ...
