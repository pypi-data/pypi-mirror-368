import abc
from ..state import AsyncClientState
from .connections import AsyncConnections
from _typeshed import Incomplete
from abc import ABC
from enum import Enum
from radkit_client.async_.exceptions import ClientError
from typing import Protocol

__all__ = ['PortForwarderStatus', 'AsyncPortForwarder', 'PortForwarderInvalidStateError', 'ProxyAlreadyStartedError', 'AnySocketStream']

class AnySocketStream(Protocol):
    async def receive(self, /, __count: int = ...) -> bytes: ...
    async def send(self, /, __data: bytes) -> object: ...
    async def send_eof(self) -> None: ...

class PortForwarderStatus(Enum):
    RUNNING = 'RUNNING'
    FAILED = 'FAILED'
    STOPPED = 'STOPPED'

class AsyncPortForwarder(ABC, metaclass=abc.ABCMeta):
    client_state: Incomplete
    local_address: Incomplete
    server_startup_timeout: Incomplete
    def __init__(self, client_state: AsyncClientState, local_port: int, local_address: str, server_startup_timeout: float = 2.0) -> None: ...
    def get_dynamic_local_ports(self) -> dict[str, int] | None: ...
    def status(self) -> PortForwarderStatus: ...
    def connections(self) -> AsyncConnections: ...
    def exception(self) -> BaseException | None: ...
    def local_port(self) -> int: ...
    def bytes_uploaded(self) -> int: ...
    def bytes_downloaded(self) -> int: ...
    async def start(self) -> None: ...
    async def stop(self) -> None: ...

class PortForwarderInvalidStateError(ClientError): ...
class ProxyAlreadyStartedError(ClientError): ...
