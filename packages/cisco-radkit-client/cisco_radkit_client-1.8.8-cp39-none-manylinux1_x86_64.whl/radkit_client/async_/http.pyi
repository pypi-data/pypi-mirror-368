import io
from .device import AsyncDevice
from .exceptions import ClientError
from .request import RequestStatus
from .state import AsyncServiceState
from _typeshed import Incomplete
from collections.abc import Generator, Iterable, Iterator, Mapping, Sequence
from dataclasses import dataclass
from enum import Enum
from http.cookiejar import CookieJar
from multidict import CIMultiDict
from radkit_common.identities import ClientID, ServiceID
from radkit_common.protocol.http import HTTPMethod
from radkit_common.protocol.shared_models import HTTPFile
from radkit_common.protocol.upload_parameters import UploadParameters
from typing import Any
from typing_extensions import Self
from uuid import UUID

__all__ = ['AsyncHttpApi', 'AsyncHttpResponse', 'AsyncHttpOverlayHeadersDict', 'HttpApiError', 'ContentType', 'DataType', 'FilesType', 'HttpFileParameters']

PrimitiveData = str | int | float | bool | None
ContentType = str | bytes | Iterable[bytes]
PathType = str | bytes
ParamsType = Mapping[str, PrimitiveData | Sequence[PrimitiveData]] | list[tuple[str, PrimitiveData]] | tuple[tuple[str, PrimitiveData], ...] | str | bytes
DataType = dict[str, str | bytes | int | float | None]
HeadersType = dict[bytes, bytes] | dict[str, str]
CookiesType = dict[str, str] | CookieJar
FileContent = bytes | io.BufferedIOBase
FileType = FileContent | tuple[str | None, FileContent] | tuple[str | None, FileContent, str | None] | tuple[str | None, FileContent, str | None, Mapping[str, str]]
FilesType = Mapping[str, FileType] | Sequence[tuple[str, FileType]]
CertType = str | tuple[str, str]

@dataclass
class HttpFileParameters:
    name: str
    filename: str | None
    content: bytes
    content_type: str | None
    headers: dict[str, str]
    @classmethod
    def from_name_and_filetype(cls, name: str, file: FileType) -> Self: ...
    def to_protocol_http_file(self) -> HTTPFile: ...

class HttpApiError(ClientError): ...

class EraseAuthenticationTokensResultStatus(Enum):
    FAILURE = 'FAILURE'
    SUCCESS = 'SUCCESS'
    PROCESSING = 'PROCESSING'

class AsyncEraseAuthenticationTokensResult:
    def __init__(self, service_state: AsyncServiceState, device_uuid: UUID) -> None: ...
    __pt_repr__: Incomplete
    __to_std_object__: Incomplete
    async def wait(self, timeout: float | None = None) -> Self: ...
    def done(self) -> bool: ...
    def success(self) -> bool: ...
    def failure(self) -> bool: ...
    def exception(self) -> BaseException | None: ...
    def exception_traceback(self) -> str | None: ...
    def device_name(self) -> str: ...
    def device(self) -> AsyncDevice: ...
    def status(self) -> EraseAuthenticationTokensResultStatus: ...

@dataclass(repr=False)
class AsyncHttpOverlayHeadersDict(Mapping[str, str]):
    __pt_repr__ = ...
    def __init__(self, service_state: AsyncServiceState, device_uuid: UUID) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[str]: ...
    def __getitem__(self, key: str) -> str: ...
    def __setitem__(self, key: str, val: str) -> None: ...
    def __delitem__(self, key: str) -> None: ...

class AsyncHttpApi:
    def __init__(self, service_state: AsyncServiceState, device_uuid: UUID) -> None: ...
    def overlay_headers(self) -> AsyncHttpOverlayHeadersDict: ...
    def get(self, path: PathType, *, params: ParamsType | None = None, headers: HeadersType | None = None, cookies: CookiesType | None = None, timeout: float | None = None, upload_to: UploadParameters | None = None, postprocessors: Sequence[str] = ()) -> AsyncHttpResponse: ...
    def options(self, path: PathType, *, params: ParamsType | None = None, headers: HeadersType | None = None, cookies: CookiesType | None = None, timeout: float | None = None, upload_to: UploadParameters | None = None, postprocessors: Sequence[str] = ()) -> AsyncHttpResponse: ...
    def head(self, path: PathType, *, params: ParamsType | None = None, headers: HeadersType | None = None, cookies: CookiesType | None = None, timeout: float | None = None, upload_to: UploadParameters | None = None, postprocessors: Sequence[str] = ()) -> AsyncHttpResponse: ...
    def post(self, path: PathType, *, content: ContentType | None = None, data: DataType | None = None, files: FilesType | None = None, json: Any = None, params: ParamsType | None = None, headers: HeadersType | None = None, cookies: CookiesType | None = None, timeout: float | None = None, upload_to: UploadParameters | None = None, postprocessors: Sequence[str] = ()) -> AsyncHttpResponse: ...
    def patch(self, path: PathType, *, content: ContentType | None = None, data: DataType | None = None, files: FilesType | None = None, json: Any = None, params: ParamsType | None = None, headers: HeadersType | None = None, cookies: CookiesType | None = None, timeout: float | None = None, upload_to: UploadParameters | None = None, postprocessors: Sequence[str] = ()) -> AsyncHttpResponse: ...
    def put(self, path: PathType, *, content: ContentType | None = None, data: DataType | None = None, files: FilesType | None = None, json: Any = None, params: ParamsType | None = None, headers: HeadersType | None = None, cookies: CookiesType | None = None, timeout: float | None = None, upload_to: UploadParameters | None = None, postprocessors: Sequence[str] = ()) -> AsyncHttpResponse: ...
    def delete(self, path: PathType, *, content: ContentType | None = None, data: DataType | None = None, files: FilesType | None = None, json: Any = None, params: ParamsType | None = None, headers: HeadersType | None = None, cookies: CookiesType | None = None, timeout: float | None = None, upload_to: UploadParameters | None = None, postprocessors: Sequence[str] = ()) -> AsyncHttpResponse: ...
    def erase_auth_tokens(self) -> AsyncEraseAuthenticationTokensResult: ...

@dataclass(repr=False, frozen=True)
class _HttpRequest:
    method: HTTPMethod
    path: PathType
    content: ContentType | None
    data: DataType | None
    files: FilesType | None
    json: Any
    params: ParamsType | None
    headers: list[tuple[str, str]]
    cookies: CookiesType | None
    timeout: float | None
    upload_to: UploadParameters | None
    postprocessors: Sequence[str]
    def __post_init__(self) -> None: ...
    def path_to_str(self) -> str: ...
    def params_to_str(self) -> str | None: ...
    def target(self) -> str: ...
    def cookies_to_dict(self) -> dict[str, str]: ...
    def data_to_dict(self) -> dict[str, bytes] | None: ...
    def files_to_httpfile_list(self) -> list[HttpFileParameters]: ...
    def content_to_bytes_generator(self) -> Generator[bytes, None, None]: ...
    def encode_headers_and_body(self) -> tuple[list[tuple[str, str]], Generator[bytes, None, None]]: ...

class AsyncHttpResponse:
    __pt_repr__: Incomplete
    __to_std_object__: Incomplete
    def __init__(self, service_state: AsyncServiceState, device_uuid: UUID, http_request: _HttpRequest) -> None: ...
    async def wait(self, timeout: float | None = None) -> Self: ...
    def device(self) -> AsyncDevice: ...
    def device_name(self) -> str: ...
    def service_name(self) -> str: ...
    def client_id(self) -> ClientID | None: ...
    def service_id(self) -> ServiceID | None: ...
    def request(self) -> _AnyAsyncHttpRequest: ...
    def status(self) -> RequestStatus: ...
    def url(self) -> str: ...
    def endpoint(self) -> str: ...
    def method(self) -> str: ...
    def cookies(self) -> dict[str, str]: ...
    def request_headers(self) -> CIMultiDict[str]: ...
    def status_code(self) -> int: ...
    def status_phrase(self) -> str: ...
    def status_text(self) -> str: ...
    def headers_to_list_of_tuples(self) -> list[tuple[str, str]]: ...
    def headers(self) -> CIMultiDict[str]: ...
    def content(self) -> bytes: ...
    def content_type(self) -> str | None: ...
    def text(self) -> str: ...
    def json(self) -> Any: ...
AsyncHTTP_API = AsyncHttpApi
HTTP_APIError = HttpApiError
