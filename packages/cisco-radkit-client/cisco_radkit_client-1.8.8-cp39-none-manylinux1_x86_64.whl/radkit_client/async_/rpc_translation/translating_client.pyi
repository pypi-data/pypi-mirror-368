from .translators import OutgoingRequestTranslator
from anyio.streams.memory import MemoryObjectReceiveStream, MemoryObjectSendStream
from collections.abc import AsyncGenerator, Callable, Sequence
from contextlib import AbstractAsyncContextManager, asynccontextmanager
from dataclasses import dataclass
from radkit_common.rpc import OutgoingRPCRequest, RPCClient, RPCClientTransport, RPCName, RPCTarget, RPC_Definition, RPC_E2EE_Information, RequestError
from radkit_common.rpc.client import FailUpload
from typing import Any, Generic, Protocol

__all__ = ['TranslatingRPCClient', 'TranslatedOutgoingRPCRequest', 'RPCCallNotSupportedError', 'AnyRPCClient', 'AnyOutgoingRPCRequest']

class RPCCallNotSupportedError(Exception): ...

@dataclass
class TranslatingRPCClient:
    rpc_client: RPCClient
    get_capabilities_for_target: Callable[[RPCTarget], Sequence[RPCName] | None]
    translators: Sequence[OutgoingRequestTranslator[Any, Any, Any, Any, Any, Any]] = ...
    @property
    def transport(self) -> RPCClientTransport: ...
    @asynccontextmanager
    async def start_new_request(self, rpc_definition: RPC_Definition[_FromRequestModel, _FromResponseModel, _FromUploadModel], request_object: _FromRequestModel, target: RPCTarget, send_timeout: float = 60.0, request_published_callback: Callable[[bool], None] | None = None, request_delivered_callback: Callable[[], None] | None = None, log_event: Callable[[str], None] = ...) -> AsyncGenerator[AnyOutgoingRPCRequest[_FromResponseModel, _FromUploadModel], None]: ...

@dataclass
class TranslatedOutgoingRPCRequest(Generic[_FromRequestModel, _FromResponseModel, _FromUploadModel, _ToRequestModel, _ToResponseModel, _ToUploadModel]):
    outgoing_rpc_request: OutgoingRPCRequest[_ToRequestModel, _ToResponseModel, _ToUploadModel]
    translator: OutgoingRequestTranslator[_FromRequestModel, _FromResponseModel, _FromUploadModel, _ToRequestModel, _ToResponseModel, _ToUploadModel]
    def __post_init__(self) -> None: ...
    def get_base_url(self) -> str: ...
    def compression_used(self) -> str | None: ...
    def h2_multiplexing_used(self) -> bool: ...
    def e2ee_information(self) -> RPC_E2EE_Information | None: ...
    def real_rpc_name(self) -> RPCName: ...
    @property
    def rpc_definition(self) -> RPC_Definition[Any, _FromResponseModel, _FromUploadModel]: ...
    @asynccontextmanager
    async def open_response(self) -> AsyncGenerator[MemoryObjectReceiveStream[_FromResponseModel | RequestError], None]: ...
    @asynccontextmanager
    async def open_upload(self) -> AsyncGenerator[MemoryObjectSendStream[_FromUploadModel | FailUpload], None]: ...
    @property
    def received_data_messages(self) -> int: ...
    @property
    def sent_data_messages(self) -> int: ...
AnyRPCClient = RPCClient | TranslatingRPCClient

class AnyOutgoingRPCRequest(Generic[_FromResponseModel, _FromUploadModel], Protocol):
    def open_response(self) -> AbstractAsyncContextManager[MemoryObjectReceiveStream[_FromResponseModel | RequestError]]: ...
    def open_upload(self) -> AbstractAsyncContextManager[MemoryObjectSendStream[_FromUploadModel | FailUpload]]: ...
    @property
    def received_data_messages(self) -> int: ...
    @property
    def sent_data_messages(self) -> int: ...
    def get_base_url(self) -> str: ...
    def compression_used(self) -> str | None: ...
    def h2_multiplexing_used(self) -> bool: ...
    def e2ee_information(self) -> RPC_E2EE_Information | None: ...
    def real_rpc_name(self) -> RPCName: ...
    @property
    def rpc_definition(self) -> RPC_Definition[Any, _FromResponseModel, _FromUploadModel]: ...
