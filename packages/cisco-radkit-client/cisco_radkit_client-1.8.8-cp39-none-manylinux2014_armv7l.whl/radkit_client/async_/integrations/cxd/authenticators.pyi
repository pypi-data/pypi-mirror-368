import abc
from .token_data import CXDTokenData
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from dataclasses import dataclass
from radkit_client.async_.cloud_connections import AsyncCloudConnection
from radkit_common.domains import Domain
from radkit_common.identities import ClientID, Email
from radkit_common.types import CustomSecretStr, OAuthProvider
from typing_extensions import Self

__all__ = ['AsyncCXDAuthenticator', 'AsyncCXDClientCredentialsAuthenticator', 'AsyncCXDTokenAuthenticator', 'AsyncCXDRADKitCloudClientAuthenticator', 'AnyAsyncCXDAuthenticator', 'human_readable_authenticator_repr']

class AsyncCXDAuthenticator(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    async def get_upload_data(self, target: str) -> CXDTokenData: ...
    @abstractmethod
    def domain(self) -> Domain: ...

class AsyncCXDClientCredentialsAuthenticator(AsyncCXDAuthenticator):
    __pt_repr__: Incomplete
    proxy: Incomplete
    def __init__(self, client_id: str, client_secret: CustomSecretStr, user_email: Email, domain: Domain) -> None: ...
    @classmethod
    async def create(cls, client_id: str, client_secret: CustomSecretStr, user_email: Email, domain: Domain | None = None) -> Self: ...
    def client_id(self) -> str: ...
    def client_secret(self) -> CustomSecretStr: ...
    def user_email(self) -> str: ...
    def domain(self) -> Domain: ...
    def expired(self) -> bool: ...
    async def get_upload_data(self, target: str) -> CXDTokenData: ...

class AsyncCXDTokenAuthenticator(AsyncCXDAuthenticator):
    __pt_repr__: Incomplete
    proxy: Incomplete
    def __init__(self, token: CustomSecretStr, domain: Domain) -> None: ...
    def token(self) -> CustomSecretStr: ...
    def domain(self) -> Domain: ...
    def domain_name(self) -> str: ...
    async def get_upload_data(self, target: str) -> CXDTokenData: ...

@dataclass
class AsyncCXDRADKitCloudClientAuthenticator(AsyncCXDAuthenticator):
    __pt_repr__ = ...
    def __init__(self, connection: AsyncCloudConnection) -> None: ...
    def domain(self) -> Domain: ...
    def domain_name(self) -> str: ...
    def client_id(self) -> ClientID: ...
    def oauth_provider(self) -> str | OAuthProvider | None: ...
    def connection(self) -> AsyncCloudConnection: ...
    async def get_upload_data(self, target: str) -> CXDTokenData: ...
AnyAsyncCXDAuthenticator = AsyncCXDClientCredentialsAuthenticator | AsyncCXDTokenAuthenticator | AsyncCXDRADKitCloudClientAuthenticator

def human_readable_authenticator_repr(authenticator: AsyncCXDAuthenticator | None) -> str: ...
