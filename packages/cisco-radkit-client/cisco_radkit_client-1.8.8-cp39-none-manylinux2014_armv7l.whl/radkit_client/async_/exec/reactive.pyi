from _typeshed import Incomplete
from collections.abc import Callable
from dataclasses import dataclass
from typing import Generic, Protocol

__all__ = ['Version', 'Var', 'Computed', 'ReactiveMapping']

@dataclass
class Version:
    version: int = ...
    def update(self) -> None: ...

class _HasVersion(Protocol): ...

class Reactive(Protocol[_T_co]):
    def __call__(self) -> _T_co: ...

class _NeverCalled: ...

class Var(Generic[_T]):
    def __init__(self, initial_value: _T) -> None: ...
    def __call__(self) -> _T: ...
    def set(self, new_value: _T) -> None: ...

class Computed(Generic[_T]):
    func: Incomplete
    def __init__(self, func: Callable[[], _T]) -> None: ...
    def __call__(self) -> _T: ...

class ReactiveMapping(Generic[_T, _T_co]):
    mapping_func: Incomplete
    def __init__(self, mapping_func: Callable[[_T], _T_co]) -> None: ...
    def map(self, obj: Reactive[_T]) -> Reactive[_T_co]: ...
