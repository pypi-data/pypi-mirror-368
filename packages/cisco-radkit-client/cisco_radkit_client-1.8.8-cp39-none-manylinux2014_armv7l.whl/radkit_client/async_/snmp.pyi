from .device import AsyncDevice
from .exceptions import ClientError
from .state import AsyncServiceState
from _typeshed import Incomplete
from collections.abc import AsyncGenerator, AsyncIterator, Collection, ItemsView, Iterable, Iterator, KeysView, Mapping, Sequence, ValuesView
from contextlib import asynccontextmanager
from dataclasses import dataclass
from enum import Enum
from radkit_common.protocol import snmp as p
from radkit_common.snmp.snmpcore import SNMPNetworkErrorCode as SNMPNetworkErrorCode
from radkit_common.snmp.snmpx import SNMPErrorCode, SNMPResponseErrorCode as SNMPResponseErrorCode, SNMPVarBindErrorCode as SNMPVarBindErrorCode
from typing import Any, overload
from typing_extensions import Literal, Self, TypeAlias
from uuid import UUID

__all__ = ['AsyncSingleDeviceSNMP_API', 'AsyncSNMP_API', 'SNMPTable', 'SingleDeviceSNMPTable', 'SNMPRow', 'AsyncSNMPQuerySet', 'AsyncSNMPQuery', 'SNMPQueryStatistics', 'AsyncSingleDeviceSNMPResult', 'AsyncSNMPResult', 'SNMPTableDeviceView', 'SNMP_APIError', 'SNMPResultStatus', 'SNMPNetworkErrorCode', 'SNMPResponseErrorCode', 'SNMPVarBindErrorCode']

class SNMP_APIError(ClientError): ...

class SNMPResultStatus(Enum):
    FAILURE = 'FAILURE'
    SUCCESS = 'SUCCESS'
    PARTIAL_SUCCESS = 'PARTIAL_SUCCESS'
    PROCESSING = 'PROCESSING'
    PAUSED = 'PAUSED'
    NOT_YET_SUBMITTED = 'NOT_YET_SUBMITTED'
    def __add__(self, other: SNMPResultStatus) -> SNMPResultStatus: ...
    @classmethod
    def join(cls, statuses: Iterable[SNMPResultStatus]) -> SNMPResultStatus: ...

@dataclass(repr=False)
class SNMPRow:
    __pt_repr__ = ...
    device_name: str
    oid: tuple[int, ...] | None = ...
    label: tuple[str, ...] = ...
    mib_module: str = ...
    mib_variable: str = ...
    mib_indices: Sequence[Sequence[int]] = ...
    type: str = ...
    value: Any = ...
    error_code: SNMPErrorCode = ...
    @property
    def oid_str(self) -> str: ...
    @property
    def value_str(self) -> str: ...
    @property
    def label_str(self) -> str: ...
    @property
    def mib_str(self) -> str: ...
    @property
    def is_error(self) -> bool: ...
    @property
    def error_str(self) -> str: ...
    @property
    def value_or_error_str(self) -> str: ...
    @property
    def value_or_error_msg(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...

@dataclass(repr=False)
class SNMPValueRow(SNMPRow):
    oid: tuple[int, ...]
    error_code: Literal[SNMPResponseErrorCode.NO_ERROR] = ...

@dataclass(repr=False)
class SNMPErrorRow(SNMPRow): ...
SNMPValueOrErrorRow: TypeAlias = SNMPValueRow | SNMPErrorRow

class SNMPTable(Mapping[int, _T_SNMPRow]):
    __pt_repr__: Incomplete
    def __init__(self, rows: Iterable[_T_SNMPRow] = ()) -> None: ...
    @classmethod
    def join(cls, tables: Collection[SNMPTable[_T_SNMPRow]]) -> SNMPTable[_T_SNMPRow]: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    @overload
    def __getitem__(self, key: int) -> _T_SNMPRow: ...
    @overload
    def __getitem__(self, key: slice) -> SNMPTable[_T_SNMPRow]: ...
    def errors(self) -> SNMPTable[SNMPErrorRow]: ...
    def without_errors(self) -> SNMPTable[SNMPValueRow]: ...

class SingleDeviceSNMPTable(Mapping[int, _T_SNMPRow]):
    def __init__(self, table: SNMPTable[_T_SNMPRow] | None = None) -> None: ...
    __pt_repr__: Incomplete
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    @overload
    def __getitem__(self, key: int) -> _T_SNMPRow: ...
    @overload
    def __getitem__(self, key: slice) -> SingleDeviceSNMPTable[_T_SNMPRow]: ...
    def errors(self) -> SingleDeviceSNMPTable[SNMPErrorRow]: ...
    def without_errors(self) -> SingleDeviceSNMPTable[SNMPValueRow]: ...

class SNMPTableDeviceView(Mapping[str, SingleDeviceSNMPTable[SNMPValueOrErrorRow]]):
    __pt_repr__: Incomplete
    def __init__(self, base: SNMPTable[SNMPValueOrErrorRow]) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[str]: ...
    def __getitem__(self, key: str) -> SingleDeviceSNMPTable[SNMPValueOrErrorRow]: ...
    def keys(self) -> KeysView[str]: ...
    def values(self) -> ValuesView[SingleDeviceSNMPTable[SNMPValueOrErrorRow]]: ...
    def items(self) -> ItemsView[str, SingleDeviceSNMPTable[SNMPValueOrErrorRow]]: ...

class AsyncSNMPQuery:
    def __init__(self, service_state: AsyncServiceState, device_uuid: UUID) -> None: ...
    __pt_repr__: Incomplete
    def device_name(self) -> str: ...
    def device(self) -> AsyncDevice: ...
    def done(self) -> bool: ...
    def total_row_count(self) -> int: ...
    def result_count(self) -> int: ...
    def request_count(self) -> int: ...
    def response_count(self) -> int: ...
    def response_time(self) -> float: ...
    def dropped_packets(self) -> int: ...
    def ping_time(self) -> float: ...
    def failed_count(self) -> int: ...
    def status(self) -> SNMPResultStatus: ...
    def error_messages(self) -> list[str]: ...
    def short_error_message(self) -> str: ...
    def raw_response(self) -> bytes: ...
    def description(self) -> str: ...

class AsyncSNMPSimpleQuery(AsyncSNMPQuery):
    method: Incomplete
    oids: Incomplete
    def __init__(self, service_state: AsyncServiceState, device_uuid: UUID, method: p.SNMPMethod, oids: Sequence[p.RequestOID]) -> None: ...
    def description(self) -> str: ...

class AsyncSNMPServiceWalkQuery(AsyncSNMPQuery):
    oid: Incomplete
    def __init__(self, service_state: AsyncServiceState, device_uuid: UUID, oid: p.RequestOID) -> None: ...
    def description(self) -> str: ...

class AsyncSNMPClientWalkQuery(AsyncSNMPQuery):
    oid: Incomplete
    def __init__(self, service_state: AsyncServiceState, device_uuid: UUID, oid: p.RequestOID) -> None: ...
    def description(self) -> str: ...

@dataclass(frozen=True)
class SNMPQueryStatistics:
    __pt_repr__ = ...
    failed_sessions: int
    all_results: int
    success_results: int
    error_results: int
    packets_received: int
    packets_dropped: int
    ping_time: float
    total_queries: int
    failed_queries: int
    finished_queries: int
    running_queries: int
    unstarted_queries: int
    status: SNMPResultStatus
    first_error_message: str
    @classmethod
    def from_queries(cls, queries: Sequence[AsyncSNMPQuery]) -> Self: ...
    def progress_message(self) -> str: ...

class AsyncSNMPQuerySet(Mapping[int, AsyncSNMPQuery]):
    def __init__(self, service_state: AsyncServiceState, queries: Sequence[AsyncSNMPQuery]) -> None: ...
    __pt_repr__: Incomplete
    @asynccontextmanager
    async def create_session(self, concurrency: int = 100, timeout: float | None = None, limit: int | None = None, retries: int | None = None) -> AsyncGenerator[AsyncIterator[SNMPValueOrErrorRow], None]: ...
    def status(self) -> SNMPResultStatus: ...
    def stats(self) -> SNMPQueryStatistics: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __getitem__(self, __key: int) -> AsyncSNMPQuery: ...

class AsyncSNMPResult:
    def __init__(self, query_set: AsyncSNMPQuerySet) -> None: ...
    __pt_repr__: Incomplete
    def aggregate(self) -> SNMPTable[SNMPValueOrErrorRow]: ...
    def result(self) -> SNMPTableDeviceView: ...
    def queries(self) -> AsyncSNMPQuerySet: ...
    def status(self) -> SNMPResultStatus: ...
    def is_running(self) -> bool: ...
    def resume_fetch(self, concurrency: int = 100, timeout: float | None = None, limit: int | None = None, retries: int | None = None) -> None: ...
    def pause_fetch(self) -> None: ...
    async def wait(self, timeout: float | None = None) -> Self: ...

class AsyncSingleDeviceSNMPResult:
    def __init__(self, service_state: AsyncServiceState, device_uuid: UUID, result: AsyncSNMPResult) -> None: ...
    __pt_repr__: Incomplete
    def result(self) -> SingleDeviceSNMPTable[SNMPValueOrErrorRow]: ...
    def queries(self) -> AsyncSNMPQuerySet: ...
    def status(self) -> SNMPResultStatus: ...
    def is_running(self) -> bool: ...
    def resume_fetch(self, concurrency: int = 100, timeout: float | None = None, limit: int | None = None, retries: int | None = None) -> None: ...
    def pause_fetch(self) -> None: ...
    async def wait(self, timeout: float | None = None) -> Self: ...
    def device_name(self) -> str: ...
    def device(self) -> AsyncDevice: ...

class AsyncSNMP_API:
    def __init__(self, service_state: AsyncServiceState, device_uuids: Collection[UUID]) -> None: ...
    __pt_repr__: Incomplete
    def get(self, oids: p.RequestOID | Sequence[p.RequestOID], *, timeout: float | None = None, limit: int | None = None, retries: int | None = None, background_fetch: bool = True) -> AsyncSNMPResult: ...
    def get_next(self, oids: p.RequestOID | Sequence[p.RequestOID], *, timeout: float | None = None, limit: int | None = None, retries: int | None = None, background_fetch: bool = True) -> AsyncSNMPResult: ...
    def get_bulk(self, oids: p.RequestOID | Sequence[p.RequestOID], *, timeout: float | None = None, limit: int | None = None, retries: int | None = None, concurrency: int = 100, background_fetch: bool = True) -> AsyncSNMPResult: ...
    def walk(self, oids: p.RequestOID | Sequence[p.RequestOID], *, timeout: float | None = None, limit: int | None = None, retries: int | None = None, concurrency: int = 100, background_fetch: bool = True) -> AsyncSNMPResult: ...

class AsyncSingleDeviceSNMP_API:
    def __init__(self, service_state: AsyncServiceState, device_uuid: UUID) -> None: ...
    __pt_repr__: Incomplete
    def get(self, oids: p.RequestOID | Sequence[p.RequestOID], *, timeout: float | None = None, limit: int | None = None, retries: int | None = None, background_fetch: bool = True) -> AsyncSingleDeviceSNMPResult: ...
    def get_next(self, oids: p.RequestOID | Sequence[p.RequestOID], *, timeout: float | None = None, limit: int | None = None, retries: int | None = None, background_fetch: bool = True) -> AsyncSingleDeviceSNMPResult: ...
    def get_bulk(self, oids: p.RequestOID | Sequence[p.RequestOID], *, timeout: float | None = None, limit: int | None = None, retries: int | None = None, concurrency: int = 100, background_fetch: bool = True) -> AsyncSingleDeviceSNMPResult: ...
    def walk(self, oids: p.RequestOID | Sequence[p.RequestOID], *, timeout: float | None = None, limit: int | None = None, retries: int | None = None, concurrency: int = 100, background_fetch: bool = True) -> AsyncSingleDeviceSNMPResult: ...
    def device_name(self) -> str: ...
    def device(self) -> AsyncDevice: ...
