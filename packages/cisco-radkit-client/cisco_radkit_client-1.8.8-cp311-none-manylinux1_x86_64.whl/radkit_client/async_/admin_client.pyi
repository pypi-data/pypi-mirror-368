from .cloud_connections import AsyncCloudConnection
from .model import ClientEnrollInfo, ServiceEnrollInfo
from .state import AsyncClientState
from collections.abc import Mapping
from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from radkit_common.access.admin import CurrentResourceRateLimit, Resource
from radkit_common.access.auth import APIToken, ClientCredentials
from radkit_common.access.ca import ClientGetCertificateResponse
from radkit_common.access.client.auth_flows import AsyncAuthFlow, AuthFlowType
from radkit_common.access.endpoints import EndpointSearchFilter, EndpointSearchResult, ServiceState, User, UserData, UserRADKitEndpoints
from radkit_common.access.results import AnyResult, ErrorResult
from radkit_common.access.token import APITokenMetadata, ClientIDDescription, JWT
from radkit_common.access.types import Days
from radkit_common.domains import Domain
from radkit_common.identities import ClientID, Email, Identity, ServiceID
from radkit_common.types import JTI

__all__ = ['AsyncAdminClientParameters', 'AdminClientStatus', 'AsyncAdminClient']

@dataclass(repr=False)
class AsyncAdminClientParameters:
    __pt_repr__ = ...
    def client_id(self) -> ClientID: ...
    def domain(self) -> Domain: ...
    def domain_name(self) -> str: ...
    def admin_level(self) -> int: ...
    def client(self) -> AsyncAdminClient: ...
    def auth_flow(self) -> AsyncAuthFlow: ...

class AdminClientStatus(Enum):
    NOT_AUTHENTICATED = 'NOT_AUTHENTICATED'
    AUTHENTICATION_EXPIRED = 'AUTHENTICATION_EXPIRED'
    AUTHENTICATED = 'AUTHENTICATED'

@dataclass
class AsyncAdminClient:
    def __init__(self, client_state: AsyncClientState, connection: AsyncCloudConnection) -> None: ...
    __pt_repr__ = ...
    def __post_init__(self) -> None: ...
    def params(self) -> AsyncAdminClientParameters: ...
    def client_id(self) -> ClientID: ...
    def auth_flow(self) -> AsyncAuthFlow: ...
    def authenticator(self) -> AsyncAuthFlow: ...
    def admin_level(self) -> int: ...
    def domain(self) -> Domain: ...
    def domain_name(self) -> str: ...
    def authentication_method(self) -> AuthFlowType: ...
    def status(self) -> AdminClientStatus: ...
    def access_token(self) -> str | None: ...
    async def grant_service_otp(self, service_id: ServiceID | str | None = None, service_owner_email: Email | str | None = None, description: str = '') -> ServiceEnrollInfo | ErrorResult: ...
    async def grant_client_otp(self, client_id: ClientID | str | None = None, client_owner_email: Email | str | None = None, description: str = '') -> ClientEnrollInfo | ErrorResult: ...
    def connection(self) -> AsyncCloudConnection: ...
    async def enroll_client(self, client_id: ClientID | str | None = None, private_key_password: str | None = None, overwrite_certificate: bool | None = None, description: str = '') -> None: ...
    async def create_user(self, user: User) -> AnyResult: ...
    async def get_user(self, user: Email | str, include_default_claims: bool = False) -> User | ErrorResult: ...
    async def get_user_endpoints(self, user: Email | str) -> UserRADKitEndpoints | ErrorResult: ...
    async def get_user_data(self, user: Email | str) -> UserData | ErrorResult: ...
    async def update_user(self, user: User) -> AnyResult: ...
    async def delete_user(self, user: Email | str) -> AnyResult: ...
    async def get_endpoints(self, search_filter: EndpointSearchFilter) -> EndpointSearchResult | ErrorResult: ...
    async def get_certificate(self, certificate_serial_number: str) -> ClientGetCertificateResponse | ErrorResult: ...
    async def revoke_certificate(self, certificate_serial_number: str) -> AnyResult: ...
    async def get_auditor_counters(self) -> Mapping[str, int] | ErrorResult: ...
    async def get_resource_limit(self, resource: Resource) -> CurrentResourceRateLimit | ErrorResult: ...
    async def reset_resource_limit(self, resource: Resource) -> AnyResult: ...
    async def get_service_state(self, service_id: ServiceID | str) -> ServiceState | ErrorResult: ...
    async def generate_api_token(self, lifetime: Days = 7) -> APIToken | ErrorResult: ...
    async def revoke_api_tokens(self, tokens: str | list[str] | JWT | list[JWT] | APIToken | list[APIToken] | None = None, jtis: str | list[str] | JTI | list[JTI] | APITokenMetadata | list[APITokenMetadata] | None = None, issued_before: datetime | None = None) -> AnyResult: ...
    async def list_api_tokens(self, requester: str | Email | None = None) -> list[APITokenMetadata] | ErrorResult: ...
    async def generate_client_credentials(self, lifetime: Days = 7) -> ClientCredentials | ErrorResult: ...
    async def revoke_client_credentials(self, client_ids: str | list[str] | Identity | list[Identity] | ClientIDDescription | list[ClientIDDescription] | ClientCredentials | list[ClientCredentials] | None = None, issued_before: datetime | None = None) -> AnyResult: ...
    async def list_client_credentials(self) -> list[ClientIDDescription] | ErrorResult: ...
