from .exception import *
from .lib_logger import *
from typing import Callable

__all__ = ['local_shell', 'start_rt_shell', 'stop_rt_shell', 'check_rt_shell', 'CShellRT']

class OS_NAME:
    LINUX: str
    WINDOWS: str
    MAC: str

def local_shell(command: str, timeout_sec: int = 5): ...

class CShellRT:
    ERR_INVALID_ARG: int
    @property
    def handle(self): ...
    @property
    def is_continue(self): ...
    @property
    def cmd(self): ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def __init__(self, command: str | list[str], call_back: Callable[[list[str], int], bool] = None, release_timeout: float = 60.0) -> None: ...
    def __del__(self) -> None: ...
    def __iter__(self): ...

def start_rt_shell(command: str, call_back: Callable[[list[str], int], bool] = None) -> CShellRT: ...
def stop_rt_shell(handler: CShellRT) -> None: ...
def check_rt_shell(handler: CShellRT) -> bool: ...
