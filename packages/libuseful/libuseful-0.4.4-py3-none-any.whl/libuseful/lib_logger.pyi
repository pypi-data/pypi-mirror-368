from .lib_enum import ENUM_STR as myEnum
from .lib_watchdog import IWatchDog
from _typeshed import Incomplete

__all__ = ['CmyLogger', 'get_instance', 'assertMy', 'WTD_logSignal']

class WTD_logSignal(IWatchDog):
    SIGNAL_ID: Incomplete
    SIGNAL_LISTEN_ID: Incomplete
    def start(self, sig_handler: Incomplete | None = None) -> None: ...
    def __init__(self) -> None: ...

class CmyLogger:
    DEBUG_MODE: Incomplete
    RELEASE_MODE: Incomplete
    DEBUG_LEVEL: Incomplete
    INFO_LEVEL: Incomplete
    WARN_LEVEL: Incomplete
    ERROR_LEVEL: Incomplete
    NONE_LEVEL: Incomplete
    def set_project(self, prj: str): ...
    def stop(self) -> None: ...
    def __init__(self, level: myEnum = ..., mode: myEnum = ...) -> None: ...
    def __get_frameInfo__(self, func_deepth: int = 0): ...
    def __level_int_to_str__(self, level: int) -> myEnum: ...
    def __level_str_to_int__(self, level: myEnum) -> int: ...
    def __set_mode__(self, mode: myEnum): ...
    def __set_level__(self, level: myEnum): ...
    def __get_level__(self) -> myEnum: ...
    def get_level(self) -> str: ...
    def error(self, *args, **kwargs) -> None: ...
    def warn(self, *args, **kwargs) -> None: ...
    def info(self, *args, **kwargs) -> None: ...
    def debug(self, *args, **kwargs) -> None: ...

def get_instance(level_of_file: myEnum = None, mode: myEnum = None) -> CmyLogger: ...
def assertMy(func, except_type, msg: str = '', debug_msg: str = None): ...
