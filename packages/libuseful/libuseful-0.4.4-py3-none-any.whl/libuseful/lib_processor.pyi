from .lib_logger import *
import multiprocessing
import multiprocessing.synchronize

__all__ = ['CMprocessors', 'CProcessor']

class CProcessor(multiprocessing.Process):
    @property
    def is_continue(self) -> bool: ...
    @is_continue.setter
    def is_continue(self, value: bool): ...
    def append_queue(self, qname: str): ...
    def get_queue_list(self) -> list: ...
    def get_queue(self, qname: str) -> multiprocessing.Queue: ...
    def append_event(self, ename: str): ...
    def get_event_list(self) -> list: ...
    def get_event(self, ename: str) -> multiprocessing.synchronize.Event: ...
    def thread_join(self) -> None: ...
    def run(self) -> None: ...
    def __init__(self, name: str, func, args: tuple = (), kwargs: dict = {}) -> None: ...
    def __del__(self) -> None: ...

class CMprocessors:
    def append_processor(self, name: str, run_func, args: tuple = (), kwargs: dict = {}, queue_names: list = None, event_names: list = None): ...
    def start_all(self) -> None: ...
    def remove_processor(self, tname: str): ...
    def get_processor_list(self) -> list: ...
    def get_processor_handler(self, tname: str) -> CProcessor: ...
    def __init__(self) -> None: ...
    def __del__(self) -> None: ...
