from .lib_logger import *
import asyncio
from typing import Callable

__all__ = ['CAsyncLoop']

class CAsyncLoop:
    THR_JOIN_TIMEOUT: float
    GATHER_TASK_NAME: str
    MAJOR_TASK_NAME: str
    class KEY:
        NAME: str
        FUNC: str
        ARGS: str
        KWARGS: str
        CALLBACK: str
    def register_task(self, name: str, func, callback: Callable[[asyncio.Task], None] = None, *args, **kwargs): ...
    def unregister_task(self, name: str = None): ...
    def start(self) -> None: ...
    def start_onece(self, name: str, func, callback: Callable[[asyncio.Task], None] = None, *args, **kwargs): ...
    def start_n_wait_done(self): ...
    def wait_done(self, hook: Callable[[], None] = None): ...
    async def run_inline_thread(self, func, *args, **kwargs): ...
    def __init__(self) -> None: ...
    def __del__(self) -> None: ...
