from .lib_logger import *
from typing import Any, Callable

__all__ = ['UserManager', 'get_UTC', 'str_UTC']

def get_UTC(): ...
def str_UTC(utc: float): ...

class UserManager:
    class CValue:
        state: bool
        unsub_func: Callable[[str], Any]
        def __init__(self, state: bool, unsub_func: Callable[[str], Any]) -> None: ...
        def __call__(self, state: bool, unsub_func: Callable[[str], Any]): ...
        def __del__(self) -> None: ...
    class State:
        INSERTED: str
        DUPLICATED: str
        OVERFLOW: str
        NOT_ALLOWED_USER: str
    DEF_MAX_USERS: int
    TIMESTAMP: str
    @property
    def uid_list(self): ...
    def get_service_list(self, user_id: str): ...
    def __init__(self, max_users: int = ...) -> None: ...
    def __del__(self) -> None: ...
    def join(self, timeout: float = 0.0): ...
    def reg_user(self, user_id: str) -> State: ...
    def unreg_user(self, user_id: str): ...
    def reg_service(self, user_id: str, svc_name: str, func: Callable[[str], Any]) -> State: ...
    def unreg_service(self, user_id: str, svc_name: str, force: bool = False): ...
    def is_available_user(self, user_id: str): ...
    def is_available(self, user_id: str, svc_name: str) -> bool: ...
    def set_state(self, user_id: str, svc_name: str, stat: bool) -> bool: ...
    def get_timestamp(self, user_id: str): ...
    def update_timestamp(self, user_id: str): ...
