[build-system]
requires = ["hatchling>=1.5.0", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pyidverify"
version = "0.0.1a0"
description = "Pre-release placeholder for pyidverify. Not production ready. Enterprise-grade ID verification library with military-level security"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "HWDigi"},
]
maintainers = [
    {name = "HWDigi"},
]
keywords = [
    "id-verification",
    "validation",
    "security",
    "encryption",
    "compliance",
    "ssn",
    "credit-card",
    "email",
    "phone",
    "gdpr",
    "hipaa",
    "pci-dss"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Healthcare Industry",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Financial",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = [
    # Core Security Dependencies (FIPS 140-2 certified)
    "cryptography>=41.0.0",
    "argon2-cffi>=23.0.0",
    
    # Data Validation and Configuration
    "pydantic>=2.0.0",
    "email-validator>=2.0.0",
    "python-dateutil>=2.8.0",
    
    # Async HTTP and Networking
    "httpx>=0.24.0",
    
    # Phone Number Validation
    "phonenumbers>=8.13.0",
    
    # Caching and Rate Limiting
    "redis>=4.5.0",
    
    # Type Extensions for older Python versions
    "typing-extensions>=4.5.0; python_version<'3.10'",
]

[project.optional-dependencies]
# Machine Learning Features
ml = [
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
]

# Advanced ML with Deep Learning
ml-advanced = [
    "tensorflow>=2.12.0",
    "torch>=2.0.0",
    "transformers>=4.30.0",
]

# Monitoring and Observability
monitoring = [
    "prometheus-client>=0.16.0",
    "opentelemetry-api>=1.17.0",
    "opentelemetry-sdk>=1.17.0",
    "opentelemetry-instrumentation>=0.38b0",
]

# Database Integration
database = [
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "pymongo>=4.3.0",
]

# Message Queue Integration
queue = [
    "celery>=5.3.0",
    "redis>=4.5.0",
    "kombu>=5.3.0",
]

# CLI Enhancement
cli = [
    "click>=8.1.0",
    "rich>=13.0.0",
    "prompt-toolkit>=3.0.0",
    "pygments>=2.15.0",
]

# Development Tools
dev = [
    # Testing Framework
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "hypothesis>=6.70.0",
    
    # Code Quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    
    # Security Analysis
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "semgrep>=1.0.0",
    
    # Documentation
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    
    # Build Tools
    "build>=0.10.0",
    "twine>=4.0.0",
]

# All optional dependencies
all = [
    "pyidverify[ml,ml-advanced,monitoring,database,queue,cli]"
]

[project.urls]
Homepage = "https://github.com/pyidverify/pyidverify"
Documentation = "https://pyidverify.readthedocs.io"
Repository = "https://github.com/pyidverify/pyidverify.git"
"Bug Tracker" = "https://github.com/pyidverify/pyidverify/issues"
Changelog = "https://github.com/pyidverify/pyidverify/blob/main/CHANGELOG.md"
"Security Policy" = "https://github.com/pyidverify/pyidverify/blob/main/SECURITY.md"

[project.scripts]
pyidverify = "pyidverify.cli.commands:main"

[project.entry-points."pyidverify.validators"]
# Government ID Validators
ssn = "pyidverify.validators.government.ssn:SSNValidator"
drivers_license = "pyidverify.validators.government.drivers_license:DriversLicenseValidator"
passport = "pyidverify.validators.government.passport:PassportValidator"

# Financial Validators
credit_card = "pyidverify.validators.financial.credit_card:CreditCardValidator"
iban = "pyidverify.validators.financial.iban:IBANValidator"
bank_account = "pyidverify.validators.financial.bank_account:BankAccountValidator"

# Personal Validators
email = "pyidverify.validators.personal.email:EmailValidator"
phone = "pyidverify.validators.personal.phone:PhoneValidator"
ip_address = "pyidverify.validators.personal.ip_address:IPAddressValidator"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "pyidverify/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["pyidverify"]

[tool.hatch.build.targets.sdist]
include = [
    "pyidverify/",
    "tests/",
    "docs/",
    "examples/",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
    "SECURITY.md",
]

# Black Code Formatting
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort Import Sorting
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy Type Checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "argon2.*",
    "phonenumbers.*",
    "redis.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=pyidverify",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=95",
    "-ra",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "security: Security tests",
    "performance: Performance tests",
    "slow: Slow-running tests",
    "external: Tests requiring external services",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage Configuration
[tool.coverage.run]
source = ["pyidverify"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
    "pyidverify/_version.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
    "except ImportError:",
]

# Bandit Security Linting
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
tests = ["B201", "B301", "B302", "B303", "B304", "B305", "B306", "B307", "B308", "B309", "B310", "B311", "B312", "B313", "B314", "B315", "B316", "B317", "B318", "B319", "B320", "B321", "B322", "B323", "B324", "B325", "B401", "B402", "B403", "B404", "B405", "B406", "B407", "B408", "B409", "B410", "B411", "B412", "B413", "B501", "B502", "B503", "B504", "B505", "B506", "B507", "B601", "B602", "B603", "B604", "B605", "B606", "B607", "B608", "B609", "B610", "B611", "B701", "B702", "B703"]
skips = ["B101", "B601"]

# Ruff Linting (Alternative to Flake8)
[tool.ruff]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # flake8-bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
target-version = "py38"
line-length = 88
unfixable = ["F401", "F841"]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["S101", "S106", "S108", "S301", "S311"]
"examples/**/*.py" = ["S106", "S108"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["pyidverify"]
