# generated by datamodel-codegen:
#   filename:  api/services/createDatabaseService.json
#   timestamp: 2025-08-12T13:13:31+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import ConfigDict, Field
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel

from ...entity.services import databaseService
from ...type import basic, entityReferenceList, tagLabel


class CreateDatabaseServiceRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Annotated[
        basic.EntityName,
        Field(description='Name that identifies the this entity instance uniquely'),
    ]
    displayName: Annotated[
        Optional[str],
        Field(None, description='Display Name that identifies this database service.'),
    ]
    description: Annotated[
        Optional[basic.Markdown],
        Field(None, description='Description of Database entity.'),
    ]
    tags: Annotated[
        Optional[List[tagLabel.TagLabel]],
        Field(None, description='Tags for this Database Service.'),
    ]
    serviceType: databaseService.DatabaseServiceType
    connection: Optional[databaseService.DatabaseConnection] = None
    owners: Annotated[
        Optional[entityReferenceList.EntityReferenceList],
        Field(None, description='Owners of this database service.'),
    ]
    dataProducts: Annotated[
        Optional[List[basic.FullyQualifiedEntityName]],
        Field(
            None,
            description='List of fully qualified names of data products this entity is part of.',
        ),
    ]
    domain: Annotated[
        Optional[str],
        Field(
            None,
            description='Fully qualified name of the domain the Database Service belongs to.',
        ),
    ]
