[build-system]
requires = ["hatchling", "setuptools-scm", "setuptools", "wheel"]
build-backend = "hatchling.build"

####################
# Project Metadata #
####################

[project]
name = "Pytanis"
description = "Utilities for the program organization of conferences using Pretalx"
readme = "README.md"
requires-python = ">=3.12"
license = "MIT"
keywords = ["pretalx", "conference", "cfp", "google sheet", "gsheet", "helpdesk"]
authors = [
    { name = "Florian Wilhelm", email = "Florian.Wilhelm@gmail.com" },
]
# classifiers from https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
#    "Programming Language :: Python :: 3.10",
#    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Operating System :: OS Independent",
    "Topic :: Communications :: Email",
    "Topic :: Software Development :: Libraries",
    "Topic :: Utilities",
]
dependencies = [
    # Core dependencies only
    "pandas>=2,<3",
    "tomli",
    "pydantic>=2.5",
    "httpx",
    "httpx-auth",
    "structlog",
    "tqdm",
    "openpyxl>=3.1.5", # For local Excel file support
    "pandas-stubs>=2,<3"

]
dynamic = ["version"]

[project.optional-dependencies]
# Google Sheets support
google = [
    "gspread<6.0", # newer version breaks worksheet.spreadsheet
    "gspread-dataframe",
    "gspread-formatting",
    "webcolors",
]

# Jupyter and visualization support
jupyter = [
    "jupyter>=1.1.1",
    "ipywidgets", # for nicer progress bar in Jupyter lab/notebook
    "seaborn>=0.13.2",
]

# Schedule optimization
optimization = [
    "pyomo>=6.9.1",
#    "pyomo[optional]", # for optimizing the schedule
    "highspy", # for MIP/LP/QP solver in pyomo
]

# Everything
all = [
    # Include all optional groups
    "pytanis[google,jupyter,optimization]",
    "pillow", # for the creation of social cards
]

[project.urls]
Documentation = "https://pioneershub.github.io/pytanis/"
Sponsor = "https://github.com/sponsors/PioneersHub"
Tracker = "https://github.com/PioneersHub/pytanis/issues"
Source = "https://github.com/PioneersHub/pytanis"

######################
# Build & Versioning #
######################

[tool.hatch.metadata]
# direct dependency references, e.g `pip @ git+https://github.com/pypa/pip.git@master`
allow-direct-references = true

[tool.hatch.version]
path = "src/pytanis/__init__.py"
pattern = "__version__ = [\"'](?P<version>[^\"']*)[\"']"

[tool.hatch.build]
packages = ["src/pytanis"]

[tool.hatch.build.targets.sdist]
exclude = ["/.github"]

##################
# External Tools #
##################

[tool.mypy]
files = ["src/pytanis", "tests"]
disallow_untyped_defs = false
follow_imports = "normal" # "silent" for not following
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = false
warn_unused_ignores = true

[tool.bandit]
targets = ["src/pytanis"]
exclude_dirs = ["tests", "notebooks"]
skips = [
    "B101",  # assert_used - common in tests
    "B113",  # request_without_timeout - TODO: add timeouts to httpx calls
    "B601",  # paramiko_calls - not using paramiko
    "B603",  # subprocess_without_shell_equals_true - already handled by S603 in ruff
]
# Severity levels: LOW, MEDIUM, HIGH
severity = "MEDIUM"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --doctest-glob='*.md'"
testpaths = [
    "tests",
]
markers = [
    "integration: marks tests as integration tests that require live API access (deselect with '-m \"not integration\"')",
]

[tool.coverage.run]
branch = true
source = ["src/pytanis"]
omit = [
    "_version.py",  # automatically created by hatch-vcs, not in repo
]

[tool.coverage.paths]
source = [
    "src/",
    "*/site-packages/",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
target-version = "py310" # ToDo: Modify according to your needs!
line-length = 120
preview = true # preview features & checks, use with caution
include = ["src/**/*.py", "src/**/*.pyi", "tests/**/*.py", "tests/**/*.pyi"]
exclude = ["notebooks/*.ipynb"]

[tool.ruff.format]
quote-style = "single" # be more like black

[tool.ruff.lint]
extend-select = [ # features in preview
    "W292", # missing-newline-at-end-of-file
]
select = [
    "A",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT", # Boolean trap
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "SIM",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
    "RUF100", # Automatically remove unused # noqa directives
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    "PLC1901", # empty string comparisons
    "PLW2901", # `for` loop variable overwritten
    "SIM114", # Combine `if` branches using logical `or` operator
    "E203", # Whitespace before :, needed for black compatibility and also `ruff format`
    "ISC001", # causes unexpected behaviour with formatter
    "PLR0904", # more than 20 public methods
]
unfixable = [
    # "F401",  # Don't touch unused imports
]

[tool.ruff.lint.isort]
known-first-party = ["pytanis"]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Allow print/pprint
"examples/*" = ["T201"]
# Tests can use magic values, assertions, methods that could be static and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "PLR6301"]


#####################
# Environment Setup #
#####################

[tool.hatch.env]
requires = ["hatch-pip-compile", "setuptools"]

# Default
[tool.hatch.envs.default]
type = "pip-compile"
python = "3.12"
features = ["all"]
pip-compile-installer = "pip"  # or "uv"
pip-compile-constraint = "default"  # keep locks between default & others consistent
pip-compile-resolver = "pip-compile" # or "uv"
pip-compile-hashes = false  # no hashes in lock files
post-install-commands = ["pre-commit install"]
dependencies = [
    "coverage[toml]>=6.2",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-vcr",
    "pytest-sugar",
    "hypothesis",
    "setuptools-scm",
]
[tool.hatch.envs.default.scripts]
cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/pytanis --cov=tests {args}"
no-cov = "cov --no-cov {args}"
debug =  "cov --no-cov -s --pdb --pdbcls=IPython.core.debugger:Pdb {args}"
ci = "cov --cov-report lcov {args}"
upgrade-all = "PIP_COMPILE_UPGRADE=1 hatch env run --env {env_name} -- python --version"
upgrade-pkg = "PIP_COMPILE_UPGRADE_PACKAGE='{args}' hatch env run --env {env_name} -- python --version"
# Integration testing
integration = "pytest tests/pretalx/test_integration.py"  # if no local config, set envs: PRETALX_API_TOKEN, PRETALX_TEST_EVENT
# one script to check all before a PR for lazy developers
check-all = [
  "echo 'üîç Running pre-commit hooks...'",
  "pre-commit run --all-files",
  "echo '‚úÖ Pre-commit checks passed'",
  "echo 'üß™ Running tests with coverage...'",
  "cov",
  "echo '‚úÖ All tests passed'",
  "echo 'üìö Building documentation...'",
  "hatch run docs:build-check",
  "echo 'üî® Testing package build...'",
  "hatch build --clean",
  "echo '‚úÖ Package builds successfully'",
  "echo 'üéâ All checks passed! Ready to commit.'",
]


# Docs environment
[tool.hatch.envs.docs]
type = "virtual"
detached = true
dependencies = [
    "mkdocs~=1.5",
    "mkdocs-material~=9.4",
    # Plugins
    "mkdocs-include-markdown-plugin",
    "mkdocs-gen-files",
    "mkdocs-literate-nav",
    "mkdocs-minify-plugin~=0.5",
    "mkdocs-section-index",
    "mkdocs-git-revision-date-localized-plugin~=1.1",
    "mkdocstrings[python]",
    "mkdocs-redirects~=1.2",
    "mkdocs-glightbox~=0.3.0",
    "mike~=2.0.0",
    # Extensions
    "pymdown-extensions~=10.5",
    # Necessary for syntax highlighting in code blocks
    "pygments~=2.13",
    # Validation
    "linkchecker~=10.3",
    "setuptools",
    ]
[tool.hatch.envs.docs.env-vars]
SOURCE_DATE_EPOCH = "1580601600"
PYTHONUNBUFFERED = "1"
MKDOCS_CONFIG = "mkdocs.yml"
[tool.hatch.envs.docs.scripts]
build = "mkdocs build --config-file {env:MKDOCS_CONFIG} --clean --strict {args}"
serve = "mkdocs serve --config-file {env:MKDOCS_CONFIG} --dev-addr localhost:8000 {args}"
ci-build = "mike deploy --config-file {env:MKDOCS_CONFIG} --update-aliases {args}"
# --ignore-url=None since the SUMMARY.md file leaves a <toc>None</toc> in sitemap.xml
validate = "linkchecker --config .linkcheckerrc --ignore-url=/reference --ignore-url=None site"
# https://github.com/linkchecker/linkchecker/issues/678
build-check = [
    "build",
    "validate",
]

# Lint environment
[tool.hatch.envs.lint]
type = "virtual"
detached = true
dependencies = [
    "mypy~=1.15.0",
    "ruff~=0.9.7",
    "nbstripout==0.8.1",
]
[tool.hatch.envs.lint.scripts]
typing = [
    "echo \"VERSION: `mypy --version`\"",
    "mypy --install-types --non-interactive {args}"
]
style = [
    "echo \"VERSION: `ruff --version`\"",
    "ruff check {args:.}",
    "ruff format --check {args:.}",
]
fix = [
    "nbstripout notebooks/**/*.ipynb",
    "ruff format {args:.}",
    "ruff check --fix {args:.}",
    "style",  # feedback on what is not fixable
]
notebooks = [
    "echo \"Checking that there are no outputs in Jupyter notebooks...\"",
    "nbstripout --dry-run notebooks/**/*.ipynb",
]
all = [
    "style",
    "typing",
    "notebooks",
]

# Notebook environment
# Notebooks should be related to conference work and are considered to be moved to an own project in the future.
# Moved to an optional environment to reduce compatibility conflicts (subdependencies have severe security warnings)
[tool.hatch.envs.notebook]
python = ">=3.11"
type = "pip-compile"
pip-compile-constraint = "default"
features = ["jupyter"]
dependencies = [
    "jupyterlab",
    "ipython",
]
[tool.hatch.envs.notebook.scripts]
lab = "jupyter lab --allow-root {args}"
notebook = "jupyter notebook --allow-root {args}"
console = "ipython {args}"
