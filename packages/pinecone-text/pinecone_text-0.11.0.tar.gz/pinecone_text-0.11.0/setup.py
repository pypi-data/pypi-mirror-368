# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pinecone_text',
 'pinecone_text.dense',
 'pinecone_text.hybrid',
 'pinecone_text.sparse']

package_data = \
{'': ['*']}

install_requires = \
['mmh3>=4.1.0,<5.0.0',
 'nltk>=3.9.1,<4.0.0',
 'numpy>=1.21.5',
 'python-dotenv>=1.0.1,<2.0.0',
 'requests>=2.25.0,<3.0.0',
 'types-requests>=2.25.0,<3.0.0']

extras_require = \
{'cohere': ['cohere>=4.37,<5.0'],
 'dense': ['torch>=1.13.1',
           'transformers>=4.26.1',
           'sentence-transformers>=2.0.0',
           'openai>=1.2.3,<2.0.0'],
 'openai': ['openai>=1.2.3,<2.0.0'],
 'splade': ['torch>=1.13.1',
            'transformers>=4.26.1',
            'sentence-transformers>=2.0.0']}

setup_kwargs = {
    'name': 'pinecone-text',
    'version': '0.11.0',
    'description': 'Text utilities library by Pinecone.io',
    'long_description': '<h1 align="center">\n  <img src="https://avatars.githubusercontent.com/u/54333248?s=200&v=4">\n    <br>\n    Pinecone Text Client\n    <br>\n</h1>\n\nThe Pinecone Text Client is a Python package that provides text utilities designed for seamless integration with Pinecone\'s [sparse-dense](https://docs.pinecone.io/docs/hybrid-search) (hybrid) semantic search.\n\n> **_⚠️ Warning_**\n>\n> This is a **public preview** ("Beta") version.   \n> For any issues or requests, please reach out to our [support](support@pinecone.io) team.\n## Installation\nTo install the Pinecone Text Client, use the following command:\n```bash\npip install pinecone-text\n```\n\nIf you wish to use `SpladeEncoder`, you will need to install the `splade` extra:\n```bash\npip install pinecone-text[splade]\n```\n\nIf you wish to use `SentenceTransformerEncoder` dense encoder, you will need to install the `dense` extra:\n```bash\npip install pinecone-text[dense]\n```\n\nIf you wish to use `OpenAIEncoder` dense encoder, you will need to install the `openai` extra:\n```bash\npip install pinecone-text[openai]\n```\n\n## Sparse Encoding\n\nTo convert your own text corpus to sparse vectors, you can either use [BM25](https://www.pinecone.io/learn/semantic-search/#bm25) or [SPLADE](https://www.pinecone.io/learn/splade/).\n\n### BM25\nTo encode your documents and queries using BM25 as vector for dot product search, you can use the `BM25Encoder` class.\n\n> **_📝 NOTE:_**\n> \n> Our current implementation of BM25 supports only static document frequency (meaning that the document frequency values are precomputed and fixed, and do not change dynamically based on new documents added to the collection).\n>\n> When conducting a search, you may come across queries that contain terms not found in the training corpus but are present in the database. To address this scenario, BM25Encoder uses a default document frequency value of 1 when encoding such terms. \n#### Usage\n\nFor an end-to-end example, you can refer to our Quora dataset generation with BM25 [notebook](https://colab.research.google.com/github/pinecone-io/examples/blob/master/learn/search/semantic-search/sparse/bm25/bm25-vector-generation.ipynb).\n\n```python\nfrom pinecone_text.sparse import BM25Encoder\n\ncorpus = ["The quick brown fox jumps over the lazy dog",\n          "The lazy dog is brown",\n          "The fox is brown"]\n\n# Initialize BM25 and fit the corpus\nbm25 = BM25Encoder()\nbm25.fit(corpus)\n\n# Encode a new document (for upsert to Pinecone index)\ndoc_sparse_vector = bm25.encode_documents("The brown fox is quick")\n# {"indices": [102, 18, 12, ...], "values": [0.22, 0.38, 0.15, ...]}\n\n# Encode a query (for search in Pinecone index)\nquery_sparse_vector = bm25.encode_queries("Which fox is brown?")\n# {"indices": [102, 16, 18, ...], "values": [0.22, 0.11, 0.15, ...]}\n\n# store BM25 params as json\nbm25.dump("bm25_params.json")\n\n# load BM25 params from json\nbm25.load("bm25_params.json")\n```\n\n#### Load Default Parameters\nIf you want to use the default parameters for `BM25Encoder`, you can call the `default` method.\nThe default parameters were fitted on the [MS MARCO](https://microsoft.github.io/msmarco/)  passage ranking dataset.\n```python\nfrom pinecone_text.sparse import BM25Encoder\nbm25 = BM25Encoder.default()\n```\n\n#### BM25 Parameters\nThe `BM25Encoder` class offers configurable parameters to customize the encoding:\n\n* `b`: Controls document length normalization (default: 0.75).\n* `k1`: Controls term frequency saturation (default: 1.2).\n* Tokenization Options: Allows customization of the tokenization process, including options for handling case, punctuation, stopwords, stemming, and language selection.\n\nThese parameters can be specified when initializing the BM25Encoder class. Please read the BM25Encoder documentation for more details.\n\n### SPLADE\n\nCurrently the `SpladeEncoder` class supprts only the [naver/splade-cocondenser-ensembledistil](https://huggingface.co/naver/splade-cocondenser-ensembledistil) model, and follows [SPLADE V2](https://arxiv.org/abs/2109.10086) implementation.\n\n> **_📝 NOTE:_**\n> \n> Currently pinecone text not supoorts SPLADE with python 3.12 due to compatibility issues with pytorch\n>\n\n#### Usage\n\nFor an end-to-end example, you can refer to our Quora dataset generation with SPLADE [notebook](https://colab.research.google.com/github/pinecone-io/examples/blob/master/learn/search/semantic-search/sparse/splade/splade-vector-generation.ipynb).\n\nNote: If cuda is available, the model will automatically run on GPU. You can explicitly override the device using the `device` parameter in the constructor.\n\n```python\nfrom pinecone_text.sparse import SpladeEncoder\n\n# Initialize Splade\nsplade = SpladeEncoder()\n\n# encode a batch of documents\ndocuments = ["The quick brown fox jumps over the lazy dog",\n             "The lazy dog is brown",\n             "The fox is brown"]\ndocument_vectors = splade.encode_documents(documents)\n# [{"indices": [102, 18, 12, ...], "values": [0.21, 0.38, 0.15, ...]}, ...]\n\n# encode a query\nquery = "Which fox is brown?"\nquery_vectors = splade.encode_queries(query)\n# {"indices": [102, 18, 12, ...], "values": [0.21, 0.38, 0.15, ...]}\n```\n\n\n## Dense Encoding\n\nFor dense embedding we also provide a thin wrapper for the following models:\n1. All Sentence Transformers models hosted on huggingface [See full list of models](https://huggingface.co/sentence-transformers)\n2. All OpenAI API supported embedding models [See full list of models](https://platform.openai.com/docs/models/embeddings)\n\n### Sentence Transformers models\n\nWhen using `SentenceTransformerEncoder`, the models are downloaded from huggingface and run locally. Also, if cuda is available, the model will automatically run on GPU. You can explicitly override the device using the `device` parameter in the constructor.\n\n> **_📝 NOTE:_**\n> \n> Currently pinecone text not supoorts sentence transformers with python 3.12 due to compatibility issues with pytorch\n>\n\n#### Usage\n```python\nfrom pinecone_text.dense import SentenceTransformerEncoder\n\nencoder = SentenceTransformerEncoder("sentence-transformers/all-MiniLM-L6-v2")\n\nencoder.encode_documents(["The quick brown fox jumps over the lazy dog"])\n# [[0.21, 0.38, 0.15, ...]]\n\nencoder.encode_queries(["Who jumped over the lazy dog?"])\n# [[0.11, 0.43, 0.67, ...]]\n```\n\n### OpenAI models\n\nWhen using the `OpenAIEncoder`, you need to provide an API key for the OpenAI API, and store it in the `OPENAI_API_KEY` environment variable before you import the encoder.\n\nBy default the encoder will use `text-embedding-3-small` as recommended by OpenAI. You can also specify a different model name using the `model_name` parameter.\n#### Usage\n```python\nfrom pinecone_text.dense import OpenAIEncoder\n\nencoder = OpenAIEncoder() # defaults to the recommended model - "text-embedding-3-small"\n\nencoder.encode_documents(["The quick brown fox jumps over the lazy dog"])\n# [[0.21, 0.38, 0.15, ...]]\n\nencoder.encode_queries(["Who jumped over the lazy dog?"])\n# [[0.11, 0.43, 0.67, ...]]\n```\n\nPinecone text also supports Azure OpenAI API. To use it, you need to import the `AzureOpenAIEncoder` class instead of `OpenAIEncoder`. You also need to pass Azure specific environment variables to the constructor, along with your specific embeddings  deployment as the model name. For more information please follow the `AzureOpenAIEncoder` documentation.\n\n\n### Jina AI models\n\nWhen using the `JinaEncoder`, you need to provide an API key for the Jina Embeddings API, and store it in the `JINA_API_KEY` environment variable before you import the encoder.\n\nBy default the encoder will use `jina-embeddings-v2-base-en`. You can also specify a different model name using the `model_name` parameter.\n\n#### Usage\n\n```python\nfrom pinecone_text.dense import JinaEncoder\n\nencoder = JinaEncoder()\n\nencoder.encode_documents(["The quick brown fox jumps over the lazy dog"])\n# [[-0.62586284, -0.54578537, 0.5570845, ...]]\n\nencoder.encode_queries(["Who jumped over the lazy dog?"])\n# [[-0.43374294, -0.42069837, 0.773763, ...]]\n```\n\n## Combining Sparse and Dense Encodings for Hybrid Search\nTo combine sparse and dense encodings for hybrid search, you can use the `hybrid_convex_scale` method on your query.\n\nThis method receives both a dense vector and a sparse vector, along with a convex scaling parameter `alpha`. It returns a tuple consisting of the scaled dense and sparse vectors according to the following formula: `(alpha * dense_vector, (1 - alpha) * sparse_vector)`.\n```python\nfrom pinecone_text.hybrid import hybrid_convex_scale\nfrom pinecone_text.sparse import SpladeEncoder\nfrom pinecone_text.dense import SentenceTransformerEncoder\n\n# Initialize Splade\nsplade = SpladeEncoder()\n\n# Initialize Sentence Transformer\nsentence_transformer = SentenceTransformerEncoder("sentence-transformers/all-MiniLM-L6-v2")\n\n# encode a query\nsparse_vector = splade.encode_queries("Which fox is brown?")\ndense_vector = sentence_transformer.encode_queries("Which fox is brown?")\n\n# combine sparse and dense vectors\nhybrid_dense, hybrid_sparse = hybrid_convex_scale(dense_vector, sparse_vector, alpha=0.8)\n# ([-0.21, 0.38, 0.15, ...], {"indices": [102, 16, 18, ...], "values": [0.21, 0.11, 0.18, ...]})\n```\n',
    'author': 'Pinecone.io',
    'author_email': 'None',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
