[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools_scm>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name = "binlearn"
dynamic = ["version"]
description = "A comprehensive binning and discretization library for machine learning"
readme = "README.rst"
requires-python = ">=3.10"
license = "MIT"
authors = [
    {name = "The DAALAB", email = "gyorgy.kovacs@daalab.com"},
]
maintainers = [
    {name = "The DAALAB", email = "gyorgy.kovacs@daalab.com"},
]
keywords = ["binning", "discretization", "binlearn", "data preprocessing", "machine learning", "data science", "feature engineering"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
]
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "kmeans1d>=0.3.0",
    "scikit-learn>=1.0.0",
]

[project.optional-dependencies]
tests = [
    "pytest>=6.0",
    "pytest-cov>=2.10",
    "pytest-xdist>=2.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.18",
    "sphinx-autodoc-typehints>=1.12",
]
dev = [
    "black>=22.0",
    "isort>=5.10",
    "flake8>=4.0",
    "pylint>=2.15.0",
    "mypy>=0.910",
    "pre-commit>=2.15",
    "build>=0.8",
    "twine>=4.0",
    "setuptools_scm>=8.0",
    "ruff>=0.1.0",
]
pandas = [
    "pandas>=1.3.0",
]
polars = [
    "polars>=0.15.0",
]
all = [
    "binlearn[tests,docs,dev,pandas,polars]",
]

[project.urls]
Homepage = "https://github.com/TheDAALab/binlearn"
Documentation = "https://binlearn.readthedocs.io/"
Repository = "https://github.com/TheDAALab/binlearn.git"
"Bug Tracker" = "https://github.com/TheDAALab/binlearn/issues"
Changelog = "https://github.com/TheDAALab/binlearn/blob/main/CHANGELOG.md"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["binlearn*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
binlearn = ["py.typed"]

[tool.setuptools_scm]
# Temporarily disable write_to to avoid dirty working directory during build
# write_to = "binlearn/_version.py"
write_to_template = """\
# This file is automatically generated by setuptools_scm
# Do not edit this file manually

__version__ = "{version}"
__version_tuple__ = {version_tuple}

def get_version():
    return __version__

# Additional metadata for debugging and CI/CD
def get_version_info():
    \"\"\"Get detailed version information.\"\"\"
    return {{
        "version": __version__,
        "version_tuple": __version_tuple__,
        "is_release": not (__version__.endswith(".dev0") or "dev" in __version__),
        "is_prerelease": any(x in __version__ for x in ["a", "b", "rc"]),
        "is_development": "dev" in __version__,
    }}
"""
# Use default setuptools_scm versioning for clean release versions
local_scheme = "no-local-version"
fallback_version = "0.0.0"
tag_regex = '^v(?P<version>\d+(?:\.\d+)*(?:[-\.]?(?:a|alpha|b|beta|rc|dev|pre)\.?\d*)?)$'

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["binlearn"]
known_third_party = ["numpy", "scipy", "sklearn", "pandas", "polars", "pytest"]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".tox",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    "docs/build",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:D",
]

[tool.pylint.format]
good-names = ["X", "y", "df", "pl", "pd", "i", "j", "k", "n", "m", "ax", "fig", "X_reshaped"]
max-line-length = 100

[tool.pylint.messages_control]
disable = [
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-few-public-methods",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "import-error",
    "missing-docstring",
    "invalid-name",
    "duplicate-code",
]

[tool.pylint.design]
max-args = 10
max-locals = 20
max-branches = 15
max-statements = 50

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "pandas: marks tests that require pandas",
    "polars: marks tests that require polars",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "kmeans1d.*",
    "scipy.*",
    "sklearn.*",
    "binlearn._version",
]
ignore_missing_imports = true
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
disallow_untyped_calls = false
check_untyped_defs = false
warn_unused_ignores = false

[tool.coverage.run]
source = ["binlearn"]
branch = true
omit = [
    "setup.py",
    "binlearn/__init__.py",
    "binlearn/_version.py",
    "tests/*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "\\.\\.\\.",
    "pass",
]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Additional modern tooling configurations

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

[tool.ruff]
line-length = 100
target-version = "py310"
exclude = [
    "*.ipynb",
    "notebooks/**/*.ipynb",
    "**/*.ipynb",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
unfixable = ["F841"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["D"]
"_polars_config.py" = ["F401"]  # Allow unused polars import for availability testing

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.pydocstyle]
convention = "numpy"
add-ignore = ["D100", "D101", "D102", "D103", "D104", "D105"]

[tool.docformatter]
make-summary-multi-line = true
close-quotes-on-newline = true
force-wrap = false
tab-width = 4

# Build and packaging configuration
[tool.check-manifest]
ignore = [
    ".github/*",
    ".pre-commit-config.yaml",
    "docs/*",
    "tests/*",
    "*.yml",
    "*.yaml",
    "Makefile",
    "tox.ini",
]

[tool.wheel]
universal = false
