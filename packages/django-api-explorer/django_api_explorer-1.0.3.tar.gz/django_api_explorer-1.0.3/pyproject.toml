[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "django_api_explorer"
version = "1.0.3"
description = "A powerful command-line tool and web interface for discovering, documenting, and testing API endpoints in Django projects"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Vikas Gole", email = "vikasgole089@gmail.com"}
]
keywords = ["django", "api", "documentation", "discovery", "endpoints"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Framework :: Django",
    "Topic :: Software Development :: Documentation",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]

dependencies = [
    "django>=3.2,<5.0",
    "click>=8.0.0",
    "rich>=12.0.0",
    "watchdog>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-django>=4.5.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
            # "flake8>=5.0.0",  # Removed due to complexity issues
    "mypy>=1.0.0",
    "isort>=5.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "twine>=4.0.0",
    "build>=0.10.0",
]

[project.scripts]
django-api-explorer = "django_api_explorer.cli:main"

[project.urls]
Homepage = "https://github.com/SketchG2001/api-explorer"
Repository = "https://github.com/SketchG2001/api-explorer"
Issues = "https://github.com/SketchG2001/api-explorer/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["django_api_explorer*"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    'tests/',
    'build/',
    'dist/',
    '\.venv/',
    '\.git/',
]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["core", "web", "utils"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=core",
    "--cov=web",
    "--cov=utils",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["core", "web", "utils"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
