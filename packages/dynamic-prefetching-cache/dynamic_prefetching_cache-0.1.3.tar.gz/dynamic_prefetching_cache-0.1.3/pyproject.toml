[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dynamic-prefetching-cache"
version = "0.1.3"
description = "A predictive caching framework that dynamically pre-loads data items with minimal latency"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Rasmus Rynell", email = "rynell.rasmus@gmail.com"}
]
keywords = ["cache", "prefetch", "prediction", "performance", "data"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    # No external dependencies - pure Python implementation
]

[project.optional-dependencies]
dev = [
    "mypy>=1.0",
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-asyncio>=0.21",
]
examples = [
    "tabulate>=0.9",
]

[project.urls]
Repository = "https://github.com/rasmusrynell/dynamic-prefetching-cache"

[tool.setuptools.packages.find]
where = ["src"]
include = ["dynamic_prefetching_cache*"]

# Type checking configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_equality = true
show_error_codes = true

# Test configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src/dynamic_prefetching_cache",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
] 