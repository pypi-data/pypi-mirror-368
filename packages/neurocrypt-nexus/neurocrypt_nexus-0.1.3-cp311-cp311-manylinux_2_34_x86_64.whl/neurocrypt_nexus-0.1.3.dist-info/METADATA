Metadata-Version: 2.4
Name: neurocrypt-nexus
Version: 0.1.3
Classifier: Programming Language :: Rust
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: License :: OSI Approved :: Apache Software License
Requires-Dist: maturin ; extra == 'dev'
Requires-Dist: pytest ; extra == 'dev'
Requires-Dist: ruff ; extra == 'dev'
Provides-Extra: dev
Summary: A foundational Rust/Python project.
License: MIT OR Apache-2.0
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Project-URL: Homepage, https://github.com/UTSAVS26/NeuroCrypt-Nexus
Project-URL: Bug Tracker, https://github.com/UTSAVS26/NeuroCrypt-Nexus/issues

# NeuroCrypt Nexus

[![Continuous Integration](https://github.com/UTSAVS26/NeuroCrypt-Nexus/actions/workflows/ci.yml/badge.svg)](https://github.com/UTSAVS26/NeuroCrypt-Nexus/actions/workflows/ci.yml)

A foundational project demonstrating a professional setup for a Rust core with Python bindings, managed with `uv` and `maturin`. This repository serves as a production-ready template for building high-performance, safe, and ergonomic Rust/Python applications.

This project is dual-licensed under the [MIT](LICENSE-MIT) and [Apache-2.0](LICENSE-APACHE) licenses.

## Features

*   **Rust Workspace:** A scalable multi-crate setup (`common`, `neurocrypt_core`, `bindings`).
*   **Python Bindings:** Efficient Rust-to-Python bindings powered by `PyO3` and `maturin`.
*   **Modern Python Tooling:** Python environment and package management handled by the high-speed `uv` tool.
*   **Automated Quality Checks:** Code formatting and linting enforced by `ruff`.
*   **Automated Testing:** Unit and integration tests run with `pytest`.
*   **Continuous Integration:** A GitHub Actions workflow automatically builds, lints, and tests every pull request and push to `main`.
*   **Clear Contribution Guidelines:** Includes a `CONTRIBUTING.md`, `CODE_OF_CONDUCT.md`, and a Pull Request template.

## Quickstart: Build and Test

This guide will help you build the project and run the automated tests to verify your setup. For Python-specific commands, see the [python/README.md](./python/README.md).

### Prerequisites

Before you begin, ensure you have the following tools installed:

1.  **Rust Toolchain (`rustup`)**: [Official Installation Guide](https://www.rust-lang.org/tools/install)
2.  **`uv` Python Installer**: [Official Installation Guide](https://astral.sh/uv/install.sh)

### Build Steps

1.  **Clone the repository:**
    ```bash
    git clone https://github.com/YOUR_USERNAME/NeuroCrypt-Nexus.git
    cd neurocrypt_nexus
    ```

2.  **Navigate to the Python directory:**
    ```bash
    cd python
    ```

3.  **Create a virtual environment:**
    `uv` will create and manage a local `.venv` for you.
    ```bash
    uv venv
    ```

4.  **Install the project and development dependencies:**
    This command uses `maturin` to compile the Rust workspace and installs the Python package in "editable" mode.
    ```bash
    uv pip install -e .[dev]
    ```

5.  **Run the automated tests:**
    After a successful installation, run the entire test suite.
    ```bash
    uv run pytest
    ```
    You should see an output indicating that all tests passed.

## Project Structure

The project is a monorepo containing both the Rust and Python code.

```
neurocrypt_nexus/
├── .github/              # GitHub-specific files (CI workflows, PR templates)
├── crates/               # The Rust workspace root
│   ├── common/           # Shared Rust types and utilities
│   ├── neurocrypt_core/  # Core Rust logic and functionality
│   └── bindings/         # The PyO3 crate that bridges Rust and Python
├── python/               # The Python package root
│   ├── neurocrypt_nexus/ # Python source code for the package
│   ├── tests/            # Python tests
│   └── README.md         # Python-specific development guide
├── .gitignore            # Project-wide ignore file
├── CONTRIBUTING.md       # Guide for contributing to the project
├── LICENSE-APACHE        # Apache 2.0 License
├── LICENSE-MIT           # MIT License
└── README.md             # This file```
```

## Contributing

Contributions are welcome! Please read the [**CONTRIBUTING.md**](CONTRIBUTING.md) file for details on our code of conduct and the process for submitting pull requests.
