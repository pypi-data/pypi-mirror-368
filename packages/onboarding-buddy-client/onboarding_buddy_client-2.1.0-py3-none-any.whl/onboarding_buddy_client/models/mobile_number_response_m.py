# coding: utf-8

"""
    Onboarding Buddy API

    This document details all the available operations in the Onboarding Buddy API specification

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MobileNumberResponseM(BaseModel):
    """
    MobileNumberResponseM
    """ # noqa: E501
    message_id: Optional[StrictStr] = Field(default=None, alias="messageId")
    correlation_id: Optional[StrictStr] = Field(default=None, alias="correlationId")
    idempotency_key: Optional[StrictStr] = Field(default=None, alias="idempotencyKey")
    in_error: Optional[StrictBool] = Field(default=None, alias="inError")
    error_type: Optional[StrictStr] = Field(default=None, alias="errorType")
    messages: Optional[List[StrictStr]] = None
    mobile_number: Optional[StrictStr] = Field(default=None, alias="mobileNumber")
    valid: Optional[StrictBool] = None
    local_format: Optional[StrictStr] = Field(default=None, alias="localFormat")
    international_format: Optional[StrictStr] = Field(default=None, alias="internationalFormat")
    country_prefix: Optional[StrictStr] = Field(default=None, alias="countryPrefix")
    country_code: Optional[StrictStr] = Field(default=None, alias="countryCode")
    carrier: Optional[StrictStr] = None
    line_type: Optional[StrictStr] = Field(default=None, alias="lineType")
    check_status: Optional[StrictStr] = Field(default=None, alias="checkStatus")
    __properties: ClassVar[List[str]] = ["messageId", "correlationId", "idempotencyKey", "inError", "errorType", "messages", "mobileNumber", "valid", "localFormat", "internationalFormat", "countryPrefix", "countryCode", "carrier", "lineType", "checkStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MobileNumberResponseM from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if message_id (nullable) is None
        # and model_fields_set contains the field
        if self.message_id is None and "message_id" in self.model_fields_set:
            _dict['messageId'] = None

        # set to None if correlation_id (nullable) is None
        # and model_fields_set contains the field
        if self.correlation_id is None and "correlation_id" in self.model_fields_set:
            _dict['correlationId'] = None

        # set to None if idempotency_key (nullable) is None
        # and model_fields_set contains the field
        if self.idempotency_key is None and "idempotency_key" in self.model_fields_set:
            _dict['idempotencyKey'] = None

        # set to None if error_type (nullable) is None
        # and model_fields_set contains the field
        if self.error_type is None and "error_type" in self.model_fields_set:
            _dict['errorType'] = None

        # set to None if messages (nullable) is None
        # and model_fields_set contains the field
        if self.messages is None and "messages" in self.model_fields_set:
            _dict['messages'] = None

        # set to None if mobile_number (nullable) is None
        # and model_fields_set contains the field
        if self.mobile_number is None and "mobile_number" in self.model_fields_set:
            _dict['mobileNumber'] = None

        # set to None if local_format (nullable) is None
        # and model_fields_set contains the field
        if self.local_format is None and "local_format" in self.model_fields_set:
            _dict['localFormat'] = None

        # set to None if international_format (nullable) is None
        # and model_fields_set contains the field
        if self.international_format is None and "international_format" in self.model_fields_set:
            _dict['internationalFormat'] = None

        # set to None if country_prefix (nullable) is None
        # and model_fields_set contains the field
        if self.country_prefix is None and "country_prefix" in self.model_fields_set:
            _dict['countryPrefix'] = None

        # set to None if country_code (nullable) is None
        # and model_fields_set contains the field
        if self.country_code is None and "country_code" in self.model_fields_set:
            _dict['countryCode'] = None

        # set to None if carrier (nullable) is None
        # and model_fields_set contains the field
        if self.carrier is None and "carrier" in self.model_fields_set:
            _dict['carrier'] = None

        # set to None if line_type (nullable) is None
        # and model_fields_set contains the field
        if self.line_type is None and "line_type" in self.model_fields_set:
            _dict['lineType'] = None

        # set to None if check_status (nullable) is None
        # and model_fields_set contains the field
        if self.check_status is None and "check_status" in self.model_fields_set:
            _dict['checkStatus'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MobileNumberResponseM from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "messageId": obj.get("messageId"),
            "correlationId": obj.get("correlationId"),
            "idempotencyKey": obj.get("idempotencyKey"),
            "inError": obj.get("inError"),
            "errorType": obj.get("errorType"),
            "messages": obj.get("messages"),
            "mobileNumber": obj.get("mobileNumber"),
            "valid": obj.get("valid"),
            "localFormat": obj.get("localFormat"),
            "internationalFormat": obj.get("internationalFormat"),
            "countryPrefix": obj.get("countryPrefix"),
            "countryCode": obj.get("countryCode"),
            "carrier": obj.get("carrier"),
            "lineType": obj.get("lineType"),
            "checkStatus": obj.get("checkStatus")
        })
        return _obj


