# coding: utf-8

"""
    Onboarding Buddy API

    This document details all the available operations in the Onboarding Buddy API specification

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from onboarding_buddy_client.models.email_sanction_record_m import EmailSanctionRecordM

class TestEmailSanctionRecordM(unittest.TestCase):
    """EmailSanctionRecordM unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EmailSanctionRecordM:
        """Test EmailSanctionRecordM
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EmailSanctionRecordM`
        """
        model = EmailSanctionRecordM()
        if include_optional:
            return EmailSanctionRecordM(
                individual_match = [
                    onboarding_buddy_client.models.email_individual_record_m.EmailIndividualRecordM(
                        full_name = '', 
                        first_name = '', 
                        last_name = '', 
                        program = '', 
                        title = '', 
                        alias_list = [
                            onboarding_buddy_client.models.individual_alias_m.IndividualAliasM(
                                full_name = '', 
                                first_name = '', 
                                last_name = '', 
                                remarks = '', )
                            ], 
                        nationality = '', 
                        gender = '', 
                        linked_to = '', 
                        secondary_sanctions_risk = '', 
                        digital_currency_address = [
                            onboarding_buddy_client.models.digital_currency_address_m.DigitalCurrencyAddressM(
                                instrument = '', 
                                address = '', )
                            ], 
                        websites = [
                            ''
                            ], 
                        email_address = [
                            ''
                            ], 
                        also_known_as = [
                            ''
                            ], )
                    ],
                entity_match = [
                    onboarding_buddy_client.models.email_entity_record_m.EmailEntityRecordM(
                        full_name = '', 
                        program = '', 
                        additional_info = [
                            ''
                            ], 
                        alias_list = [
                            onboarding_buddy_client.models.individual_alias_m.IndividualAliasM(
                                full_name = '', 
                                first_name = '', 
                                last_name = '', 
                                remarks = '', )
                            ], 
                        linked_to = '', 
                        secondary_sanctions_risk = '', 
                        websites = [
                            ''
                            ], 
                        email_address = [
                            ''
                            ], 
                        also_known_as = [
                            ''
                            ], 
                        linked_individuals = [
                            onboarding_buddy_client.models.email_individual_record_m.EmailIndividualRecordM(
                                full_name = '', 
                                first_name = '', 
                                last_name = '', 
                                program = '', 
                                title = '', 
                                nationality = '', 
                                gender = '', 
                                linked_to = '', 
                                secondary_sanctions_risk = '', 
                                digital_currency_address = [
                                    onboarding_buddy_client.models.digital_currency_address_m.DigitalCurrencyAddressM(
                                        instrument = '', 
                                        address = '', )
                                    ], )
                            ], 
                        linked_entity = [
                            onboarding_buddy_client.models.email_entity_record_m.EmailEntityRecordM(
                                full_name = '', 
                                program = '', 
                                linked_to = '', 
                                secondary_sanctions_risk = '', )
                            ], )
                    ]
            )
        else:
            return EmailSanctionRecordM(
        )
        """

    def testEmailSanctionRecordM(self):
        """Test EmailSanctionRecordM"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
