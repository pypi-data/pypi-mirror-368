# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import heptapod_paas_runner_pb2 as heptapod__paas__runner__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in heptapod_paas_runner_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PAASResourceRunnerStub(object):
    """/ Service to launch and manage jobs within a PAAS resource
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LaunchJob = channel.unary_unary(
                '/heptapod.runner.PAASResourceRunner/LaunchJob',
                request_serializer=heptapod__paas__runner__pb2.LaunchJobRequest.SerializeToString,
                response_deserializer=heptapod__paas__runner__pb2.LaunchJobResponse.FromString,
                _registered_method=True)
        self.JobStatus = channel.unary_unary(
                '/heptapod.runner.PAASResourceRunner/JobStatus',
                request_serializer=heptapod__paas__runner__pb2.Job.SerializeToString,
                response_deserializer=heptapod__paas__runner__pb2.PAASResourceJobStatus.FromString,
                _registered_method=True)
        self.ForgetJob = channel.unary_unary(
                '/heptapod.runner.PAASResourceRunner/ForgetJob',
                request_serializer=heptapod__paas__runner__pb2.Job.SerializeToString,
                response_deserializer=heptapod__paas__runner__pb2.ForgetJobResponse.FromString,
                _registered_method=True)
        self.CanTakeJob = channel.unary_unary(
                '/heptapod.runner.PAASResourceRunner/CanTakeJob',
                request_serializer=heptapod__paas__runner__pb2.CanTakeJobRequest.SerializeToString,
                response_deserializer=heptapod__paas__runner__pb2.CanTakeJobResponse.FromString,
                _registered_method=True)


class PAASResourceRunnerServicer(object):
    """/ Service to launch and manage jobs within a PAAS resource
    """

    def LaunchJob(self, request, context):
        """/ Launch a job using the local resource (Docker daemon)
        /
        / The job is considered immediately to be running
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JobStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ForgetJob(self, request, context):
        """/ Forget a job that is finished
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CanTakeJob(self, request, context):
        """/ Should be equivalent to ready, no job is running plus any needed
        / verifications (e.g., docker daemon is available)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PAASResourceRunnerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LaunchJob': grpc.unary_unary_rpc_method_handler(
                    servicer.LaunchJob,
                    request_deserializer=heptapod__paas__runner__pb2.LaunchJobRequest.FromString,
                    response_serializer=heptapod__paas__runner__pb2.LaunchJobResponse.SerializeToString,
            ),
            'JobStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.JobStatus,
                    request_deserializer=heptapod__paas__runner__pb2.Job.FromString,
                    response_serializer=heptapod__paas__runner__pb2.PAASResourceJobStatus.SerializeToString,
            ),
            'ForgetJob': grpc.unary_unary_rpc_method_handler(
                    servicer.ForgetJob,
                    request_deserializer=heptapod__paas__runner__pb2.Job.FromString,
                    response_serializer=heptapod__paas__runner__pb2.ForgetJobResponse.SerializeToString,
            ),
            'CanTakeJob': grpc.unary_unary_rpc_method_handler(
                    servicer.CanTakeJob,
                    request_deserializer=heptapod__paas__runner__pb2.CanTakeJobRequest.FromString,
                    response_serializer=heptapod__paas__runner__pb2.CanTakeJobResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'heptapod.runner.PAASResourceRunner', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('heptapod.runner.PAASResourceRunner', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PAASResourceRunner(object):
    """/ Service to launch and manage jobs within a PAAS resource
    """

    @staticmethod
    def LaunchJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/heptapod.runner.PAASResourceRunner/LaunchJob',
            heptapod__paas__runner__pb2.LaunchJobRequest.SerializeToString,
            heptapod__paas__runner__pb2.LaunchJobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def JobStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/heptapod.runner.PAASResourceRunner/JobStatus',
            heptapod__paas__runner__pb2.Job.SerializeToString,
            heptapod__paas__runner__pb2.PAASResourceJobStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ForgetJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/heptapod.runner.PAASResourceRunner/ForgetJob',
            heptapod__paas__runner__pb2.Job.SerializeToString,
            heptapod__paas__runner__pb2.ForgetJobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CanTakeJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/heptapod.runner.PAASResourceRunner/CanTakeJob',
            heptapod__paas__runner__pb2.CanTakeJobRequest.SerializeToString,
            heptapod__paas__runner__pb2.CanTakeJobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
