# SPDX-License-Identifier: BSD-2-Clause
# Copyright 2020 Arm Ltd.
%YAML 1.2
---
$id: http://devicetree.org/schemas/reg.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: Address related Common Properties

maintainers:
  - Rob Herring <robh@kernel.org>

select: true

properties:
  '#address-cells':
    maximum: 3

  '#size-cells':
    maximum: 2

  dma-ranges:
    oneOf:
      - $ref: types.yaml#/definitions/flag
      - $ref: types.yaml#/definitions/uint32-matrix

  ranges:
    oneOf:
      - $ref: types.yaml#/definitions/flag
      - $ref: types.yaml#/definitions/uint32-matrix

  reg:
    $ref: types.yaml#/definitions/address

  reg-io-width:
    $ref: types.yaml#/definitions/uint32
    minimum: 1
    maximum: 0xf
    description:
      Typically, a single set bit indicating the access size, but some uses treat
      this as a bit mask of allowed sizes.

  reg-shift:
    $ref: types.yaml#/definitions/uint32
    enum: [ 0, 1, 2 ]

  nonposted-mmio:
    $ref: types.yaml#/definitions/flag
    description:
      If present, specifies that the device represented by this node (and
      its children, if any) should use non-posted memory accesses for
      accessing the memory described by /reg and any other inferred MMIO
      regions.

  big-endian:
    $ref: types.yaml#/definitions/flag
    description: >
      Force big endian register accesses unconditionally. Use this if you know
      the peripheral always needs to be accessed in big endian (BE) mode.

      If a binding supports these properties, then the binding should also
      specify the default behavior if none of these properties are present.
      In such cases, little-endian is the preferred default, but it is not
      a requirement.  Some implementations assume that little-endian is
      the default, because most existing (PCI-based) drivers implicitly
      default to LE for their MMIO accesses.

  little-endian:
    $ref: types.yaml#/definitions/flag
    description:
      Force little endian register accesses unconditionally. Use this if you
      know the peripheral always needs to be accessed in little endian (LE)
      mode.

  native-endian:
    $ref: types.yaml#/definitions/flag
    description:
      Always use register accesses matched to the endianness of the CPU. In this
      case no byte swaps will ever be performed.  Use this if the hardware
      "self-adjusts" register endianness based on the CPU's configured
      endianness.

additionalProperties: true

dependencies:
  "#size-cells": [ "#address-cells" ]
  big-endian: [ reg ]
  little-endian: [ reg ]
  native-endian: [ reg ]

allOf:
  - if:
      properties:
        '#address-cells':
          const: 2
        '#size-cells':
          const: 2
      required:
        - '#address-cells'
        - '#size-cells'
    then:
      patternProperties:
        '@':
          properties:
            reg:
              items:
                minItems: 4
                maxItems: 4

  - if:
      properties:
        '#address-cells':
          const: 1
        '#size-cells':
          const: 1
      required:
        - '#address-cells'
        - '#size-cells'
    then:
      patternProperties:
        '@':
          properties:
            reg:
              items:
                minItems: 2
                maxItems: 2

  - if:
      properties:
        '#address-cells':
          const: 2
        '#size-cells':
          const: 1
      required:
        - '#address-cells'
        - '#size-cells'
    then:
      patternProperties:
        '@':
          properties:
            reg:
              items:
                minItems: 3
                maxItems: 3

...
