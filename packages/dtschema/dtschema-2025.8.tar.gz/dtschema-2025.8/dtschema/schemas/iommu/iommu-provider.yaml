# SPDX-License-Identifier: GPL-2.0-only OR BSD-2-Clause
# Copyright (c) 2014 NVIDIA CORPORATION
# Copyright 2025 Arm Ltd.
%YAML 1.2
---
$id: http://devicetree.org/schemas/iommu/iommu-provider.yaml#
$schema: http://devicetree.org/meta-schemas/base.yaml#

title: IOMMU Provider Common Properties

description: >
  An IOMMU can provide the following services:

    * Remap address space to allow devices to access physical memory ranges that
      they otherwise wouldn't be capable of accessing.

      Example: 32-bit DMA to 64-bit physical addresses

    * Implement scatter-gather at page level granularity so that the device does
      not have to.

    * Provide system protection against "rogue" DMA by forcing all accesses to go
      through the IOMMU and faulting when encountering accesses to unmapped
      address regions.

    * Provide address space isolation between multiple contexts.

      Example: Virtualization

  Device nodes compatible with this binding represent hardware with some of the
  above capabilities.

  IOMMUs can be single-master or multiple-master. Single-master IOMMU devices
  typically have a fixed association to the master device, whereas multiple-
  master IOMMU devices can translate accesses from more than one master.

  The device tree node of the IOMMU device's parent bus must contain a valid
  "dma-ranges" property that describes how the physical address space of the
  IOMMU maps to memory. An empty "dma-ranges" property means that there is a
  1:1 mapping from IOMMU to memory.

maintainers:
  - Rob Herring <robh@kernel.org>

# always select the core schema
select: true

properties:
  '#iommu-cells':
    description: >
      The number of cells in an IOMMU specifier needed to encode an address.

      The meaning of the IOMMU specifier is defined by the device tree binding
      of the specific IOMMU. Below are a few examples of typical use-cases:

        - #iommu-cells = <0>: Single master IOMMU devices are not configurable and
          therefore no additional information needs to be encoded in the specifier.
          This may also apply to multiple master IOMMU devices that do not allow the
          association of masters to be configured. Note that an IOMMU can by design
          be multi-master yet only expose a single master in a given configuration.
          In such cases the number of cells will usually be 1 as in the next case.

        - #iommu-cells = <1>: Multiple master IOMMU devices may need to be configured
          in order to enable translation for a given master. In such cases the single
          address cell corresponds to the master device's ID. In some cases more than
          one cell can be required to represent a single master ID.

        - #iommu-cells = <4>: Some IOMMU devices allow the DMA window for masters to
          be configured. The first cell of the address in this may contain the master
          device's ID for example, while the second cell could contain the start of
          the DMA window for the given device. The length of the DMA window is given
          by the third and fourth cells.

      Note that these are merely examples and real-world use-cases may use different
      definitions to represent their individual needs. Always refer to the specific
      IOMMU binding for the exact meaning of the cells that make up the specifier.

additionalProperties: true

examples:
  - |
    // Single-master IOMMU
    iommu1: iommu {
        #iommu-cells = <0>;
    };

    master {
        iommus = <&iommu1>;
    };

  - |
    // Multiple-master IOMMU
    iommu2: iommu {
        /* the specifier represents the ID of the master */
        #iommu-cells = <1>;
    };

    master-1 {
        /* device has master ID 42 in the IOMMU */
        iommus = <&iommu2 42>;
    };

    master-2 {
        /* device has master IDs 23 and 24 in the IOMMU */
        iommus = <&iommu2 23>, <&iommu2 24>;
    };

  - |
    // Multiple-master IOMMU with configurable DMA window
    iommu3: iommu {
        /*
          * One cell for the master ID and one cell for the
          * address of the DMA window. The length of the DMA
          * window is encoded in two cells.
          *
          * The DMA window is the range addressable by the
          * master (i.e. the I/O virtual address space).
          */
        #iommu-cells = <4>;
    };

    master {
        /* master ID 42, 4 GiB DMA window starting at 0 */
        iommus = <&iommu3  42  0  0x1 0x0>;
    };
...
