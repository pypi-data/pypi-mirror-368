# SPDX-License-Identifier: BSD-2-Clause
# Copyright 2019 Arm Ltd.
%YAML 1.2
---
$id: http://devicetree.org/meta-schemas/keywords.yaml#
$schema: https://json-schema.org/draft/2019-09/schema

description:
  Keywords must be a subset of known json-schema keywords

definitions:
  json-schema-prop-names:
    enum:
      - $ref
      - additionalItems
      - additionalProperties
      - allOf
      - anyOf
      - const
      - contains
      - default
      - dependencies
      - dependentRequired
      - dependentSchemas
      - deprecated
      - description
      - else
      - enum
      - exclusiveMaximum
      - exclusiveMinimum
      - items
      - if
      - minItems
      - minimum
      - maxItems
      - maximum
      - multipleOf
      - not
      - oneOf
      - pattern
      - patternProperties
      - properties
      - required
      - then
      - typeSize
      - unevaluatedProperties
      - uniqueItems

  overlapping-json-schema-prop-names:
    # 'type' is also a DT property name
    const: type

  sub-schemas:
    allOf:
      - $ref: "#"
      - $ref: items.yaml#
      - $ref: types.yaml#
    propertyNames:
      # The subset of keywords allowed for sub-schema
      anyOf:
        - $ref: "#/definitions/json-schema-prop-names"
        - $ref: "#/definitions/overlapping-json-schema-prop-names"

  scalar-prop-list:
    propertyNames:
      description:
        Scalar and array keywords cannot be mixed
      not:
        enum:
          - const
          - enum
          - exclusiveMaximum
          - exclusiveMinimum
          - minimum
          - maximum
          - multipleOf
          - pattern

# Array keywords should not be mixed with scalar keywords
dependentSchemas:
  contains:
    $ref: "#/definitions/scalar-prop-list"
  items:
    $ref: "#/definitions/scalar-prop-list"
  maxItems:
    $ref: "#/definitions/scalar-prop-list"
  minItems:
    $ref: "#/definitions/scalar-prop-list"
  additionalProperties:
    description: "'additionalProperties' depends on 'properties' or 'patternProperties'"
    if:
      properties:
        additionalProperties:
            type: boolean
    then:
      anyOf:
        - required: [ type ]
        - required: [ properties ]
        - required: [ patternProperties ]

dependentRequired:
  # Ensure only valid combinations of if/then/else are present
  if:
    - then
  then:
    - if
  else:
    - if
    - then

properties:
  $defs:
    propertyNames:
      description: A json-schema keyword was found in $defs key.
      not:
        $ref: "#/definitions/json-schema-prop-names"
    additionalProperties:
      description: $defs entries must contain schemas
      type: object
      $ref: "#/definitions/sub-schemas"
  $ref:
    description:
      References must start with '/schemas' or be relative to current
      schema's path.
    pattern: '^(/schemas/|\.\./|#(/|$)|[a-zA-Z0-9]+)'
    not:
      pattern: '^https?://'
  additionalItems:
    oneOf:
      - type: object
        allOf:
          - $ref: "#/definitions/sub-schemas"
      - type: boolean
  additionalProperties:
    oneOf:
      - type: object
        allOf:
          - $ref: "#/definitions/sub-schemas"
      - type: boolean
  allOf:
    uniqueItems: true
    items:
      $ref: "#/definitions/sub-schemas"
  anyOf:
    uniqueItems: true
    items:
      $ref: "#/definitions/sub-schemas"
  contains:
    $ref: "#/definitions/sub-schemas"
  dependencies:
    additionalProperties:
      $ref: "#/definitions/sub-schemas"
  dependentRequired:
    uniqueItems: true
  dependentSchemas:
    additionalProperties:
      $ref: "#/definitions/sub-schemas"
  else:
    $ref: "#/definitions/sub-schemas"
  const:
    type: [ integer, string ]
  enum:
    description: '"enum" must be an array of either integers or strings'
    type: array
    uniqueItems: true
    oneOf:
      - items:
          type: integer
      - items:
          type: string
  if:
    $ref: "#/definitions/sub-schemas"
  items:
    if:
      type: object
    then:
      $ref: "#/definitions/sub-schemas"
    else:
      type: array
      items:
        $ref: "#/definitions/sub-schemas"
  maxItems:
    minimum: 1
  minItems:
    description: An array property has at least 1 item or is not present
    minimum: 1
  not:
    $ref: "#/definitions/sub-schemas"
  oneOf:
    allOf:
      - items:
          $ref: "#/definitions/sub-schemas"
      - description: Use 'enum' rather than 'oneOf' + 'const' entries
        not:
          items:
            propertyNames:
              const: const
            required:
              - const
  patternProperties:
    propertyNames:
      allOf:
        - description: Fixed strings belong in 'properties', not 'patternProperties'
          pattern: '[\^$()*@]'
          not:
            pattern:  '^\^[a-zA-Z0-9,\-._#@]+\$$'
        - description: A json-schema keyword was found instead of a DT property name.
          not:
            $ref: "#/definitions/json-schema-prop-names"
    additionalProperties:
      $ref: "#/definitions/sub-schemas"
  properties:
    propertyNames:
      allOf:
        - description: Expected a valid DT property name
          pattern:  "^[#$a-zA-Z][a-zA-Z0-9#,+\\-._@]{0,63}$"
        - description: A json-schema keyword was found instead of a DT property name.
          not:
            $ref: "#/definitions/json-schema-prop-names"
    additionalProperties:
      type: [ object, boolean ]
      $ref: "#/definitions/sub-schemas"
  required:
    description: "'required' must be valid DT property or node names"
    type: array
    uniqueItems: true
    items:
      pattern: '^([a-zA-Z#][a-zA-Z0-9#,+\-._@]{0,63}|\$nodename)$'
  select:
    $ref: "#/definitions/sub-schemas"
  then:
    $ref: "#/definitions/sub-schemas"
  unevaluatedProperties:
    if:
      type: object
    then:
      $ref: "#/definitions/sub-schemas"
    else:
      type: boolean
  uniqueItems:
    type: boolean

allOf:
  - description: Scalar properties should not have array keywords
    if:
      properties:
        $ref:
          pattern: '(int[1-8]+|phandle|flag)$'
      required:
        - $ref
    then:
      properties:
        maxItems: false
        minItems: false
        items: false
