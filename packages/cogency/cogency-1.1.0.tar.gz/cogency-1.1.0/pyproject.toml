[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "cogency"
version = "1.1.0"
description = "A reasoning engine for adaptive AI agents"
authors = ["Tyson Chan <tyson.chan@proton.me>"]
readme = "README.md"
license = "Apache-2.0"
homepage = "https://github.com/iteebz/cogency"
repository = "https://github.com/iteebz/cogency"
keywords = ["ai", "agents", "reasoning", "react", "memory", "tools", "tracing", "cognition", "streaming"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
packages = [{ include = "cogency", from = "src" }]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"

# Core dependencies
pydantic = ">=2.0"
typing-extensions = ">=4.0"
python-dotenv = ">=1.0.0"
resilient-result = "0.3.1"
trafilatura = ">=2.0.0,<3.0.0"
aiohttp = ">=3.12.15,<4.0.0"
ddgs = ">=3.8.0"
psutil = ">=5.9.0"
tiktoken = ">=0.8.0,<1.0.0"

# Default LLM provider (zero ceremony)
openai = ">=1.59.0,<2.0.0"

# SQLite persistence
aiosqlite = ">=0.20.0,<1.0.0"

# Optional providers

# LLM providers
google-genai = { version = ">=1.26.0,<2.0.0", optional = true }
anthropic = { version = ">=0.42.0,<1.0.0", optional = true }
mistralai = { version = ">=1.3.0,<2.0.0", optional = true }

# Embedding providers
nomic = { version = ">=3.5.3,<4.0.0", optional = true }
sentence-transformers = { version = ">=5.0.0,<6.0.0", optional = true }

# Persistence providers
supabase = { version = ">=2.0.0,<3.0.0", optional = true }


[tool.poetry.extras]
# LLM providers (openai included in core)
gemini = ["google-genai"]
anthropic = ["anthropic"]
mistral = ["mistralai"]

# Embedding providers
nomic = ["nomic"]
sentence = ["sentence-transformers"]

# Persistence providers
supabase = ["supabase"]

# Everything
all = ["google-genai", "anthropic", "mistralai", "nomic", "sentence-transformers", "supabase"]

[tool.poetry.group.dev.dependencies]
ruff = "^0.8.0"
pytest = "^8.4.1"
pytest-asyncio = "^0.21.0"
pytest-timeout = "^2.4.0"
jsonschema = "^4.19.0"
pytest-xdist = "^3.3.1"  # For parallel test execution



[tool.ruff]
line-length = 100
target-version = "py39"
exclude = [
    "evonotes",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear (common bugs)
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
]
ignore = [
    "W291",   # Trailing whitespace (handled by Black)
    "W293",   # Blank line contains whitespace (handled by Black)
    "UP006",  # non-pep585-annotation (allow typing.List vs list for compatibility)
    "UP035",  # deprecated-import (allow typing imports for compatibility)
    "SIM108", # if-else-block-instead-of-if-exp (ternary not always clearer)
    "SIM117", # combine-multiple-isinstance (sometimes separate is clearer)
    "E501",   # line-too-long (pragmatic choice for readable code)
]

# Allow specific patterns that are common in this codebase

[tool.ruff.lint.per-file-ignores]
"**/llm/__init__.py" = ["F401"]  # Allow conditional imports for optional dependencies
"**/embed/__init__.py" = ["F401"]  # Allow conditional imports for optional dependencies
"tests/**" = ["F401", "F811", "B017"]  # Allow test-specific patterns
"website/**" = ["B007"]  # Allow unused loop variables in documentation scripts

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
pythonpath = ["src"]
filterwarnings = [
    "ignore::DeprecationWarning:starlette.*",
    "ignore::PendingDeprecationWarning:starlette.*"
]
# Performance optimizations
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--disable-warnings",
    "-ra"  # Show short test summary for all except passed
]
# Test markers for parallel execution
markers = [
    "unit: Unit tests (can run in parallel)",
    "integration: Integration tests (may need isolation)", 
    "contract: API contract validation tests",
    "schema: Schema validation tests",
    "slow: Slow tests that should run last"
]