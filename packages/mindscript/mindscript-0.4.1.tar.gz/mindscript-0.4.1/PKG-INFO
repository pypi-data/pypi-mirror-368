Metadata-Version: 2.4
Name: mindscript
Version: 0.4.1
Summary: An experimental programming language combining formal and informal computation.
Author-email: Daios AI <help@daios.ai>
License: MIT License
        
        Copyright (c) 2024 DAIOS Technologies Limited
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://daios.ai
Project-URL: Bug Reports, https://github.com/DAIOS-AI/mindscript/issues
Project-URL: Source, https://github.com/DAIOS-AI/mindscript/
Keywords: programming language,unstructed data
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pydantic>=2.7.1
Requires-Dist: requests>=2.31
Dynamic: license-file


<img src="https://raw.githubusercontent.com/DAIOS-AI/mindscript/75e878fe319ada80fef43673b6b0fa73b334e18d/media/mindscript-logo-lambda-psi.svg" width="500px">

An experimental programming language combining formal and informal computation.

&copy; 2024, 2025 [Daios Technologies Limited](https://www.daios.ai)

![preview](https://mindscript.daios.ai/assets/mindscript-demo.png)


**Read the Docs:** [https://mindscript.daios.ai](https://mindscript.daios.ai) <br>
**Try in Browser:** [https://www.daios.ai/playground](https://www.daios.ai/playground) <br>
**Source code:** [https://github.com/DAIOS-AI/mindscript](https://github.com/DAIOS-AI/mindscript)

## Description

MindScript is a programming language that seamlessly integrates
both formal and informal computation.

MindScript lets programmers code directly when the method for 
accomplishing a task is clear. Conversely, when they know what 
they want but not how to achieve it, developers can simply 
describe their intent. Indeed, for certain functions, such as 
analyzing the sentiment of a sentence, there might not exist 
a concrete implementation at all. The syntax is designed to 
make such specifications straightforward.

A distinctive feature of MindScript is its dual support for both 
formal and informal types. The formal types are as in other programming
languages, which allow expressing hard constraints. The informal types
(unique to MindScript) on the other hand offer flexible
inductive constraints, similar to how our observations guide our own thought 
processes.

In practice, formal computation within MindScript is realized through 
a Turing-complete language (&lambda;), while informal computations are 
handled by an oracle, realized through a language model (&Psi;) which 
interprets and processes less structured inputs (hence &lambda;<sup>&Psi;</sup>). 


## Features

- Implements an [oracle machine](https://en.wikipedia.org/wiki/Oracle_machine).
- Minimal C-like/JavaScript/Lua syntax on top of JSON data types.
- Everything is an expression.
- The formal type system is:
    - dynamic (runtime-checked),
    - structural (based on the properties, not on names or object hierarchies),
    - and strong (type rules are strictly enforced).

- Code comments are informal type annotations.
- (Current version) interpreter implemented in Python.


## Applications

- Applications that use large language models
- Processing of unstructured information
- Language model agents
- Semantic web
- and much more.

## Requirements

- Python 3.9 or higher
- an LLM backend (see [installation](installation.md))



## Disclaimer

This is a strictly experimental programming language. The Python implementation does not
aim to be efficient and most likely contains bugs.

