"""{{ EnumName }} enum for {{ module_name }} module.

Generated at: {{ generated_at }}
Generator version: {{ generator_version }}
"""

from enum import Enum
from typing import Any


class {{ EnumName }}(Enum):
    """{{ EnumName }} enumeration.
    
    This enum represents {{ enum_description | default('domain values') }} in the {{ module_name }} domain.
    Following Clean Architecture principles, this enum contains only business logic
    and has no dependencies on external frameworks or infrastructure.
    """
    
    # Define your enum values here
    # Examples:
    # VALUE_ONE = "value_one"
    # VALUE_TWO = "value_two"
    # VALUE_THREE = 3
    
    def __str__(self) -> str:
        """Return string representation of the enum value."""
        return str(self.value)
    
    @classmethod
    def from_string(cls, value: str) -> "{{ EnumName }}":
        """Create enum instance from string value.
        
        Args:
            value: String representation of the enum value
            
        Returns:
            Enum instance
            
        Raises:
            ValueError: If value is not a valid enum value
        """
        for enum_item in cls:
            if str(enum_item.value).lower() == value.lower():
                return enum_item
        raise ValueError(f"'{value}' is not a valid {cls.__name__}")