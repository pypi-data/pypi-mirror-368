"""{{ EnumName }} enum for {{ module_name }} module.

Generated at: {{ generated_at }}
Generator version: {{ generator_version }}
"""

from enum import Enum
from typing import Any, Dict, List, Union


class {{ EnumName }}(Enum):
    """{{ EnumName }} enumeration with API integration support.
    
    This enum represents {{ enum_description | default('domain values') }} in the {{ module_name }} domain.
    Following Clean Architecture principles, this enum contains only business logic
    and has no dependencies on external frameworks or infrastructure.
    
    Features:
    - FastAPI/Pydantic compatible serialization
    - OpenAPI schema generation support
    - Query parameter validation
    - API response formatting
    """
    
    # Define your enum values here
    # Examples:
    # VALUE_ONE = "value_one"
    # VALUE_TWO = "value_two"
    # VALUE_THREE = 3
    
    def __str__(self) -> str:
        """Return string representation of the enum value."""
        return str(self.value)
    
    def __repr__(self) -> str:
        """Return detailed representation for debugging."""
        return f"{self.__class__.__name__}.{self.name}"
    
    @classmethod
    def from_string(cls, value: str) -> "{{ EnumName }}":
        """Create enum instance from string value.
        
        Args:
            value: String representation of the enum value
            
        Returns:
            Enum instance
            
        Raises:
            ValueError: If value is not a valid enum value
        """
        for enum_item in cls:
            if str(enum_item.value).lower() == value.lower():
                return enum_item
        raise ValueError(f"'{value}' is not a valid {cls.__name__}")
    
    @classmethod
    def all_values(cls) -> List[Any]:
        """Get all enum values as a list.
        
        Returns:
            List of all enum values
        """
        return [item.value for item in cls]
    
    @classmethod
    def all_names(cls) -> List[str]:
        """Get all enum names as a list.
        
        Returns:
            List of all enum names
        """
        return [item.name for item in cls]
    
    def to_dict(self) -> Dict[str, Union[str, Any]]:
        """Convert enum to dictionary for API serialization.
        
        Returns:
            Dictionary representation with name and value
        """
        return {
            "name": self.name,
            "value": self.value,
            "display_name": self.name.replace("_", " ").title()
        }
    
    @classmethod
    def choices(cls) -> List[Dict[str, Union[str, Any]]]:
        """Get all enum choices for API responses.
        
        Returns:
            List of dictionaries with enum information
        """
        return [item.to_dict() for item in cls]
    
    @classmethod
    def is_valid(cls, value: Any) -> bool:
        """Check if a value is valid for this enum.
        
        Args:
            value: Value to validate
            
        Returns:
            True if value is valid, False otherwise
        """
        try:
            if isinstance(value, str):
                cls.from_string(value)
            else:
                cls(value)
            return True
        except (ValueError, TypeError):
            return False
    
    @classmethod
    def __modify_schema__(cls, field_schema: Dict[str, Any]) -> None:
        """Modify Pydantic schema for better OpenAPI documentation.
        
        This method is called by Pydantic to customize the JSON schema
        for this enum when used in API models.
        """
        field_schema.update({
            "enum": cls.all_values(),
            "type": "string" if isinstance(next(iter(cls)).value, str) else "integer",
            "description": f"Available {cls.__name__} values",
            "examples": cls.all_values()[:3] if len(cls.all_values()) > 3 else cls.all_values()
        })