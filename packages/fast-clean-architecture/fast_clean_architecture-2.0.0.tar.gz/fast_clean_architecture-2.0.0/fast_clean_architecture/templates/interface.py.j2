"""{{ component_name }} domain interface for {{ module_name }} module.

Generated at: {{ generated_at }}
Generator version: {{ generator_version }}
"""
from abc import ABC, abstractmethod
from typing import Any, Dict, List, Optional, Protocol, TypeVar, Generic, runtime_checkable
from uuid import UUID

# Type variable for generic interfaces
T = TypeVar('T')
ID = TypeVar('ID')


@runtime_checkable
class {{ ComponentName }}(Protocol):
    """{{ ComponentName }} domain interface.
    
    This interface defines {{ entity_description }} for the {{ module_name }} domain.
    Domain interfaces represent contracts that must be implemented by
    infrastructure layer components, following the Dependency Inversion Principle.
    
    Following Clean Architecture principles, this interface contains only
    domain-relevant method signatures and has no dependencies on external
    frameworks or infrastructure.
    """
    
    # Add your interface methods here
    # Example repository interface methods:
    
    # @abstractmethod
    # async def save(self, entity: T) -> T:
    #     """Save an entity.
    #     
    #     Args:
    #         entity: The entity to save
    #         
    #     Returns:
    #         The saved entity
    #         
    #     Raises:
    #         DomainException: If save operation fails
    #     """
    #     ...
    
    # @abstractmethod
    # async def find_by_id(self, entity_id: ID) -> Optional[T]:
    #     """Find an entity by its identifier.
    #     
    #     Args:
    #         entity_id: The entity identifier
    #         
    #     Returns:
    #         The entity if found, None otherwise
    #     """
    #     ...
    
    # @abstractmethod
    # async def find_all(self) -> List[T]:
    #     """Find all entities.
    #     
    #     Returns:
    #         List of all entities
    #     """
    #     ...
    
    # @abstractmethod
    # async def delete(self, entity_id: ID) -> bool:
    #     """Delete an entity by its identifier.
    #     
    #     Args:
    #         entity_id: The entity identifier
    #         
    #     Returns:
    #         True if entity was deleted, False if not found
    #         
    #     Raises:
    #         DomainException: If delete operation fails
    #     """
    #     ...
    
    # @abstractmethod
    # async def exists(self, entity_id: ID) -> bool:
    #     """Check if an entity exists.
    #     
    #     Args:
    #         entity_id: The entity identifier
    #         
    #     Returns:
    #         True if entity exists, False otherwise
    #     """
    #     ...
    
    pass


# Example generic repository interface
# Uncomment and customize as needed:

# class Repository(Protocol, Generic[T, ID]):
#     """Generic repository interface for domain entities."""
#     
#     @abstractmethod
#     async def save(self, entity: T) -> T:
#         """Save an entity."""
#         ...
#     
#     @abstractmethod
#     async def find_by_id(self, entity_id: ID) -> Optional[T]:
#         """Find an entity by its identifier."""
#         ...
#     
#     @abstractmethod
#     async def find_all(self) -> List[T]:
#         """Find all entities."""
#         ...
#     
#     @abstractmethod
#     async def delete(self, entity_id: ID) -> bool:
#         """Delete an entity by its identifier."""
#         ...
#     
#     @abstractmethod
#     async def exists(self, entity_id: ID) -> bool:
#         """Check if an entity exists."""
#         ...


# Example domain service interface
# Uncomment and customize as needed:

# class {{ InterfaceName }}Service(Protocol):
#     """{{ InterfaceName }} domain service interface."""
#     
#     @abstractmethod
#     async def process_business_operation(self, data: Dict[str, Any]) -> Any:
#         """Process a business operation.
#         
#         Args:
#             data: Operation data
#             
#         Returns:
#             Operation result
#             
#         Raises:
#             DomainException: If operation fails
#         """
#         ...