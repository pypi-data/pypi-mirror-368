[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ynab-unlinked"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.13"
license = "MIT"
keywords = []
authors = [{ name = "Juanpe Araque", email = "juanpe@committhatline.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Developers",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  # This is mostly because the config is handled. Once updated
  # should be usable in any OS.
  # https://github.com/AAraKKe/ynab-unlinked/issues/1
  "Operating System :: MacOS",
  "Operating System :: POSIX :: Linux",
]
dependencies = [
  "ynab",
  "typer",
  "rapidfuzz",
  "unidecode",
  "html-text",
  "pdfplumber",
  "pydantic >= 2.0.0",
  "platformdirs==4.3.8",
  "pyexcel==0.7.3",
  "pyexcel-xls==0.7.1",
  "pyexcel-xlsx==0.6.1",
  "textual==5.0.0"
]

[project.scripts]
yul = "ynab_unlinked.main:main"

[project.urls]
Documentation = "https://github.com/Juanpe Araque/ynab-unlinked#readme"
Issues = "https://github.com/Juanpe Araque/ynab-unlinked/issues"
Source = "https://github.com/Juanpe Araque/ynab-unlinked"

[tool.hatch.version]
path = "src/ynab_unlinked/__about__.py"

# Set uv as installer
[tool.hatch.envs.default]
installer = "uv"

# ------ Development Environment ------
[tool.hatch.envs.dev]
installer = "uv"
extra-dependencies = [
  "ruff==0.11.10",
  "pyright~=1.1",
  "pytest ~= 8.0",
  "pytest-cov~=6.0",
  "pytest-mock~=3.0",
  "factory_boy~=3.0",
  "freezegun~=1.5.0",
]

[tool.hatch.envs.dev.scripts]
format-check = "ruff format --check"
lint = "ruff check"
type-check = "pyright src"
check = ["- lint", "- format-check", "- type-check"]
format = "ruff format"
lint-fix = "ruff check --fix --unsafe-fixes"
fix = ["format", "lint-fix"]
cov = ["pytest --cov=src --cov-report term-missing:skip-covered tests {args:}"]


[tool.pyright]
exclude = [
  "**/.vscode/**",
  "**/__pycache__/**",
  "**/.egg-info/**",
  "**/.git/**",
  "**/.mypy_cache/**",
  "**/.pytest_cache/**",
  "**/.hatch/**",
  "**/*.egg-info/**",
  "dist",
]
ignore = [
  "**/.vscode/**",
  "**/__pycache__/**",
  "**/.egg-info/**",
  "**/.git/**",
  "**/.mypy_cache/**",
  "**/.pytest_cache/**",
  "**/.hatch/**",
  "**/*.egg-info/**",
  "dist",
]

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = [
  # pycodestyle
  "E",
  # Pyflakes
  "F",
  # pyupgrade
  "UP",
  # flake8-bugbear
  "B",
  # flake8-simplify
  "SIM",
  # isort
  "I",
]

[tool.ruff.lint.isort]
known-first-party = ["ynab_unlinked", "tests"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 120
max-line-length = 120

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.pytest.ini_options]
addopts = "-ra"
testpaths = "tests"
markers = ["version: used to identify the Config version used in the test"]

[tool.coverage.run]
source_pkgs = ["ynab_unlinked", "tests"]
branch = true
parallel = true
omit = ["src/ynab_unlinked/__about__.py"]

[tool.coverage.report]
exclude_also = [
  "no cov",
  "if __name__ == .__main__.:",
  # Exclude protocol classes since they have no logic
  'class .*\bProtocol\):',
  # Exclude assert_nevers since we will never hit them and should be flagged by type checkers
  '^ +assert_never\(.*?\)$',
  # Case statements should be exhaustive
  '^ +case .*? as unreachable:$',
  # Ignore @overload functions
  '^ +@overload$',
  # Ignore type checking imports
  'if TYPE_CHECKING:',
  # This breaks on import, cannot even test so there is no reason to cover
  "__init_subclass__",
  # No reason to cover abstract methods
  "@abstractmethod",
]

[tool.coverage.paths]
ynab_unlinked = ["src/ynab_unlinked"]
tests = ["tests"]

# ------ Environment to run towncrier ------
[tool.hatch.envs.tc]
installer = "uv"
extra-dependencies = ["towncrier == 24.8.0"]

[tool.hatch.envs.tc.scripts]
check = "towncrier check"
show = "towncrier build --draft"
build = "towncrier build {args:+}"
removed = "towncrier create --edit {args:+}.removed.md"
deprecated = "towncrier create --edit {args:+}.deprecated.md"
added = "towncrier create --edit {args:+}.added.md"
improved = "towncrier create --edit {args:+}.improved.md"
bugfix = "towncrier create --edit {args:+}.bugfix.md"
bumped = "towncrier create --edit {args:+}.bumped.md"
doc = "towncrier create --edit {args:+}.doc.md"
contrib = "towncrier create --edit {args:+}.contrib.md"
misc = "towncrier create --edit {args:+}.misc.md"


[tool.towncrier]
package = "ynab_unlinked"
package_dir = "src"
underlines = ["", "", ""]
filename = "CHANGELOG.md"
directory = "changelog"
title_format = "## ynab-unlinked {version} ({project_date})"
template = "changelog/_template.jinja"

[[tool.towncrier.type]]
# When a feature is being removed. Should be messagaging
# deprecation to users in previuos versions
directory = "removed"
name = "Gone but not forgotten (RIP Features)"
showcontent = true

[[tool.towncrier.type]]
# Still not removed but added deprecation warnings
directory = "deprecated"
name = "On the Chopping Block (Use at your own risk!)"
showcontent = true

[[tool.towncrier.type]]
directory = "added"
name = "Fresh Out of the Feature Oven"
showcontent = true

[[tool.towncrier.type]]
# New behaviors in existing features.
directory = "improved"
name = "Polished Until It Shines"
showcontent = true

[[tool.towncrier.type]]
# Something we deemed an improper undesired behavior that got corrected
# in the release to match pre-agreed expectations.
directory = "bugfix"
name = "Bugs Squashed, Peace Restored"
showcontent = true

[[tool.towncrier.type]]
# Updates regarding bundling dependencies.
directory = "bumped"
name = "Under the Hood Upgrades"
showcontent = true

[[tool.towncrier.type]]
# Notable updates to the documentation structure or build process.
directory = "doc"
name = "Read All About It! (Docs Updates)"
showcontent = true

[[tool.towncrier.type]]
# Stuff that affects the contributor experience. e.g. Running tests,
# format checks, actions...
directory = "contrib"
name = "For the Builders: Dev Experience Upgrades"
showcontent = true

[[tool.towncrier.type]]
# Changes that are hard to assign to any of the above categories.
directory = "misc"
name = "Secret Sauce (Other Changes)"
showcontent = true
