# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'Clone',
    'Disk',
]

@pulumi.output_type
class Clone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vmId":
            suggest = "vm_id"
        elif key == "dataStoreId":
            suggest = "data_store_id"
        elif key == "fullClone":
            suggest = "full_clone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Clone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Clone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Clone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vm_id: int,
                 data_store_id: Optional[str] = None,
                 full_clone: Optional[bool] = None,
                 node: Optional[str] = None,
                 timeout: Optional[int] = None):
        pulumi.set(__self__, "vm_id", vm_id)
        if data_store_id is not None:
            pulumi.set(__self__, "data_store_id", data_store_id)
        if full_clone is not None:
            pulumi.set(__self__, "full_clone", full_clone)
        if node is not None:
            pulumi.set(__self__, "node", node)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> int:
        return pulumi.get(self, "vm_id")

    @property
    @pulumi.getter(name="dataStoreId")
    def data_store_id(self) -> Optional[str]:
        return pulumi.get(self, "data_store_id")

    @property
    @pulumi.getter(name="fullClone")
    def full_clone(self) -> Optional[bool]:
        return pulumi.get(self, "full_clone")

    @property
    @pulumi.getter
    def node(self) -> Optional[str]:
        return pulumi.get(self, "node")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class Disk(dict):
    def __init__(__self__, *,
                 interface: str,
                 size: int,
                 storage: str,
                 filename: Optional[str] = None):
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "storage", storage)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def storage(self) -> str:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def filename(self) -> Optional[str]:
        return pulumi.get(self, "filename")


