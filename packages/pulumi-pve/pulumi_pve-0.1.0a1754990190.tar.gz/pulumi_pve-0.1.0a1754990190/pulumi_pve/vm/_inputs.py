# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'CloneArgs',
    'CloneArgsDict',
    'DiskArgs',
    'DiskArgsDict',
]

MYPY = False

if not MYPY:
    class CloneArgsDict(TypedDict):
        vm_id: pulumi.Input[int]
        data_store_id: NotRequired[pulumi.Input[str]]
        full_clone: NotRequired[pulumi.Input[bool]]
        node: NotRequired[pulumi.Input[str]]
        timeout: NotRequired[pulumi.Input[int]]
elif False:
    CloneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloneArgs:
    def __init__(__self__, *,
                 vm_id: pulumi.Input[int],
                 data_store_id: Optional[pulumi.Input[str]] = None,
                 full_clone: Optional[pulumi.Input[bool]] = None,
                 node: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "vm_id", vm_id)
        if data_store_id is not None:
            pulumi.set(__self__, "data_store_id", data_store_id)
        if full_clone is not None:
            pulumi.set(__self__, "full_clone", full_clone)
        if node is not None:
            pulumi.set(__self__, "node", node)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "vm_id", value)

    @property
    @pulumi.getter(name="dataStoreId")
    def data_store_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_store_id")

    @data_store_id.setter
    def data_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_store_id", value)

    @property
    @pulumi.getter(name="fullClone")
    def full_clone(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "full_clone")

    @full_clone.setter
    def full_clone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "full_clone", value)

    @property
    @pulumi.getter
    def node(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node")

    @node.setter
    def node(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


if not MYPY:
    class DiskArgsDict(TypedDict):
        interface: pulumi.Input[str]
        size: pulumi.Input[int]
        storage: pulumi.Input[str]
        filename: NotRequired[pulumi.Input[str]]
elif False:
    DiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DiskArgs:
    def __init__(__self__, *,
                 interface: pulumi.Input[str],
                 size: pulumi.Input[int],
                 storage: pulumi.Input[str],
                 filename: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "storage", storage)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[int]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)


