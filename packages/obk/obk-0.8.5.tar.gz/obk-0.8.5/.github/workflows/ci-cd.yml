name: CI-CD Pipeline

on:
  push:
    branches: main
    tags:
      - 'v*.*.*'
    
permissions:
  contents: write

jobs:
  test:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Clean workspace
        run: git clean -fdx

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run tests
        run: |
          python3 -m venv .venv
          .venv/bin/pip install --upgrade pip
          .venv/bin/pip install -e .[test]
          .venv/bin/pytest -q

  build:
    needs: test
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4
      - name: Build package
        run: |
          python3 -m venv .venv
          .venv/bin/pip install build
          .venv/bin/python -m build
          
  deploy:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: python3 -m pip install --upgrade pip toml build twine
      - name: Validate pyproject.toml version matches tag
        run: |
          TAG_VERSION="${GITHUB_REF##*/}"
          PY_VERSION=$(python3 -c "import toml; print(toml.load(open('pyproject.toml'))['project']['version'])")
          if [ "v$PY_VERSION" != "$TAG_VERSION" ]; then
            echo "Version mismatch: pyproject.toml ($PY_VERSION) != tag (${TAG_VERSION#v})"
            exit 1
          fi
      - name: Build package
        run: python3 -m build
      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python3 -m twine upload dist/*
    
