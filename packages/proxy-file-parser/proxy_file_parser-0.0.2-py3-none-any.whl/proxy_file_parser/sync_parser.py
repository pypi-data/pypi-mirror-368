"""–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ üìÅ"""

import random
from typing import List, Dict, Optional, Union
from pathlib import Path

from .core import ProxyData, ProxyParser, ProxyFormatType


class ProxyFileReader:
    """–ß—Ç–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ üìÅ"""

    def __init__(self):
        self.parser = ProxyParser()
        self.encoding = 'utf-8'

    def get_proxies(self, file_path: Union[str, Path], format_name: Optional[ProxyFormatType] = None,
                    default_protocol="http") -> List[ProxyData]:
        """
        –ß–∏—Ç–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ üìñ

        Args:
            file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            format_name: —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ None –¥–ª—è –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            default_protocol: –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        proxies = []
        file_path = Path(file_path)

        if not file_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        with open(file_path, 'r', encoding=self.encoding) as f:
            for line_num, line in enumerate(f, 1):
                original_line = line.strip()
                if not original_line or original_line.startswith('#'):
                    continue

                try:
                    proxy = self.parser.parse_line(original_line, format_name, default_protocol)
                    if proxy:
                        proxies.append(proxy)
                    else:
                        # üî• –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
                        print(f"‚ùå –°—Ç—Ä–æ–∫–∞ {line_num}: '{original_line}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É '{format_name or '–∞–≤—Ç–æ'}'")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {line_num}: '{original_line}' - {e}")

        return proxies

    def get_random_proxy(self, file_path: Union[str, Path], format_name: Optional[ProxyFormatType] = None,
                         default_protocol: str = "http") -> Optional[ProxyData]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ üé≤

        Args:
            file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            format_name: —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ None –¥–ª—è –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            default_protocol: –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        Returns:
            –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ None –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π
        """
        # üìñ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
        proxies = self.get_proxies(file_path, format_name, default_protocol)

        if not proxies:
            return None

        # üé≤ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
        return random.choice(proxies)

    def get_formats(self) -> Dict[ProxyFormatType, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã üìã"""
        return {name: fmt.description for name, fmt in self.parser.FORMATS.items()}