"""–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ üìÅ‚ö°"""

import asyncio
import random
from typing import List, Optional, Union
from pathlib import Path

try:
    import aiofiles
except ImportError:
    aiofiles = None

from .core import ProxyData, ProxyParser, ProxyFormatType


class AsyncProxyFileReader:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ üìÅ‚ö°"""

    def __init__(self):
        if aiofiles is None:
            raise ImportError("aiofiles required for async operations. Install with: pip install proxy-file-parser[async]")
        self.parser = ProxyParser()
        self.encoding = 'utf-8'

    async def get_proxies(self, file_path: Union[str, Path],
                          format_name: Optional[ProxyFormatType] = None,
                          default_protocol: str = "http") -> List[ProxyData]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–∏—Ç–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ üìñ‚ö°

        Args:
            file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            format_name: —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ None –¥–ª—è –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            default_protocol: –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        proxies = []
        file_path = Path(file_path)

        if not file_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        async with aiofiles.open(file_path, 'r', encoding=self.encoding) as f:
            line_num = 0
            async for line in f:
                line_num += 1
                line = line.strip()
                if not line or line.startswith('#'):
                    continue

                try:
                    proxy = self.parser.parse_line(line, format_name, default_protocol)
                    if proxy:
                        proxies.append(proxy)
                    else:
                        # üî• –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
                        print(f"‚ùå –°—Ç—Ä–æ–∫–∞ {line_num}: '{line}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É '{format_name or '–∞–≤—Ç–æ'}'")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}: {line} - {e}")

        return proxies

    async def get_random_proxy(self, file_path: Union[str, Path],
                               format_name: Optional[ProxyFormatType] = None,
                               default_protocol: str = "http") -> Optional[ProxyData]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏ üé≤‚ö°

        Args:
            file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            format_name: —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ None –¥–ª—è –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            default_protocol: –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        proxies = await self.get_proxies(file_path, format_name, default_protocol)

        if not proxies:
            return None

        return random.choice(proxies)

    async def get_random_proxies(self, file_path: Union[str, Path],
                                 count: int,
                                 format_name: Optional[ProxyFormatType] = None,
                                 default_protocol: str = "http",
                                 unique: bool = True) -> List[ProxyData]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ üéØ‚ö°

        Args:
            file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏
            format_name: —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ None –¥–ª—è –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            default_protocol: –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            unique: –µ—Å–ª–∏ True, —Ç–æ –ø—Ä–æ–∫—Å–∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è
        """
        proxies = await self.get_proxies(file_path, format_name, default_protocol)

        if not proxies:
            return []

        if unique and count >= len(proxies):
            return proxies
        elif unique:
            return random.sample(proxies, count)
        else:
            return [random.choice(proxies) for _ in range(count)]

    async def read_multiple_files(self, file_paths: List[Union[str, Path]],
                                  format_name: Optional[ProxyFormatType] = None,
                                  default_protocol: str = "http") -> List[ProxyData]:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ üöÄ

        Args:
            file_paths: —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
            format_name: —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ None –¥–ª—è –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            default_protocol: –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        # üî• –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [
            self.get_proxies(file_path, format_name, default_protocol)
            for file_path in file_paths
        ]

        results = await asyncio.gather(*tasks, return_exceptions=True)

        # üìä –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_proxies = []
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {file_paths[i]}: {result}")
            else:
                all_proxies.extend(result)

        return all_proxies