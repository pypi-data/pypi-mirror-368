"""–û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–∫—Å–∏ üîß"""

import re
from typing import List, Dict, Optional, Any, Literal
from dataclasses import dataclass

# üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —á–µ—Ä–µ–∑ Literal
ProxyFormatType = Literal[
    'protocol://login:pass@ip:port',
    'login:pass@ip:port',
    'pass:login@ip:port',
    'ip:port:login:pass',
    'ip:port:pass:login',
    'login:pass:ip:port',
    'pass:login:ip:port',
    'port:ip:login:pass',
    'port:ip:pass:login',
    'ip:port',
    'port:ip',
    'port@ip',
    'ip@port'
]


@dataclass
class ProxyData:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ üåê"""
    protocol: str
    login: Optional[str] = None
    password: Optional[str] = None
    ip: str = ""
    port: int = 0
    url: str = ""

    def __post_init__(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ–º URL –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ üîß"""
        if self.login and self.password:
            self.url = f"{self.protocol}://{self.login}:{self.password}@{self.ip}:{self.port}"
        else:
            self.url = f"{self.protocol}://{self.ip}:{self.port}"

    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å üìã"""
        return {
            'protocol': self.protocol,
            'login': self.login,
            'password': self.password,
            'ip': self.ip,
            'port': self.port,
            'url': self.url
        }

    def __str__(self) -> str:
        return self.url


@dataclass(frozen=True)
class ProxyFormat:
    """–§–æ—Ä–º–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–∫—Å–∏ üìù"""
    name: str
    pattern: str
    groups: List[str]  # –ø–æ—Ä—è–¥–æ–∫ –≥—Ä—É–ø–ø –≤ regex
    description: str

    def __str__(self) -> str:
        return f"{self.name}: {self.description}"


class ProxyParser:
    """–ü–∞—Ä—Å–µ—Ä –ø—Ä–æ–∫—Å–∏ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ üîß"""

    FORMATS: Dict[ProxyFormatType, ProxyFormat] = {
        'protocol://login:pass@ip:port': ProxyFormat(
            name='protocol://login:pass@ip:port',
            pattern=r'^(?:(\w+)://)?(?:([^:@]+):([^@]+)@)?([^:]+):(\d+)$',
            groups=['protocol', 'login', 'password', 'ip', 'port'],
            description='–ü–æ–ª–Ω—ã–π URL —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π'
        ),
        'login:pass@ip:port': ProxyFormat(
            name='login:pass@ip:port',
            pattern=r'^([^:]+):([^@]+)@([^:]+):(\d+)$',
            groups=['login', 'password', 'ip', 'port'],
            description='–õ–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å@IP:–ø–æ—Ä—Ç'
        ),
        'pass:login@ip:port': ProxyFormat(
            name='pass:login@ip:port',
            pattern=r'^([^:]+):([^@]+)@([^:]+):(\d+)$',
            groups=['password', 'login', 'ip', 'port'],
            description='–ü–∞—Ä–æ–ª—å:–ª–æ–≥–∏–Ω@IP:–ø–æ—Ä—Ç (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)'
        ),
        'ip:port:login:pass': ProxyFormat(
            name='ip:port:login:pass',
            pattern=r'^([^:]+):(\d+):([^:]+):(.+)$',
            groups=['ip', 'port', 'login', 'password'],
            description='IP:–ø–æ—Ä—Ç:–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å'
        ),
        'ip:port:pass:login': ProxyFormat(
            name='ip:port:pass:login',
            pattern=r'^([^:]+):(\d+):([^:]+):(.+)$',
            groups=['ip', 'port', 'password', 'login'],
            description='IP:–ø–æ—Ä—Ç:–ø–∞—Ä–æ–ª—å:–ª–æ–≥–∏–Ω (–æ–±—Ä–∞—Ç–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)'
        ),
        'login:pass:ip:port': ProxyFormat(
            name='login:pass:ip:port',
            pattern=r'^([^:]+):([^:]+):([^:]+):(\d+)$',
            groups=['login', 'password', 'ip', 'port'],
            description='–õ–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å:IP:–ø–æ—Ä—Ç'
        ),
        'pass:login:ip:port': ProxyFormat(
            name='pass:login:ip:port',
            pattern=r'^([^:]+):([^:]+):([^:]+):(\d+)$',
            groups=['password', 'login', 'ip', 'port'],
            description='–ü–∞—Ä–æ–ª—å:–ª–æ–≥–∏–Ω:IP:–ø–æ—Ä—Ç (–æ–±—Ä–∞—Ç–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)'
        ),
        'port:ip:login:pass': ProxyFormat(
            name='port:ip:login:pass',
            pattern=r'^(\d+):([^:]+):([^:]+):(.+)$',
            groups=['port', 'ip', 'login', 'password'],
            description='–ü–æ—Ä—Ç:IP:–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å'
        ),
        'port:ip:pass:login': ProxyFormat(
            name='port:ip:pass:login',
            pattern=r'^(\d+):([^:]+):([^:]+):(.+)$',
            groups=['port', 'ip', 'password', 'login'],
            description='–ü–æ—Ä—Ç:IP:–ø–∞—Ä–æ–ª—å:–ª–æ–≥–∏–Ω'
        ),
        'ip:port': ProxyFormat(
            name='ip:port',
            pattern=r'^([^:]+):(\d+)$',
            groups=['ip', 'port'],
            description='IP:–ø–æ—Ä—Ç (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)'
        ),
        'port:ip': ProxyFormat(
            name='port:ip',
            pattern=r'^(\d+):([^:@]+)$',
            groups=['port', 'ip'],
            description='–ü–æ—Ä—Ç:IP (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)'
        ),
        'port@ip': ProxyFormat(
            name='port@ip',
            pattern=r'^(\d+)@([^@]+)$',
            groups=['port', 'ip'],
            description='–ü–æ—Ä—Ç@IP (—Å @ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º)'
        ),
        'ip@port': ProxyFormat(
            name='ip@port',
            pattern=r'^([^@]+)@(\d+)$',
            groups=['ip', 'port'],
            description='IP@–ø–æ—Ä—Ç (—Å @ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º)'
        )
    }

    def parse_line(self, line: str, format_name: Optional[ProxyFormatType] = None, default_protocol="http") -> Optional[ProxyData]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∫—Å–∏ üéØ

        Args:
            line: —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–∫—Å–∏
            format_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–ª–∏ None –¥–ª—è –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            default_protocol: –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        line = line.strip()
        if not line or line.startswith('#'):
            return None

        if format_name:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            return self._parse_with_format(line, self.FORMATS[format_name], default_protocol)

        # –ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞
        for fmt in self.FORMATS.values():
            result = self._parse_with_format(line, fmt, default_protocol)
            if result:
                return result

        return None

    def _parse_with_format(self, line: str, fmt: ProxyFormat, default_protocol="http") -> Optional[ProxyData]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º üîç"""
        match = re.match(fmt.pattern, line)
        if not match:
            return None

        groups = match.groups()
        proxy_data = {
            'protocol': default_protocol,
            'login': None,
            'password': None,
            'ip': '',
            'port': 0
        }

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –≥—Ä—É–ø–ø–∞–º
        for i, field_name in enumerate(fmt.groups):
            if i < len(groups) and groups[i]:
                if field_name == 'port':
                    proxy_data[field_name] = int(groups[i])
                elif field_name == 'protocol':
                    proxy_data[field_name] = groups[i].lower()
                else:
                    proxy_data[field_name] = groups[i]

        return ProxyData(**proxy_data)

    def get_available_formats(self) -> List[ProxyFormatType]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ üìú"""
        return list(self.FORMATS.keys())

    def get_format_info(self, format_name: ProxyFormatType) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–µ üìã"""
        return str(self.FORMATS[format_name])