# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.metric_degradation_config import MetricDegradationConfig

class TestMetricDegradationConfig(unittest.TestCase):
    """MetricDegradationConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MetricDegradationConfig:
        """Test MetricDegradationConfig
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MetricDegradationConfig`
        """
        model = MetricDegradationConfig()
        if include_optional:
            return MetricDegradationConfig(
                aggregation = ri.apiclient.models.defines_an_aggregation_for_a_metric
aggregations_take_in_a_time_series_and_output_a_time_series.Defines an aggregation for a metric
Aggregations take in a time series and output a time series(
                    aggregation_type = 'AGGREGATION_TYPE_UNSPECIFIED', 
                    time_window = '', ),
                threshold = ri.apiclient.models.thresholds_defined_for_the_monitor.Thresholds defined for the Monitor(
                    high = 1.337, 
                    low = 1.337, 
                    type = 'TYPE_UNSPECIFIED', ),
                transform = ri.apiclient.models.defines_a_transformation_function_for_the_metric
transformations_take_in_a_time_series_and_output_a_time_series.Defines a transformation function for the metric
Transformations take in a time series and output a time series(
                    difference_from_target = ri.apiclient.models.difference_from_target.DifferenceFromTarget(
                        difference = 'DIFFERENCE_UNSPECIFIED', 
                        target = 'TARGET_UNSPECIFIED', ), )
            )
        else:
            return MetricDegradationConfig(
        )
        """

    def testMetricDegradationConfig(self):
        """Test MetricDegradationConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()