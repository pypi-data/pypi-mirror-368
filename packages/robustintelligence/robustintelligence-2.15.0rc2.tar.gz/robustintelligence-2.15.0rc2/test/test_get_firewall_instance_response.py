# coding: utf-8

"""
    Robust Intelligence Firewall REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` header. Your AI Firewall Agent domain forms the base of the URL for REST API calls. To find the Agent domain in the Robust Intelligence UI, click AI Firewall: Settings icon: Firewall Settings. Find your agent in the Firewall Agent Status: Agents Setup page, and copy its URL from the table.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.fwclient.models.get_firewall_instance_response import GetFirewallInstanceResponse

class TestGetFirewallInstanceResponse(unittest.TestCase):
    """GetFirewallInstanceResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetFirewallInstanceResponse:
        """Test GetFirewallInstanceResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetFirewallInstanceResponse`
        """
        model = GetFirewallInstanceResponse()
        if include_optional:
            return GetFirewallInstanceResponse(
                firewall_instance = ri.fwclient.models.firewall_instance_info.FirewallInstanceInfo(
                    agent_id = ri.fwclient.models.id.ID(
                        uuid = '', ), 
                    deployment_status = 'FIREWALL_INSTANCE_STATUS_UNSPECIFIED', 
                    description = '', 
                    firewall_instance_config = ri.fwclient.models.firewall_instance_config.FirewallInstanceConfig(
                        firewall_backend_image = '', 
                        firewall_server_image = '', 
                        kubernetes_spec = ri.fwclient.models.firewall_instance_deployment_config.FirewallInstanceDeploymentConfig(
                            kubernetes_resource_config = ri.fwclient.models.kubernetes_resource_config.KubernetesResourceConfig(
                                limits = {
                                    'key' : ''
                                    }, 
                                max_replicas = 56, 
                                min_replicas = 56, 
                                requests = {
                                    'key' : ''
                                    }, ), 
                            pod_annotations = {
                                'key' : ''
                                }, ), 
                        model_server_configs = [
                            ri.fwclient.models.model_server_config.ModelServerConfig(
                                classification_config = {
                                    'key' : ri.fwclient.models.classifier_config.ClassifierConfig(
                                        default_sensitivity = '', 
                                        fixed_threshold = '', 
                                        positive_class_index = 56, 
                                        sensitivity_based_thresholds = {
                                            'key' : ''
                                            }, )
                                    }, 
                                hugging_face_config = ri.fwclient.models.huggingface_config.HuggingfaceConfig(
                                    model_task = '', 
                                    repository = '', 
                                    revision = '', 
                                    tokenizer_kwargs_json = '', ), 
                                model_server_image = '', 
                                name = '', 
                                resource_config = ri.fwclient.models.kubernetes_resource_config.KubernetesResourceConfig(
                                    max_replicas = 56, 
                                    min_replicas = 56, ), )
                            ], 
                        yara_server_config = ri.fwclient.models.yara_server_config.YaraServerConfig(
                            rime_yara_git_ref = '', 
                            yara_server_image = '', ), ), 
                    firewall_instance_name = '', 
                    last_heartbeat_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return GetFirewallInstanceResponse(
        )
        """

    def testGetFirewallInstanceResponse(self):
        """Test GetFirewallInstanceResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()