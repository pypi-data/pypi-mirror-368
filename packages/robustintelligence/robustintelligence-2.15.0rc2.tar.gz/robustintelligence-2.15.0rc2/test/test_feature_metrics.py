# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.feature_metrics import FeatureMetrics

class TestFeatureMetrics(unittest.TestCase):
    """FeatureMetrics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FeatureMetrics:
        """Test FeatureMetrics
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FeatureMetrics`
        """
        model = FeatureMetrics()
        if include_optional:
            return FeatureMetrics(
                feature_metric_without_subsets = [
                    ri.apiclient.models.any_metric_that_corresponds_to_a_single_feature_but_isn't_a_subset_metric.any metric that corresponds to a single feature but isn't a subset metric(
                        excluded_transforms = ri.apiclient.models.excluded_transforms.ExcludedTransforms(), 
                        test_case_metric_identifier = ri.apiclient.models.test_case_metric_identifier.TestCaseMetricIdentifier(
                            feature_names = [
                                ''
                                ], 
                            metric = '', 
                            test_batch_id = '', ), )
                    ],
                subset_metrics = {
                    'key' : ri.apiclient.models.subset_metrics_contains_all_metric_ids_for_a_particular_subset_and
corresponding_excluded_transforms_for_each_metric.SubsetMetrics contains all metric IDs for a particular subset and
corresponding excluded transforms for each metric(
                        metric_ids = [
                            ri.apiclient.models.subset_metric_identifies_a_single_subset_metric_and_its_corresponding
excluded_transforms.SubsetMetric identifies a single subset metric and its corresponding
excluded transforms(
                                excluded_transforms = ri.apiclient.models.excluded_transforms.ExcludedTransforms(), 
                                metric_id = ri.apiclient.models.in_order_to_specify_a_test_case_metric_identifier,_test_batch_type,_feature_name
and_metric_are_required/_note_that_each_of_them_refer_to_fields_in_the
test_case_doc/_metric_refers_to_a_single_metric_in_array_test_metric
(in_the_test_case_doc)/
for_example_for_some_test_case_doc:
{
___///
___test_batch_type:_'subset_performance:subset_positive_prediction_rate',
___feature_id:_'xxxx',
___metrics:_[
_____{
_______category:_14,
_______metric:_'worst_perf_diff',
_______data:_{float_value:_0/032836160521054425},
_______data_type:_1
_____},
_____{
_____category:_14,
_________metric:_'names',
_________data:_{_str_list:_[_'credit',_'debit',_'null'_]_},
_________data_type:_1
_____},
___]
}
we_can_specify_test_case_metric_identifier_as:
{
___test_batch_id_=_'subset_performance:subset_positive_prediction_rate',
___feature_id_=_'xxxx',
___metric_=_'names',
}.In order to specify a TestCaseMetricIdentifier, TestBatchType, FeatureName
and Metric are required. Note that each of them refer to fields in the
TestCase doc. Metric refers to a single Metric in array TestMetric
(in the TestCase doc).
For example for some TestCase Doc:
{
   ...
   test_batch_type: 'subset_performance:subset_positive_prediction_rate',
   feature_id: 'xxxx',
   metrics: [
     {
       category: 14,
       metric: 'worst_perf_diff',
       data: {float_value: 0.032836160521054425},
       data_type: 1
     },
     {
     category: 14,
         metric: 'names',
         data: { str_list: [ 'credit', 'debit', 'null' ] },
         data_type: 1
     },
   ]
}
We can specify TestCaseMetricIdentifier as:
{
   test_batch_id = 'subset_performance:subset_positive_prediction_rate',
   feature_id = 'xxxx',
   metric = 'names',
}(
                                    feature_names = [
                                        ''
                                        ], 
                                    metric = '', 
                                    subset_name = '', 
                                    test_batch_id = '', ), )
                            ], )
                    }
            )
        else:
            return FeatureMetrics(
        )
        """

    def testFeatureMetrics(self):
        """Test FeatureMetrics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()