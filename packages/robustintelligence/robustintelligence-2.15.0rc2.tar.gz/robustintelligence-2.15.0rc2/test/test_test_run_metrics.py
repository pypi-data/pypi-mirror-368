# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.test_run_metrics import TestRunMetrics

class TestTestRunMetrics(unittest.TestCase):
    """TestRunMetrics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TestRunMetrics:
        """Test TestRunMetrics
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TestRunMetrics`
        """
        model = TestRunMetrics()
        if include_optional:
            return TestRunMetrics(
                average_prediction = 1.337,
                category_summary_metrics = [
                    ri.apiclient.models.category_summary_metric.CategorySummaryMetric(
                        category_id = '', 
                        name = '', 
                        test_category = 'TEST_CATEGORY_TYPE_UNSPECIFIED', 
                        value = 1.337, )
                    ],
                duration_millis = '',
                model_perf = {
                    'key' : ri.apiclient.models.model_perf_metric.ModelPerfMetric(
                        eval_metric = 1.337, 
                        ref_metric = 1.337, )
                    },
                num_failing_inputs = '',
                num_inputs = '',
                risk_scores = [
                    ri.apiclient.models.risk_score.RiskScore(
                        score = 1.337, 
                        severity = 'SEVERITY_UNSPECIFIED', 
                        type = 'RISK_CATEGORY_TYPE_UNSPECIFIED', )
                    ],
                severity_counts = ri.apiclient.models.severity_counts.SeverityCounts(
                    num_high_severity = '', 
                    num_low_severity = '', 
                    num_none_severity = '', ),
                summary_counts = ri.apiclient.models.result_summary_counts.ResultSummaryCounts(
                    fail = '', 
                    pass = '', 
                    skip = '', 
                    total = '', 
                    warning = '', )
            )
        else:
            return TestRunMetrics(
        )
        """

    def testTestRunMetrics(self):
        """Test TestRunMetrics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()