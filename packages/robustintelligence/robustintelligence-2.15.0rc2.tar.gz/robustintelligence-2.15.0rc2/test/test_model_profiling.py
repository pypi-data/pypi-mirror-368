# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.model_profiling import ModelProfiling

class TestModelProfiling(unittest.TestCase):
    """ModelProfiling unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ModelProfiling:
        """Test ModelProfiling
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ModelProfiling`
        """
        model = ModelProfiling()
        if include_optional:
            return ModelProfiling(
                custom_metrics = [
                    ri.apiclient.models.custom_metric.CustomMetric(
                        file_path = '', 
                        metadata = ri.apiclient.models.custom_metric_metadata.CustomMetricMetadata(
                            configuration_description = '', 
                            example_description = '', 
                            short_description = '', 
                            starter_description = '', 
                            why_it_matters_description = '', ), 
                        name = '', 
                        range_lower_bound = 1.337, 
                        range_upper_bound = 1.337, 
                        run_overall_performance = True, 
                        run_subset_performance = True, 
                        run_subset_performance_drift = True, )
                    ],
                drift_impact_metric = '',
                impact_label_threshold = 1.337,
                impact_metric = '',
                metric_configs_json = '',
                nrows_for_feature_importance = '',
                nrows_for_summary = '',
                num_feats_for_subset_summary = '',
                subset_summary_metric = ''
            )
        else:
            return ModelProfiling(
        )
        """

    def testModelProfiling(self):
        """Test ModelProfiling"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()