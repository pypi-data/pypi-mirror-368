# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.create_firewall_instance_request import CreateFirewallInstanceRequest

class TestCreateFirewallInstanceRequest(unittest.TestCase):
    """CreateFirewallInstanceRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateFirewallInstanceRequest:
        """Test CreateFirewallInstanceRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateFirewallInstanceRequest`
        """
        model = CreateFirewallInstanceRequest()
        if include_optional:
            return CreateFirewallInstanceRequest(
                agent_id = ri.apiclient.models.id_of_the_agent_that_will_create_the_firewall_instance/.ID of the agent that will create the firewall instance.(),
                config = ri.apiclient.models.rule_config.RuleConfig(
                    custom_config = ri.apiclient.models.individual_rules_config.IndividualRulesConfig(
                        pii_detection_input = ri.apiclient.models.pii_detection_rule_config.PiiDetectionRuleConfig(
                            custom_entities = [
                                ri.apiclient.models.custom_pii_entity.CustomPiiEntity(
                                    context_words = [
                                        ''
                                        ], 
                                    name = '', 
                                    patterns = [
                                        ''
                                        ], )
                                ], 
                            entity_types = [
                                'PII_ENTITY_TYPE_UNSPECIFIED'
                                ], ), 
                        pii_detection_output = ri.apiclient.models.pii_detection_rule_config.PiiDetectionRuleConfig(), 
                        prompt_injection_input = ri.apiclient.models.prompt_injection_rule_config.PromptInjectionRuleConfig(
                            scan_contexts = True, 
                            sensitivity = 'RULE_SENSITIVITY_UNSPECIFIED', ), 
                        toxicity_input = ri.apiclient.models.toxicity_rule_config.ToxicityRuleConfig(), 
                        toxicity_output = ri.apiclient.models.toxicity_rule_config.ToxicityRuleConfig(), ), 
                    language = 'LANGUAGE_EN', 
                    selected_rules = [
                        'RULE_TYPE_UNSPECIFIED'
                        ], ),
                description = '',
                spec = ri.apiclient.models.firewall_instance_deployment_config.FirewallInstanceDeploymentConfig(
                    kubernetes_resource_config = ri.apiclient.models.kubernetes_resource_config.KubernetesResourceConfig(
                        limits = {
                            'key' : ''
                            }, 
                        max_replicas = 56, 
                        min_replicas = 56, 
                        requests = {
                            'key' : ''
                            }, ), 
                    pod_annotations = {
                        'key' : ''
                        }, )
            )
        else:
            return CreateFirewallInstanceRequest(
                description = '',
        )
        """

    def testCreateFirewallInstanceRequest(self):
        """Test CreateFirewallInstanceRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()