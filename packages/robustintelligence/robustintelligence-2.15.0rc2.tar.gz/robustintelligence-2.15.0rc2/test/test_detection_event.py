# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.detection_event import DetectionEvent

class TestDetectionEvent(unittest.TestCase):
    """DetectionEvent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DetectionEvent:
        """Test DetectionEvent
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DetectionEvent`
        """
        model = DetectionEvent()
        if include_optional:
            return DetectionEvent(
                description = '',
                description_html = '',
                detail = ri.apiclient.models.event_detail.EventDetail(
                    metric_degradation = ri.apiclient.models.metric_degradation_event_details.MetricDegradationEventDetails(), 
                    security = ri.apiclient.models.security_event_details.SecurityEventDetails(
                        datapoints = [
                            ri.apiclient.models.flagged_datapoint.FlaggedDatapoint(
                                row_id = '', 
                                row_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        effect_on_model = [
                            ''
                            ], 
                        evidence = [
                            ''
                            ], 
                        possible_intent = , 
                        recommendations = [
                            ''
                            ], 
                        type = 'SECURITY_EVENT_TYPE_UNSPECIFIED', ), ),
                event_object_id = '',
                event_object_name = '',
                event_time_range = ri.apiclient.models.time_interval.TimeInterval(
                    end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                event_type = 'EVENT_TYPE_UNSPECIFIED',
                firewall_id = ri.apiclient.models.id.ID(
                    uuid = '', ),
                id = ri.apiclient.models.id.ID(
                    uuid = '', ),
                last_update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                project_id = ri.apiclient.models.id.ID(
                    uuid = '', ),
                resolution = ri.apiclient.models.resolution.Resolution(
                    resolve_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    resolved_by_user_id = ri.apiclient.models.id.ID(
                        uuid = '', ), ),
                risk_category_type = 'RISK_CATEGORY_TYPE_UNSPECIFIED',
                severity = 'SEVERITY_UNSPECIFIED',
                test_category = 'TEST_CATEGORY_TYPE_UNSPECIFIED'
            )
        else:
            return DetectionEvent(
        )
        """

    def testDetectionEvent(self):
        """Test DetectionEvent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()