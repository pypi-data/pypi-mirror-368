# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.start_stress_test_response import StartStressTestResponse

class TestStartStressTestResponse(unittest.TestCase):
    """StartStressTestResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StartStressTestResponse:
        """Test StartStressTestResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StartStressTestResponse`
        """
        model = StartStressTestResponse()
        if include_optional:
            return StartStressTestResponse(
                job = ri.apiclient.models.job_metadata.JobMetadata(
                    agent_id = ri.apiclient.models.id.ID(
                        uuid = '', ), 
                    archived_job_logs = ri.apiclient.models.archived_job_logs.ArchivedJobLogs(
                        expiration_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        url = ri.apiclient.models.safe_url.SafeURL(), ), 
                    cancellation_requested = True, 
                    completion_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    error_msg = '', 
                    job_data = ri.apiclient.models.rime/job_data.rime.JobData(
                        continuous_inc = ri.apiclient.models.continuous_incremental_test.ContinuousIncrementalTest(
                            ct_test_run_ids = [
                                ''
                                ], 
                            firewall_id = '', 
                            progress = ri.apiclient.models.continuous_test_job_progress.ContinuousTestJobProgress(
                                test_runs = [
                                    ri.apiclient.models.continuous_test_run_progress.ContinuousTestRunProgress(
                                        bin_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        bin_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        test_run = ri.apiclient.models.test_run_progress.TestRunProgress(
                                            status = 'TEST_TASK_STATUS_UNSPECIFIED', 
                                            test_batches = [
                                                ri.apiclient.models.test_batch_progress.TestBatchProgress(
                                                    type = '', )
                                                ], 
                                            test_run_id = '', ), )
                                    ], ), ), 
                        cross_plane_res = ri.apiclient.models.cross_plane_response.CrossPlaneResponse(
                            category_config_generation_service_response = ri.apiclient.models.category_config_generation_service_response.CategoryConfigGenerationServiceResponse(
                                continuous_test_categories = [
                                    'TEST_CATEGORY_TYPE_UNSPECIFIED'
                                    ], 
                                stress_test_categories = [
                                    'TEST_CATEGORY_TYPE_UNSPECIFIED'
                                    ], ), 
                            check_object_exists_response = ri.apiclient.models.check_object_exists_response.CheckObjectExistsResponse(
                                exists = True, ), 
                            delete_object_response = ri.apiclient.models.delete_object_response.DeleteObjectResponse(), 
                            get_read_object_presigned_link_response = ri.apiclient.models.get_read_object_presigned_link_response.GetReadObjectPresignedLinkResponse(), 
                            get_upload_object_presigned_link_response = ri.apiclient.models.get_upload_object_presigned_link_response.GetUploadObjectPresignedLinkResponse(), 
                            list_objects_response = ri.apiclient.models.list_objects_response.ListObjectsResponse(
                                paths = [
                                    ''
                                    ], ), 
                            profiling_config_generation_service_response = ri.apiclient.models.profiling_config_generation_service_response.ProfilingConfigGenerationServiceResponse(
                                profiling_config = ri.apiclient.models.profiling_config.ProfilingConfig(
                                    data_profiling = ri.apiclient.models.data_profiling.DataProfiling(
                                        column_type_info = ri.apiclient.models.column_type_info.ColumnTypeInfo(
                                            allow_float_unique = True, 
                                            categorical_violation_threshold = 1.337, 
                                            min_nunique_for_numeric = '', 
                                            min_unique_prop = 1.337, 
                                            numeric_range_inference_threshold = 1.337, 
                                            numeric_violation_threshold = 1.337, 
                                            unseen_values_allowed_criteria = 1.337, ), 
                                        feature_relationship_info = ri.apiclient.models.feature_relationship_info.FeatureRelationshipInfo(
                                            compute_feature_relationships = True, 
                                            compute_numeric_feature_relationships = True, 
                                            features_to_profile = [
                                                ''
                                                ], 
                                            ignore_nan_for_feature_relationships = True, 
                                            num_feats_to_profile = '', ), 
                                        num_quantiles = '', 
                                        num_subsets = '', ), 
                                    model_profiling = ri.apiclient.models.model_profiling.ModelProfiling(
                                        custom_metrics = [
                                            ri.apiclient.models.custom_metric.CustomMetric(
                                                file_path = '', 
                                                metadata = ri.apiclient.models.custom_metric_metadata.CustomMetricMetadata(
                                                    configuration_description = '', 
                                                    example_description = '', 
                                                    short_description = '', 
                                                    starter_description = '', 
                                                    why_it_matters_description = '', ), 
                                                name = '', 
                                                range_lower_bound = 1.337, 
                                                range_upper_bound = 1.337, 
                                                run_overall_performance = True, 
                                                run_subset_performance = True, 
                                                run_subset_performance_drift = True, )
                                            ], 
                                        drift_impact_metric = '', 
                                        impact_label_threshold = 1.337, 
                                        impact_metric = '', 
                                        metric_configs_json = '', 
                                        nrows_for_feature_importance = '', 
                                        nrows_for_summary = '', 
                                        num_feats_for_subset_summary = '', 
                                        subset_summary_metric = '', ), ), ), 
                            test_suite_config_generation_service_response = ri.apiclient.models.test_suite_config_generation_service_response.TestSuiteConfigGenerationServiceResponse(
                                test_suite_config = ri.apiclient.models.test_suite_config.TestSuiteConfig(
                                    custom_tests = [
                                        ''
                                        ], 
                                    global_exclude_columns = [
                                        ''
                                        ], 
                                    global_test_sensitivity = 'TEST_SENSITIVITY_UNSPECIFIED', 
                                    individual_tests_config = '', ), ), 
                            validate_dataset_response = ri.apiclient.models.validate_dataset_response.ValidateDatasetResponse(
                                error_message = '', 
                                is_valid = True, 
                                size_bytes = '', 
                                validation_status = 'VALIDITY_STATUS_UNSPECIFIED', ), 
                            validate_model_response = ri.apiclient.models.validate_model_response.ValidateModelResponse(
                                error_message = '', 
                                is_valid = True, ), 
                            validate_predictions_response = ri.apiclient.models.validate_predictions_response.ValidatePredictionsResponse(
                                error_message = '', 
                                is_valid = True, ), ), 
                        file_scan = ri.apiclient.models.scan.Scan(
                            file_scan_id = '', 
                            project_id = ri.apiclient.models.id.ID(
                                uuid = '', ), ), 
                        generative_model = ri.apiclient.models.rime/job_data/generative_model_test.rime.JobData.GenerativeModelTest(
                            model_output_is_sensitive = True, 
                            name = '', 
                            workspace_id = , ), 
                        stress = ri.apiclient.models.stress_test.StressTest(
                            test_run_id = '', ), ), 
                    job_id = '', 
                    job_progress_str = '', 
                    job_type = 'JOB_TYPE_UNSPECIFIED', 
                    running_time_secs = 1.337, 
                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    status = 'JOB_STATUS_UNSPECIFIED', )
            )
        else:
            return StartStressTestResponse(
        )
        """

    def testStartStressTestResponse(self):
        """Test StartStressTestResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()