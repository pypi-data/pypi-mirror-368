# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.get_batch_result_response import GetBatchResultResponse

class TestGetBatchResultResponse(unittest.TestCase):
    """GetBatchResultResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetBatchResultResponse:
        """Test GetBatchResultResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetBatchResultResponse`
        """
        model = GetBatchResultResponse()
        if include_optional:
            return GetBatchResultResponse(
                test_batch = ri.apiclient.models.testrunresult/test_batch_result.testrunresult.TestBatchResult(
                    category = '', 
                    description = '', 
                    display = ri.apiclient.models.test_batch_result/display.TestBatchResult.Display(
                        description_html = '', 
                        long_description_tabs = [
                            ri.apiclient.models.long_description_tab.LongDescriptionTab(
                                contents = '', 
                                title = '', )
                            ], 
                        summary_details = 'YQ==', 
                        table_columns_to_show = [
                            ri.apiclient.models.table_column.TableColumn(
                                description = '', 
                                name = '', 
                                type = 'TABLE_COLUMN_TYPE_UNSPECIFIED', )
                            ], ), 
                    duration_in_millis = '', 
                    failing_features = [
                        ''
                        ], 
                    failing_rows_result = ri.apiclient.models.failing_rows_result.FailingRowsResult(
                        all_included = True, 
                        description = '', 
                        failing_rows = [
                            ri.apiclient.models.failing_row.FailingRow(
                                details = 'YQ==', 
                                row_id = '', )
                            ], 
                        top_count = '', 
                        total_count = '', ), 
                    metrics = [
                        ri.apiclient.models.test_metric.TestMetric(
                            category = 'TEST_METRIC_CATEGORY_UNSPECIFIED', 
                            empty = ri.apiclient.models.empty.empty(), 
                            float_list = ri.apiclient.models.float_list.FloatList(
                                values = [
                                    1.337
                                    ], ), 
                            float_value = 1.337, 
                            int_list = ri.apiclient.models.int_list.IntList(), 
                            int_value = '', 
                            metric = '', 
                            str_list = ri.apiclient.models.str_list.StrList(), 
                            str_value = '', 
                            test_case_monitor_info = ri.apiclient.models.test_case_monitor_info_identifies_a_test_metric_as_a_default_monitor.TestCaseMonitorInfo identifies a TestMetric as a default monitor(
                                excluded_transforms = ri.apiclient.models.excluded_transforms.ExcludedTransforms(), 
                                is_subset_metric = True, 
                                threshold = ri.apiclient.models.thresholds_defined_for_the_monitor.Thresholds defined for the Monitor(
                                    high = 1.337, 
                                    low = 1.337, ), ), )
                        ], 
                    security_test_details = ri.apiclient.models.security_event_details.SecurityEventDetails(
                        datapoints = [
                            ri.apiclient.models.flagged_datapoint.FlaggedDatapoint(
                                row_id = '', 
                                row_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        effect_on_model = [
                            ''
                            ], 
                        evidence = [
                            ''
                            ], 
                        possible_intent = , 
                        recommendations = [
                            ''
                            ], ), 
                    severity = 'SEVERITY_UNSPECIFIED', 
                    show_in_test_comparisons = True, 
                    summary_counts = ri.apiclient.models.result_summary_counts.ResultSummaryCounts(
                        fail = '', 
                        pass = '', 
                        skip = '', 
                        total = '', 
                        warning = '', ), 
                    test_category = 'TEST_CATEGORY_TYPE_UNSPECIFIED', 
                    test_name = '', 
                    test_run_id = '', 
                    test_type = '', )
            )
        else:
            return GetBatchResultResponse(
        )
        """

    def testGetBatchResultResponse(self):
        """Test GetBatchResultResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()