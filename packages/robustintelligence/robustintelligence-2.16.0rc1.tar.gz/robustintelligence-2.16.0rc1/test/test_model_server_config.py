# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.model_server_config import ModelServerConfig

class TestModelServerConfig(unittest.TestCase):
    """ModelServerConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ModelServerConfig:
        """Test ModelServerConfig
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ModelServerConfig`
        """
        model = ModelServerConfig()
        if include_optional:
            return ModelServerConfig(
                classification_config = {
                    'key' : ri.apiclient.models.classifier_config.ClassifierConfig(
                        default_sensitivity = '', 
                        fixed_threshold = '', 
                        positive_class_index = 56, 
                        sensitivity_based_thresholds = {
                            'key' : ''
                            }, )
                    },
                hugging_face_config = ri.apiclient.models.huggingface_config.HuggingfaceConfig(
                    model_task = '', 
                    repository = '', 
                    revision = '', 
                    tokenizer_kwargs_json = '', ),
                model_server_image = '',
                name = '',
                resource_config = ri.apiclient.models.kubernetes_resource_config.KubernetesResourceConfig(
                    limits = {
                        'key' : ''
                        }, 
                    max_replicas = 56, 
                    min_replicas = 56, 
                    requests = {
                        'key' : ''
                        }, )
            )
        else:
            return ModelServerConfig(
        )
        """

    def testModelServerConfig(self):
        """Test ModelServerConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()