# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.update_schedule_request import UpdateScheduleRequest

class TestUpdateScheduleRequest(unittest.TestCase):
    """UpdateScheduleRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateScheduleRequest:
        """Test UpdateScheduleRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateScheduleRequest`
        """
        model = UpdateScheduleRequest()
        if include_optional:
            return UpdateScheduleRequest(
                frequency_cron_expr = '',
                project_id = ri.apiclient.models.id.ID(
                    uuid = '', ),
                schedule_id = None,
                test_run_config = ri.apiclient.models.test_run_config.TestRunConfig(
                    categories = [
                        'TEST_CATEGORY_TYPE_UNSPECIFIED'
                        ], 
                    data_info = ri.apiclient.models.ref_eval_datasets.RefEvalDatasets(
                        eval_dataset_id = '', 
                        eval_dataset_time_interval = ri.apiclient.models.time_interval.TimeInterval(
                            end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        ref_dataset_id = '', ), 
                    model_id = ri.apiclient.models.id.ID(
                        uuid = '', ), 
                    profiling_config = ri.apiclient.models.profiling_config.ProfilingConfig(
                        data_profiling = ri.apiclient.models.data_profiling.DataProfiling(
                            column_type_info = ri.apiclient.models.column_type_info.ColumnTypeInfo(
                                allow_float_unique = True, 
                                categorical_violation_threshold = 1.337, 
                                min_nunique_for_numeric = '', 
                                min_unique_prop = 1.337, 
                                numeric_range_inference_threshold = 1.337, 
                                numeric_violation_threshold = 1.337, 
                                unseen_values_allowed_criteria = 1.337, ), 
                            feature_relationship_info = ri.apiclient.models.feature_relationship_info.FeatureRelationshipInfo(
                                compute_feature_relationships = True, 
                                compute_numeric_feature_relationships = True, 
                                features_to_profile = [
                                    ''
                                    ], 
                                ignore_nan_for_feature_relationships = True, 
                                num_feats_to_profile = '', ), 
                            num_quantiles = '', 
                            num_subsets = '', ), 
                        model_profiling = ri.apiclient.models.model_profiling.ModelProfiling(
                            custom_metrics = [
                                ri.apiclient.models.custom_metric.CustomMetric(
                                    file_path = '', 
                                    metadata = ri.apiclient.models.custom_metric_metadata.CustomMetricMetadata(
                                        configuration_description = '', 
                                        example_description = '', 
                                        short_description = '', 
                                        starter_description = '', 
                                        why_it_matters_description = '', ), 
                                    name = '', 
                                    range_lower_bound = 1.337, 
                                    range_upper_bound = 1.337, 
                                    run_overall_performance = True, 
                                    run_subset_performance = True, 
                                    run_subset_performance_drift = True, )
                                ], 
                            drift_impact_metric = '', 
                            impact_label_threshold = 1.337, 
                            impact_metric = '', 
                            metric_configs_json = '', 
                            nrows_for_feature_importance = '', 
                            nrows_for_summary = '', 
                            num_feats_for_subset_summary = '', 
                            subset_summary_metric = '', ), ), 
                    run_name = '', 
                    run_time_info = ri.apiclient.models.run_time_info.RunTimeInfo(
                        custom_image = ri.apiclient.models.custom_image_type.CustomImageType(
                            managed_image_name = '', ), 
                        explicit_errors = True, 
                        random_seed = '', 
                        resource_request = ri.apiclient.models.resource_request.ResourceRequest(
                            cpu_request_millicores = '', 
                            ram_request_megabytes = '', ), ), 
                    test_suite_config = ri.apiclient.models.test_suite_config.TestSuiteConfig(
                        custom_tests = [
                            ''
                            ], 
                        global_exclude_columns = [
                            ''
                            ], 
                        global_test_sensitivity = 'TEST_SENSITIVITY_UNSPECIFIED', 
                        individual_tests_config = '', ), )
            )
        else:
            return UpdateScheduleRequest(
        )
        """

    def testUpdateScheduleRequest(self):
        """Test UpdateScheduleRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()