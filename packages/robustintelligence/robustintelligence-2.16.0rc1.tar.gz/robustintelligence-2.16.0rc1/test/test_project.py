# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.project import Project

class TestProject(unittest.TestCase):
    """Project unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Project:
        """Test Project
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Project`
        """
        model = Project()
        if include_optional:
            return Project(
                active_schedule = ri.apiclient.models.schedule_info.ScheduleInfo(
                    activated_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    schedule_id = ri.apiclient.models.id.ID(
                        uuid = '', ), ),
                continuous_test_categories = [
                    'TEST_CATEGORY_TYPE_UNSPECIFIED'
                    ],
                creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                description = '',
                ethical_consideration = '',
                firewall_ids = [
                    ri.apiclient.models.id.ID(
                        uuid = '', )
                    ],
                id = ri.apiclient.models.id.ID(
                    uuid = '', ),
                is_published = True,
                last_test_run_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                model_task = 'MODEL_TASK_UNSPECIFIED',
                name = '',
                owner_id = ri.apiclient.models.id.ID(
                    uuid = '', ),
                profiling_config = ri.apiclient.models.profiling_config.ProfilingConfig(
                    data_profiling = ri.apiclient.models.data_profiling.DataProfiling(
                        column_type_info = ri.apiclient.models.column_type_info.ColumnTypeInfo(
                            allow_float_unique = True, 
                            categorical_violation_threshold = 1.337, 
                            min_nunique_for_numeric = '', 
                            min_unique_prop = 1.337, 
                            numeric_range_inference_threshold = 1.337, 
                            numeric_violation_threshold = 1.337, 
                            unseen_values_allowed_criteria = 1.337, ), 
                        feature_relationship_info = ri.apiclient.models.feature_relationship_info.FeatureRelationshipInfo(
                            compute_feature_relationships = True, 
                            compute_numeric_feature_relationships = True, 
                            features_to_profile = [
                                ''
                                ], 
                            ignore_nan_for_feature_relationships = True, 
                            num_feats_to_profile = '', ), 
                        num_quantiles = '', 
                        num_subsets = '', ), 
                    model_profiling = ri.apiclient.models.model_profiling.ModelProfiling(
                        custom_metrics = [
                            ri.apiclient.models.custom_metric.CustomMetric(
                                file_path = '', 
                                metadata = ri.apiclient.models.custom_metric_metadata.CustomMetricMetadata(
                                    configuration_description = '', 
                                    example_description = '', 
                                    short_description = '', 
                                    starter_description = '', 
                                    why_it_matters_description = '', ), 
                                name = '', 
                                range_lower_bound = 1.337, 
                                range_upper_bound = 1.337, 
                                run_overall_performance = True, 
                                run_subset_performance = True, 
                                run_subset_performance_drift = True, )
                            ], 
                        drift_impact_metric = '', 
                        impact_label_threshold = 1.337, 
                        impact_metric = '', 
                        metric_configs_json = '', 
                        nrows_for_feature_importance = '', 
                        nrows_for_summary = '', 
                        num_feats_for_subset_summary = '', 
                        subset_summary_metric = '', ), ),
                project_test_suite_config = ri.apiclient.models.test_suite_config.TestSuiteConfig(
                    custom_tests = [
                        ''
                        ], 
                    global_exclude_columns = [
                        ''
                        ], 
                    global_test_sensitivity = 'TEST_SENSITIVITY_UNSPECIFIED', 
                    individual_tests_config = '', ),
                risk_scores = [
                    ri.apiclient.models.risk_score.RiskScore(
                        score = 1.337, 
                        severity = 'SEVERITY_UNSPECIFIED', 
                        type = 'RISK_CATEGORY_TYPE_UNSPECIFIED', )
                    ],
                run_time_info = ri.apiclient.models.run_time_info.RunTimeInfo(
                    custom_image = ri.apiclient.models.custom_image_type.CustomImageType(
                        managed_image_name = '', ), 
                    explicit_errors = True, 
                    random_seed = '', 
                    resource_request = ri.apiclient.models.resource_request.ResourceRequest(
                        cpu_request_millicores = '', 
                        ram_request_megabytes = '', ), ),
                stress_test_categories = [
                    'TEST_CATEGORY_TYPE_UNSPECIFIED'
                    ],
                tags = [
                    ''
                    ],
                use_case = '',
                workspace_id = ri.apiclient.models.id.ID(
                    uuid = '', )
            )
        else:
            return Project(
        )
        """

    def testProject(self):
        """Test Project"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()