# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.test_metric import TestMetric

class TestTestMetric(unittest.TestCase):
    """TestMetric unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TestMetric:
        """Test TestMetric
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TestMetric`
        """
        model = TestMetric()
        if include_optional:
            return TestMetric(
                category = 'TEST_METRIC_CATEGORY_UNSPECIFIED',
                empty = ri.apiclient.models.empty.empty(),
                float_list = ri.apiclient.models.float_list.FloatList(
                    values = [
                        1.337
                        ], ),
                float_value = 1.337,
                int_list = ri.apiclient.models.int_list.IntList(
                    values = [
                        ''
                        ], ),
                int_value = '',
                metric = '',
                str_list = ri.apiclient.models.str_list.StrList(
                    values = [
                        ''
                        ], ),
                str_value = '',
                test_case_monitor_info = ri.apiclient.models.test_case_monitor_info_identifies_a_test_metric_as_a_default_monitor.TestCaseMonitorInfo identifies a TestMetric as a default monitor(
                    excluded_transforms = ri.apiclient.models.excluded_transforms.ExcludedTransforms(), 
                    is_subset_metric = True, 
                    threshold = ri.apiclient.models.thresholds_defined_for_the_monitor.Thresholds defined for the Monitor(
                        high = 1.337, 
                        low = 1.337, 
                        type = 'TYPE_UNSPECIFIED', ), )
            )
        else:
            return TestMetric(
        )
        """

    def testTestMetric(self):
        """Test TestMetric"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()