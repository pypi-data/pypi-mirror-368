# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.rule_config import RuleConfig

class TestRuleConfig(unittest.TestCase):
    """RuleConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RuleConfig:
        """Test RuleConfig
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RuleConfig`
        """
        model = RuleConfig()
        if include_optional:
            return RuleConfig(
                custom_config = ri.apiclient.models.individual_rules_config.IndividualRulesConfig(
                    pii_detection_input = ri.apiclient.models.pii_detection_rule_config.PiiDetectionRuleConfig(
                        custom_entities = [
                            ri.apiclient.models.custom_pii_entity.CustomPiiEntity(
                                context_words = [
                                    ''
                                    ], 
                                name = '', 
                                patterns = [
                                    ''
                                    ], )
                            ], 
                        entity_types = [
                            'PII_ENTITY_TYPE_UNSPECIFIED'
                            ], ), 
                    pii_detection_output = ri.apiclient.models.pii_detection_rule_config.PiiDetectionRuleConfig(), 
                    prompt_injection_input = ri.apiclient.models.prompt_injection_rule_config.PromptInjectionRuleConfig(
                        scan_contexts = True, 
                        sensitivity = 'RULE_SENSITIVITY_UNSPECIFIED', ), 
                    toxicity_input = ri.apiclient.models.toxicity_rule_config.ToxicityRuleConfig(), 
                    toxicity_output = ri.apiclient.models.toxicity_rule_config.ToxicityRuleConfig(), ),
                language = 'LANGUAGE_EN',
                selected_rules = [
                    'RULE_TYPE_UNSPECIFIED'
                    ]
            )
        else:
            return RuleConfig(
        )
        """

    def testRuleConfig(self):
        """Test RuleConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()