# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.list_prediction_sets_response import ListPredictionSetsResponse

class TestListPredictionSetsResponse(unittest.TestCase):
    """ListPredictionSetsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListPredictionSetsResponse:
        """Test ListPredictionSetsResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListPredictionSetsResponse`
        """
        model = ListPredictionSetsResponse()
        if include_optional:
            return ListPredictionSetsResponse(
                has_more = True,
                next_page_token = '',
                predictions = [
                    ri.apiclient.models.prediction/prediction.prediction.Prediction(
                        creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        creator_id = ri.apiclient.models.id.ID(
                            uuid = '', ), 
                        dataset_id = '', 
                        integration_id = ri.apiclient.models.id.ID(
                            uuid = '', ), 
                        marked_for_delete_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        model_id = , 
                        pred_info = ri.apiclient.models.pred_info.PredInfo(
                            connection_info = ri.apiclient.models.connection_info.ConnectionInfo(
                                data_collector = ri.apiclient.models.data_collector_info.DataCollectorInfo(
                                    data_stream_id = , ), 
                                data_file = ri.apiclient.models.data_file_info.DataFileInfo(
                                    data_type = 'DATA_TYPE_UNSPECIFIED', 
                                    path = '', ), 
                                data_loading = ri.apiclient.models.data_loading_info.DataLoadingInfo(
                                    data_endpoint_integration_id = , 
                                    load_func_name = '', 
                                    loader_kwargs_json = '', 
                                    path = '', ), 
                                databricks = ri.apiclient.models.databricks_info.DatabricksInfo(
                                    table_name = '', ), 
                                hugging_face = ri.apiclient.models.hugging_face_data_info.HuggingFaceDataInfo(
                                    dataset_uri = '', 
                                    loading_params_json = '', 
                                    split_name = '', ), ), 
                            pred_params = ri.apiclient.models.prediction_params.PredictionParams(
                                experimental_fields = {
                                    'key' : None
                                    }, 
                                pred_col = '', 
                                timestamp_col = '', ), ), 
                        project_ids = [
                            
                            ], 
                        user_metadata = ri.apiclient.models.metadata.Metadata(
                            extra_info = '', 
                            tags = [
                                ''
                                ], ), 
                        validity_status = 'VALIDITY_STATUS_UNSPECIFIED', 
                        validity_status_message = '', )
                    ]
            )
        else:
            return ListPredictionSetsResponse(
        )
        """

    def testListPredictionSetsResponse(self):
        """Test ListPredictionSetsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()