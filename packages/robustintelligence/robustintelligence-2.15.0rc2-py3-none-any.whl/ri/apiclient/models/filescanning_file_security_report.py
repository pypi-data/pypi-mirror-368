# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FilescanningFileSecurityReport(BaseModel):
    """
    The security report for a single file in the model repository.
    """ # noqa: E501
    creation_time: Optional[datetime] = Field(default=None, description="The time when the file was created.", alias="creationTime")
    dependencies: Optional[List[StrictStr]] = Field(default=None, description="The list of all dependencies in the file.")
    filename: StrictStr = Field(description="The name of the file that was scanned.")
    last_modified_time: Optional[datetime] = Field(default=None, description="The time when the file was last modified.", alias="lastModifiedTime")
    path: Optional[StrictStr] = None
    sha256: Optional[StrictStr] = None
    size: Optional[StrictStr] = Field(default=None, description="The size of the file in bytes.")
    unexpected_dependencies: Optional[List[StrictStr]] = Field(default=None, description="The list of unexpected dependencies.", alias="unexpectedDependencies")
    unsafe_dependencies: Optional[List[StrictStr]] = Field(default=None, description="The list of unsafe dependencies.", alias="unsafeDependencies")
    __properties: ClassVar[List[str]] = ["creationTime", "dependencies", "filename", "lastModifiedTime", "path", "sha256", "size", "unexpectedDependencies", "unsafeDependencies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilescanningFileSecurityReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilescanningFileSecurityReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "dependencies": obj.get("dependencies"),
            "filename": obj.get("filename"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "path": obj.get("path"),
            "sha256": obj.get("sha256"),
            "size": obj.get("size"),
            "unexpectedDependencies": obj.get("unexpectedDependencies"),
            "unsafeDependencies": obj.get("unsafeDependencies")
        })
        return _obj


