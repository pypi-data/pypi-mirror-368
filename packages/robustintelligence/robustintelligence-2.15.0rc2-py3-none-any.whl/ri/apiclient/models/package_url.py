# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ri.apiclient.models.filescanning_package_type import FilescanningPackageType
from typing import Optional, Set
from typing_extensions import Self

class PackageURL(BaseModel):
    """
    A Package URL (PURL) is a uniform way to identify a software package. A PURL has seven components: scheme:type/namespace/name@version?qualifiers#subpath The scheme is always pkg. See: https://github.com/package-url/PURL-spec for more details.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the package.")
    namespace: Optional[StrictStr] = Field(default=None, description="Optional. The name prefix such as a GitHub user or organization, Maven groupid, or a Docker image owner.")
    qualifiers: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Additional qualifying data for a package such as an OS, architecture, a distro, etc.")
    subpath: Optional[StrictStr] = Field(default=None, description="Optional. A subpath within a package, relative to the package root.")
    type: Optional[FilescanningPackageType] = None
    version: Optional[StrictStr] = Field(default=None, description="Optional. The version of the package.")
    __properties: ClassVar[List[str]] = ["name", "namespace", "qualifiers", "subpath", "type", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PackageURL from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PackageURL from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "namespace": obj.get("namespace"),
            "qualifiers": obj.get("qualifiers"),
            "subpath": obj.get("subpath"),
            "type": obj.get("type"),
            "version": obj.get("version")
        })
        return _obj


