name: Docker Build and Test

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.12']
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image for Python ${{ matrix.python-version }}
        run: |
          docker build -t bernn:py${{ matrix.python-version }} --build-arg PYTHON_VERSION=${{ matrix.python-version }} .

      - name: Test Python environment for ${{ matrix.python-version }}
        run: |
          docker run --rm bernn:py${{ matrix.python-version }} python -c "
          import sys
          print(f'Python version: {sys.version}')
          import numpy
          print(f'NumPy: {numpy.__version__}')
          import torch
          print(f'PyTorch: {torch.__version__}')
          try:
            import tensorflow as tf
            print(f'TensorFlow: {tf.__version__}')
          except ImportError as e:
            print(f'TensorFlow not available: {e}')
          try:
            import mlflow
            print(f'MLflow: {mlflow.__version__}')
          except ImportError as e:
            print(f'MLflow not available: {e}')
          print('Core dependencies test completed')
          "

      - name: Test BERNN installation for Python ${{ matrix.python-version }}
        run: |
          docker run --rm bernn:py${{ matrix.python-version }} python -c "
          import bernn
          print(f'BERNN version: {bernn.__version__}')
          print('BERNN import successful')
          "

      - name: Run comprehensive Python version test
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace bernn:py${{ matrix.python-version }} python test_python_versions.py

      - name: Test specific Python version installations
        run: |
          docker run --rm bernn:py${{ matrix.python-version }} bash -c "
          echo 'Testing Python ${{ matrix.python-version }} specific installations...'
          if [[ '${{ matrix.python-version }}' == '3.8' ]]; then
            echo 'Testing Python 3.8 specific extras...'
            pip install bernn[python38-full] --no-deps --dry-run || echo 'python38-full extra exists'
            pip install bernn[python38-tensorflow] --no-deps --dry-run || echo 'python38-tensorflow extra exists'
          elif [[ '${{ matrix.python-version }}' == '3.10' ]]; then
            echo 'Testing Python 3.10+ extras...'
            pip install bernn[py310+] --no-deps --dry-run || echo 'py310+ extra exists'
          elif [[ '${{ matrix.python-version }}' == '3.12' ]]; then
            echo 'Testing Python 3.12+ extras...'
            pip install bernn[py312+] --no-deps --dry-run || echo 'py312+ extra exists'
          fi
          "

      # - name: Test R environment
      #   run: |
      #     docker run --rm bernn:py${{ matrix.python-version }} R -e "library(sva); print('All R packages loaded successfully')"

      - name: Run tests in Docker for Python ${{ matrix.python-version }}
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace bernn:py${{ matrix.python-version }} pytest -v -rs --cov=bernn --cov-report=term --cov-report=xml:coverage-py${{ matrix.python-version }}.xml tests/

      - name: Upload coverage to Codecov for Python ${{ matrix.python-version }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: spell00/BERNN_MSMS
          file: ./coverage-py${{ matrix.python-version }}.xml
          fail_ci_if_error: false
          flags: python${{ matrix.python-version }}

  # Separate job for Docker Hub push (only runs once)
  push-to-dockerhub:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build final Docker image (Python 3.10 default)
        run: |
          docker build -t bernn:latest --build-arg PYTHON_VERSION=3.10 .

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push to DockerHub
        run: |
          docker tag bernn:latest ${{ secrets.DOCKERHUB_USERNAME }}/bernn:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/bernn:latest

          # Also push version-specific tags
          docker tag bernn:latest ${{ secrets.DOCKERHUB_USERNAME }}/bernn:python3.10
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/bernn:python3.10
