# generated by datamodel-codegen:
#   filename:  Infrastructure.json

from __future__ import annotations

from enum import Enum
from typing import Any, Optional

from pydantic import BaseModel, Extra, Field


class Contract(BaseModel):
    class Config:
        extra = Extra.forbid

    inputs: Optional[dict[str, Any]] = None
    outputs: Optional[dict[str, Any]] = None


class Status(Enum):
    pending = 'pending'
    in_progress = 'in-progress'
    done = 'done'
    blocked = 'blocked'


class TodoItem(BaseModel):
    class Config:
        extra = Extra.forbid

    description: str
    status: Status
    owner: Optional[str] = None
    tags: Optional[list[str]] = None
    link: Optional[str] = None


class Todo(BaseModel):
    __root__: list[TodoItem]


class Metadata(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    intent: str
    todo: Optional[Todo] = None


class Infrastructure(BaseModel):
    class Config:
        extra = Extra.forbid

    kind: str = Field('Infrastructure', const=True)
    schema_version: str
    metadata: Metadata
    engine: dict[str, Any]
    source: dict[str, Any]
    contract: Contract
    state: dict[str, Any]
    environments: Optional[dict[str, Any]] = None
