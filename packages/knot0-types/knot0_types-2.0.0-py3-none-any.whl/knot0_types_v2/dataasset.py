# generated by datamodel-codegen:
#   filename:  DataAsset.json

from __future__ import annotations

from enum import Enum
from typing import Any, Optional

from pydantic import BaseModel, Extra, Field


class Contract(BaseModel):
    class Config:
        extra = Extra.forbid

    type: str
    backed_by: Optional[str] = None
    table: Optional[str] = None
    format: Optional[dict[str, Any]] = None


class Severity(Enum):
    critical = 'critical'
    warning = 'warning'
    info = 'info'


class QualityTest(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    expect: str
    severity: Optional[Severity] = None


class Status(Enum):
    pending = 'pending'
    in_progress = 'in-progress'
    done = 'done'
    blocked = 'blocked'


class TodoItem(BaseModel):
    class Config:
        extra = Extra.forbid

    description: str
    status: Status
    owner: Optional[str] = None
    tags: Optional[list[str]] = None
    link: Optional[str] = None


class Todo(BaseModel):
    __root__: list[TodoItem]


class Metadata(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    intent: str
    tags: Optional[list[str]] = None
    todo: Optional[Todo] = None


class DataAsset(BaseModel):
    class Config:
        extra = Extra.forbid

    kind: str = Field('DataAsset', const=True)
    schema_version: str
    metadata: Metadata
    contract: Contract
    quality_tests: Optional[list[QualityTest]] = None
    versions: Optional[dict[str, Any]] = None
