# generated by datamodel-codegen:
#   filename:  Workflow.json

from __future__ import annotations

from enum import Enum
from typing import Any, Optional

from pydantic import BaseModel, Extra, Field, conint, constr


class Contract(BaseModel):
    class Config:
        extra = Extra.forbid

    triggers: Optional[list] = None
    produces: Optional[list] = None


class Body(BaseModel):
    class Config:
        extra = Extra.allow

    let: Optional[dict[str, Any]] = None
    view: Optional[dict[str, Any]] = None


class Workflow1(BaseModel):
    class Config:
        extra = Extra.allow

    steps: Optional[list] = None


class Execution(BaseModel):
    class Config:
        extra = Extra.allow

    workflow: Optional[Workflow1] = None


class BackoffStrategy(Enum):
    fixed = 'fixed'
    linear = 'linear'
    exponential = 'exponential'
    fibonacci = 'fibonacci'


class RunItem(BaseModel):
    class Config:
        extra = Extra.allow

    name: str
    uses: str
    with_: Optional[dict[str, Any]] = Field(None, alias='with')


class OnSucces(BaseModel):
    class Config:
        extra = Extra.allow

    name: str
    uses: str
    with_: Optional[dict[str, Any]] = Field(None, alias='with')


class Status(Enum):
    pending = 'pending'
    in_progress = 'in-progress'
    done = 'done'
    blocked = 'blocked'


class TodoItem(BaseModel):
    class Config:
        extra = Extra.forbid

    description: str
    status: Status
    owner: Optional[str] = None
    tags: Optional[list[str]] = None
    link: Optional[str] = None


class Todo(BaseModel):
    __root__: list[TodoItem]


class Duration(BaseModel):
    __root__: constr(regex=r'^(?:[0-9]+(?:\.[0-9]+)?)(ms|s|m|h|d)$')


class Metadata(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    intent: Optional[str] = None
    todo: Optional[Todo] = None


class Retry(BaseModel):
    class Config:
        extra = Extra.forbid

    max_attempts: Optional[conint(ge=0, le=100)] = None
    delay: Optional[Duration] = None
    backoff_strategy: Optional[BackoffStrategy] = None
    max_delay: Optional[Duration] = None
    jitter: Optional[bool] = None
    conditions: Optional[list[str]] = None


class OnFailure(BaseModel):
    class Config:
        extra = Extra.forbid

    retry: Optional[Retry] = None
    run: Optional[list[RunItem]] = None


class Workflow(BaseModel):
    class Config:
        extra = Extra.forbid

    kind: str = Field('Workflow', const=True)
    schema_version: str
    metadata: Metadata
    contract: Optional[Contract] = None
    tests: Optional[list] = None
    body: Body
    execution: Optional[Execution] = None
    on_failure: Optional[OnFailure] = None
    on_success: Optional[list[OnSucces]] = None
