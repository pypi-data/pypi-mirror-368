# generated by datamodel-codegen:
#   filename:  Component.json

from __future__ import annotations

from enum import Enum
from typing import Any, Optional, Union

from pydantic import BaseModel, Extra, Field, conint, constr


class Platform(BaseModel):
    class Config:
        extra = Extra.forbid

    minimum: Optional[str] = None
    maximum: Optional[str] = None


class Runner(Enum):
    python = 'python'
    wasm_polyglot = 'wasm-polyglot'
    docker = 'docker'
    browser = 'browser'


class Requires(BaseModel):
    class Config:
        extra = Extra.forbid

    features: Optional[list[str]] = None
    platform: Optional[Platform] = None
    runners: Optional[list[Runner]] = None
    capabilities: Optional[list[str]] = None


class Contract(BaseModel):
    class Config:
        extra = Extra.forbid

    inputs: Optional[dict[str, Any]] = None
    outputs: Optional[dict[str, Any]] = None


class Capabilities(BaseModel):
    class Config:
        extra = Extra.forbid

    required: Optional[list[str]] = None
    optional: Optional[list[str]] = None


class Secret(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    mount_path: str
    provider: Optional[str] = None


class Network(BaseModel):
    class Config:
        extra = Extra.forbid

    egress: Optional[list[dict[str, Any]]] = None
    ingress: Optional[list[dict[str, Any]]] = None


class Resources(BaseModel):
    class Config:
        extra = Extra.forbid

    memory: Optional[str] = None
    cpu: Optional[str] = None
    timeout: Optional[str] = None


class Permissions(BaseModel):
    class Config:
        extra = Extra.forbid

    capabilities: Optional[Capabilities] = None
    secrets: Optional[list[Secret]] = None
    network: Optional[Network] = None
    resources: Optional[Resources] = None


class Dependencies(BaseModel):
    class Config:
        extra = Extra.forbid

    file: Optional[str] = None


class BackoffStrategy(Enum):
    fixed = 'fixed'
    linear = 'linear'
    exponential = 'exponential'
    fibonacci = 'fibonacci'


class RunItem(BaseModel):
    class Config:
        extra = Extra.allow

    name: str
    uses: str
    with_: Optional[dict[str, Any]] = Field(None, alias='with')


class OnSucces(BaseModel):
    class Config:
        extra = Extra.allow

    name: str
    uses: str
    with_: Optional[dict[str, Any]] = Field(None, alias='with')


class Status(Enum):
    pending = 'pending'
    in_progress = 'in-progress'
    done = 'done'
    blocked = 'blocked'


class TodoItem(BaseModel):
    class Config:
        extra = Extra.forbid

    description: str
    status: Status
    owner: Optional[str] = None
    tags: Optional[list[str]] = None
    link: Optional[str] = None


class Todo(BaseModel):
    __root__: list[TodoItem]


class Duration(BaseModel):
    __root__: constr(regex=r'^(?:[0-9]+(?:\.[0-9]+)?)(ms|s|m|h|d)$')


class Metadata(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    intent: Optional[str] = None
    tags: Optional[list[str]] = None
    todo: Optional[Todo] = None


class Retry(BaseModel):
    class Config:
        extra = Extra.forbid

    max_attempts: Optional[conint(ge=0, le=100)] = None
    delay: Optional[Duration] = None
    backoff_strategy: Optional[BackoffStrategy] = None
    max_delay: Optional[Duration] = None
    jitter: Optional[bool] = None
    conditions: Optional[list[str]] = None


class OnFailure(BaseModel):
    class Config:
        extra = Extra.forbid

    retry: Optional[Retry] = None
    run: Optional[list[RunItem]] = None


class Execution(BaseModel):
    class Config:
        extra = Extra.forbid

    runner: Runner
    run: Optional[Union[str, dict[str, Any]]] = None
    dependencies: Optional[Dependencies] = None
    on_failure: Optional[OnFailure] = None
    on_success: Optional[list[OnSucces]] = None


class Body(BaseModel):
    class Config:
        extra = Extra.forbid

    execution: Execution


class Component(BaseModel):
    class Config:
        extra = Extra.forbid

    kind: str = Field('Component', const=True)
    schema_version: str
    metadata: Metadata
    requires: Optional[Requires] = None
    contract: Contract
    permissions: Optional[Permissions] = None
    telemetry: Optional[dict[str, Any]] = None
    benchmarks: Optional[list] = None
    tests: Optional[list] = None
    compute: Optional[Union[str, dict[str, Any]]] = None
    body: Body
