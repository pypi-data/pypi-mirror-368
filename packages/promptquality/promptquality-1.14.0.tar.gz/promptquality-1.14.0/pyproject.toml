[project]
name = "promptquality"
version = "1.14.0"
description = "ðŸ¦¸ Supercharge your prompts with Galileo Evaluate!"
authors = [{ name = "Galileo Technologies Inc.", email = "team@rungalileo.io" }]
readme = "README.md"
license = "Apache-2.0"
keywords = ["prompt", "nlp", "llm", "quality", "language_models", "galileo"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: Pydantic",
    "License :: OSI Approved :: Apache Software License",
    "Framework :: IPython",
    "Framework :: Jupyter",
    "Framework :: Jupyter :: JupyterLab",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dynamic = ["dependencies"]
requires-python = ">=3.9"

[project.urls]
homepage = "https://www.galileo.ai/"
documentation = "https://promptquality.docs.galileo.ai/"
# Hide the repository URL from PyPI since it's not public.
# repository = "https://github.com/rungalileo/promptquality"

[tool.poetry.dependencies]
python = "^3.9"
requests = "^2.32.4"
pydantic = "^2.11.7"
pydantic-settings = "^2.10.1"
tqdm = "^4.65.0"
pyjwt = "^2.10.1"
galileo-core = "^3.62.0"
pyarrow = { version = ">=18,<22", optional = true }
langchain-core = { version = "^0.3.55", optional = true }
langchain-community = { version = "^0.3.14", optional = true }


[tool.poetry.extras]
arrow = ["pyarrow"]
langchain = ["langchain-core", "langchain-community"]
all = ["pyarrow", "langchain-core", "langchain-community"]


[tool.poetry.group.test.dependencies]
pytest = "^8.4"
coverage = "^7.9.1"
pytest-cov = "^6.2.1"
pytest-xdist = "^3.7.0"
requests-mock = "^1.11.0"
pytest-socket = "^0.7.0"
galileo-core = { extras = ["testing"], version = "^3.55.0" }


[tool.poetry.group.dev.dependencies]
mypy = "^1.16.1"
pre-commit = "^4.0.0"
types-requests = "^2.32.4.20250611"
types-tqdm = "^4.67.0.20250417"
pydantic = { extras = ["mypy"], version = "^2.11.7" }


[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.0"
mkdocstrings = "^0.30.0"
mkdocstrings-python = "^1.16.11"
mkdocs-material = "^9.6.16"
griffe-fieldz = "^0.2.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Test.
[tool.pytest.ini_options]
pythonpath = ["./src/"]
addopts = [
    # Run tests in parallel.
    "-n",
    "auto",
    # Show local variables in tracebacks.
    "--showlocals",
    # Show extra test summary info as specified by chars.
    "-o",
    "console_output_style=progress",
    # Disable warnings.
    "--disable-warnings",
    # Show slowest 10 test durations.
    "--durations=10",
    # Disable internet access.
    "--disable-socket",
    # Enable local socket access.
    "--allow-hosts=127.0.0.1,localhost",
]

# Linters and formatters.
[tool.ruff]
line-length = 120
fix = true

[tool.ruff.format]
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "I", "UP", "ASYNC"]
ignore = []

[tool.ruff.lint.isort]
known-first-party = ["galileo_core"]
split-on-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.docformatter]
style = "numpy"
recursive = true
wrap-summaries = 120
wrap-descriptions = 120

[tool.mypy]
mypy_path = ["src"]
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]

# Release.
[tool.semantic_release]
version_variables = ["src/promptquality/__init__.py:__version__"]
version_toml = ["pyproject.toml:project.version"]
version_source = "tag"
commit_message = "chore(release): v{version}\n\nAutomatically generated by python-semantic-release"

[tool.semantic_release.commit_parser_options]
# Release patch version on these tags,
# https://python-semantic-release.readthedocs.io/en/latest/configuration.html#commit-parser-options-dict-str-any
patch_tags = ["fix", "perf", "chore", "docs", "style", "refactor"]
