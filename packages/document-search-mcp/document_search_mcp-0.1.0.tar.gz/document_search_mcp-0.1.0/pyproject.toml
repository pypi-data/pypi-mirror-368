[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "document-search-mcp"
version = "0.1.0"
description = "Document Search MCP Server with extensible plugin architecture"
authors = [
    { name = "Document Search MCP", email = "admin@example.com" }
]
keywords = ["mcp", "document-search", "google-drive", "confluence", "claude", "ai"]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # MCP SDK
    "mcp>=1.0.0",
    
    # Document source connectors
    "google-api-python-client>=2.100.0",
    "google-auth>=2.20.0",
    "google-auth-oauthlib>=1.0.0",
    "google-auth-httplib2>=0.2.0",
    "atlassian-python-api>=3.40.0",
    
    # Search and embeddings
    "sentence-transformers>=2.2.0",
    "faiss-cpu>=1.7.4",
    "elasticsearch>=8.10.0",
    
    # HTTP and async
    "httpx>=0.25.0",
    "aiohttp>=3.8.0",
    "aiofiles>=23.0.0",
    
    # Configuration and utilities
    "pyyaml>=6.0",
    "pydantic>=2.0.0",
    "click>=8.1.0",
    "python-dotenv>=1.0.0",
    
    # Logging and monitoring
    "structlog>=23.0.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    
    # Type checking and linting
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    
    # Type stubs
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
    
    # Security scanning
    "safety>=2.0.0",
    "bandit>=1.7.0",
    
    # Pre-commit hooks
    "pre-commit>=3.0.0",
    
    # Documentation
    "sphinx>=7.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]

search-engines = [
    # Alternative search engines
    "typesense>=0.25.0",
    "pinecone-client>=2.2.0",
    "weaviate-client>=3.25.0",
]

[project.scripts]
document-search-mcp = "src.main:main"

[project.urls]
Homepage = "https://github.com/your-org/document-search-mcp"
Documentation = "https://github.com/your-org/document-search-mcp/docs"
Repository = "https://github.com/your-org/document-search-mcp"
Issues = "https://github.com/your-org/document-search-mcp/issues"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "google.*",
    "googleapiclient.*",
    "google_auth_oauthlib.*",
    "mcp.*",
    "yaml",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B006",  # do not use mutable data structures for argument defaults
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err`
    "F841",  # Local variable is assigned to but never used
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]  # Allow unused arguments and assert statements in tests

[tool.black]
target-version = ["py311"]
line-length = 100
include = "\\.pyi?$"
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
'''

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]