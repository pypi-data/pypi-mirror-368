Metadata-Version: 2.4
Name: deepseek-mcp-client
Version: 1.0.0
Summary: Cliente para conectar modelos DeepSeek con servidores MCP
Home-page: https://github.com/CarlosMaroRuiz/deepseek-mcp-client
Author: Carlos Ruiz
Author-email: car06ma15@gmail.com
Project-URL: Bug Tracker, https://github.com/CarlosMaroRuiz/deepseek-mcp-client/issues
Project-URL: Documentation, https://github.com/CarlosMaroRuiz/deepseek-mcp-client#readme
Project-URL: Source Code, https://github.com/CarlosMaroRuiz/deepseek-mcp-client
Keywords: deepseek,mcp,client,ai,llm,model context protocol,tools,agent,language model,fastmcp
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: requests>=2.31.0
Requires-Dist: mcp>=1.0.0
Requires-Dist: uvicorn>=0.32.1
Requires-Dist: openai>=1.67.0
Requires-Dist: httpx
Requires-Dist: fastmcp
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: isort; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx; extra == "docs"
Requires-Dist: sphinx-rtd-theme; extra == "docs"
Provides-Extra: test
Requires-Dist: pytest; extra == "test"
Requires-Dist: pytest-asyncio; extra == "test"
Requires-Dist: pytest-cov; extra == "test"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: project-url
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# üöÄ DeepSeek MCP Client - Versi√≥n Mejorada

<div align="center">
  <p><em>Cliente para conectar modelos DeepSeek con servidores MCP</em></p>
  <p><strong>soporte  para STDIO, HTTP, in-memory, message handlers y progress monitoring(testing)</strong></p>
  
  <img src="https://img.shields.io/badge/version-2.0.0-blue?style=for-the-badge" alt="Version"/>
  <img src="https://img.shields.io/badge/transport-HTTP%20%7C%20STDIO%20%7C%20Memory-green?style=for-the-badge" alt="Transport"/>
  <img src="https://img.shields.io/badge/monitoring-Progress%20%7C%20Logging-orange?style=for-the-badge" alt="Monitoring"/>
</div>

---

## Caracter√≠sticas

### üîå **Soporte Completo de Transporte**
- **HTTP/HTTPS**: Para servidores remotos y en producci√≥n
- **STDIO**: Para servidores locales con control completo del entorno
- **In-Memory**: Para testing y desarrollo r√°pido
- **Configuraci√≥n Mixta**: Combina m√∫ltiples tipos de transporte

### üìä **Monitoreo Avanzado**
- **Progress Monitoring**: Seguimiento en tiempo real de operaciones largas
- **Message Handlers**: Manejo autom√°tico de notificaciones del servidor
- **Logging Integrado**: Sistema de logs estructurado con niveles configurables
- **Cache Inteligente**: Actualizaci√≥n autom√°tica cuando cambian las herramientas

### ‚öôÔ∏è **Configuraci√≥n Flexible**
- **Auto-detecci√≥n**: Identifica autom√°ticamente el tipo de transporte
- **Variables de Entorno**: Manejo seguro de credenciales y configuraci√≥n
- **Timeout Personalizable**: Control fino sobre timeouts de conexi√≥n
- **Manejo de Errores**: Recuperaci√≥n robusta ante fallos

---

## üì¶ Instalaci√≥n

```bash
# Clonar el repositorio
git clone https://github.com/CarlosMaroRuiz/deepseek-mcp-client.git
cd deepseek-mcp-client

# Instalar dependencias actualizadas
pip install -r requirements.txt
```

## ‚öôÔ∏è Configuraci√≥n

```bash
# Copiar archivo de configuraci√≥n
cp example.env .env

# Editar con tu API key
DEEPSEEK_API_KEY=tu_api_key_aqu√≠
```

---

## üöÄ Uso - Ejemplos Completos

### 1. üåê **Configuraci√≥n HTTP Simple**

```python
from deepseek_mcp_client import DeepSeekClient
import asyncio

# Servidores HTTP remotos
agent = DeepSeekClient(
    model='deepseek-chat',
    system_prompt='Eres un asistente especializado en e-commerce.',
    mcp_servers=[
        'http://localhost:8000/mcp/',  # MercadoLibre MCP
        'http://localhost:8001/mcp/'   # LaTeX MCP
    ],
    enable_logging=True,
    enable_progress=True
)

async def main():
    result = await agent.execute('Busca laptops gaming econ√≥micas')
    print(f"Resultado: {result.output}")
    print(f"Herramientas usadas: {result.tools_used}")
    print(f"Duraci√≥n: {result.metadata.get('duration'):.2f}s")

asyncio.run(main())
```

### 2. üíª **Configuraci√≥n STDIO (Servidores Locales)**

```python
# Servidores locales con variables de entorno
agent = DeepSeekClient(
    model='deepseek-chat',
    system_prompt='Eres un asistente con herramientas locales.',
    mcp_servers=[
        {
            'command': 'python',
            'args': ['mercadolibre_server.py'],
            'env': {
                'LOG_LEVEL': 'DEBUG',
                'API_TIMEOUT': '30'
            },
            'cwd': './servers/',
            'keep_alive': True
        },
        {
            'command': 'node',
            'args': ['weather_server.js', '--port', '3000'],
            'env': {
                'WEATHER_API_KEY': 'tu_api_key_aqu√≠'
            }
        }
    ],
    enable_logging=True,
    log_level="DEBUG"
)
```

### 3. üîÄ **Configuraci√≥n Mixta (M√∫ltiples Transportes)**

```python
from fastmcp import FastMCP

# Crear servidor en memoria para testing
test_server = FastMCP("Calculator")

@test_server.tool
def calculate(expression: str) -> str:
    """Calculadora simple"""
    try:
        result = eval(expression)  # Solo para demo - usar math.eval en producci√≥n
        return f"Resultado: {result}"
    except Exception as e:
        return f"Error: {str(e)}"

# Cliente con m√∫ltiples tipos de transporte
agent = DeepSeekClient(
    model='deepseek-chat',
    system_prompt='Asistente con m√∫ltiples herramientas.',
    mcp_servers=[
        'http://localhost:8000/mcp/',     # HTTP: Servidor remoto
        {                                 # STDIO: Servidor local
            'command': 'python',
            'args': ['local_server.py'],
            'env': {'DEBUG': 'true'}
        },
        test_server                       # In-Memory: Calculadora
    ]
)
```

### 4. ‚öôÔ∏è **Configuraci√≥n Avanzada con MCPServerConfig**

```python
from deepseek_mcp_client import MCPServerConfig

# Configuraci√≥n detallada para servidor HTTP
mercadolibre_config = MCPServerConfig(
    url='http://localhost:8000/mcp/',
    headers={
        'Authorization': 'Bearer tu-token-aqui',
        'X-Client-Version': '1.0.0'
    },
    transport_type='http',
    timeout=45.0
)

# Configuraci√≥n detallada para servidor STDIO
analyzer_config = MCPServerConfig(
    command='python',
    args=['data_analyzer.py', '--mode', 'production'],
    env={
        'DATABASE_URL': 'postgresql://...',
        'LOG_LEVEL': 'INFO'
    },
    cwd='./analytics/',
    keep_alive=True,
    timeout=60.0
)

agent = DeepSeekClient(
    model='deepseek-chat',
    system_prompt='Analista de datos especializado.',
    mcp_servers=[mercadolibre_config, analyzer_config],
    enable_logging=True,
    enable_progress=True
)
```

---

## üìä **Monitoreo y Logging**

### **Progress Monitoring en Tiempo Real**

```python
# El cliente autom√°ticamente muestra progreso de operaciones largas
agent = DeepSeekClient(
    model='deepseek-chat',
    system_prompt='Asistente con operaciones largas.',
    mcp_servers=['http://localhost:8000/mcp/'],
    enable_progress=True,  # Habilitar monitoreo de progreso
    enable_logging=True,   # Habilitar logging detallado
    log_level="INFO"       # Nivel de logging
)

# Durante la ejecuci√≥n ver√°s logs como:
# üìä Progreso: 25.0% - Procesando datos...
# üîß tool_name: 50.0% - Analizando resultados...
# üìä Progreso: 100.0% - Completado
```

### **Message Handlers Autom√°ticos**

```python
# El cliente autom√°ticamente maneja:
# - Cambios en listas de herramientas
# - Actualizaciones de recursos
# - Notificaciones de progreso
# - Mensajes de log del servidor

# Logs autom√°ticos:
# üîÑ Lista de herramientas actualizada
# üîÑ Lista de recursos actualizada
# üîÑ Refrescando cache de herramientas...
```

---

## üõ†Ô∏è **Casos de Uso Avanzados**

### **1. E-commerce con An√°lisis Local**

```python
agent = DeepSeekClient(
    model='deepseek-chat',
    system_prompt='Analista de e-commerce con herramientas web y locales.',
    mcp_servers=[
        'http://localhost:8000/mcp/',  # B√∫squeda en MercadoLibre
        {                              # An√°lisis de datos local
            'command': 'python',
            'args': ['analytics_server.py'],
            'env': {'DATABASE_URL': 'sqlite:///products.db'}
        }
    ]
)

result = await agent.execute('''
Busca las 10 laptops m√°s vendidas en MercadoLibre,
analiza sus precios hist√≥ricamente en mi base de datos local,
y genera un reporte de tendencias.
''')
```

### **2. Generaci√≥n de Documentos Cient√≠ficos**

```python
agent = DeepSeekClient(
    model='deepseek-chat',
    system_prompt='Asistente para investigaci√≥n cient√≠fica.',
    mcp_servers=[
        'http://localhost:8001/mcp/',  # LaTeX MCP
        {                              # Procesador de datos cient√≠ficos
            'command': 'python',
            'args': ['scientific_processor.py'],
            'env': {
                'PYTHON_PATH': './scientific_libs/',
                'MATPLOTLIB_BACKEND': 'Agg'
            }
        }
    ]
)

result = await agent.execute('''
Analiza los datos del archivo experimental.csv,
genera gr√°ficos estad√≠sticos,
y crea un paper en LaTeX con los resultados.
''')
```

### **3. Sistema de Trading Automatizado**

```python
trading_config = MCPServerConfig(
    command='python',
    args=['trading_server.py', '--mode', 'live'],
    env={
        'BROKER_API_KEY': os.environ.get('BROKER_API_KEY'),
        'RISK_LEVEL': 'conservative',
        'MAX_POSITION_SIZE': '1000'
    },
    timeout=30.0
)

agent = DeepSeekClient(
    model='deepseek-chat',
    system_prompt='Asistente de trading con gesti√≥n de riesgo.',
    mcp_servers=[
        'http://localhost:8002/mcp/',  # Datos de mercado
        trading_config                 # Servidor de trading local seguro
    ]
)
```

---

## üõ°Ô∏è **Manejo de Errores y Recuperaci√≥n**

```python
async def ejemplo_robusto():
    agent = DeepSeekClient(
        model='deepseek-chat',
        system_prompt='Asistente resiliente.',
        mcp_servers=[
            'http://localhost:8000/mcp/',      # Servidor que funciona
            'http://localhost:9999/mcp/',      # Servidor inexistente
            {'command': 'python', 'args': ['bad_server.py']}  # Archivo inexistente
        ]
    )
    
    try:
        result = await agent.execute('Hola')
        
        if result.success:
            print(f"‚úÖ Respuesta: {result.output}")
            print(f"üîß Servidores conectados: {result.metadata.get('servers_connected')}")
        else:
            print(f"‚ùå Error: {result.error}")
    
    except Exception as e:
        print(f"üí• Error cr√≠tico: {e}")
    
    finally:
        await agent.close()  # Limpieza autom√°tica
```

---

## üìà **An√°lisis de Rendimiento**

```python
# Metadata detallada en cada resultado
result = await agent.execute('Tu consulta')

print(f"Duraci√≥n total: {result.metadata.get('duration'):.2f}s")
print(f"Herramientas ejecutadas: {result.metadata.get('tools_executed')}")
print(f"Servidores conectados: {result.metadata.get('servers_connected')}")
print(f"Tipos de transporte: {result.metadata.get('transport_types')}")
print(f"ID de ejecuci√≥n: {result.execution_id}")
```

---

## üîß **Servidores MCP Compatibles**

### **Servidores de Producci√≥n**
- **[MercadoLibre MCP](https://github.com/CarlosMaroRuiz/MCP_MERCADOLIBRE)**: B√∫squeda y an√°lisis de productos
- **[LaTeX MCP](https://github.com/CarlosMaroRuiz/MCP_LATEX_BASIC)**: Generaci√≥n de documentos PDF
- **Brave Search MCP**: B√∫squeda web con API de Brave
- **Weather MCP**: Datos meteorol√≥gicos

### **Servidores de Desarrollo**
- **FastMCP Test Servers**: Servidores en memoria para testing
- **Local File MCP**: Procesamiento de archivos locales
- **Database MCP**: Conexi√≥n a bases de datos

  
 
</div>
