{"version":3,"file":"Organizations-goc1WR0U.js","sources":["../../src/apps/console/views/Organizations.vue"],"sourcesContent":["<template>\n  <BaseLayout>\n    <template #navbar>\n      <Navbar :breadcrumb=\"breadcrumb\" />\n    </template>\n    <template #content>\n      <ContentLayout>\n        <CrudView\n          entity-name=\"organization\"\n          :loading=\"loading\"\n          title=\"My organizations\"\n          description=\"An organization is your companyâ€™s account. Manage editors, projects and billing.\"\n          create-button-text=\"Create Organization\"\n          empty-title=\"No organizations here yet\"\n          :table=\"table\"\n          :fields=\"fields\"\n          :create=\"createOrganization\"\n        />\n      </ContentLayout>\n    </template>\n  </BaseLayout>\n  <AntModal\n    :open=\"renamingState.state === 'renaming'\"\n    title=\"Rename organization\"\n    @cancel=\"finishRenamingOrganization(false)\"\n    @ok=\"finishRenamingOrganization(true)\"\n  >\n    <AntForm v-if=\"renamingState.state === 'renaming'\" layout=\"vertical\">\n      <AntFormItem label=\"New name\">\n        <AntInput v-model:value=\"renamingState.newName\" />\n      </AntFormItem>\n    </AntForm>\n  </AntModal>\n</template>\n\n<script lang=\"ts\" setup>\nimport Navbar from '@/apps/console/components/workspace/Navbar.vue';\nimport BaseLayout from '@/components/BaseLayout.vue';\nimport ContentLayout from '@/components/ContentLayout.vue';\nimport { CreationFields } from '@/components/inputs/CreationModal.vue';\nimport CrudView, { CrudTable } from '@/components/inputs/CrudView.vue';\nimport { asyncComputed } from '@/utils/asyncComputed';\nimport { PhArrowSquareOut, PhPencil } from '@phosphor-icons/vue';\nimport {\n  Form as AntForm,\n  FormItem as AntFormItem,\n  Input as AntInput,\n  Modal as AntModal,\n} from 'ant-design-vue';\nimport { computed, ref } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { OrganizationModel } from '../apis/cloud';\n\nconst breadcrumb = [\n  {\n    label: 'My organizations',\n    path: '/organizations',\n  },\n];\n\nconst fields: CreationFields = [\n  {\n    key: 'name',\n    label: 'Organization Name',\n  },\n];\n\nconst router = useRouter();\nconst { loading, result: organizations, refetch } = asyncComputed(() => OrganizationModel.list());\n\nconst goToOrganization = ({ key }: { key: string }) => {\n  router.push({ name: 'organization', params: { organizationId: key } });\n};\n\ntype RenamingState =\n  | {\n      state: 'idle';\n    }\n  | {\n      state: 'renaming';\n      organizationId: string;\n      newName: string;\n    };\nconst renamingState = ref<RenamingState>({ state: 'idle' });\nfunction startRenamingOrganization(organization: OrganizationModel) {\n  renamingState.value = {\n    state: 'renaming',\n    organizationId: organization.id,\n    newName: organization.name,\n  };\n}\nasync function finishRenamingOrganization(save: boolean) {\n  if (renamingState.value.state === 'renaming' && save) {\n    const { organizationId, newName } = renamingState.value;\n    await OrganizationModel.rename(organizationId, newName);\n    refetch();\n  }\n  renamingState.value = { state: 'idle' };\n}\n\nconst createOrganization = async (values: Record<string, any>) => {\n  const organization = await OrganizationModel.create(values.name);\n  goToOrganization({ key: organization.id });\n};\n\nconst table = computed(() => ({\n  columns: [\n    { title: 'Organization Name', align: 'left' },\n    { title: 'Path' },\n    { title: '', align: 'right' },\n  ] satisfies CrudTable['columns'],\n  rows:\n    organizations.value?.map((organization) => ({\n      key: organization.id,\n      cells: [\n        {\n          type: 'link',\n          text: organization.name,\n          to: `/organizations/${encodeURIComponent(organization.id)}`,\n        },\n        {\n          type: 'text',\n          text: organization.id ?? null,\n        },\n        {\n          type: 'actions',\n          actions: [\n            {\n              icon: PhArrowSquareOut,\n              label: 'Go to projects',\n              onClick: goToOrganization,\n            },\n            {\n              icon: PhPencil,\n              label: 'Rename',\n              onClick: () => startRenamingOrganization(organization),\n            },\n          ],\n        },\n      ] satisfies CrudTable['rows'][number]['cells'],\n    })) ?? [],\n}));\n</script>\n"],"names":["breadcrumb","fields","router","useRouter","loading","organizations","refetch","asyncComputed","OrganizationModel","goToOrganization","key","renamingState","ref","startRenamingOrganization","organization","finishRenamingOrganization","save","organizationId","newName","createOrganization","values","table","computed","PhArrowSquareOut","PhPencil"],"mappings":"ukDAqDA,MAAMA,EAAa,CACjB,CACE,MAAO,mBACP,KAAM,gBAAA,CACR,EAGIC,EAAyB,CAC7B,CACE,IAAK,OACL,MAAO,mBAAA,CACT,EAGIC,EAASC,EAAA,EACT,CAAE,QAAAC,EAAS,OAAQC,EAAe,QAAAC,CAAA,EAAYC,EAAc,IAAMC,EAAkB,MAAM,EAE1FC,EAAmB,CAAC,CAAE,IAAAC,KAA2B,CACrDR,EAAO,KAAK,CAAE,KAAM,eAAgB,OAAQ,CAAE,eAAgBQ,CAAA,EAAO,CACvE,EAWMC,EAAgBC,EAAmB,CAAE,MAAO,OAAQ,EAC1D,SAASC,EAA0BC,EAAiC,CAClEH,EAAc,MAAQ,CACpB,MAAO,WACP,eAAgBG,EAAa,GAC7B,QAASA,EAAa,IAAA,CAE1B,CACA,eAAeC,EAA2BC,EAAe,CACvD,GAAIL,EAAc,MAAM,QAAU,YAAcK,EAAM,CACpD,KAAM,CAAE,eAAAC,EAAgB,QAAAC,CAAA,EAAYP,EAAc,MAClD,MAAMH,EAAkB,OAAOS,EAAgBC,CAAO,EACtDZ,EAAA,CACF,CACAK,EAAc,MAAQ,CAAE,MAAO,MAAA,CACjC,CAEA,MAAMQ,EAAqB,MAAOC,GAAgC,CAChE,MAAMN,EAAe,MAAMN,EAAkB,OAAOY,EAAO,IAAI,EAC/DX,EAAiB,CAAE,IAAKK,EAAa,EAAA,CAAI,CAC3C,EAEMO,EAAQC,EAAS,KAAO,CAC5B,QAAS,CACP,CAAE,MAAO,oBAAqB,MAAO,MAAA,EACrC,CAAE,MAAO,MAAA,EACT,CAAE,MAAO,GAAI,MAAO,OAAA,CAAQ,EAE9B,KACEjB,EAAc,OAAO,IAAKS,IAAkB,CAC1C,IAAKA,EAAa,GAClB,MAAO,CACL,CACE,KAAM,OACN,KAAMA,EAAa,KACnB,GAAI,kBAAkB,mBAAmBA,EAAa,EAAE,CAAC,EAAA,EAE3D,CACE,KAAM,OACN,KAAMA,EAAa,IAAM,IAAA,EAE3B,CACE,KAAM,UACN,QAAS,CACP,CACE,KAAMS,EACN,MAAO,iBACP,QAASd,CAAA,EAEX,CACE,KAAMe,EACN,MAAO,SACP,QAAS,IAAMX,EAA0BC,CAAY,CAAA,CACvD,CACF,CACF,CACF,EACA,GAAK,CAAA,CAAC,EACV"}