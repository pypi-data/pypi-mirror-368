{"version":3,"file":"tables-BsqTY_wE.js","sources":["../../src/apps/console/apis/cloud/columns.ts","../../src/apps/console/apis/cloud/tables.ts"],"sourcesContent":["import { CloudApiGateway } from '@/apps/console/apis/cloud/gateway';\nimport { EditableRecord } from '@/utils/record';\nimport { z } from 'zod';\nimport { PGType, pgTypes } from './tables';\n\nconst PatchClientColumnBody = z.object({\n  name: z.string().optional(),\n  unique: z.boolean().optional(),\n  nullable: z.boolean().optional(),\n  type: z\n    .object({\n      newType: z.string(),\n      using: z.string(),\n    })\n    .optional(),\n  default: z.string().optional(),\n  foreignKey: z\n    .object({\n      columnId: z.string(),\n    })\n    .nullish()\n    .optional(),\n});\ntype UpdateColumnParams = z.infer<typeof PatchClientColumnBody>;\n\nconst pgTypeAliases = {\n  boolean: ['boolean', 'bool'],\n  int: ['int', 'integer', 'int4'],\n  varchar: ['varchar', 'character varying', 'text'],\n  json: ['json'],\n  date: ['date'],\n  timestamp: ['timestamp'],\n  uuid: ['uuid'],\n  real: ['real', 'float4', 'float8'],\n} satisfies Record<PGType, string[]>;\n\nconst findPGType = (type: string): PGType => {\n  for (const pgType of pgTypes) {\n    if (pgTypeAliases[pgType].includes(type)) {\n      return pgType;\n    }\n  }\n  throw new Error(`Unknown type: ${type}`);\n};\n\nclass ColumnsApi {\n  async create(values: {\n    tableId: string;\n    projectId: string;\n    name: string;\n    type: PGType;\n    default: string;\n    nullable: boolean;\n    unique: boolean;\n    foreignKey?: {\n      columnId: string;\n    };\n  }): Promise<ColumnDTO | { error: string }> {\n    return CloudApiGateway.post(\n      `projects/${values.projectId}/tables/${values.tableId}/columns`,\n      values,\n    );\n  }\n\n  async delete(value: { projectId: string; tableId: string; id: string }): Promise<void> {\n    return CloudApiGateway.delete(\n      `projects/${value.projectId}/tables/${value.tableId}/columns/${value.id}`,\n    );\n  }\n\n  async update(\n    value: { projectId: string; tableId: string; id: string },\n    changes: UpdateColumnParams,\n  ) {\n    return CloudApiGateway.patch(\n      `projects/${value.projectId}/tables/${value.tableId}/columns/${value.id}`,\n      changes,\n    );\n  }\n\n  async getById(value: { projectId: string; id: string }): Promise<{ column: ColumnDTO }> {\n    return CloudApiGateway.get(`projects/${value.projectId}/columns/${value.id}`);\n  }\n}\n\nconst columnsApi = new ColumnsApi();\n\nexport type ColumnDTO = {\n  name: string;\n  type: PGType;\n  nullable: boolean;\n  default: string;\n  primaryKey: boolean;\n  id: string;\n  tableId: string;\n  unique: boolean;\n  protected: boolean;\n  projectId: string;\n  foreignKey: {\n    columnId: string;\n  } | null;\n};\n\nexport class ColumnModel {\n  public record: EditableRecord<ColumnDTO>;\n\n  private constructor(dto: ColumnDTO) {\n    this.record = EditableRecord.from(dto);\n  }\n\n  static async create(\n    name: string,\n    type: PGType,\n    defaultValue: string,\n    nullable: boolean,\n    unique: boolean,\n    tableId: string,\n    projectId: string,\n    foreignKey?: {\n      columnId: string;\n    },\n  ) {\n    const dto = await columnsApi.create({\n      name,\n      type,\n      default: defaultValue,\n      nullable,\n      unique,\n      tableId,\n      projectId,\n      foreignKey,\n    });\n\n    if ('error' in dto) {\n      return dto;\n    }\n\n    return new ColumnModel(dto);\n  }\n\n  async update(using: string): Promise<{ success: boolean; error: string }> {\n    const changes: UpdateColumnParams = {\n      ...this.record.changes,\n      type:\n        this.record.changes.type && using\n          ? {\n              newType: this.record.changes.type,\n              using,\n            }\n          : undefined,\n    };\n    if (Object.keys(changes).length === 0 || !this.id) {\n      return {\n        success: true,\n        error: '',\n      };\n    }\n\n    await columnsApi.update(\n      {\n        id: this.id,\n        tableId: this.tableId,\n        projectId: this.projectId,\n      },\n      changes,\n    );\n\n    return {\n      success: true,\n      error: '',\n    };\n  }\n\n  static fromDTO = (dto: ColumnDTO) => {\n    return new ColumnModel(dto);\n  };\n\n  static fromID = async (projectId: string, id: string) => {\n    const dto = await columnsApi.getById({ projectId, id });\n    return ColumnModel.fromDTO(dto.column);\n  };\n\n  toDTO(): ColumnDTO {\n    return this.record.state;\n  }\n\n  get id(): string | undefined {\n    return this.record.get('id');\n  }\n\n  get tableId(): string {\n    return this.record.get('tableId');\n  }\n\n  get projectId(): string {\n    return this.record.get('projectId');\n  }\n\n  get protected(): boolean {\n    return this.record.get('protected');\n  }\n\n  get type(): PGType {\n    const pgType = findPGType(this.record.get('type'));\n    return pgType;\n  }\n\n  set type(value: PGType) {\n    this.record.set('type', value);\n  }\n\n  get name(): string {\n    return this.record.get('name');\n  }\n\n  set name(value: string) {\n    this.record.set('name', value);\n  }\n\n  get nullable(): boolean {\n    return this.record.get('nullable');\n  }\n\n  set nullable(value: boolean) {\n    this.record.set('nullable', value);\n  }\n\n  get unique(): boolean {\n    return this.record.get('unique');\n  }\n\n  set unique(value: boolean) {\n    this.record.set('unique', value);\n  }\n\n  get primaryKey() {\n    return this.record.get('primaryKey');\n  }\n\n  get default() {\n    return this.record.get('default')?.split('::')[0];\n  }\n\n  set default(value: string) {\n    this.record.set('default', value);\n  }\n\n  get foreignKey() {\n    return this.record.get('foreignKey');\n  }\n\n  set foreignKey(value: { columnId: string } | null) {\n    this.record.set('foreignKey', value);\n  }\n\n  async delete(): Promise<void> {\n    if (this.id) {\n      await columnsApi.delete({\n        id: this.id,\n        tableId: this.tableId,\n        projectId: this.projectId,\n      });\n    }\n  }\n}\n","import { CloudApiGateway } from '@/apps/console/apis/cloud/gateway';\nimport { EditableRecord } from '@/utils/record';\nimport { normalizeToSnakeCase } from '@/utils/string';\nimport { OrderBy } from '../../components/tableEditor/TableData.vue';\nimport { ColumnDTO, ColumnModel } from './columns';\n\ninterface TableDTO {\n  name: string;\n  id: string;\n  projectId: string;\n}\n\nexport const pgTypes = [\n  'varchar',\n  'int',\n  'boolean',\n  'json',\n  'date',\n  'timestamp',\n  'uuid',\n  'real',\n] as const;\nexport type PGType = (typeof pgTypes)[number];\n\nexport const defaultExpressionsByType: Record<PGType, string> = {\n  varchar: \"'DEFAULT_VALUE'\",\n  int: '',\n  boolean: 'false',\n  json: \"'{}'::json\",\n  date: 'now()',\n  timestamp: 'now()',\n  uuid: 'gen_random_uuid()',\n  real: '0.0',\n};\n\ntype TablesApiListResponse = TableDTO[];\ntype TablesApiCreateResponse = {\n  table: TableDTO;\n  columns: ColumnDTO[];\n};\ntype TablesApiGetResponse = { table: TableDTO; columns: ColumnDTO[] };\ntype TablesApiGetRowsResponse = {\n  rows: Record<string, unknown>[];\n  total: number;\n};\n\nclass TablesApi {\n  async list(projectId: string): Promise<TablesApiListResponse> {\n    return CloudApiGateway.get(`projects/${projectId}/tables`);\n  }\n\n  async create(\n    values: { projectId: string },\n    dto: { name: string; id?: string },\n  ): Promise<TablesApiCreateResponse> {\n    return await CloudApiGateway.post(`projects/${values.projectId}/tables`, dto);\n  }\n\n  async get(values: { tableId: string; projectId: string }): Promise<TablesApiGetResponse> {\n    return CloudApiGateway.get(`projects/${values.projectId}/tables/${values.tableId}`);\n  }\n\n  async delete(values: { tableId: string; projectId: string }): Promise<void> {\n    return CloudApiGateway.delete(`projects/${values.projectId}/tables/${values.tableId}`);\n  }\n\n  async selectRows(values: {\n    name: string;\n    where: Record<string, unknown>;\n    projectId: string;\n    tableId: string;\n    limit: number;\n    offset: number;\n    search?: string;\n    orderBy?: OrderBy;\n  }): Promise<TablesApiGetRowsResponse> {\n    return CloudApiGateway.get(`projects/${values.projectId}/tables/${values.tableId}/rows`, {\n      limit: values.limit.toString(),\n      offset: values.offset.toString(),\n      search: values.search,\n      where: JSON.stringify(values.where),\n      orderBy: JSON.stringify(values.orderBy),\n    });\n  }\n\n  async update(\n    values: { id: string; tableId: string; projectId: string },\n    changes: Record<string, unknown>,\n  ): Promise<void> {\n    return CloudApiGateway.patch(`projects/${values.projectId}/tables/${values.tableId}`, changes);\n  }\n\n  async insertRow(\n    values: {\n      tableId: string;\n      projectId: string;\n    },\n    row: Record<string, unknown>,\n  ): Promise<void> {\n    return CloudApiGateway.post(`projects/${values.projectId}/tables/${values.tableId}/rows`, row);\n  }\n\n  async updateRow(\n    values: {\n      tableId: string;\n      projectId: string;\n      rowId: string;\n    },\n    row: Record<string, unknown>,\n  ): Promise<void> {\n    return CloudApiGateway.patch(\n      `projects/${values.projectId}/tables/${values.tableId}/rows/${values.rowId}`,\n      row,\n    );\n  }\n\n  async deleteRow(values: { tableId: string; projectId: string; rowId: string }): Promise<void> {\n    return CloudApiGateway.delete(\n      `projects/${values.projectId}/tables/${values.tableId}/rows/${values.rowId}`,\n    );\n  }\n\n  async getByColumnID(value: {\n    projectId: string;\n    columnId: string;\n  }): Promise<{ table: TableDTO; column: ColumnDTO }> {\n    return CloudApiGateway.get(`projects/${value.projectId}/columns/${value.columnId}`);\n  }\n}\n\nconst tablesApi = new TablesApi();\n\nexport class TableModel {\n  private record: EditableRecord<TableDTO>;\n  private columns: ColumnModel[] | null;\n\n  private constructor(dto: TableDTO, columnModels: ColumnModel[] | null = null) {\n    this.record = EditableRecord.from(dto);\n    this.columns = columnModels;\n  }\n\n  static async list(projectId: string): Promise<TableModel[]> {\n    const dtos = await tablesApi.list(projectId);\n    return dtos.map((dto) => new TableModel(dto));\n  }\n\n  static async fromColumnId(projectId: string, columnId: string) {\n    const dto = await tablesApi.getByColumnID({ projectId, columnId });\n    return TableModel.get(projectId, dto.table.id);\n  }\n\n  static async create(projectId: string, name: string, id?: string): Promise<TableModel> {\n    const normalizedName = normalizeToSnakeCase(name, false);\n    const dto = await tablesApi.create({ projectId }, { name: normalizedName, id });\n    const table = new TableModel(\n      dto.table,\n      dto.columns.map((c) => ColumnModel.fromDTO(c)),\n    );\n    return table;\n  }\n\n  static async get(projectId: string, tableId: string): Promise<TableModel> {\n    const response = await tablesApi.get({ projectId, tableId });\n    const table = response.table;\n\n    const columns = response.columns.map((c) =>\n      ColumnModel.fromDTO({ ...c, projectId: table.projectId }),\n    );\n\n    return new TableModel(table, columns);\n  }\n\n  async delete(projectId: string, tableId: string): Promise<void> {\n    return tablesApi.delete({ projectId, tableId });\n  }\n\n  fixTraillingName(): void {\n    this.name = normalizeToSnakeCase(this.name, false);\n  }\n\n  async save(): Promise<void> {\n    if (Object.keys(this.record.changes).length === 0) {\n      return;\n    } else if (this.record.changes.name) {\n      this.fixTraillingName();\n    }\n\n    try {\n      await tablesApi.update(\n        {\n          id: this.id,\n          tableId: this.id,\n          projectId: this.projectId,\n        },\n        this.record.changes,\n      );\n    } finally {\n      this.record.resetChanges();\n    }\n  }\n\n  resetChanges(): void {\n    this.record.resetChanges();\n  }\n\n  onUpdate(callback: (changes?: Partial<TableDTO>) => void): void {\n    this.record.pubsub.subscribe('update', callback);\n  }\n\n  hasChanges(): boolean {\n    return this.record.hasChanges();\n  }\n\n  hasChangesDeep(key: keyof TableDTO): boolean {\n    return (\n      this.record.hasChangesDeep(key) &&\n      normalizeToSnakeCase(this.name, false) !== this.record.initialState.name\n    );\n  }\n\n  getColumns(): ColumnModel[] {\n    return this.columns ?? [];\n  }\n\n  getUnprotectedColumns(): ColumnDTO[] {\n    return this.columns?.filter((c) => !c.protected).map((c) => c.toDTO()) ?? [];\n  }\n\n  get id(): string {\n    return this.record.get('id');\n  }\n\n  get name(): string {\n    return this.record.get('name');\n  }\n\n  set name(value: string) {\n    const normalizedName = normalizeToSnakeCase(value, true);\n    this.record.set('name', normalizedName);\n  }\n\n  get projectId() {\n    return this.record.get('projectId');\n  }\n\n  async addColumn(column: {\n    name: string;\n    type: PGType;\n    default: string;\n    nullable: boolean;\n    unique: boolean;\n    foreignKey?: { columnId: string };\n  }) {\n    const data = await ColumnModel.create(\n      column.name,\n      column.type,\n      column.default,\n      column.nullable,\n      column.unique,\n      this.id,\n      this.projectId,\n      column.foreignKey,\n    );\n\n    if ('error' in data) {\n      return {\n        success: false,\n        error: data.error,\n      };\n    }\n\n    if (!this.columns) {\n      this.columns = [data];\n      return {\n        success: true,\n        error: '',\n      };\n    }\n\n    this.columns.push(data);\n    return {\n      success: true,\n      error: '',\n    };\n  }\n\n  getColumn(columnId: string): ColumnModel | undefined {\n    return this.columns?.find((c) => c.id && c.id === columnId);\n  }\n\n  async select(\n    whereParams: Record<string, unknown> = {},\n    offset: number,\n    limit: number,\n    search?: string,\n    orderBy?: OrderBy,\n  ): Promise<TablesApiGetRowsResponse> {\n    return tablesApi.selectRows({\n      name: this.name,\n      where: whereParams,\n      tableId: this.id,\n      projectId: this.projectId,\n      limit,\n      offset,\n      search,\n      orderBy,\n    });\n  }\n\n  async insertRow(row: Record<string, unknown>): Promise<void> {\n    return tablesApi.insertRow(\n      {\n        tableId: this.id,\n        projectId: this.projectId,\n      },\n      row,\n    );\n  }\n\n  async updateRow(rowId: string, changes: Record<string, unknown>): Promise<void> {\n    return tablesApi.updateRow(\n      {\n        tableId: this.id,\n        projectId: this.projectId,\n        rowId: rowId,\n      },\n      changes,\n    );\n  }\n\n  async deleteRow(rowId: string): Promise<void> {\n    return tablesApi.deleteRow({\n      tableId: this.id,\n      projectId: this.projectId,\n      rowId: rowId,\n    });\n  }\n}\n"],"names":["z","pgTypeAliases","findPGType","type","pgType","pgTypes","ColumnsApi","values","CloudApiGateway","value","changes","columnsApi","ColumnModel","dto","EditableRecord","name","defaultValue","nullable","unique","tableId","projectId","foreignKey","using","id","defaultExpressionsByType","TablesApi","row","tablesApi","TableModel","columnModels","columnId","normalizedName","normalizeToSnakeCase","c","response","table","columns","callback","key","column","data","whereParams","offset","limit","search","orderBy","rowId"],"mappings":"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"}