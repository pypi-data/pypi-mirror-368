{"version":3,"file":"EditorsView-BALXdstS.js","sources":["../../src/apps/console/views/Editors/editorsViewController.ts","../../src/apps/console/views/Editors/EditorsView.vue"],"sourcesContent":["import { CreationFields } from '@/components/inputs/CreationModal.vue';\nimport { CrudTable } from '@/components/inputs/CrudView.vue';\nimport { askForConfirmation } from '@/utils/ant-design';\nimport { PhTrash } from '@phosphor-icons/vue';\nimport { computed, Ref, ref } from 'vue';\nimport { MemberAPI, MemberDTO } from '../../apis/cloud';\nimport { FolderAPI } from '../../apis/cloud/folder';\nimport { authorManager } from '../../authn/authorManager';\n\ntype Handlers = {\n  onSelfRemove: () => void;\n};\n\ntype Apis = {\n  member: MemberAPI;\n  folder: FolderAPI;\n};\n\nexport class EditorsViewController {\n  public members = ref<MemberDTO[]>([]);\n  public selectedMember = ref<MemberDTO | null>(null);\n  public draftMember = ref<MemberDTO | null>(null);\n  public table = computed(() => this.makeCrudViewTable());\n  public loading: Ref<boolean> = ref(false);\n  public creationFields: Ref<CreationFields | null> = ref(null);\n\n  private authorEmail: string;\n  private organizationId: string;\n  private api: Apis;\n  private handlers: Handlers;\n  private currentMember: Ref<MemberDTO | null> = ref(null);\n\n  constructor({\n    authorEmail,\n    organizationId,\n    api,\n    handlers,\n  }: {\n    authorEmail: string;\n    organizationId: string;\n    api: Apis;\n    handlers: Handlers;\n  }) {\n    this.authorEmail = authorEmail;\n    this.organizationId = organizationId;\n    this.api = api;\n    this.handlers = handlers;\n  }\n\n  async fetchState() {\n    this.loading.value = true;\n    await this.fetchMembers();\n    await this.fetchCreationFields();\n    this.setCurrentMember();\n    this.loading.value = false;\n  }\n\n  private setCurrentMember() {\n    this.currentMember.value =\n      this.members.value.find((member) => member.email === this.authorEmail) ?? null;\n  }\n\n  private async fetchMembers() {\n    this.members.value = await this.api.member.list(this.organizationId);\n  }\n\n  private async fetchCreationFields() {\n    const folders = await this.api.folder.list(this.organizationId);\n\n    const fields: CreationFields = [\n      {\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n      },\n      {\n        key: 'folders',\n        label: 'Folders',\n        type: 'select',\n        mode: 'multiple',\n        tooltip: 'Select folders this member can access',\n        options: folders.map((folder) => {\n          return { label: folder.name, value: folder.id };\n        }),\n      },\n    ];\n\n    this.creationFields.value = fields;\n  }\n\n  public confirmAddMember = async (values: Record<string, unknown>) => {\n    const createdMember = await this.api.member.create({\n      organizationId: this.organizationId,\n      email: (values.email as string).trim(),\n      teams: values.teams as string[],\n    });\n\n    const folders = await this.api.folder.list(this.organizationId);\n\n    for (const folder of folders) {\n      if ((values.folders as string[]).includes(folder.id)) {\n        await this.api.folder.update(this.organizationId, {\n          id: folder.id,\n          name: folder.name,\n          memberIds: (folder.memberIds ?? []).concat(createdMember.id),\n          organizationId: this.organizationId,\n        });\n      }\n    }\n\n    await this.fetchState();\n  };\n\n  public async removeMember(member: MemberDTO) {\n    if (authorManager.getAuthor()?.claims.email === member.email) {\n      const confirmed = await askForConfirmation(\n        'Removing your own access will block you from this organization. Are you sure?',\n        {\n          okText: 'Remove',\n          cancelText: 'Cancel',\n        },\n      );\n\n      if (confirmed) {\n        await this.api.member.delete({\n          organizationId: this.organizationId,\n          authorId: member.authorId,\n        });\n        this.handlers.onSelfRemove();\n      }\n      return;\n    }\n\n    const confirmed = await askForConfirmation(\n      `Are you sure you want to remove ${member.email} access?`,\n      {\n        okText: 'Remove',\n        cancelText: 'Cancel',\n      },\n    );\n    if (confirmed) {\n      await this.api.member.delete({\n        organizationId: this.organizationId,\n        authorId: member.authorId,\n      });\n      await this.fetchMembers();\n    }\n  }\n\n  private makeCrudViewTable(): CrudTable {\n    return {\n      columns: [\n        { title: 'Email', align: 'center' },\n        { title: '', align: 'right' },\n      ],\n      rows: this.members.value.map((member) => ({\n        key: member.email,\n        cells: [\n          {\n            type: 'text',\n            text: member.email,\n          },\n          {\n            type: 'actions',\n            actions: [\n              {\n                icon: PhTrash,\n                label: 'Remove access',\n                onClick: () => this.removeMember(member),\n                dangerous: true,\n              },\n            ],\n          },\n        ],\n      })),\n    };\n  }\n}\n","<template>\n  <CrudView\n    entity-name=\"editor\"\n    :loading=\"controller.loading.value\"\n    title=\"Editors\"\n    description=\"Manage people who can edit projects within your organization\"\n    empty-title=\"No editors yet\"\n    :table=\"controller.table.value\"\n    create-button-text=\"Invite Editor\"\n    :fields=\"controller.creationFields.value || undefined\"\n    :create=\"controller.confirmAddMember\"\n  />\n</template>\n\n<script lang=\"ts\" setup>\nimport CrudView from '@/components/inputs/CrudView.vue';\nimport { onMounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { MemberAPI } from '../../apis/cloud';\nimport { FolderAPI } from '../../apis/cloud/folder';\nimport { authorManager } from '../../authn/authorManager';\nimport { EditorsViewController } from './editorsViewController';\n\nconst route = useRoute();\nconst router = useRouter();\nconst organizationId = route.params.organizationId as string;\n\nconst memberApi = new MemberAPI();\nconst folderApi = new FolderAPI();\nconst authorEmail = authorManager.getAuthor()?.claims.email;\n\nif (!authorEmail) {\n  throw new Error('Author email is not available');\n}\n\nconst controller = new EditorsViewController({\n  organizationId,\n  api: { member: memberApi, folder: folderApi },\n  authorEmail,\n  handlers: {\n    onSelfRemove: () => {\n      router.push(`organizations`);\n    },\n  },\n});\n\nonMounted(async () => {\n  await controller.fetchState();\n});\n\ncontroller.fetchState();\n</script>\n"],"names":["EditorsViewController","ref","computed","authorEmail","organizationId","api","handlers","member","folders","fields","folder","values","createdMember","authorManager","askForConfirmation","PhTrash","route","useRoute","router","useRouter","memberApi","MemberAPI","folderApi","FolderAPI","controller","onMounted"],"mappings":"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"}