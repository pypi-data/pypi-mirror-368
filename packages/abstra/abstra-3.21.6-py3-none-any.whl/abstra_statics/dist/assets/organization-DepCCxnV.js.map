{"version":3,"file":"organization-DepCCxnV.js","sources":["../../src/apps/console/apis/cloud/organization.ts"],"sourcesContent":["import { CloudApiConsoleOrganizationGetResponse } from '@/contracts.generated';\nimport { CloudApiGateway } from './gateway';\n\ntype OrganizationDTO = CloudApiConsoleOrganizationGetResponse;\nexport class OrganizationAPI {\n  private urlPath = `organizations`;\n\n  async create(values: { name: string }): Promise<OrganizationDTO> {\n    return CloudApiGateway.post(`${this.urlPath}`, values);\n  }\n\n  async delete(id: string): Promise<void> {\n    await CloudApiGateway.delete(`${this.urlPath}/${id}`);\n  }\n\n  async rename(id: string, name: string): Promise<void> {\n    await CloudApiGateway.patch(`${this.urlPath}/${id}`, { name });\n  }\n\n  async list(): Promise<OrganizationDTO[]> {\n    return CloudApiGateway.get(`${this.urlPath}`);\n  }\n\n  async get(id: string): Promise<OrganizationDTO> {\n    return CloudApiGateway.get(`${this.urlPath}/${id}`);\n  }\n\n  async getUsageReportUrl(organizationId: string): Promise<string> {\n    return CloudApiGateway.get(`${this.urlPath}/${organizationId}/usage-report`);\n  }\n}\n\nconst api = new OrganizationAPI();\n\nexport class OrganizationModel {\n  private constructor(private dto: OrganizationDTO) {}\n\n  public static async list(): Promise<OrganizationModel[]> {\n    const dtos = await api.list();\n    return dtos.map((dto) => new OrganizationModel(dto));\n  }\n\n  static async create(name: string): Promise<OrganizationModel> {\n    const dto = await api.create({ name });\n    return new OrganizationModel(dto);\n  }\n\n  static async get(id: string): Promise<OrganizationModel> {\n    const dto = await api.get(id);\n    return new OrganizationModel(dto);\n  }\n\n  static async rename(id: string, name: string): Promise<void> {\n    return api.rename(id, name);\n  }\n\n  get id(): string {\n    return this.dto.id;\n  }\n\n  get name(): string {\n    return this.dto.name;\n  }\n\n  get featureFlags() {\n    return this.dto.featureFlags;\n  }\n\n  get billingMetadata() {\n    return this.dto.billingMetadata;\n  }\n\n  get coalescedPlan() {\n    return this.billingMetadata.plan ?? 'No active plan';\n  }\n\n  get hasUsageReport(): boolean {\n    return ['Business', 'Abstra'].includes(this.coalescedPlan);\n  }\n\n  async getUsageReportUrl(): Promise<string> {\n    return api.getUsageReportUrl(this.id);\n  }\n}\n"],"names":["OrganizationAPI","values","CloudApiGateway","id","name","organizationId","api","OrganizationModel","dto"],"mappings":"qYAIO,MAAMA,CAAgB,CACnB,QAAU,gBAElB,MAAM,OAAOC,EAAoD,CAC/D,OAAOC,EAAgB,KAAK,GAAG,KAAK,OAAO,GAAID,CAAM,CACvD,CAEA,MAAM,OAAOE,EAA2B,CACtC,MAAMD,EAAgB,OAAO,GAAG,KAAK,OAAO,IAAIC,CAAE,EAAE,CACtD,CAEA,MAAM,OAAOA,EAAYC,EAA6B,CACpD,MAAMF,EAAgB,MAAM,GAAG,KAAK,OAAO,IAAIC,CAAE,GAAI,CAAE,KAAAC,EAAM,CAC/D,CAEA,MAAM,MAAmC,CACvC,OAAOF,EAAgB,IAAI,GAAG,KAAK,OAAO,EAAE,CAC9C,CAEA,MAAM,IAAIC,EAAsC,CAC9C,OAAOD,EAAgB,IAAI,GAAG,KAAK,OAAO,IAAIC,CAAE,EAAE,CACpD,CAEA,MAAM,kBAAkBE,EAAyC,CAC/D,OAAOH,EAAgB,IAAI,GAAG,KAAK,OAAO,IAAIG,CAAc,eAAe,CAC7E,CACF,CAEA,MAAMC,EAAM,IAAIN,EAET,MAAMO,CAAkB,CACrB,YAAoBC,EAAsB,CAAtB,KAAA,IAAAA,CAAuB,CAEnD,aAAoB,MAAqC,CAEvD,OADa,MAAMF,EAAI,KAAA,GACX,IAAKE,GAAQ,IAAID,EAAkBC,CAAG,CAAC,CACrD,CAEA,aAAa,OAAOJ,EAA0C,CAC5D,MAAMI,EAAM,MAAMF,EAAI,OAAO,CAAE,KAAAF,EAAM,EACrC,OAAO,IAAIG,EAAkBC,CAAG,CAClC,CAEA,aAAa,IAAIL,EAAwC,CACvD,MAAMK,EAAM,MAAMF,EAAI,IAAIH,CAAE,EAC5B,OAAO,IAAII,EAAkBC,CAAG,CAClC,CAEA,aAAa,OAAOL,EAAYC,EAA6B,CAC3D,OAAOE,EAAI,OAAOH,EAAIC,CAAI,CAC5B,CAEA,IAAI,IAAa,CACf,OAAO,KAAK,IAAI,EAClB,CAEA,IAAI,MAAe,CACjB,OAAO,KAAK,IAAI,IAClB,CAEA,IAAI,cAAe,CACjB,OAAO,KAAK,IAAI,YAClB,CAEA,IAAI,iBAAkB,CACpB,OAAO,KAAK,IAAI,eAClB,CAEA,IAAI,eAAgB,CAClB,OAAO,KAAK,gBAAgB,MAAQ,gBACtC,CAEA,IAAI,gBAA0B,CAC5B,MAAO,CAAC,WAAY,QAAQ,EAAE,SAAS,KAAK,aAAa,CAC3D,CAEA,MAAM,mBAAqC,CACzC,OAAOE,EAAI,kBAAkB,KAAK,EAAE,CACtC,CACF"}