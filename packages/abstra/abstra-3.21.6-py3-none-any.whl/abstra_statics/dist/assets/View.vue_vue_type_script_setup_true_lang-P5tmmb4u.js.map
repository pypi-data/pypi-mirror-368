{"version":3,"file":"View.vue_vue_type_script_setup_true_lang-P5tmmb4u.js","sources":["../../src/models/env-vars/types.ts","../../src/models/env-vars/repository.ts","../../src/services/env-vars/controller.ts","../../src/services/env-vars/View.vue"],"sourcesContent":["import { EditableRecord } from '@/utils/record';\nimport { ShallowRef, shallowRef } from 'vue';\nexport type EnvVarDTO = {\n  name: string;\n  value: string;\n};\n\nexport type EnvVarChange =\n  | (EnvVarDTO & { change: 'create' })\n  | (EnvVarDTO & { change: 'update' })\n  | { name: string; change: 'delete' };\n\nexport interface EnvVarRepository {\n  get(): Promise<EnvVars>;\n  update(changes: EnvVarChange[]): Promise<void>;\n}\n\nexport class EnvVars {\n  private data: EditableRecord<Record<string, string>>;\n  private deleted: ShallowRef<string[]>;\n  private constructor(vars: Record<string, string>) {\n    this.data = EditableRecord.from(vars);\n    this.deleted = shallowRef([]);\n  }\n\n  wasDeleted = (name: string): boolean => {\n    return this.deleted.value.includes(name);\n  };\n\n  wasUpdated = (name: string): boolean => {\n    return this.data.hasChangesDeep(name);\n  };\n\n  set = (name: string, value: string): void => {\n    this.data.set(name, value);\n    this.deleted.value = this.deleted.value.filter((n) => n !== name);\n  };\n\n  get = (name: string): string | undefined => {\n    if (this.deleted.value.includes(name)) {\n      return undefined;\n    }\n    return this.data.get(name);\n  };\n\n  delete = (name: string): void => {\n    this.deleted.value = [...this.deleted.value, name];\n  };\n\n  values = () => {\n    const record: Record<string, string> = {};\n    const keys = Object.keys(this.data.changes).concat(Object.keys(this.data.initialState));\n    for (const name of keys) {\n      if (this.deleted.value.includes(name)) {\n        continue;\n      }\n      record[name] = this.data.get(name);\n    }\n    return record;\n  };\n\n  static from(vars: EnvVarDTO[]): EnvVars {\n    const data = vars.reduce((acc, { name, value }) => {\n      acc[name] = value;\n      return acc;\n    }, {} as Record<string, string>);\n\n    return new EnvVars(data);\n  }\n\n  get changes(): EnvVarChange[] {\n    const changes: EnvVarChange[] = this.deleted.value.map((name) => ({\n      name,\n      change: 'delete',\n    }));\n\n    for (const name of Object.keys(this.data.changes)) {\n      if (this.deleted.value.includes(name)) {\n        continue;\n      }\n\n      if (this.data.initialState[name] === undefined) {\n        changes.push({\n          name,\n          value: this.data.get(name),\n          change: 'create',\n        });\n        continue;\n      }\n\n      if (this.data.hasChangesDeep(name)) {\n        changes.push({\n          name,\n          value: this.data.get(name),\n          change: 'update',\n        });\n      }\n    }\n\n    return changes;\n  }\n\n  commit = (): void => {\n    this.data = EditableRecord.from(this.values());\n    this.deleted.value = [];\n  };\n}\n","import { CloudApiGateway } from '@/apps/console/apis/cloud/gateway';\nimport localFetch from '@/utils/fetch';\nimport { EnvVarChange, EnvVarDTO, EnvVarRepository, EnvVars } from './types';\n\nclass EnvVarAPI {\n  private urlPath = `env-vars`;\n\n  async list(projectId: string): Promise<Omit<EnvVarDTO, 'value'>[]> {\n    return await CloudApiGateway.get(`projects/${projectId}/${this.urlPath}`);\n  }\n\n  async update(projectId: string, changes: EnvVarChange[]) {\n    await CloudApiGateway.patch(`projects/${projectId}/${this.urlPath}`, changes);\n  }\n}\n\nconst api = new EnvVarAPI();\n\nexport class ConsoleEnvVarRepository implements EnvVarRepository {\n  constructor(private projectId: string) {}\n\n  async get(): Promise<EnvVars> {\n    const vars = await api.list(this.projectId);\n    return EnvVars.from(vars.map((v) => ({ ...v, value: '' })));\n  }\n\n  async update(changes: EnvVarChange[]) {\n    await api.update(this.projectId, changes);\n  }\n}\n\nexport class EditorEnvVarRepository implements EnvVarRepository {\n  constructor(private fetch = localFetch) {}\n\n  async get(): Promise<EnvVars> {\n    const response = await this.fetch('/_editor/api/env-vars');\n    if (!response.ok) {\n      throw new Error('Failed to list env vars');\n    }\n    const dtos = await response.json();\n    return EnvVars.from(dtos);\n  }\n\n  async update(changes: EnvVarChange[]) {\n    await this.fetch('/_editor/api/env-vars', {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(changes),\n    });\n  }\n}\n","import { CreationFields } from '@/components/inputs/CreationModal.vue';\nimport { CrudTable } from '@/components/inputs/CrudView.vue';\nimport { EnvVarRepository, EnvVars } from '@/models/env-vars';\nimport { PhPencil, PhTrash } from '@phosphor-icons/vue';\nimport { Ref, ref } from 'vue';\n\nexport interface FileOpener {\n  openFile: (path: string) => Promise<void>;\n}\n\nexport class EnvVarController {\n  private envVarRepo: EnvVarRepository;\n  private envVars: EnvVars;\n  public state: Ref<{ type: 'idle' } | { type: 'updating'; name: string; value: string }> = ref({\n    type: 'idle',\n  });\n  private mode: 'editor' | 'console';\n  private fileOpener?: FileOpener;\n\n  private constructor(\n    envVarRepo: EnvVarRepository,\n    envVars: EnvVars,\n    mode: 'editor' | 'console',\n    fileOpener?: FileOpener,\n  ) {\n    this.envVarRepo = envVarRepo;\n    this.envVars = envVars;\n    this.mode = mode;\n    this.fileOpener = fileOpener;\n  }\n\n  static async create(\n    envVarRepo: EnvVarRepository,\n    mode: 'editor' | 'console',\n    fileOpener?: FileOpener,\n  ) {\n    const envVars = await envVarRepo.get();\n    return new EnvVarController(envVarRepo, envVars, mode, fileOpener);\n  }\n\n  get isLocalEditor() {\n    return this.mode === 'editor';\n  }\n\n  openEnvFile = async () => {\n    await this.fileOpener?.openFile('.env');\n  };\n\n  get saveMessage() {\n    return this.isLocalEditor ? 'Save' : 'Save and Apply';\n  }\n\n  get creationFields() {\n    return [\n      {\n        label: 'Variable name',\n        key: 'key',\n      },\n      {\n        label: 'Variable value',\n        key: 'value',\n        type: 'multiline-text',\n      },\n    ] satisfies CreationFields;\n  }\n\n  validate = (record: Record<string, string>) => {\n    const keyRegex = /^[A-Za-z_][A-Za-z0-9_]*$/;\n    const { key, value } = record;\n\n    const hasDanglingWhitespace = value.trim() !== value;\n\n    if (hasDanglingWhitespace) {\n      throw new Error('Environment variable values cannot have leading or trailing whitespace.');\n    }\n\n    if (!keyRegex.test(key)) {\n      throw new Error(\n        `Invalid key: ‘${key}’. A key must begin with a letter or an underscore, and may only include letters, numbers, and underscores.`,\n      );\n    }\n  };\n\n  create = (record: Record<string, string>) => {\n    this.validate(record);\n    this.envVars.set(record.key, record.value);\n    this.state.value = { type: 'idle' };\n  };\n\n  delete = (name: string) => {\n    this.envVars.delete(name);\n    this.state.value = { type: 'idle' };\n  };\n\n  get isUpdating() {\n    return this.state.value.type === 'updating';\n  }\n\n  startUpdating = (name: string) => {\n    this.state.value = { type: 'updating', name, value: this.envVars.get(name) || '' };\n  };\n\n  confirmUpdate = () => {\n    if (this.state.value.type !== 'updating') {\n      return;\n    }\n    this.envVars.set(this.state.value.name, this.state.value.value);\n    this.state.value = { type: 'idle' };\n  };\n\n  cancelUpdate = () => {\n    this.state.value = { type: 'idle' };\n  };\n\n  pollingFunction = async () => {\n    if (!this.isLocalEditor) {\n      return;\n    }\n    const newEnvs = await this.envVarRepo.get();\n    Object.entries(newEnvs.values()).forEach(([name, value]) => {\n      if (this.envVars.wasDeleted(name)) {\n        return;\n      }\n      if (this.envVars.get(name) === undefined) {\n        this.envVars.set(name, value);\n      }\n    });\n  };\n\n  private wasUpdated(name: string) {\n    return this.envVars.wasUpdated(name);\n  }\n\n  private columns = () => {\n    return [{ title: 'Key' }, { title: 'Value' }, { title: '' }] satisfies CrudTable['columns'];\n  };\n\n  private rows = () => {\n    return Object.entries(this.envVars.values()).map(([name, value]) => ({\n      key: name,\n      cells: [\n        {\n          type: 'text',\n          text: name,\n          contentType: this.wasUpdated(name) ? 'warning' : 'default',\n        },\n        {\n          type: 'text',\n          text: this.isLocalEditor ? value : '*********',\n          contentType: this.wasUpdated(name) ? 'warning' : 'default',\n        },\n        {\n          type: 'actions',\n          actions: [\n            {\n              icon: PhTrash,\n              label: 'Delete',\n              onClick: () => this.delete(name),\n              dangerous: true,\n            },\n            {\n              icon: PhPencil,\n              label: 'Update',\n              onClick: () => this.startUpdating(name),\n            },\n          ],\n        },\n      ],\n    })) satisfies CrudTable['rows'];\n  };\n\n  save = async () => {\n    await this.envVarRepo.update(this.envVars.changes);\n    this.envVars.commit();\n  };\n\n  hasChanges = () => {\n    return this.envVars.changes.length > 0;\n  };\n\n  table = () => {\n    return {\n      columns: this.columns(),\n      rows: this.rows(),\n    };\n  };\n}\n","<template>\n  <CrudView\n    v-if=\"controller\"\n    entity-name=\"Env var\"\n    :loading=\"loading\"\n    :title=\"props.hideTitle ? '' : 'Environment Variables'\"\n    :description=\"props.hideTitle ? '' : 'Set environment variables for your project.'\"\n    empty-title=\"No environment variables set\"\n    :table=\"controller.table() || emptyTable\"\n    create-button-text=\"Add Environment Variable\"\n    :create=\"controller.create\"\n    :fields=\"controller.creationFields || []\"\n    :live=\"controller.isLocalEditor\"\n  >\n    <template v-if=\"controller?.isLocalEditor\" #secondary>\n      <AntButton @click=\"controller?.openEnvFile\">Open .env</AntButton>\n      <SaveButton v-if=\"mode == 'editor'\" :model=\"controller\" :disabled=\"!controller.hasChanges()\">\n        <template #with-changes> {{ controller.saveMessage }} </template>\n      </SaveButton>\n    </template>\n    <template v-if=\"controller?.isLocalEditor\" #extra>\n      <AntAlert show-icon style=\"margin-top: 20px\">\n        <template #message>\n          This is simply a helper to manage your environment variables locally. The variables set\n          here will not be deployed to Cloud with your project.\n        </template>\n      </AntAlert>\n    </template>\n    <template v-if=\"controller\" #more>\n      <SaveButton v-if=\"mode == 'console'\" :model=\"controller\" :disabled=\"!controller.hasChanges()\">\n        <template #with-changes> {{ controller.saveMessage }} </template>\n      </SaveButton>\n    </template>\n  </CrudView>\n  <AntModal\n    v-if=\"controller\"\n    :open=\"controller.isUpdating\"\n    title=\"Update value\"\n    @cancel=\"controller?.cancelUpdate()\"\n    @ok=\"() => controller?.confirmUpdate()\"\n  >\n    <AntForm v-if=\"controller.state.value.type === 'updating'\" layout=\"vertical\">\n      <AntFormItem>\n        <AntText>{{ controller.state.value.name }}</AntText>\n        <AntTextArea v-model:value=\"controller.state.value.value\" />\n      </AntFormItem>\n    </AntForm>\n  </AntModal>\n</template>\n\n<script lang=\"ts\" setup>\nimport SaveButton from '@/components/SaveButton.vue';\nimport CrudView from '@/components/inputs/CrudView.vue';\nimport { EnvVarRepository } from '@/models/env-vars';\nimport {\n  Alert as AntAlert,\n  Button as AntButton,\n  Form as AntForm,\n  FormItem as AntFormItem,\n  Modal as AntModal,\n  TypographyText as AntText,\n  Textarea as AntTextArea,\n} from 'ant-design-vue';\n\nimport { asyncComputed } from '@/utils/asyncComputed';\nimport { usePolling } from '@/utils/polling';\nimport { onBeforeUnmount, onMounted } from 'vue';\nimport { omniChatPubSub } from '../ai/omniChatStore';\nimport { EnvVarController, FileOpener } from './controller';\n\nconst props = defineProps<{\n  envVarRepository: EnvVarRepository;\n  mode: 'editor' | 'console';\n  fileOpener?: FileOpener;\n  hideTitle?: boolean;\n}>();\n\nconst {\n  result: controller,\n  loading,\n  refetch,\n} = asyncComputed(async () => {\n  const ctrl = await EnvVarController.create(props.envVarRepository, props.mode, props.fileOpener);\n  startPolling();\n  return ctrl;\n});\n\nconst { startPolling, endPolling } = usePolling({\n  task: () => controller.value?.pollingFunction(),\n  interval: 2000,\n});\n\nconst emptyTable = {\n  columns: [],\n  rows: [],\n};\n\nonMounted(() => {\n  const creationToken = omniChatPubSub.subscribe('envVarCreated', () => {\n    refetch();\n  });\n\n  const updateToken = omniChatPubSub.subscribe('envVarEdited', () => {\n    refetch();\n  });\n\n  onBeforeUnmount(() => {\n    endPolling();\n    omniChatPubSub.unsubscribe(creationToken);\n    omniChatPubSub.unsubscribe(updateToken);\n  });\n});\n</script>\n"],"names":["EnvVars","vars","EditableRecord","shallowRef","name","value","n","record","keys","data","acc","changes","EnvVarAPI","projectId","CloudApiGateway","api","ConsoleEnvVarRepository","v","EditorEnvVarRepository","fetch","localFetch","response","dtos","EnvVarController","ref","envVarRepo","envVars","mode","fileOpener","keyRegex","key","newEnvs","PhTrash","PhPencil","controller","loading","refetch","asyncComputed","ctrl","props","startPolling","endPolling","usePolling","emptyTable","onMounted","creationToken","omniChatPubSub","updateToken","onBeforeUnmount"],"mappings":"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"}