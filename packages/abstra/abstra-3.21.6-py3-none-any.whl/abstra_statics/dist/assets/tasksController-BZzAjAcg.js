import{C as E}from"./router-D5wfdag3.js";import{r as v,e as L,N as U,aK as B,w as z}from"./jwt-decode.esm-Dca5fHH5.js";import"./linters-DMK5Dyyj.js";import{a as I}from"./record-BZIfMWML.js";import{u as G}from"./polling-CKeyL76l.js";import{c as V}from"./string-BYR4BIXr.js";(function(){try{var o=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},t=new Error().stack;t&&(o._sentryDebugIds=o._sentryDebugIds||{},o._sentryDebugIds[t]="aeee628d-1c6e-4be8-9718-e89ad16df56b",o._sentryDebugIdIdentifier="sentry-dbid-aeee628d-1c6e-4be8-9718-e89ad16df56b")}catch{}})();class q{async list(){return await(await fetch("/_editor/api/forms")).json()}async create(t,e,r,s){return await(await fetch("/_editor/api/forms",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:t,file:e,position:r,id:s})})).json()}async get(t){try{return await(await fetch(`/_editor/api/forms/${t}`)).json()}catch{return null}}async update(t,e){return await(await fetch(`/_editor/api/forms/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json()}async delete(t,e){const r=e?"?remove_file=true":"",s=`/_editor/api/forms/${t}`+r;await fetch(s,{method:"DELETE",headers:{"Content-Type":"application/json"}})}async duplicate(t){return await(await fetch(`/_editor/api/forms/${t}/duplicate`,{method:"POST"})).json()}}const g=new q;class h{record;constructor(t){this.record=I.create(g,t)}static async list(){return(await g.list()).map(e=>new h(e))}static async create(t,e,r,s){const i=await g.create(t,e,r,s);return new h(i)}static async get(t){const e=await g.get(t);return e?new h(e):null}get id(){return this.record.get("id")}get type(){return"form"}get allowRestart(){return this.record.get("allow_restart")}set allowRestart(t){this.record.set("allow_restart",t)}get file(){return this.record.get("file")}set file(t){this.record.set("file",t)}get autoStart(){return this.record.get("auto_start")}set autoStart(t){this.record.set("auto_start",t)}get endMessage(){return this.record.get("end_message")}set endMessage(t){this.record.set("end_message",t)}get errorMessage(){return this.record.get("error_message")}set errorMessage(t){this.record.set("error_message",t)}get path(){return this.record.get("path")}set path(t){this.record.set("path",t)}get restartButtonText(){return this.record.get("restart_button_text")}set restartButtonText(t){this.record.set("restart_button_text",t)}get startButtonText(){return this.record.get("start_button_text")}set startButtonText(t){this.record.set("start_button_text",t)}get startMessage(){return this.record.get("start_message")}set startMessage(t){this.record.set("start_message",t)}get timeoutMessage(){return this.record.get("timeout_message")}set timeoutMessage(t){this.record.set("timeout_message",t)}get notificationTrigger(){return new Proxy(this.record.get("notification_trigger"),{set:(t,e,r)=>(this.record.set("notification_trigger",{...t,[e]:r}),!0)})}set notificationTrigger(t){this.record.set("notification_trigger",t)}get(t){return this.record.get(t)}set(t,e){this.record.set(t,e)}get title(){return this.record.get("title")}set title(t){this.record.set("title",t)}get codeContent(){return this.record.get("code_content")}set codeContent(t){this.record.set("code_content",t)}get welcomeTitle(){return this.record.get("welcome_title")}set welcomeTitle(t){this.record.set("welcome_title",t)}async save(t){const e=this.codeContent;await this.record.save(t),this.record.updateInitialState("code_content",e)}onUpdate(t){this.record.pubsub.subscribe("update",t)}hasChanges(t){return this.record.hasChanges(t)}hasChangesDeep(t){return this.record.hasChangesDeep(t)}getInitialState(t){return this.record.getInitialState(t)}updateInitialState(t,e){this.record.updateInitialState(t,e)}async delete(t){await g.delete(this.id,t)}async duplicate(){const t=await g.duplicate(this.id);return new h(t)}makeRunnerData(t){return{...t.makeRunnerData(),id:this.id,isLocal:!0,path:this.path,title:this.title,isInitial:this.isInitial,runtimeType:"form",autoStart:this.autoStart,endMessage:this.endMessage,errorMessage:this.errorMessage,allowRestart:this.allowRestart,welcomeTitle:this.welcomeTitle,startMessage:this.startMessage,timeoutMessage:this.timeoutMessage,startButtonText:this.startButtonText,restartButtonText:this.restartButtonText}}get position(){const[t,e]=this.record.get("workflow_position");return{x:t,y:e}}get isInitial(){return this.record.get("is_initial")}static from(t){return new h(t)}}class K{async list(){return await(await fetch("/_editor/api/hooks")).json()}async create(t,e,r,s){return await(await fetch("/_editor/api/hooks",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:t,file:e,position:r,id:s})})).json()}async get(t){try{return await(await fetch(`/_editor/api/hooks/${t}`)).json()}catch{return null}}async update(t,e){return await(await fetch(`/_editor/api/hooks/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json()}async delete(t,e){const r=e?"?remove_file=true":"",s=`/_editor/api/hooks/${t}`+r;await fetch(s,{method:"DELETE",headers:{"Content-Type":"application/json"}})}async run(t,e){const r=new URLSearchParams(e.query),s=await fetch(`/_editor/api/hooks/${t}/run?${r.toString()}`,{method:e.method,headers:{"Content-Type":"application/json",...e.headers},body:e.method==="GET"?void 0:e.body}),{status:i,headers:l,body:c}=await s.json();return{status:i,headers:l,body:c}}}const p=new K;class m{record;constructor(t){this.record=I.create(p,t)}static async list(){return(await p.list()).map(e=>new m(e))}static async create(t,e,r,s){const i=await p.create(t,e,r,s);return new m(i)}static async get(t){const e=await p.get(t);return e?new m(e):null}async delete(t){await p.delete(this.id,t)}async duplicate(){return this}async save(t){const e=this.codeContent;await this.record.save(t),this.record.updateInitialState("code_content",e)}onUpdate(t){this.record.pubsub.subscribe("update",t)}hasChanges(t){return this.record.hasChanges(t)}getInitialState(t){return this.record.getInitialState(t)}updateInitialState(t,e){this.record.updateInitialState(t,e)}get id(){return this.record.get("id")}get type(){return"hook"}get path(){return this.record.get("path")}set path(t){this.record.set("path",t)}get title(){return this.record.get("title")}set title(t){this.record.set("title",t)}get codeContent(){return this.record.get("code_content")}set codeContent(t){this.record.set("code_content",t)}get file(){return this.record.get("file")}set file(t){this.record.set("file",t)}async run(t){return p.run(this.id,t)}get position(){const[t,e]=this.record.get("workflow_position");return{x:t,y:e}}get isInitial(){return this.record.get("is_initial")}static from(t){return new m(t)}}class F{async list(){return await(await fetch("/_editor/api/jobs")).json()}async create(t,e,r,s){return await(await fetch("/_editor/api/jobs",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:t,file:e,position:r,id:s})})).json()}async get(t){try{return await(await fetch(`/_editor/api/jobs/${t}`)).json()}catch{return null}}async update(t,e){return await(await fetch(`/_editor/api/jobs/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json()}async delete(t,e){const r=e?"?remove_file=true":"",s=`/_editor/api/jobs/${t}`+r;await fetch(s,{method:"DELETE",headers:{"Content-Type":"application/json"}})}async run(t){return(await fetch(`/_editor/api/jobs/${t}/run`,{method:"POST",headers:{"Content-Type":"application/json"}})).ok}}const y=new F;class f{record;isInitial=!0;constructor(t){this.record=I.create(y,t)}static async list(){return(await y.list()).map(e=>new f(e))}static async create(t,e,r,s){const i=await y.create(t,e,r,s);return new f(i)}static async get(t){const e=await y.get(t);return e?new f(e):null}async delete(t){await y.delete(this.id,t)}async duplicate(){return this}async save(t){const e=this.codeContent;await this.record.save(t),this.record.updateInitialState("code_content",e)}onUpdate(t){this.record.pubsub.subscribe("update",t)}hasChanges(t){return this.record.hasChanges(t)}getInitialState(t){return this.record.getInitialState(t)}updateInitialState(t,e){this.record.updateInitialState(t,e)}get schedule(){return this.record.get("schedule")}set schedule(t){this.record.set("schedule",t)}get type(){return"job"}get title(){return this.record.get("title")}set title(t){this.record.set("title",t)}get codeContent(){return this.record.get("code_content")}set codeContent(t){this.record.set("code_content",t)}get file(){return this.record.get("file")}set file(t){this.record.set("file",t)}get id(){return this.record.get("id")}async run(){return y.run(this.id)}get position(){const[t,e]=this.record.get("workflow_position");return{x:t,y:e}}static from(t){return new f(t)}hasChangesDeep(t){return this.record.hasChangesDeep(t)}}class Q{async list(){return await(await fetch("/_editor/api/scripts")).json()}async create(t,e,r,s){return await(await fetch("/_editor/api/scripts",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:t,file:e,position:r,id:s})})).json()}async get(t){try{return await(await fetch(`/_editor/api/scripts/${t}`)).json()}catch{return null}}async update(t,e){return await(await fetch(`/_editor/api/scripts/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json()}async delete(t,e){const r=e?"?remove_file=true":"",s=`/_editor/api/scripts/${t}`+r;await fetch(s,{method:"DELETE",headers:{"Content-Type":"application/json"}})}async run(t,e){return(await fetch(`/_editor/api/scripts/${t}/run`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({task_id:e})})).ok}}const w=new Q;class T{record;constructor(t){this.record=I.create(w,t)}static async list(){return(await w.list()).map(e=>new T(e))}static async create(t,e,r,s){const i=await w.create(t,e,r,s);return new T(i)}static async get(t){const e=await w.get(t);return e?new T(e):null}async delete(t){await w.delete(this.id,t)}async duplicate(){return this}async save(t){const e=this.codeContent;await this.record.save(t),this.record.updateInitialState("code_content",e)}onUpdate(t){this.record.pubsub.subscribe("update",t)}hasChanges(t){return this.record.hasChanges(t)}getInitialState(t){return this.record.getInitialState(t)}updateInitialState(t,e){this.record.updateInitialState(t,e)}get id(){return this.record.get("id")}get codeContent(){return this.record.get("code_content")}set codeContent(t){this.record.set("code_content",t)}get title(){return this.record.get("title")}set title(t){this.record.set("title",t)}get type(){return"tasklet"}get file(){return this.record.get("file")}set file(t){this.record.set("file",t)}get path(){return this.record.get("path")}set path(t){this.record.set("path",t)}async run(t){return w.run(this.id,t)}get position(){const[t,e]=this.record.get("workflow_position");return{x:t,y:e}}get isInitial(){return!1}static from(t){return new T(t)}}class st{async createTask(t,e,r){return fetch("/_editor/api/tasks",{method:"POST",body:JSON.stringify({name:t,payload:r,stage_id:e}),headers:{"Content-Type":"application/json"}}).then(s=>s.json())}async getAllTasks(t,e){const r={offset:t.currentIndex*t.pageSize,limit:t.pageSize,filter:{stage:e.stage,status:e.status,startDate:e.dateRange?e.dateRange[0]:void 0,endDate:e.dateRange?e.dateRange[1]:void 0}};return fetch("/_editor/api/tasks/list",{method:"POST",body:JSON.stringify(r),headers:{"Content-Type":"application/json"}}).then(s=>s.json())}async getStageTasks(t){return fetch(`/_editor/api/tasks/${t}`).then(e=>e.json())}async getSentStageTasks(t){return fetch(`/_editor/api/tasks/${t}/sent`).then(e=>e.json())}async updateTaskStatus(t,e){return fetch(`/_editor/api/tasks/${t}/status`,{method:"PUT",body:JSON.stringify({status:e}),headers:{"Content-Type":"application/json"}}).then(r=>r.json())}async clearAllTasks(){return fetch("/_editor/api/tasks/clear",{method:"DELETE"}).then(t=>t.json())}}class rt{projectId;constructor(t){this.projectId=t}async createTask(t,e,r){return await E.post(`projects/${this.projectId}/tasks`,{name:t,stageId:e,payload:r})}async getAllTasks(t,e){const r={offset:(t.currentIndex*t.pageSize).toString(),limit:t.pageSize.toString(),stageId:e.stage,status:e.status,startDate:e.dateRange?e.dateRange[0]:void 0,endDate:e.dateRange?e.dateRange[1]:void 0};return Object.keys(r).forEach(i=>r[i]===void 0&&delete r[i]),await E.get(`projects/${this.projectId}/tasks`,r)}async getStageTasks(t){throw new Error("Method not implemented.")}async getSentStageTasks(t){throw new Error("Method not implemented.")}async updateTaskStatus(t,e){throw new Error("Method not implemented.")}async fetchStages(){throw new Error("Method not implemented.")}async fetchStatuses(){throw new Error("Method not implemented.")}async clearAllTasks(){throw new Error("Method not implemented.")}}function W({api:o,fetchTasks:t}){const e=v({state:"idle"}),r=()=>{e.value={state:"idle"}},s=()=>{e.value={state:"creating",name:"My task",payloadCode:`{
    "key": "value"
  }`}},i=async c=>{const d=e.value;if(d.state!=="creating")throw new Error("Payload is required to create a task");if(!l.value)return;const S=JSON.parse(d.payloadCode),k=await o.createTask(d.name,c,S);return await t(),r(),k},l=L(()=>{const c=e.value;if(c.state!=="creating")return!1;try{const d=JSON.parse(c.payloadCode);return U.isObject(d)}catch{return!1}});return{createTask:i,creatingTaskState:e,cancelCreatingTask:r,startCreatingTask:s,isPayloadValid:l}}const x=["pink","orange","green","blue","purple","red","cyan","magenta","volcano","gold"],nt=({api:o,poll:t,stageId:e,stages:r})=>{const s=B({tasks:[],sentTasks:[],colorMap:new Map,pagination:{currentIndex:0,pageSize:10,totalCount:0},filters:{stage:void 0,status:void 0,dateRange:void 0},filterOptions:{stages:[],statuses:["pending","started","completed"].map(n=>({label:V(n),value:n}))}}),i=[{name:"setToPending",label:"Set to pending",handler:()=>{s.tasks.filter(a=>a.checked).map(a=>a.id).forEach(a=>_(a))}},{name:"setToCompleted",label:"Set to completed",handler:()=>{s.tasks.filter(a=>a.checked).map(a=>a.id).forEach(a=>C(a))}},{name:"duplicate",label:"Duplicate",handler:()=>{s.tasks.filter(a=>a.checked).forEach(async a=>{await o.createTask(a.type,a.targetStageId,a.payload),c()})}}],l=v(["pending"]),c=async()=>{const n=e?await o.getStageTasks(e):await o.getAllTasks(s.pagination,s.filters);s.tasks=n.tasks.map(a=>({key:a.id,id:a.id,type:a.type,status:a.status,targetStageId:a.targetStageId,targetStageTitle:a.targetStageTitle,targetStageType:a.targetStageType,sourceStageTitle:a.sourceStageTitle,sourceStageType:a.sourceStageType,created:{at:new Date(a.created.at).toString(),byExecutionId:a.created.byExecutionId,byStageId:a.created.byStageId},locked:a.locked?{at:new Date(a.locked.at).toString(),byExecutionId:a.locked.byExecutionId,byStageId:a.locked.byStageId}:null,completed:a.completed?{at:new Date(a.completed.at).toString(),byExecutionId:a.completed.byExecutionId,byStageId:a.completed.byStageId}:null,payload:a.payload,checked:!1})),s.pagination.totalCount=n.totalCount},d=async()=>{if(!e)return[];const n=await o.getSentStageTasks(e);s.sentTasks=n.tasks.map(a=>({key:a.id,id:a.id,type:a.type,status:a.status,targetStageId:a.targetStageId,targetStageTitle:a.targetStageTitle,targetStageType:a.targetStageType,sourceStageTitle:a.sourceStageTitle,sourceStageType:a.sourceStageType,created:{at:new Date(a.created.at).toString(),byExecutionId:a.created.byExecutionId,byStageId:a.created.byStageId},locked:a.locked?{at:new Date(a.locked.at).toString(),byExecutionId:a.locked.byExecutionId,byStageId:a.locked.byStageId}:null,completed:a.completed?{at:new Date(a.completed.at).toString(),byExecutionId:a.completed.byExecutionId,byStageId:a.completed.byStageId}:null,payload:a.payload}))},S=()=>{let n=0;s.tasks.concat(s.sentTasks??[]).forEach(b=>{s.colorMap.has(b.type)||(s.colorMap.set(b.type,x[n]),n=(n+1)%x.length)})};z(s.filters,async()=>{await Promise.all([c(),d()]),S()});const k=async()=>{await Promise.all([c(),d()]),S()},{startPolling:P,endPolling:D}=G({task:k,interval:15e3}),O=async()=>{if(await Promise.all([c(),d()]),S(),r===null){const n=Promise.all([h.list(),m.list(),f.list(),T.list()]).then(([a,b,j,u])=>[...a,...b,...j,...u]);s.filterOptions.stages=(await n).map(a=>({label:a.title,value:a.id}))}else s.filterOptions.stages=r.map(n=>({label:n.stageTitle,value:n.id}));P()},$=()=>{D()},_=async n=>{await o.updateTaskStatus(n,"pending"),c()},C=async n=>{await o.updateTaskStatus(n,"completed"),c()},A=n=>{s.tasks=s.tasks.map(a=>(a.id===n&&(a.checked=!a.checked),a))},R=()=>{const n=[],a=s.tasks.filter(u=>u.checked);return a.length===0?[]:(n.push("duplicate"),a.every(u=>u.status==="pending")&&n.push("setToCompleted"),a.every(u=>u.status==="completed")&&n.push("setToPending"),i.filter(u=>n.includes(u.name)))},M=async()=>{await o.clearAllTasks(),c(),d()},N=()=>[{title:"Type",dataIndex:"type",key:"type",align:"center"},{title:"Payload",dataIndex:"payload",key:"payload",align:"center",width:"20%"},{title:"Status",dataIndex:"status",key:"status",align:"center",filterMode:"menu"},{title:"Stage",dataIndex:"targetStageTitle",key:"targetStageTitle",align:"center"},{title:"Created at",dataIndex:"createdAt",key:"createdAt",align:"center"},{title:"Completed at",dataIndex:"completedAt",key:"completedAt",align:"center"},{key:"actions",dataIndex:"actions",align:"center"}],J=W({api:o,fetchTasks:c});return{setup:O,tearDown:$,state:s,getColumns:N,collapseValue:l,setToPending:_,setToCompleted:C,fetchTasks:c,fetchSentTasks:d,checkTask:A,getPossibleActions:R,clearAllTasks:M,...J}};export{h as F,m as H,f as J,st as L,rt as R,T as S,nt as T};
//# sourceMappingURL=tasksController-BZzAjAcg.js.map
