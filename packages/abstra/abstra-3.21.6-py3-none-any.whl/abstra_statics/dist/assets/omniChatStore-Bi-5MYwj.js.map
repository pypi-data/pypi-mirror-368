{"version":3,"file":"omniChatStore-Bi-5MYwj.js","sources":["../../node_modules/@phosphor-icons/vue/dist/icons/PhCheckCircle.vue.mjs","../../src/utils/stream.ts","../../src/models/ai/repository.ts","../../src/services/ai/components/CopyButton.vue","../../src/services/ai/SmartChatController.ts","../../src/services/log.ts","../../src/services/ai/omniChatStore.ts"],"sourcesContent":["import { defineComponent as g, inject as a, computed as n, openBlock as t, createElementBlock as e, mergeProps as Z, renderSlot as A, createCommentVNode as v, createElementVNode as o } from \"vue\";\nconst y = [\"width\", \"height\", \"fill\", \"transform\"], M = { key: 0 }, f = /* @__PURE__ */ o(\"path\", { d: \"M176.49,95.51a12,12,0,0,1,0,17l-56,56a12,12,0,0,1-17,0l-24-24a12,12,0,1,1,17-17L112,143l47.51-47.52A12,12,0,0,1,176.49,95.51ZM236,128A108,108,0,1,1,128,20,108.12,108.12,0,0,1,236,128Zm-24,0a84,84,0,1,0-84,84A84.09,84.09,0,0,0,212,128Z\" }, null, -1), w = [\n  f\n], k = { key: 1 }, C = /* @__PURE__ */ o(\"path\", {\n  d: \"M224,128a96,96,0,1,1-96-96A96,96,0,0,1,224,128Z\",\n  opacity: \"0.2\"\n}, null, -1), x = /* @__PURE__ */ o(\"path\", { d: \"M173.66,98.34a8,8,0,0,1,0,11.32l-56,56a8,8,0,0,1-11.32,0l-24-24a8,8,0,0,1,11.32-11.32L112,148.69l50.34-50.35A8,8,0,0,1,173.66,98.34ZM232,128A104,104,0,1,1,128,24,104.11,104.11,0,0,1,232,128Zm-16,0a88,88,0,1,0-88,88A88.1,88.1,0,0,0,216,128Z\" }, null, -1), L = [\n  C,\n  x\n], S = { key: 2 }, z = /* @__PURE__ */ o(\"path\", { d: \"M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24Zm45.66,85.66-56,56a8,8,0,0,1-11.32,0l-24-24a8,8,0,0,1,11.32-11.32L112,148.69l50.34-50.35a8,8,0,0,1,11.32,11.32Z\" }, null, -1), B = [\n  z\n], N = { key: 3 }, b = /* @__PURE__ */ o(\"path\", { d: \"M172.24,99.76a6,6,0,0,1,0,8.48l-56,56a6,6,0,0,1-8.48,0l-24-24a6,6,0,0,1,8.48-8.48L112,151.51l51.76-51.75A6,6,0,0,1,172.24,99.76ZM230,128A102,102,0,1,1,128,26,102.12,102.12,0,0,1,230,128Zm-12,0a90,90,0,1,0-90,90A90.1,90.1,0,0,0,218,128Z\" }, null, -1), E = [\n  b\n], P = { key: 4 }, V = /* @__PURE__ */ o(\"path\", { d: \"M173.66,98.34a8,8,0,0,1,0,11.32l-56,56a8,8,0,0,1-11.32,0l-24-24a8,8,0,0,1,11.32-11.32L112,148.69l50.34-50.35A8,8,0,0,1,173.66,98.34ZM232,128A104,104,0,1,1,128,24,104.11,104.11,0,0,1,232,128Zm-16,0a88,88,0,1,0-88,88A88.1,88.1,0,0,0,216,128Z\" }, null, -1), W = [\n  V\n], $ = { key: 5 }, j = /* @__PURE__ */ o(\"path\", { d: \"M170.83,101.17a4,4,0,0,1,0,5.66l-56,56a4,4,0,0,1-5.66,0l-24-24a4,4,0,0,1,5.66-5.66L112,154.34l53.17-53.17A4,4,0,0,1,170.83,101.17ZM228,128A100,100,0,1,1,128,28,100.11,100.11,0,0,1,228,128Zm-8,0a92,92,0,1,0-92,92A92.1,92.1,0,0,0,220,128Z\" }, null, -1), q = [\n  j\n], D = {\n  name: \"PhCheckCircle\"\n}, H = /* @__PURE__ */ g({\n  ...D,\n  props: {\n    weight: {\n      type: String\n    },\n    size: {\n      type: [String, Number]\n    },\n    color: {\n      type: String\n    },\n    mirrored: {\n      type: Boolean\n    }\n  },\n  setup(c) {\n    const s = c, d = a(\"weight\", \"regular\"), _ = a(\"size\", \"1em\"), h = a(\"color\", \"currentColor\"), u = a(\"mirrored\", !1), l = n(() => s.weight ?? d), i = n(() => s.size ?? _), p = n(() => s.color ?? h), m = n(() => s.mirrored !== void 0 ? s.mirrored ? \"scale(-1, 1)\" : void 0 : u ? \"scale(-1, 1)\" : void 0);\n    return (r, F) => (t(), e(\"svg\", Z({\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 256 256\",\n      width: i.value,\n      height: i.value,\n      fill: p.value,\n      transform: m.value\n    }, r.$attrs), [\n      A(r.$slots, \"default\"),\n      l.value === \"bold\" ? (t(), e(\"g\", M, w)) : l.value === \"duotone\" ? (t(), e(\"g\", k, L)) : l.value === \"fill\" ? (t(), e(\"g\", S, B)) : l.value === \"light\" ? (t(), e(\"g\", N, E)) : l.value === \"regular\" ? (t(), e(\"g\", P, W)) : l.value === \"thin\" ? (t(), e(\"g\", $, q)) : v(\"\", !0)\n    ], 16, y));\n  }\n});\nexport {\n  H as default\n};\n","abstract class Mode<ACC> {\n  public staging: string;\n\n  constructor(public flag: string, public acc: ACC) {\n    this.staging = '';\n  }\n\n  abstract reduce(chunk: string): undefined | ACC;\n}\n\nclass JsonMode extends Mode<object[]> {\n  constructor() {\n    super('___JSON_MODE___', []);\n  }\n\n  reduceChar(char: string): object | undefined {\n    try {\n      this.staging += char;\n      const newElement = JSON.parse(this.staging);\n      this.acc.push(newElement);\n      this.staging = '';\n      return newElement;\n    } catch {\n      return undefined;\n    }\n  }\n\n  reduce(chunk: string) {\n    const results: object[] = [];\n    for (const char of chunk) {\n      const reduced = this.reduceChar(char);\n      if (reduced !== undefined) {\n        results.push(reduced);\n      }\n    }\n    return results;\n  }\n}\n\nclass TextMode extends Mode<string> {\n  constructor() {\n    super('___TEXT_MODE___', '');\n  }\n\n  reduce(chunk: string) {\n    this.staging += chunk;\n    this.acc = this.staging;\n    return chunk;\n  }\n}\n\nexport class Reducer {\n  mode: Mode<any>;\n  modes: Mode<any>[] = [new TextMode(), new JsonMode()];\n  staging = '';\n  chunkOnBuffer = '';\n  private flagMap: Map<string, Mode<any>>;\n  private flagPrefixes: Set<string>;\n\n  constructor() {\n    this.mode = this.modes[0]!;\n    this.flagMap = new Map();\n    this.flagPrefixes = new Set();\n    for (const mode of this.modes) {\n      this.flagMap.set(mode.flag, mode);\n      for (let i = 1; i < mode.flag.length; i++) {\n        this.flagPrefixes.add(mode.flag.slice(0, i));\n      }\n    }\n  }\n\n  *reduce(chunk: string) {\n    for (const char of chunk) {\n      this.staging += char;\n\n      if (this.flagMap.has(this.staging)) {\n        this.mode = this.flagMap.get(this.staging)!;\n        this.staging = '';\n        continue;\n      }\n\n      if (this.flagPrefixes.has(this.staging)) {\n        continue;\n      }\n\n      while (this.staging.length > 0) {\n        const firstChar = this.staging[0];\n        this.staging = this.staging.slice(1);\n        const reduced = this.mode.reduce(firstChar);\n        if (reduced !== undefined) {\n          if (Array.isArray(reduced)) {\n            yield* reduced;\n          } else {\n            yield reduced;\n          }\n        }\n        if (this.flagPrefixes.has(this.staging)) {\n          break;\n        }\n      }\n    }\n  }\n\n  *reduceInChunks(chunkSize: number, chunk: string) {\n    let currentChunk = '';\n\n    for (const part of this.reduce(chunk)) {\n      if (typeof part === 'string') {\n        currentChunk += part;\n        while (currentChunk.length >= chunkSize) {\n          yield currentChunk.slice(0, chunkSize);\n          currentChunk = currentChunk.slice(chunkSize);\n        }\n      } else {\n        if (currentChunk.length > 0) {\n          yield currentChunk;\n          currentChunk = '';\n        }\n        yield part;\n      }\n    }\n    if (currentChunk.length > 0) {\n      yield currentChunk;\n    }\n  }\n}\n","import { CloudApiGateway } from '@/apps/console/apis/cloud/gateway';\nimport {\n  AbstraLibApiAiStreamRequest,\n  CloudApiCliAiV2ConversationsResponse,\n} from '@/contracts.generated';\nimport type { AiMessage } from '@/services/log';\nimport { IdentifiedLogMessage } from '@/services/log';\nimport { Reducer } from '@/utils/stream';\nimport type { IAiChatRepository, Vote } from './types';\n\nconst CHAR_BUFFER_SIZE = 300;\n\nexport class LocalAiChatRepository implements IAiChatRepository {\n  private _baseUrl = '/_editor/api/ai';\n  private _headers = {\n    'Content-Type': 'application/json',\n  };\n\n  async *sendMessage(\n    conversationId: string,\n    content: {\n      type: 'text';\n      text: string;\n    }[],\n    context: Record<string, unknown>,\n    abort: () => boolean,\n    humanApproval?: string,\n  ): AsyncGenerator<string | AiMessage> {\n    const requestBody = {\n      conversationId,\n      content,\n      context,\n      humanApproval,\n    } satisfies AbstraLibApiAiStreamRequest;\n\n    const response = await fetch(`${this._baseUrl}/stream`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify(requestBody),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to send message');\n    }\n\n    const reader = response.body?.getReader();\n    if (!reader) throw new Error('No response body');\n\n    const reducer = new Reducer();\n\n    while (true) {\n      if (abort()) {\n        break;\n      }\n      const chunk = await reader.read();\n      if (chunk.done) break;\n      for (const item of reducer.reduceInChunks(\n        CHAR_BUFFER_SIZE,\n        new TextDecoder().decode(chunk.value),\n      )) {\n        yield item;\n      }\n    }\n  }\n\n  async deleteThread(threadId: string): Promise<void> {\n    const res = await fetch(`${this._baseUrl}/thread/${threadId}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    });\n    if (!res.ok) {\n      throw new Error('Failed to delete thread');\n    }\n  }\n\n  async abortStreaming(langGraphThreadId: string): Promise<void> {\n    const response = await fetch(`${this._baseUrl}/abort`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({ langGraphThreadId }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to abort streaming');\n    }\n  }\n\n  async getHistory(limit: number, offset: number): Promise<CloudApiCliAiV2ConversationsResponse> {\n    const response = await fetch(`${this._baseUrl}/history?limit=${limit}&offset=${offset}`, {\n      method: 'GET',\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch history');\n    }\n\n    return await response.json();\n  }\n\n  async vote(\n    vote: Vote,\n    question: IdentifiedLogMessage,\n    answer: IdentifiedLogMessage,\n    context: IdentifiedLogMessage[],\n  ): Promise<void> {\n    const requestBody = {\n      vote,\n      question,\n      answer,\n      context,\n    };\n\n    await fetch(`${this._baseUrl}/vote`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify(requestBody),\n    });\n  }\n\n  startConversation(): Promise<{ conversationId: string }> {\n    return new Promise((resolve, reject) => {\n      fetch(`${this._baseUrl}/start-conversation`, {\n        method: 'POST',\n        headers: this._headers,\n      })\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error('Failed to start conversation');\n          }\n          return response.json();\n        })\n        .then((data) => resolve(data))\n        .catch((error) => reject(error));\n    });\n  }\n}\n\nexport class RemoteAiChatRepository implements IAiChatRepository {\n  projectId: string;\n  baseUrl: string;\n\n  constructor(projectId: string) {\n    this.projectId = projectId;\n    this.baseUrl = `projects/${projectId}`;\n  }\n  startConversation(): Promise<{ conversationId: string }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async *sendMessage(\n    conversationId: string,\n    content: {\n      type: 'text';\n      text: string;\n    }[],\n    context: Record<string, unknown>,\n    abort: () => boolean,\n    humanApproval?: string,\n  ): AsyncGenerator<string | AiMessage> {\n    const requestBody = {\n      conversationId,\n      content,\n      context,\n      humanApproval,\n    };\n\n    const response = await CloudApiGateway.postRaw(`${this.baseUrl}/messages`, requestBody);\n\n    const reader = response.body?.getReader();\n    if (!reader) throw new Error('No response body');\n\n    const reducer = new Reducer();\n\n    while (true) {\n      if (abort()) {\n        break;\n      }\n      const chunk = await reader.read();\n      if (chunk.done) break;\n      for (const item of reducer.reduceInChunks(\n        CHAR_BUFFER_SIZE,\n        new TextDecoder().decode(chunk.value),\n      )) {\n        yield item;\n      }\n    }\n  }\n\n  async abortStreaming(langGraphThreadId: string): Promise<void> {\n    await CloudApiGateway.post(`${this.baseUrl}/abort`, { langGraphThreadId });\n  }\n\n  async getHistory(limit: number, offset: number): Promise<CloudApiCliAiV2ConversationsResponse> {\n    const requestQuery = {\n      limit: `${limit}`,\n      offset: `${offset}`,\n    };\n    return await CloudApiGateway.get(`${this.baseUrl}/history`, requestQuery);\n  }\n\n  async deleteThread(threadId: string): Promise<void> {\n    await CloudApiGateway.delete(`${this.baseUrl}/threads/${threadId}`);\n  }\n\n  async vote(\n    _vote: Vote,\n    _question: IdentifiedLogMessage,\n    _answer: IdentifiedLogMessage,\n    _context: IdentifiedLogMessage[],\n  ): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n}\n","<template>\n  <AntTooltip>\n    <template #title> {{ copyText }} </template>\n    <div class=\"copy-button\" @click=\"onCopy\">\n      <PhCopySimple v-if=\"!copied\" color=\"#fff\" size=\"22\" />\n      <PhCheckCircle v-else color=\"#fff\" size=\"22\" />\n    </div>\n  </AntTooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport { PhCheckCircle, PhCopySimple } from '@phosphor-icons/vue';\nimport { Tooltip as AntTooltip } from 'ant-design-vue';\nimport { computed, ref } from 'vue';\n\nconst props = defineProps<{\n  textToCopy: string;\n}>();\n\nconst copied = ref(false);\n\nconst onCopy = () => {\n  navigator.clipboard.writeText(props.textToCopy);\n  copied.value = true;\n  setTimeout(() => (copied.value = false), 2000);\n};\n\nconst copyText = computed(() => {\n  return copied.value ? 'Copied!' : 'Copy to clipboard';\n});\n</script>\n\n<style scoped lang=\"scss\">\n.copy-button {\n  position: absolute;\n  top: 12px;\n  right: 12px;\n  cursor: pointer;\n  outline: none;\n}\n</style>\n","import { CloudApiCliAiV2ConversationsResponse } from '@/contracts.generated';\nimport { IAiChatRepository } from '@/models/ai';\nimport { ExecutionLogs } from '@/models/executions';\nimport { LogMessage, LogService } from '@/services/log';\nimport { uuid } from '@/utils/uuid';\nimport { captureException } from '@sentry/vue';\nimport { createVNode, ref, Ref, render } from 'vue';\nimport SmartChatCopyButton from './components/CopyButton.vue';\n\nexport type Vote = 'good' | 'bad';\n\ntype UnseenState = {\n  type: 'unseen';\n  count: number;\n  severity: 'error' | 'info';\n};\n\ntype SeenState = {\n  type: 'seen';\n};\n\ntype BadgeState = SeenState | UnseenState;\n\ntype SmartChatState = 'idle' | 'processing' | 'answering';\n\nexport type SmartChatEnvironment =\n  | {\n      origin: 'editor';\n    }\n  | {\n      origin: 'console';\n      projectId: string;\n    };\n\nexport type ExecutionError = {\n  payload: unknown;\n};\n\nexport class SmartChatController {\n  private _repository: IAiChatRepository;\n  private conversationId: Ref<string | null>;\n  private _input: Ref<string>;\n  private _badgeState: Ref<BadgeState>;\n  private _smartChatState: Ref<SmartChatState>;\n  private _logService: LogService;\n  private _stageId: string | null = null;\n  private _hasError: Ref<ExecutionError | null> = ref(null);\n\n  private _isLoadingHistory: Ref<boolean> = ref(false);\n  private _history: Ref<CloudApiCliAiV2ConversationsResponse> = ref([]);\n  private _threadHistoryFetchInfo: Ref<{ limit: number; offset: number; done: boolean }> = ref({\n    limit: 10,\n    offset: 0,\n    done: false,\n  });\n  private _recentlyAccessedThreads: Ref<CloudApiCliAiV2ConversationsResponse> = ref([]);\n\n  private _environment: SmartChatEnvironment;\n\n  codeForApproval: Ref<{ stageId: string; code: string } | null> = ref(null);\n\n  constructor(\n    repository: IAiChatRepository,\n    logService: LogService,\n    environment: SmartChatEnvironment,\n  ) {\n    this._repository = repository;\n    this._logService = logService;\n    this.conversationId = ref(null);\n    this._input = ref('');\n    this._badgeState = ref({ type: 'seen' });\n    this._smartChatState = ref('idle');\n    this._environment = environment;\n  }\n\n  init() {\n    this.setupThread();\n    this.renderCopyButtons();\n    this.fetchHistory();\n  }\n\n  setupThread = async () => {\n    this.conversationId.value = `abstra-assistant-thread-${uuid()}`;\n    this._recentlyAccessedThreads.value.unshift({\n      id: this.conversationId.value,\n      messages: [],\n      createdAt: new Date().toISOString(),\n    });\n    return;\n  };\n\n  fetchHistory = async () => {\n    this._isLoadingHistory.value = true;\n    const history = await this._repository.getHistory(\n      this._threadHistoryFetchInfo.value.limit,\n      this._threadHistoryFetchInfo.value.offset,\n    );\n    this._history.value = history;\n    this._isLoadingHistory.value = false;\n  };\n\n  loadMoreHistory = async () => {\n    this._isLoadingHistory.value = true;\n    this._threadHistoryFetchInfo.value.offset += this._threadHistoryFetchInfo.value.limit;\n    const history = await this._repository.getHistory(\n      this._threadHistoryFetchInfo.value.limit,\n      this._threadHistoryFetchInfo.value.offset,\n    );\n    if (history.length < this._threadHistoryFetchInfo.value.limit) {\n      this._threadHistoryFetchInfo.value.done = true;\n    }\n    const newHistory = [...this._history.value, ...history];\n    this._history.value = newHistory;\n    this._isLoadingHistory.value = false;\n  };\n\n  setStageId = (stageId: string | null) => {\n    this._stageId = stageId;\n  };\n\n  setError = (error: ExecutionError | null) => {\n    this._hasError.value = error;\n  };\n\n  get hasError() {\n    return this._hasError.value?.payload || null;\n  }\n\n  private _fillChat = (threadHistory: CloudApiCliAiV2ConversationsResponse[number]['messages']) => {\n    this._logService.clear();\n    for (const log of threadHistory) {\n      if (log.toolTitle) {\n        this._logService.log({\n          type: 'ai-tool-approval',\n          toolCallId: log.toolCallId,\n          description: log.toolTitle,\n          args: {},\n          disabled: false,\n          needsApproval: false,\n          loading: false,\n        });\n        this._logService.log({\n          type: 'ai-tool-call-response',\n          toolCallId: log.toolCallId,\n          response: log.content,\n        });\n      } else {\n        this._logService.log({\n          type: log.role === 'user' ? 'ai-input' : 'ai-output',\n          log: log.content,\n        });\n      }\n    }\n    this.renderCopyButtons();\n  };\n\n  moveThreadFromHistoryToRecents = (threadId: string) => {\n    this.conversationId.value = threadId;\n    const thread = this._history.value.find((thread) => thread.id === threadId);\n    if (!thread) {\n      throw new Error(`Thread ${threadId} not found`);\n    }\n    const index = this._recentlyAccessedThreads.value.findIndex((t) => t.id === threadId);\n    if (index !== -1) {\n      this._recentlyAccessedThreads.value.splice(index, 1);\n    }\n    this._recentlyAccessedThreads.value.unshift(thread);\n    this._fillChat(thread.messages);\n  };\n\n  deleteThread = (threadId: string) => {\n    this._repository.deleteThread(threadId);\n    this.removeFromRecentlyAccessedThreads(threadId);\n    const index = this._history.value.findIndex((thread) => thread.id === threadId);\n    if (index !== -1) {\n      this._history.value.splice(index, 1);\n    }\n  };\n\n  setCurrentThreadFromRecents = (threadId: string) => {\n    this.conversationId.value = threadId;\n    const index = this._recentlyAccessedThreads.value.findIndex((t) => t.id === threadId);\n    if (index === -1) {\n      throw new Error(`Thread ${threadId} not found`);\n    }\n    const [thread] = this._recentlyAccessedThreads.value.splice(index, 1);\n    this._recentlyAccessedThreads.value.unshift(thread);\n    this._fillChat(thread.messages);\n  };\n\n  removeFromRecentlyAccessedThreads = (threadId: string) => {\n    const index = this._recentlyAccessedThreads.value.findIndex((t) => t.id === threadId);\n    if (index === -1) {\n      throw new Error(`Thread ${threadId} not found`);\n    }\n    this._recentlyAccessedThreads.value.splice(index, 1);\n    this._logService.clear();\n    if (this._recentlyAccessedThreads.value.length === 0) {\n      this.conversationId.value = null;\n    } else {\n      const newFirstThread = this._recentlyAccessedThreads.value[0];\n      this.conversationId.value = newFirstThread.id;\n      this._fillChat(newFirstThread.messages);\n    }\n  };\n\n  renderCopyButtons = () => {\n    const codes = document.querySelectorAll('pre');\n    codes.forEach((code) => {\n      (code as HTMLElement).style.position = 'relative';\n      const icon = createVNode(SmartChatCopyButton, {\n        textToCopy: code.textContent,\n      });\n      render(icon, code);\n    });\n  };\n\n  clearLogService = () => {\n    this._logService.clear();\n  };\n\n  send = async (panesInfo?: Record<string, unknown>, humanApproval?: string) => {\n    if (!this.conversationId.value) {\n      await this.setupThread();\n    }\n    this._logService.log({\n      type: 'ai-input',\n      log: this._input.value,\n    });\n\n    this._smartChatState.value = 'processing';\n\n    try {\n      const id = uuid();\n      const conversationId = this.conversationId.value;\n      if (!conversationId) {\n        throw new Error('Conversation ID is not set');\n      }\n      const content = [\n        {\n          type: 'text' as const,\n          text: this._input.value,\n        },\n      ];\n      const context = {\n        currentEditorUrl: window.location.href,\n        panesInfo: panesInfo || {},\n      };\n      const response = this._repository.sendMessage(\n        conversationId,\n        content,\n        context,\n        this.isIdle.bind(this),\n        humanApproval,\n      );\n\n      let answer = '';\n      let currentOutputId = id;\n      let currentSegmentAnswer = '';\n      for await (const chunk of response) {\n        if (this.isIdle()) {\n          break;\n        }\n        if (this._smartChatState.value === 'processing') {\n          this._smartChatState.value = 'answering';\n        }\n\n        // TODO: FIX THIS ANY TYPE\n        const parsed = chunk as any;\n        if (typeof parsed === 'string') {\n          answer += parsed;\n          currentSegmentAnswer += parsed;\n          this._logService.log(\n            {\n              type: 'ai-output',\n              log: currentSegmentAnswer,\n            },\n            currentOutputId,\n          );\n        } else if (parsed instanceof Object) {\n          if (parsed.type === 'ai-tool-approval') {\n            this._logService.log({\n              type: 'ai-tool-approval',\n              toolCallId: parsed.toolCallId,\n              description: parsed.title,\n              args: parsed.args,\n              disabled: false,\n              needsApproval: true,\n              loading: false,\n            });\n            if (parsed.args?.changes?.code_content) {\n              this.codeForApproval.value = {\n                stageId: parsed.args.id,\n                code: parsed.args.changes.code_content,\n              };\n            }\n            currentOutputId = uuid();\n            currentSegmentAnswer = '';\n          } else if (parsed.type === 'ai-tool-call') {\n            this._logService.log({\n              type: 'ai-tool-approval',\n              toolCallId: parsed.toolCallId,\n              description: parsed.title,\n              args: parsed.args,\n              disabled: false,\n              needsApproval: false,\n              loading: false,\n            });\n            currentOutputId = uuid();\n            currentSegmentAnswer = '';\n          } else if (parsed.type === 'ai-tool-call-response') {\n            this._logService.log({\n              type: 'ai-tool-call-response',\n              toolCallId: parsed.toolCallId,\n              response: parsed.response,\n            });\n          }\n        }\n      }\n\n      this._recentlyAccessedThreads.value = this._recentlyAccessedThreads.value.map((thread) => {\n        if (thread.id === this.conversationId.value) {\n          thread.messages.unshift({\n            role: 'assistant',\n            content: answer,\n            createdAt: new Date().toISOString(),\n          });\n        }\n        return thread;\n      });\n\n      this._input.value = '';\n    } catch (e) {\n      this._logService.log({\n        type: 'ai-output',\n        log: 'Sorry, there was an issue processing your request. Please try again later.',\n      });\n      console.error(e);\n      captureException(e);\n    } finally {\n      this._smartChatState.value = 'idle';\n      this.renderCopyButtons();\n    }\n  };\n\n  get logService() {\n    return this._logService;\n  }\n\n  shouldRenderLoadMoreHistory() {\n    return !this._threadHistoryFetchInfo.value.done;\n  }\n\n  get pastThreads() {\n    return this._history.value.map((thread) => {\n      if (thread.messages.length === 0) {\n        return {\n          threadId: thread.id,\n          title: 'New thread',\n        };\n      } else {\n        return {\n          threadId: thread.id,\n          title: thread.messages[0].content.slice(0, 20) + '...',\n        };\n      }\n    });\n  }\n\n  get recentlyAccessedThreads() {\n    return this._recentlyAccessedThreads.value.map((thread) => ({\n      threadId: thread.id,\n      title:\n        thread.messages.length > 0 ? thread.messages[0].content.slice(0, 20) + '...' : 'New thread',\n    }));\n  }\n\n  abort = () => {\n    if (!this.conversationId.value) {\n      throw new Error('Conversation ID is not set');\n    }\n    this._repository.abortStreaming(this.conversationId.value);\n    this._smartChatState.value = 'idle';\n  };\n\n  isLoadingHistory = () => {\n    return this._isLoadingHistory.value;\n  };\n\n  isProcessing = () => {\n    return this._smartChatState.value === 'processing';\n  };\n\n  isAnswering = () => {\n    return this._smartChatState.value === 'answering';\n  };\n\n  isIdle = () => {\n    return this._smartChatState.value === 'idle';\n  };\n\n  setSeen = () => {\n    this._badgeState.value = { type: 'seen' };\n  };\n\n  setUnseen = (message: LogMessage) => {\n    this._badgeState.value = {\n      type: 'unseen',\n      count: this._badgeState.value.type === 'unseen' ? this._badgeState.value.count + 1 : 1,\n      severity: message.type === 'stderr' ? 'error' : 'info',\n    };\n  };\n\n  setInput = (value?: string) => {\n    value = value?.trimEnd();\n    this._input.value = value || '';\n  };\n\n  regenerateLast = async () => {\n    for (let i = this._logService.logs.length - 1; i >= 0; i--) {\n      const log = this._logService.logs[i];\n      if (log.type === 'ai-input') {\n        this.setInput(log.log);\n        break;\n      }\n    }\n    await this.send();\n  };\n\n  get badgeState() {\n    return this._badgeState.value;\n  }\n\n  get input() {\n    return this._input.value;\n  }\n\n  fixJson = async (jsonContent: string, errorMessage: string) => {\n    this._logService.clear();\n    this._logService.log({\n      type: 'ai-input',\n      log: `here is my json code:\n      ${jsonContent}\n      And I got this error:`,\n    });\n    this._logService.log({\n      type: 'stderr',\n      log: errorMessage,\n    });\n    this.setSeen();\n    this.setInput('Can you fix this JSON?');\n    await this.send();\n  };\n\n  askAboutError = async (logs: ExecutionLogs, code: string | null) => {\n    this._logService.clear();\n    this.setInput(`I have this error in my code:\n      ${logs.entries.map((entry) => entry.payload.text).join('')}\\n\n      Can you help me understand what went wrong?\n      My current code is: ${code || 'No code provided'}`);\n    await this.send();\n  };\n\n  vote = async (index: number, vote: Vote) => {\n    const answer = this._logService.logs[index];\n    const question = this._logService.logs[index - 1];\n    const context = this._logService.logs.slice(0, index - 1);\n    await this._repository.vote(vote, question, answer, context);\n  };\n}\n","import { uuid } from '@/utils/uuid';\nimport { reactive } from 'vue';\nimport { BaseSmartAction } from './ai/actions/base';\n\ntype RestartMessage = {\n  type: 'restart';\n};\n\ntype AiInputMessage = {\n  type: 'ai-input';\n  log: string;\n};\n\ntype AiOutputMessage = {\n  type: 'ai-output';\n  log: string;\n};\n\ntype AiActionsMessage = {\n  type: 'ai-actions';\n  actions: BaseSmartAction[];\n  streaming?: boolean;\n};\n\nexport type AiToolApprovalMessage = {\n  type: 'ai-tool-approval' | 'ai-tool-call';\n  toolCallId?: string;\n  description: string;\n  args: Record<string, any>;\n  disabled: boolean;\n  needsApproval: boolean;\n  loading: boolean;\n};\n\nexport type AiToolResponseMessage = {\n  type: 'ai-tool-call-response';\n  toolCallId?: string;\n  response: string;\n};\n\ntype EvalOutputMessage = {\n  type: 'eval-output';\n  log: string;\n};\n\ntype EvalInputMessage = {\n  type: 'eval-input';\n  log: string;\n};\n\ntype StdioMessage = {\n  type: 'stdout' | 'stderr';\n  log: string;\n};\n\nexport type AiMessage =\n  | AiInputMessage\n  | AiOutputMessage\n  | AiActionsMessage\n  | AiToolApprovalMessage\n  | AiToolResponseMessage;\ntype EvalMessage = EvalOutputMessage | EvalInputMessage;\n\nexport type LogMessage = StdioMessage | RestartMessage | AiMessage | EvalMessage;\n\nexport type IdentifiedLogMessage = LogMessage & { id: string };\nexport class LogService {\n  private logState: { log: IdentifiedLogMessage[] } = reactive({ log: [] });\n  private _listeners: Record<string, (msg: LogMessage) => void> = {};\n\n  static create() {\n    return new LogService();\n  }\n\n  get logs() {\n    return this.logState.log;\n  }\n\n  hasAiLogs() {\n    return this.logs.some((log) => log.type === 'ai-input' || log.type === 'ai-output');\n  }\n\n  log(msg: LogMessage, id?: string) {\n    if (\n      msg.type !== 'restart' &&\n      msg.type !== 'ai-actions' &&\n      msg.type !== 'ai-tool-approval' &&\n      msg.type !== 'ai-tool-call-response' &&\n      'log' in msg &&\n      msg.log.trim() === ''\n    )\n      return;\n    const log = id ? this.logs.find((log) => log.id === id) : null;\n\n    if (log) {\n      if (log.type === 'stderr' && msg.type === 'stderr') {\n        msg.log = log.log + '\\n' + msg.log;\n      }\n      Object.assign(log, msg);\n    } else {\n      this.logs.push({\n        ...msg,\n        id: id || uuid(),\n      });\n    }\n    this.notifyListeners(msg);\n    return id;\n  }\n\n  clear() {\n    this.logState.log = [];\n  }\n\n  listen(callback: (msg: LogMessage) => void): string {\n    const id = uuid();\n    this._listeners[id] = callback;\n    return id;\n  }\n\n  unlisten(id: string) {\n    delete this._listeners[id];\n  }\n\n  notifyListeners(msg: LogMessage) {\n    Object.values(this._listeners).forEach((listener) => listener(msg));\n  }\n\n  getLastExecutionLogs = (type: 'stdout' | 'stderr') => {\n    let executionLogs = '';\n    for (let i = this.logs.length - 1; i >= 0; i--) {\n      const log = this.logs[i];\n      if (log.type !== type && executionLogs.length > 0) {\n        break;\n      }\n      if (log.type === type) {\n        executionLogs = `${log.log}\\n${executionLogs}`;\n      }\n    }\n    return executionLogs;\n  };\n}\n","import { LocalAiChatRepository, RemoteAiChatRepository } from '@/models/ai/repository';\nimport { IAiChatRepository } from '@/models/ai/types';\nimport { PubSub } from '@/utils/pubsub';\nimport { defineStore } from 'pinia';\nimport { computed, ref, shallowRef } from 'vue';\nimport { LogService } from '../log';\nimport { SmartChatController } from './SmartChatController';\n\ntype OmniChatEvents = {\n  tableCreated: { tableId: string };\n  columnCreated: { tableId: string; columnId: string };\n  envVarCreated: { envVarKey: string };\n  stageCreated: { stageId: string };\n  transitionCreated: { sourceStageId: string; targetStageId: string };\n  replaceCode: { code: string };\n  stageEdited: { stageId: string; name: string };\n  envVarEdited: { envVarKey: string };\n  packageInstalled: { packageName: string };\n  finishActions: { status: 'success' | 'error' };\n};\n\nexport const omniChatPubSub = new PubSub<OmniChatEvents>();\n\nexport const useOmniChatStore = defineStore('omniChat', () => {\n  const isOpen = ref(true);\n  const isInputFocused = ref(false);\n\n  const logService = LogService.create();\n  const repository = shallowRef<IAiChatRepository>();\n  const controller = shallowRef<SmartChatController>();\n\n  const init = (version: 'console' | 'editor', projectId?: string) => {\n    if (controller.value) return;\n\n    if (version === 'console') {\n      if (!projectId) throw new Error('Project ID is required for console chat');\n      repository.value = new RemoteAiChatRepository(projectId);\n      controller.value = new SmartChatController(repository.value, logService, {\n        origin: version,\n        projectId,\n      });\n    } else {\n      repository.value = new LocalAiChatRepository();\n      controller.value = new SmartChatController(repository.value, logService, {\n        origin: version,\n      });\n    }\n  };\n\n  const focusInput = () => {\n    isInputFocused.value = true;\n  };\n\n  const blurInput = () => {\n    isInputFocused.value = false;\n  };\n\n  const open = () => {\n    isOpen.value = true;\n    focusInput();\n  };\n\n  const close = () => {\n    isOpen.value = false;\n    blurInput();\n  };\n\n  const toggle = () => {\n    isOpen.value ? close() : open();\n  };\n\n  return {\n    isOpen,\n    isInputFocused,\n    focusInput,\n    blurInput,\n    open,\n    close,\n    toggle,\n    controller: computed(() => controller.value),\n    repository,\n    init,\n  };\n});\n"],"names":["y","M","f","o","w","k","C","x","L","S","z","B","N","b","E","P","V","W","$","j","q","D","H","g","c","s","d","a","_","h","u","l","n","i","p","m","r","F","t","e","Z","A","v","Mode","flag","acc","JsonMode","char","newElement","chunk","results","reduced","TextMode","Reducer","mode","firstChar","chunkSize","currentChunk","part","CHAR_BUFFER_SIZE","LocalAiChatRepository","conversationId","content","context","abort","humanApproval","requestBody","response","reader","reducer","item","threadId","langGraphThreadId","limit","offset","vote","question","answer","resolve","reject","data","error","RemoteAiChatRepository","projectId","CloudApiGateway","requestQuery","_vote","_question","_answer","_context","copied","ref","onCopy","props","copyText","computed","SmartChatController","repository","logService","environment","uuid","history","newHistory","stageId","threadHistory","log","thread","index","newFirstThread","code","icon","createVNode","SmartChatCopyButton","render","panesInfo","id","currentOutputId","currentSegmentAnswer","parsed","captureException","message","value","jsonContent","errorMessage","logs","entry","LogService","reactive","msg","callback","listener","type","executionLogs","omniChatPubSub","PubSub","useOmniChatStore","defineStore","isOpen","isInputFocused","shallowRef","controller","init","version","focusInput","blurInput","open","close"],"mappings":"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","x_google_ignoreList":[0]}