{"version":3,"mappings":"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","names":["isOpen","computed","props","value","emit","showTimeoutMessage","ref","watch","newOpen","timer","CodebaseEventsService","evt","data","message","AbstraLibApiEditorCodebaseEventsMessageSchema","handler","error","captureException","useCodebaseEvents","isConnected","lastEvent","service","updateConnectionStatus","unsubscribe","connectionInterval","onUnmounted","onMounted","readonly","codebaseEvents","showConnectionModal","abstraTheme","CloudProjectApi","token","params","ABSTRA_URLS","EditorComms","email","hash","IntercomAPI.boot","IntercomAPI.shutdown","localURLs","toEnvURL","serviceName","envName","lodash","env","__vite_import_meta_env__","EnvURL","useCloudProjectStore","defineStore","api","loginInfo","cloudProject","isLogged","publicUrl","links","deleteLogin","createLogin","info","fetchCloudProject","loadLogin","intercomHash","annotatedPlayerRouterRecords","playerRouterRecords","record","router","createRouter","createWebHistory","__vitePreload","to","playerGuard","playerGuardFactory","from","useWorkspaceStore","updateTitle","cloudProjectStore","settingsProviderInit","abstraVersion","getAbstraVersion","pinia","createPinia","app","createApp","h","App","Toast","initSentry","PrimeVue","vSelect","Markdown","Message","registerWidgets","inputWidgets","outputWidgets","otherWidgets"],"ignoreList":[],"sources":["../../src/apps/editor/components/ConnectionModal.vue","../../src/apps/editor/apis/code/codebaseEvents.ts","../../src/apps/editor/stores/useCodebaseEvents.ts","../../src/apps/editor/App.vue","../../src/apps/editor/apis/code/cloudProject.ts","../../src/apps/editor/apis/intercom.ts","../../src/apps/editor/config.ts","../../src/apps/editor/stores/cloudProject.ts","../../src/apps/editor/router.ts","../../src/apps/editor/main.ts"],"sourcesContent":["<template>\n  <AModal\n    v-model:open=\"isOpen\"\n    :closable=\"false\"\n    :mask-closable=\"false\"\n    :keyboard=\"false\"\n    :footer=\"null\"\n    :width=\"400\"\n    centered\n  >\n    <div style=\"text-align: center; padding: 20px\">\n      <ASpin size=\"large\" />\n      <AntTypographyTitle :level=\"4\"> Connecting to server... </AntTypographyTitle>\n      <AntText v-if=\"showTimeoutMessage\"> Are you sure Abstra is running? </AntText>\n    </div>\n  </AModal>\n</template>\n\n<script setup lang=\"ts\">\nimport {\n  Modal as AModal,\n  Spin as ASpin,\n  Typography as AntText,\n  TypographyTitle as AntTypographyTitle,\n} from 'ant-design-vue';\nimport { computed, ref, watch } from 'vue';\n\ninterface Props {\n  open: boolean;\n  port?: number;\n}\n\ninterface Emits {\n  (e: 'update:open', value: boolean): void;\n}\n\nconst props = withDefaults(defineProps<Props>(), {});\nconst emit = defineEmits<Emits>();\n\nconst isOpen = computed({\n  get: () => props.open,\n  set: (value) => emit('update:open', value),\n});\n\nconst showTimeoutMessage = ref(false);\n\nwatch(\n  () => props.open,\n  (newOpen) => {\n    if (newOpen) {\n      showTimeoutMessage.value = false;\n      const timer = setTimeout(() => {\n        showTimeoutMessage.value = true;\n      }, 10000);\n\n      return () => clearTimeout(timer);\n    } else {\n      showTimeoutMessage.value = false;\n    }\n  },\n);\n</script>\n\n<style scoped>\n.connecting-title {\n  margin-top: 16px;\n  color: #666;\n}\n\n.connecting-subtitle {\n  margin-top: 8px;\n  color: #999;\n}\n\n.timeout-message {\n  margin-top: 16px;\n  color: #ff4d4f;\n}\n</style>\n","import {\n  AbstraLibApiEditorCodebaseEventsMessage,\n  AbstraLibApiEditorCodebaseEventsMessageSchema,\n} from '@/contracts.generated';\n\nimport { captureException } from '@sentry/vue';\n\ntype MessageHandler = (msg: AbstraLibApiEditorCodebaseEventsMessage) => void;\n\nexport class CodebaseEventsService {\n  private static instance: CodebaseEventsService | null = null;\n  private ws: WebSocket | null = null;\n  private reconnectTimer: ReturnType<typeof setTimeout> | undefined;\n  private keepaliveInterval: ReturnType<typeof setInterval> | undefined;\n  private messageHandlers: Set<MessageHandler> = new Set();\n  private readonly KEEPALIVE_INTERVAL = 30000; // 30 seconds\n  private readonly RECONNECT_DELAY = 1000; // 1 second\n\n  private constructor() {\n    this.connect();\n  }\n\n  static getInstance(): CodebaseEventsService {\n    if (!CodebaseEventsService.instance) {\n      CodebaseEventsService.instance = new CodebaseEventsService();\n    }\n    return CodebaseEventsService.instance;\n  }\n\n  private get url() {\n    return `/_editor/api/codebase/events`;\n  }\n\n  private handleMessage(evt: MessageEvent) {\n    try {\n      const data = JSON.parse(evt.data);\n      const message = AbstraLibApiEditorCodebaseEventsMessageSchema.parse(data);\n      this.messageHandlers.forEach((handler) => {\n        try {\n          handler(message);\n        } catch (error) {\n          captureException(error);\n        }\n      });\n    } catch (error) {\n      captureException(error);\n    }\n  }\n\n  private handleClose() {\n    this.clearTimers();\n    this.scheduleReconnect();\n  }\n\n  private handleError() {\n    this.clearTimers();\n    this.scheduleReconnect();\n  }\n\n  private clearTimers() {\n    if (this.keepaliveInterval) {\n      clearInterval(this.keepaliveInterval);\n      this.keepaliveInterval = undefined;\n    }\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = undefined;\n    }\n  }\n\n  private scheduleReconnect() {\n    if (this.reconnectTimer) return;\n\n    this.reconnectTimer = setTimeout(() => {\n      this.reconnectTimer = undefined;\n      this.connect();\n    }, this.RECONNECT_DELAY);\n  }\n\n  private startKeepalive() {\n    this.keepaliveInterval = setInterval(() => {\n      this.sendKeepalive();\n    }, this.KEEPALIVE_INTERVAL);\n  }\n\n  private sendKeepalive() {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      this.handleError();\n      return;\n    }\n\n    try {\n      this.ws.send(JSON.stringify({ type: 'keepalive' }));\n    } catch (error) {\n      console.error('CodebaseEventsService: Failed to send keepalive:', error);\n      this.handleError();\n    }\n  }\n\n  private async connect() {\n    if (this.ws?.readyState === WebSocket.OPEN) return;\n\n    try {\n      this.ws = new WebSocket(this.url);\n      this.ws.onopen = () => this.startKeepalive();\n      this.ws.onclose = () => this.handleClose();\n      this.ws.onerror = () => this.handleError();\n      this.ws.onmessage = (evt: MessageEvent) => this.handleMessage(evt);\n    } catch (error) {\n      console.error('CodebaseEventsService: Failed to create WebSocket:', error);\n      this.scheduleReconnect();\n    }\n  }\n\n  subscribe(handler: MessageHandler): () => void {\n    this.messageHandlers.add(handler);\n    return () => this.messageHandlers.delete(handler);\n  }\n\n  isConnected(): boolean {\n    return this.ws?.readyState === WebSocket.OPEN;\n  }\n}\n","import { CodebaseEventsService } from '@/apps/editor/apis/code/codebaseEvents';\nimport type { AbstraLibApiEditorCodebaseEventsMessage } from '@/contracts.generated';\nimport { onMounted, onUnmounted, readonly, ref } from 'vue';\n\nexport function useCodebaseEvents() {\n  const isConnected = ref(false);\n  const lastEvent = ref<AbstraLibApiEditorCodebaseEventsMessage | null>(null);\n  const error = ref<string | null>(null);\n\n  const service = CodebaseEventsService.getInstance();\n\n  const handler = (message: AbstraLibApiEditorCodebaseEventsMessage) => {\n    lastEvent.value = message;\n  };\n\n  const updateConnectionStatus = () => {\n    isConnected.value = service.isConnected();\n  };\n\n  let unsubscribe: () => void;\n\n  const connectionInterval = setInterval(updateConnectionStatus, 1000);\n\n  onUnmounted(() => {\n    unsubscribe();\n    clearInterval(connectionInterval);\n  });\n\n  onMounted(() => {\n    unsubscribe = service.subscribe(handler);\n    updateConnectionStatus();\n  });\n\n  return {\n    isConnected: readonly(isConnected),\n    lastEvent: readonly(lastEvent),\n    error: readonly(error),\n    service: readonly(service),\n  };\n}\n","<template>\n  <AntConfigProvider :theme=\"abstraTheme\" :page-header=\"{ ghost: false }\">\n    <div style=\"height: 100vh; box-sizing: border-box; width: 100%\">\n      <RouterView />\n    </div>\n\n    <ConnectionModal v-model:open=\"showConnectionModal\" />\n  </AntConfigProvider>\n</template>\n\n<script setup lang=\"ts\">\nimport { ConfigProvider as AntConfigProvider, ConfigProviderProps } from 'ant-design-vue';\nimport { ref, watch } from 'vue';\nimport ConnectionModal from './components/ConnectionModal.vue';\nimport { useCodebaseEvents } from './stores/useCodebaseEvents';\n\nconst codebaseEvents = useCodebaseEvents();\nconst showConnectionModal = ref(false);\n\nwatch(\n  codebaseEvents.isConnected,\n  async (isConnected) => {\n    showConnectionModal.value = !isConnected;\n  },\n  { immediate: true },\n);\n\nconst abstraTheme: ConfigProviderProps['theme'] = {\n  token: {\n    colorPrimary: '#d14056',\n    colorLink: '#d14056',\n    colorLinkHover: '#aa3446',\n  },\n};\n</script>\n\n<style lang=\"scss\">\n@import url('https://fonts.googleapis.com/css2?family=DM+Sans&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Inter&display=swap');\n@import '@/styles/index.scss';\n@import '@/assets/base.css';\n@import '@/styles/colors.scss';\n@import '@/styles/font.scss';\n\nbody {\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n  background-color: $background-base;\n  font-family: $main-font-family;\n}\n</style>\n","import { ABSTRA_URLS } from '@/utils/constants';\n\nexport type LoginInfoDTO =\n  | {\n      logged: true;\n      info: {\n        email: string;\n        authorId: string;\n        projectId: string;\n        intercomHash: string;\n      };\n    }\n  | {\n      logged: false;\n      reason: 'NO_API_TOKEN';\n    }\n  | {\n      logged: false;\n      reason: 'INVALID_API_TOKEN';\n    };\n\nexport type CloudProjectDTO = {\n  id: string;\n  name: string;\n  subdomain: string;\n  organizationId: string;\n};\n\nexport class CloudProjectApi {\n  async getLogin(): Promise<LoginInfoDTO> {\n    const response = await fetch('/_editor/api/login');\n    return await response.json();\n  }\n\n  async createLogin(token: string): Promise<LoginInfoDTO> {\n    const response = await fetch('/_editor/api/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ token }),\n    });\n\n    return response.json();\n  }\n\n  async deleteLogin(): Promise<void> {\n    await fetch('/_editor/api/login', { method: 'DELETE' });\n  }\n\n  async getCloudProject(): Promise<CloudProjectDTO> {\n    const res = await fetch('/_editor/api/login/info');\n    return res.json();\n  }\n\n  async getPublicUrl(): Promise<string | null> {\n    try {\n      const res = await fetch('/_editor/api/login/public-url');\n      const data = await res.json();\n      return data.public_url;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  static getLoginUrl(params: Record<string, string>): string {\n    return ABSTRA_URLS.CLOUD + '/api-key?' + new URLSearchParams(params);\n  }\n}\n","import * as IntercomAPI from '@intercom/messenger-js-sdk';\n\nexport class EditorComms {\n  private static booted = false;\n\n  static boot(email: string, hash: string) {\n    if (EditorComms.booted) return;\n\n    IntercomAPI.boot({\n      api_base: 'https://api-iam.intercom.io',\n      app_id: 'h97k86ks',\n      name: email,\n      email: email,\n      user_hash: hash,\n      hide_default_launcher: true,\n      custom_launcher_selector: '.intercom-launcher',\n    });\n\n    EditorComms.booted = true;\n  }\n\n  static shutdown() {\n    IntercomAPI.shutdown();\n    EditorComms.booted = false;\n  }\n}\n","import lodash from 'lodash';\n\ntype ServiceName = 'console-url';\n\nconst localURLs: Record<ServiceName, string> = {\n  'console-url': 'https://cloud.abstra.io',\n};\n\nconst toEnvURL = (serviceName: ServiceName): string => {\n  const envName = 'VITE_' + lodash.toUpper(lodash.snakeCase(serviceName));\n  const env = import.meta.env[envName];\n  if (env) return env;\n  return localURLs[serviceName];\n};\n\nexport const EnvURL = {\n  consoleUrl: toEnvURL('console-url'),\n};\n","import { defineStore } from 'pinia';\nimport { computed, ref, watch } from 'vue';\nimport { CloudProjectApi, CloudProjectDTO, LoginInfoDTO } from '../apis/code';\nimport { EditorComms } from '../apis/intercom';\nimport { EnvURL } from '../config';\n\nexport const useCloudProjectStore = defineStore('cloud-project', () => {\n  const api = new CloudProjectApi();\n\n  const loginInfo = ref<LoginInfoDTO | null>(null);\n  const cloudProject = ref<CloudProjectDTO | null>(null);\n  const isLogged = computed<boolean>(() => loginInfo.value?.logged ?? false);\n  const publicUrl = ref<string | null>(null);\n\n  const links = computed(() => {\n    if (!cloudProject.value) return null;\n    return {\n      project: `${EnvURL.consoleUrl}/projects/${cloudProject.value.id}`,\n      users: `${EnvURL.consoleUrl}/projects/${cloudProject.value.id}/access-control?selected-panel=users`,\n      roles: `${EnvURL.consoleUrl}/projects/${cloudProject.value.id}/access-control?selected-panel=roles`,\n      builds: `${EnvURL.consoleUrl}/projects/${cloudProject.value.id}/builds`,\n      login: `${EnvURL.consoleUrl}/api-key`,\n    };\n  });\n\n  const deleteLogin = async () => {\n    if (!isLogged.value) return;\n    await api.deleteLogin();\n    window.open(location.origin + '/_editor', '_self');\n  };\n\n  const createLogin = async (token: string) => {\n    const info = await api.createLogin(token);\n    loginInfo.value = info;\n    if (info.logged) {\n      await fetchCloudProject();\n    }\n  };\n\n  const fetchCloudProject = async () => (cloudProject.value = await api.getCloudProject());\n\n  const fetchPublicUrl = async () => {\n    publicUrl.value = await api.getPublicUrl();\n  };\n  fetchPublicUrl();\n\n  const loadLogin = async () => {\n    if (loginInfo.value) return loginInfo.value;\n    loginInfo.value = await api.getLogin();\n    return loginInfo.value.logged;\n  };\n\n  watch(() => loginInfo.value, fetchCloudProject);\n\n  watch(\n    () => loginInfo.value,\n    async (loginInfo) => {\n      if (loginInfo && 'info' in loginInfo) {\n        const { email, intercomHash } = loginInfo.info;\n        EditorComms.boot(email, intercomHash);\n      } else {\n        EditorComms.shutdown();\n      }\n    },\n  );\n\n  return {\n    loadLogin,\n    createLogin,\n    deleteLogin,\n    publicUrl,\n    loginInfo,\n    cloudProject,\n    isLogged,\n    links,\n  };\n});\n","import {\n  guardFactory as playerGuardFactory,\n  routerRecords as playerRouterRecords,\n} from '@/apps/player/router';\nimport { updateTitle } from '@/utils';\nimport { createRouter, createWebHistory } from 'vue-router';\nimport { useWorkspaceStore } from '../player/store/workspaceStore';\nimport { CloudProjectApi } from './apis/code';\nimport { useCloudProjectStore } from './stores/cloudProject';\n\nconst annotatedPlayerRouterRecords = playerRouterRecords.map((record) => {\n  return { ...record, meta: { ...record.meta, playerRoute: true } };\n});\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: '/_editor/',\n      name: 'app',\n      component: () => import('./views/Home.vue'),\n      children: [\n        {\n          path: '',\n          name: 'editor',\n          component: () => import('./views/NewEditor.vue'),\n        },\n        {\n          path: 'project-login',\n          name: 'projectLogin',\n          component: () => import('./views/ProjectLogin.vue'),\n          meta: { title: 'Abstra Editor', allowUnauthenticated: true },\n        },\n        {\n          path: ':pathMatch(.*)*',\n          name: 'editorFallback',\n          redirect: '/_editor/',\n        },\n      ],\n    },\n    {\n      path: '/:path(.*)*',\n      name: 'form',\n      component: () => import('../player/App.vue'),\n      children: annotatedPlayerRouterRecords,\n    },\n  ],\n  scrollBehavior(to) {\n    if (to.hash) return { el: to.hash };\n  },\n});\n\nconst playerGuard = playerGuardFactory(router);\n\nrouter.beforeEach(async (to, from) => {\n  await useWorkspaceStore().actions.fetch();\n\n  if (to.meta.playerRoute) return playerGuard(to, from);\n  updateTitle(to, from);\n\n  const cloudProjectStore = useCloudProjectStore();\n  if (\n    !to.meta.allowUnauthenticated &&\n    !cloudProjectStore.isLogged &&\n    !(await cloudProjectStore.loadLogin())\n  ) {\n    const params = { redirect: location.origin + '/_editor/project-login' };\n    window.open(CloudProjectApi.getLoginUrl(params), '_self');\n  }\n});\n\nexport default router;\n","import { initSentry } from '@/services/sentry';\nimport { getAbstraVersion } from '@/services/version';\nimport { settingsProviderInit } from '@/settings';\nimport { registerWidgets } from '@/widgets-lib/common/registerWidgets';\nimport { Toast } from '@/widgets-lib/common/toast';\nimport { inputWidgets } from '@/widgets-lib/generated/inputWidgets';\nimport { otherWidgets, outputWidgets } from '@/widgets-lib/generated/outputWidgets';\nimport { createPinia } from 'pinia';\nimport PrimeVue from 'primevue/config';\nimport Message from 'primevue/message';\nimport { createApp, h } from 'vue';\nimport vSelect from 'vue-select';\nimport Markdown from 'vue3-markdown-it';\nimport App from './App.vue';\nimport router from './router';\n\n(async () => {\n  await settingsProviderInit();\n  const abstraVersion = await getAbstraVersion();\n\n  const pinia = createPinia();\n\n  const app = createApp({\n    render: () => h(App),\n  });\n\n  Toast.init();\n  initSentry(app, router, abstraVersion);\n\n  app.use(router);\n  app.use(PrimeVue);\n  app.use(pinia);\n\n  app.mount('#app');\n  app.component('VSelect', vSelect);\n  app.component('Markdown', Markdown);\n  app.component('Message', Message);\n\n  registerWidgets(app, inputWidgets);\n  registerWidgets(app, outputWidgets);\n  registerWidgets(app, otherWidgets);\n})();\n"],"file":"assets/editor-BaKilXnS.js"}