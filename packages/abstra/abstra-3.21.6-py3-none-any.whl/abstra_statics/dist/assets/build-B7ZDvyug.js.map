{"version":3,"file":"build-B7ZDvyug.js","sources":["../../src/apps/console/apis/cloud/build.ts"],"sourcesContent":["import { CloudApiGateway } from './gateway';\n\ntype BuildDTO = {\n  id: string;\n  latest: boolean;\n  projectId: string;\n  createdAt: string;\n  log: string | null;\n  abstraVersion: string | null;\n  status: 'pending' | 'success' | 'failure' | 'in-progress' | 'aborted' | 'aborted-by-user';\n};\n\ntype BuildSpecDTO = BuildDTO & {\n  abstraJson: string | null;\n};\n\ntype BuildDownloadResponse = {\n  url: string;\n};\n\nexport class BuildRepository {\n  async list(projectId: string): Promise<BuildDTO[]> {\n    return CloudApiGateway.get(`projects/${projectId}/builds`);\n  }\n\n  async get(id: string): Promise<BuildSpecDTO | null> {\n    return CloudApiGateway.get(`builds/${id}`);\n  }\n\n  async download(id: string): Promise<BuildDownloadResponse | null> {\n    return CloudApiGateway.get(`builds/${id}/download`);\n  }\n}\n\nconst api = new BuildRepository();\n\nexport class Build {\n  private constructor(private dto: BuildDTO) {}\n\n  public static async list(projectId: string): Promise<Build[]> {\n    const dtos = await api.list(projectId);\n    return dtos.map((dto) => new Build(dto));\n  }\n\n  get id(): string {\n    return this.dto.id;\n  }\n\n  get projectId(): string {\n    return this.dto.projectId;\n  }\n\n  get createdAt(): Date {\n    return new Date(this.dto.createdAt);\n  }\n\n  get status() {\n    return this.dto.status;\n  }\n\n  get log(): string | null {\n    return this.dto.log;\n  }\n\n  get latest(): boolean {\n    return this.dto.latest;\n  }\n\n  get abstraVersion(): string | null {\n    return this.dto.abstraVersion;\n  }\n\n  async download() {\n    const res = await api.download(this.id);\n    if (!res) throw new Error('Download failed');\n    window.open(res.url, '_blank');\n  }\n}\n\ntype AbstraJsonV0DTO = {\n  version: '0.1';\n  hooks: Array<{ path: string; title: string }>;\n  forms: Array<{ path: string; title: string }>;\n  jobs: Array<{ identifier: string; schedule: string; title: string }>;\n};\n\ntype AbstraJsonDTO = {\n  hooks: Array<{ id: string; path: string; title: string }>;\n  forms: Array<{ id: string; path: string; title: string }>;\n  jobs: Array<{ id: string; schedule: string; title: string }>;\n  scripts: Array<{ id: string; title: string }>;\n};\n\ntype LogQuery = {\n  buildId: string;\n  stageId: string;\n  stageTitle: string;\n};\n\ntype HookLogDTO = {\n  id: string;\n  type: 'hook';\n  path: string;\n  title: string;\n  logQuery: LogQuery;\n};\n\ntype FormLogDTO = {\n  id: string;\n  type: 'form';\n  path: string;\n  title: string;\n  logQuery: LogQuery;\n};\n\ntype JobLogDTO = {\n  id: string;\n  type: 'job';\n  schedule: string;\n  title: string;\n  logQuery: LogQuery;\n};\n\ntype ScriptLogDTO = {\n  id: string;\n  type: 'script';\n  title: string;\n  logQuery: LogQuery;\n};\n\nexport type ItemLogDTO = HookLogDTO | FormLogDTO | JobLogDTO | ScriptLogDTO;\n\ntype BuildInspectorDTO = {\n  hooks: Array<{ id: string; path: string; title: string; logQuery: LogQuery }>;\n  forms: Array<{ id: string; path: string; title: string; logQuery: LogQuery }>;\n  jobs: Array<{ id: string; schedule: string; title: string; logQuery: LogQuery }>;\n  scripts: Array<{ id: string; title: string; logQuery: LogQuery }>;\n};\n\nexport class BuildSpec {\n  private static fromV0(\n    projectId: string,\n    buildId: string,\n    abstraVersion: string,\n    project: AbstraJsonV0DTO,\n  ) {\n    const dto = {\n      hooks: project.hooks.map((hook) => ({\n        id: hook.path,\n        logQuery: {\n          buildId,\n          stageId: hook.path,\n          stageTitle: hook.title,\n        },\n        ...hook,\n      })),\n      forms: project.forms.map((form) => ({\n        id: form.path,\n        logQuery: {\n          buildId,\n          stageId: form.path,\n          stageTitle: form.title,\n        },\n        ...form,\n      })),\n      jobs: project.jobs.map((job) => ({\n        id: job.identifier,\n        logQuery: {\n          buildId,\n          stageId: job.identifier,\n          stageTitle: job.title,\n        },\n        ...job,\n      })),\n      scripts: [],\n    } satisfies BuildInspectorDTO;\n\n    return new BuildSpec(projectId, buildId, abstraVersion, dto);\n  }\n\n  private static fromDTO(\n    projectId: string,\n    buildId: string,\n    abstraVersion: string,\n    project: AbstraJsonDTO,\n  ) {\n    const dto = {\n      hooks: project.hooks.map((hook) => ({\n        logQuery: {\n          buildId,\n          stageId: hook.id,\n          stageTitle: hook.title,\n        },\n        ...hook,\n      })),\n      forms: project.forms.map((form) => ({\n        logQuery: {\n          buildId,\n          stageId: form.id,\n          stageTitle: form.title,\n        },\n        ...form,\n      })),\n      jobs: project.jobs.map((job) => ({\n        logQuery: {\n          buildId,\n          stageId: job.id,\n          stageTitle: job.title,\n        },\n        ...job,\n      })),\n      scripts: project.scripts.map((script) => ({\n        logQuery: {\n          buildId,\n          stageId: script.id,\n          stageTitle: script.title,\n        },\n        ...script,\n      })),\n    } satisfies BuildInspectorDTO;\n    return new BuildSpec(projectId, buildId, abstraVersion, dto);\n  }\n\n  static async get(buildId: string) {\n    const dto = await api.get(buildId);\n    if (!dto) throw new Error('Build not found');\n\n    const { projectId, abstraJson, abstraVersion } = dto;\n    if (!abstraJson) return null;\n    if (!abstraVersion) return null;\n\n    const project = JSON.parse(abstraJson);\n    if (!project.version) throw new Error('Version is invalid');\n\n    if (project.version === '0.1') {\n      return this.fromV0(projectId, buildId, abstraVersion, project as AbstraJsonV0DTO);\n    }\n\n    return this.fromDTO(projectId, buildId, abstraVersion, project as AbstraJsonDTO);\n  }\n\n  private constructor(\n    public readonly projectId: string,\n    public readonly buildId: string,\n    public readonly abstraVersion: string,\n    private project: BuildInspectorDTO,\n  ) {}\n\n  get runtimes(): ItemLogDTO[] {\n    return [\n      ...this.project.forms.map((f) => ({ ...f, type: 'form' as const })),\n      ...this.project.hooks.map((h) => ({ ...h, type: 'hook' as const })),\n      ...this.project.jobs.map((j) => ({ ...j, type: 'job' as const })),\n      ...this.project.scripts.map((s) => ({ ...s, type: 'script' as const })),\n    ];\n  }\n}\n"],"names":["BuildRepository","projectId","CloudApiGateway","id","api","Build","dto","res","BuildSpec","buildId","abstraVersion","project","hook","form","job","script","abstraJson","f","h","j","s"],"mappings":"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"}