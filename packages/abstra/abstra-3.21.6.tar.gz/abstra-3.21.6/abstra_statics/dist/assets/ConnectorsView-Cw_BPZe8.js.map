{"version":3,"file":"ConnectorsView-Cw_BPZe8.js","sources":["../../src/apps/console/apis/cloud/connectors.ts","../../src/apps/console/views/Connectors/ConnectorsViewController.ts","../../src/apps/console/views/Connectors/ConnectorsView.vue"],"sourcesContent":["import { CloudApiGateway } from './gateway';\n\ntype ConnectionDTO = {\n  name: string;\n  connectorType: string;\n  projectId: string;\n  token: string;\n  expiresAt: string;\n};\n\ntype ScopeDTO = {\n  id: string;\n  description: string;\n};\n\nexport type ConnectorDTO = {\n  type: string;\n  title: string;\n  description: string;\n  logoUrl: string;\n  unavailable: boolean;\n  scopes: ScopeDTO[];\n};\n\ntype LoginUrlDTO = {\n  url: string;\n};\n\nexport type IConnectorsAPI = {\n  getLoginUrl(\n    projectId: string,\n    connectorType: string,\n    connectionName: string,\n    scopeIds: string[],\n  ): Promise<LoginUrlDTO>;\n  listConnections(projectId: string): Promise<ConnectionDTO[]>;\n  deleteConnection(dto: {\n    projectId: string;\n    connectionName: string;\n    connectorType: string;\n  }): Promise<void>;\n  renameConnection(dto: {\n    projectId: string;\n    connectionName: string;\n    connectorType: string;\n    newConnectionName: string;\n  }): Promise<void>;\n  listConnectors(projectId: string): Promise<ConnectorDTO[]>;\n};\n\nexport class ConnectorsAPI implements IConnectorsAPI {\n  async getLoginUrl(\n    projectId: string,\n    connectionName: string,\n    connectorType: string,\n    scopeIds: string[],\n  ): Promise<LoginUrlDTO> {\n    return CloudApiGateway.get(\n      `projects/${projectId}/connectors/${connectorType}/connections/${connectionName}/login-url`,\n      {\n        scopeIds: scopeIds.join(','),\n      },\n    );\n  }\n\n  async listConnectors(projectId: string): Promise<ConnectorDTO[]> {\n    return CloudApiGateway.get(`projects/${projectId}/connectors`);\n  }\n\n  async listConnections(projectId: string): Promise<ConnectionDTO[]> {\n    return CloudApiGateway.get(`projects/${projectId}/connections`);\n  }\n\n  async deleteConnection(dto: {\n    projectId: string;\n    connectionName: string;\n    connectorType: string;\n  }): Promise<void> {\n    const { projectId, connectionName, connectorType } = dto;\n    return CloudApiGateway.delete(\n      `projects/${projectId}/connectors/${connectorType}/connections/${connectionName}`,\n    );\n  }\n\n  async renameConnection(dto: {\n    projectId: string;\n    connectionName: string;\n    connectorType: string;\n    newConnectionName: string;\n  }): Promise<void> {\n    const { projectId, connectionName, connectorType, newConnectionName } = dto;\n\n    return CloudApiGateway.patch(\n      `projects/${projectId}/connectors/${connectorType}/connections/${connectionName}`,\n      {\n        newConnectionName: newConnectionName,\n      },\n    );\n  }\n}\n","import { Modal } from 'ant-design-vue';\nimport { computed, ref, Ref } from 'vue';\nimport { ConnectorDTO, IConnectorsAPI } from '../../apis/cloud/connectors';\n\ntype ConnectionCard = {\n  name: string;\n  connectorTitle: string;\n  connectorType: string;\n  unavailable?: boolean;\n  icon: string;\n};\n\ntype EditingConnection = ConnectionCard & {\n  newName: string;\n};\n\ntype AddingConnection = {\n  selectedScopeIds: string[];\n  connector: ConnectorDTO;\n};\n\ntype State = {\n  connectors: ConnectorDTO[];\n  connections: ConnectionCard[];\n  editingConnection: EditingConnection | null;\n  addingConnection: AddingConnection | null;\n};\n\nexport class ConnectorsViewController {\n  state: Ref<State>;\n  hasChanges = computed<boolean>(\n    () =>\n      !!this.state.value.editingConnection &&\n      this.state.value.editingConnection.name !== this.state.value.editingConnection.newName,\n  );\n\n  constructor(private readonly projectId: string, private readonly api: IConnectorsAPI) {\n    this.state = ref({\n      connectors: [],\n      connections: [],\n      addingConnection: null,\n      editingConnection: null,\n    });\n  }\n\n  async fetchConnectors() {\n    this.state.value.connectors = await this.api.listConnectors(this.projectId);\n  }\n\n  async fetchInitialState() {\n    await this.fetchConnectors();\n    await this.refetchConnections();\n  }\n\n  async refetchConnections() {\n    this.state.value.connections = (await this.api.listConnections(this.projectId)).map(\n      (connection) => {\n        const connector = this.state.value.connectors.find(\n          (connector) => connector.type === connection.connectorType,\n        );\n\n        if (!connector) {\n          throw new Error(`Unknown connector type: ${connection.connectorType}`);\n        }\n\n        return {\n          name: connection.name,\n          connectorTitle: connector.title,\n          connectorType: connection.connectorType,\n          icon: connector.logoUrl,\n        };\n      },\n    );\n  }\n\n  handleDeletionClick = async (connection: ConnectionCard) => {\n    Modal.confirm({\n      title: 'Delete connection',\n      content: 'Are you sure you want to delete this connection?',\n      onOk: () => this.handleDeleteConnection(connection),\n    });\n  };\n\n  handleDeleteConnection = async (connection: ConnectionCard) => {\n    await this.api.deleteConnection({\n      projectId: this.projectId,\n      connectionName: connection.name,\n      connectorType: connection.connectorType,\n    });\n\n    this.state.value.editingConnection = null;\n    await this.refetchConnections();\n  };\n\n  handleEditConnectionClick(connection: ConnectionCard) {\n    this.state.value.editingConnection = { ...connection, newName: connection.name };\n  }\n\n  async getLoginUrl(connectorType: string, connectionName: string, scopeIds: string[]) {\n    return this.api.getLoginUrl(this.projectId, connectionName, connectorType, scopeIds);\n  }\n\n  slugify(text: string) {\n    return text\n      .toString()\n      .toLowerCase()\n      .replace(/\\s+/g, '-')\n      .replace(/[^\\w-]+/g, '')\n      .replace(/--+/g, '-');\n  }\n\n  getUniqueName(connectorType: string) {\n    const connectionsCount = this.state.value.connections.filter(\n      (connection) => connection.connectorType === connectorType,\n    ).length;\n\n    if (connectionsCount === 0) {\n      return connectorType;\n    }\n\n    return `${connectorType}-${connectionsCount}`;\n  }\n\n  handleAddConnectionSubmit = async () => {\n    const connectorType = this.state.value.addingConnection?.connector.type;\n    const scopeIds = this.state.value.addingConnection?.selectedScopeIds;\n\n    if (!connectorType || !scopeIds) {\n      throw new Error('No connector or scope selected');\n    }\n\n    const { url } = await this.getLoginUrl(\n      connectorType,\n      this.getUniqueName(connectorType),\n      scopeIds,\n    );\n    window.location.href = url;\n  };\n\n  renameConnection = async () => {\n    const { editingConnection } = this.state.value;\n    if (!editingConnection) {\n      throw new Error('No connection is being edited');\n    }\n\n    const apply = async () => {\n      await this.api.renameConnection({\n        projectId: this.projectId,\n        connectionName: editingConnection.name,\n        connectorType: editingConnection.connectorType,\n        newConnectionName: editingConnection.newName,\n      });\n\n      await this.refetchConnections();\n      this.state.value.editingConnection = null;\n    };\n\n    Modal.confirm({\n      title: 'Rename connection',\n      content:\n        'Are you sure you want to rename this connection? This will break any existing references to the old name.',\n      onOk: apply,\n    });\n  };\n\n  showAddConfirmationModal = (connector: ConnectorDTO) => {\n    this.state.value.addingConnection = {\n      selectedScopeIds: connector.scopes.map((scope) => scope.id),\n      connector: connector,\n    };\n  };\n\n  handleScopeToggle = (scopeId: string, isChecked: boolean) => {\n    if (!isChecked) {\n      this.state.value.addingConnection!.selectedScopeIds =\n        this.state.value.addingConnection!.selectedScopeIds.filter((id) => id !== scopeId);\n    } else {\n      this.state.value.addingConnection!.selectedScopeIds.push(scopeId);\n    }\n  };\n}\n","<template>\n  <AntSpace direction=\"vertical\" style=\"width: 100%; margin-bottom: 30px\">\n    <AntFlex align=\"center\" justify=\"space-between\">\n      <AntTitle>Connectors</AntTitle>\n    </AntFlex>\n    <AntParagraph>\n      Add and manage external integrations to your project.\n      <DocsButton />\n    </AntParagraph>\n    <AntFlex v-if=\"controller.state.value.connections.length\" vertical>\n      <AntTitle :level=\"2\">Installed</AntTitle>\n\n      <AntFlex vertical :gap=\"10\">\n        <AntCard v-for=\"connection in controller.state.value.connections\" :key=\"connection.name\">\n          <AntFlex align=\"center\" :gap=\"20\">\n            <AntAvatar :src=\"connection.icon\" height=\"40px\" shape=\"square\" />\n            <AntText strong>\n              {{ connection.connectorTitle }}\n            </AntText>\n            <div style=\"flex-grow: 1\"></div>\n            <AntText :content=\"connection.name\" copyable code />\n            <AntDropdown>\n              <PhDotsThreeVertical />\n              <template #overlay>\n                <AntMenu>\n                  <AntMenuItem @click=\"controller.handleEditConnectionClick(connection)\">\n                    Rename\n                  </AntMenuItem>\n                  <AntMenuItem danger @click=\"controller.handleDeletionClick(connection)\">\n                    Delete\n                  </AntMenuItem>\n                </AntMenu>\n              </template>\n            </AntDropdown>\n          </AntFlex>\n        </AntCard>\n      </AntFlex>\n    </AntFlex>\n    <AntFlex vertical>\n      <AntTitle v-if=\"controller.state.value.connections.length\" :level=\"2\">Available</AntTitle>\n      <div class=\"connectors-grid\">\n        <ConnectorCard\n          v-for=\"connector in sortedConnectors\"\n          :key=\"connector.type\"\n          :title=\"connector.title\"\n          :logo-url=\"connector.logoUrl\"\n          :description=\"connector.description\"\n          :unavailable=\"connector.unavailable\"\n          @click=\"connectorCardClick(connector)\"\n        />\n      </div>\n    </AntFlex>\n  </AntSpace>\n  <AntModal\n    :open=\"!!controller.state.value.editingConnection\"\n    :title=\"`${controller.state.value.editingConnection?.connectorTitle} Connection`\"\n    @cancel=\"controller.state.value.editingConnection = null\"\n  >\n    <AntInput\n      v-if=\"controller.state.value.editingConnection\"\n      v-model:value=\"controller.state.value.editingConnection.newName\"\n    />\n\n    <template #footer>\n      <AntFlex justify=\"end\">\n        <AbstraButton\n          :disabled=\"!controller.hasChanges.value\"\n          @click=\"controller.renameConnection()\"\n        >\n          Save\n        </AbstraButton>\n      </AntFlex>\n    </template>\n  </AntModal>\n  <AntModal\n    :open=\"!!controller.state.value.addingConnection\"\n    :title=\"`Add ${controller.state.value.addingConnection?.connector.title} Connection`\"\n    ok-text=\"Authorize\"\n    wrap-class-name=\"full-modal\"\n    @cancel=\"controller.state.value.addingConnection = null\"\n    @ok=\"controller.handleAddConnectionSubmit\"\n  >\n    <template v-if=\"controller.state.value.addingConnection\">\n      <AntParagraph>\n        Please select the scopes you want to authorize for this connection. You can change these\n        later by deleting and re-adding the connection.\n      </AntParagraph>\n      <AntFlex vertical gap=\"10\" style=\"margin: 30px 0px\">\n        <AntFlex\n          v-for=\"scope in controller.state.value.addingConnection.connector.scopes\"\n          :key=\"scope.id\"\n          justify=\"space-between\"\n          align=\"center\"\n        >\n          <AntFlex vertical>\n            <AntText>{{ scope.description }}</AntText>\n            <AntText type=\"secondary\">{{ scope.id }}</AntText>\n          </AntFlex>\n          <ASwitch\n            :checked=\"controller.state.value.addingConnection.selectedScopeIds.includes(scope.id)\"\n            @change=\"(checked) => controller.handleScopeToggle(scope.id, checked as boolean)\"\n          />\n        </AntFlex>\n      </AntFlex>\n    </template>\n  </AntModal>\n</template>\n\n<script lang=\"ts\" setup>\nimport DocsButton from '@/apps/editor/components/workspace/DocsButton.vue';\nimport AbstraButton from '@/components/AbstraButton.vue';\nimport { i18nProvider } from '@/widgets-lib/common/i18n';\nimport { PhDotsThreeVertical } from '@phosphor-icons/vue';\nimport {\n  Avatar as AntAvatar,\n  Card as AntCard,\n  Dropdown as AntDropdown,\n  Flex as AntFlex,\n  Input as AntInput,\n  Menu as AntMenu,\n  MenuItem as AntMenuItem,\n  Modal as AntModal,\n  TypographyParagraph as AntParagraph,\n  Space as AntSpace,\n  TypographyText as AntText,\n  TypographyTitle as AntTitle,\n  Switch as ASwitch,\n} from 'ant-design-vue';\nimport { computed } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { ConnectorDTO, ConnectorsAPI } from '../../apis/cloud/connectors';\nimport { Comms } from '../../apis/intercom';\nimport { ConnectorsViewController } from './ConnectorsViewController';\nimport ConnectorCard from './components/ConnectorCard.vue';\n\nconst route = useRoute();\nconst projectId = route.params.projectId as string;\nconst controller = new ConnectorsViewController(projectId, new ConnectorsAPI());\n\nconst sortedConnectors = computed(() => [\n  ...controller.state.value.connectors.filter((connector) => !connector.unavailable),\n  ...controller.state.value.connectors.filter((connector) => connector.unavailable),\n]);\ncontroller.fetchInitialState();\n\nfunction connectorCardClick(connector: ConnectorDTO) {\n  if (connector.unavailable) {\n    Comms.showNewMessage(\n      i18nProvider.translate('i18n_connectors_ask_for_access', null, connector.title),\n    );\n  } else {\n    controller.showAddConfirmationModal(connector);\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.connectors-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 20px;\n}\n</style>\n"],"names":["ConnectorsAPI","projectId","connectionName","connectorType","scopeIds","CloudApiGateway","dto","newConnectionName","ConnectorsViewController","api","ref","computed","connection","connector","Modal","text","connectionsCount","url","editingConnection","apply","scope","scopeId","isChecked","id","useRoute","controller","sortedConnectors","connectorCardClick","Comms","i18nProvider"],"mappings":"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"}