{"version":3,"file":"userStore-C7NmNY8K.js","sources":["../../src/apps/player/auth/userStore.ts"],"sourcesContent":["import { LocalBucket } from '@/models/bucket/repository';\nimport jwtDecode from 'jwt-decode';\nimport { defineStore } from 'pinia';\nimport { computed, ref } from 'vue';\nimport { z } from 'zod';\n\nconst MIN_JWT_DELTA_EXP_SEC = 2 * 60 * 60;\n\ntype AuthClaims = { email: string; exp?: number; iat?: number };\n\ntype PasswordlessUser = {\n  email: string;\n  expiresInSeconds: number;\n};\n\nconst decodeAuthJwt = (jwt: string): PasswordlessUser | null => {\n  try {\n    const claims = jwtDecode<AuthClaims>(jwt);\n    if (!claims.exp) throw Error('expired jwt');\n\n    return { email: claims.email, expiresInSeconds: claims.exp * 1000 };\n  } catch (e) {\n    console.warn('Invalid JWT');\n  }\n\n  return null;\n};\n\nexport const useUserStore = defineStore('user', () => {\n  const storage = new LocalBucket(z.string(), 'auth:jwt');\n  const jwt = ref<string | null>(null);\n\n  // state mutations\n  const removeJWT = () => {\n    jwt.value = null;\n    storage.remove();\n  };\n\n  const saveJWT = (jwtValue: string) => {\n    storage.set(jwtValue);\n    jwt.value = jwtValue;\n  };\n\n  const _loadJWT = () => {\n    jwt.value = storage.get();\n  };\n\n  // computed\n  const authHeaders = computed<Record<string, string>>(() =>\n    jwt.value ? { Authorization: `Bearer ${jwt.value}` } : ({} as Record<string, string>),\n  );\n\n  const wsAuthHeaders = computed(() =>\n    jwt.value ? ['default', `base64url.bearer.authorization.${jwt.value}`] : [],\n  );\n\n  const _claims = computed<PasswordlessUser | null>(() => {\n    if (!jwt.value) return null;\n    return decodeAuthJwt(jwt.value);\n  });\n\n  const email = computed(() => _claims.value?.email);\n\n  // methods\n  const isJWTValid = () => {\n    if (!_claims.value) return false;\n    return _claims.value.expiresInSeconds - Date.now() > MIN_JWT_DELTA_EXP_SEC;\n  };\n\n  // init\n  _loadJWT();\n\n  return {\n    jwt,\n    email,\n    saveJWT,\n    removeJWT,\n    isJWTValid,\n    authHeaders,\n    wsAuthHeaders,\n  };\n});\n"],"names":["MIN_JWT_DELTA_EXP_SEC","decodeAuthJwt","jwt","claims","jwtDecode","useUserStore","defineStore","storage","LocalBucket","z","ref","removeJWT","saveJWT","jwtValue","_loadJWT","authHeaders","computed","wsAuthHeaders","_claims","email","isJWTValid"],"mappings":"2YAMA,MAAMA,EAAwB,KASxBC,EAAiBC,GAAyC,CAC9D,GAAI,CACF,MAAMC,EAASC,EAAsBF,CAAG,EACxC,GAAI,CAACC,EAAO,IAAK,MAAM,MAAM,aAAa,EAE1C,MAAO,CAAE,MAAOA,EAAO,MAAO,iBAAkBA,EAAO,IAAM,GAAA,CAC/D,MAAY,CACV,QAAQ,KAAK,aAAa,CAC5B,CAEA,OAAO,IACT,EAEaE,EAAeC,EAAY,OAAQ,IAAM,CACpD,MAAMC,EAAU,IAAIC,EAAYC,EAAE,OAAA,EAAU,UAAU,EAChDP,EAAMQ,EAAmB,IAAI,EAG7BC,EAAY,IAAM,CACtBT,EAAI,MAAQ,KACZK,EAAQ,OAAA,CACV,EAEMK,EAAWC,GAAqB,CACpCN,EAAQ,IAAIM,CAAQ,EACpBX,EAAI,MAAQW,CACd,EAEMC,EAAW,IAAM,CACrBZ,EAAI,MAAQK,EAAQ,IAAA,CACtB,EAGMQ,EAAcC,EAAiC,IACnDd,EAAI,MAAQ,CAAE,cAAe,UAAUA,EAAI,KAAK,IAAQ,CAAA,CAAC,EAGrDe,EAAgBD,EAAS,IAC7Bd,EAAI,MAAQ,CAAC,UAAW,kCAAkCA,EAAI,KAAK,EAAE,EAAI,CAAA,CAAC,EAGtEgB,EAAUF,EAAkC,IAC3Cd,EAAI,MACFD,EAAcC,EAAI,KAAK,EADP,IAExB,EAEKiB,EAAQH,EAAS,IAAME,EAAQ,OAAO,KAAK,EAG3CE,EAAa,IACZF,EAAQ,MACNA,EAAQ,MAAM,iBAAmB,KAAK,MAAQlB,EAD1B,GAK7B,OAAAc,EAAA,EAEO,CACL,IAAAZ,EACA,MAAAiB,EACA,QAAAP,EACA,UAAAD,EACA,WAAAS,EACA,YAAAL,EACA,cAAAE,CAAA,CAEJ,CAAC"}