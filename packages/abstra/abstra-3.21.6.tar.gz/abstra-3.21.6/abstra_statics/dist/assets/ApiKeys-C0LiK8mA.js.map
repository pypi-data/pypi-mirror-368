{"version":3,"file":"ApiKeys-C0LiK8mA.js","sources":["../../src/apps/console/views/ApiKeys.vue"],"sourcesContent":["<template>\n  <CrudView\n    entity-name=\"API key\"\n    create-button-text=\"Create API Key\"\n    :loading=\"loading\"\n    title=\"API Keys\"\n    description=\"API Keys are used to deploy your project from the local editor.\"\n    empty-title=\"No API keys here yet\"\n    :table=\"table\"\n    :fields=\"fields\"\n    :create=\"create\"\n  />\n  <AntModal :open=\"!!apiKeyToCopy\" title=\"Api key generated\" @cancel=\"apiKeyToCopy = null\">\n    <AntTypographyParagraph\n      >Your API key was successfully generated. Use this code to login on your local development\n      environment or deploy using CI</AntTypographyParagraph\n    >\n    <AntTypographyText code copyable>{{ apiKeyToCopy }}</AntTypographyText>\n    <template #footer></template>\n  </AntModal>\n</template>\n\n<script lang=\"ts\" setup>\nimport { CreationFields } from '@/components/inputs/CreationModal.vue';\nimport CrudView, { CrudTable } from '@/components/inputs/CrudView.vue';\nimport { dateDistance } from '@/utils';\nimport { asyncComputed } from '@/utils/asyncComputed';\nimport { PhTrash } from '@phosphor-icons/vue';\nimport { computed, ref } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { ApiKeyModel, MemberAPI, ProjectModel } from '../apis/cloud';\n\nimport {\n  Modal as AntModal,\n  TypographyParagraph as AntTypographyParagraph,\n  TypographyText as AntTypographyText,\n} from 'ant-design-vue';\n\nconst apiKeyToCopy = ref<string | null>(null);\n\nconst fields: CreationFields = [\n  {\n    key: 'name',\n    label: 'API key name',\n  },\n];\n\nconst route = useRoute();\nconst projectId = route.params.projectId as string;\nconst memberApi = new MemberAPI();\n\nconst {\n  loading,\n  result: data,\n  refetch,\n} = asyncComputed(async () =>\n  Promise.all([\n    ApiKeyModel.list(projectId),\n    ProjectModel.get(projectId).then((project) => memberApi.list(project.organizationId)),\n  ]).then(([apiKeys, members]) =>\n    apiKeys.map((apiKey) => ({\n      apiKey,\n      member: members.find((member) => member.authorId === apiKey.ownerId),\n    })),\n  ),\n);\n\nconst create = async (values: Record<string, any>) => {\n  const newApiKey = await ApiKeyModel.create({ projectId, name: values.name });\n  refetch();\n  apiKeyToCopy.value = newApiKey.value;\n};\n\nconst table = computed(\n  () =>\n    ({\n      columns: [\n        { title: 'Name' },\n        { title: 'Creation date' },\n        { title: 'Owner' },\n        { title: '', align: 'right' },\n      ],\n      rows:\n        data.value?.map(({ apiKey, member }) => ({\n          key: apiKey.id,\n          cells: [\n            {\n              type: 'text',\n              text: apiKey.name,\n            },\n            {\n              type: 'text',\n              text: dateDistance(apiKey.createdAt),\n            },\n            {\n              type: 'text',\n              text: member?.email ?? 'Unknown',\n            },\n            {\n              type: 'actions',\n              actions: [\n                {\n                  label: 'Delete',\n                  icon: PhTrash,\n                  dangerous: true,\n                  onClick: async () => {\n                    await ApiKeyModel.delete(projectId, apiKey.id);\n                    refetch();\n                  },\n                },\n              ],\n            },\n          ] satisfies CrudTable['rows'][number]['cells'],\n        })) ?? [],\n    } satisfies CrudTable),\n);\n</script>\n"],"names":["apiKeyToCopy","ref","fields","projectId","useRoute","memberApi","MemberAPI","loading","data","refetch","asyncComputed","ApiKeyModel","ProjectModel","project","apiKeys","members","apiKey","member","create","values","newApiKey","table","computed","dateDistance","PhTrash"],"mappings":"gjCAsCA,MAAMA,EAAeC,EAAmB,IAAI,EAEtCC,EAAyB,CAC7B,CACE,IAAK,OACL,MAAO,cAAA,CACT,EAIIC,EADQC,EAAA,EACU,OAAO,UACzBC,EAAY,IAAIC,EAEhB,CACJ,QAAAC,EACA,OAAQC,EACR,QAAAC,CAAA,EACEC,EAAc,SAChB,QAAQ,IAAI,CACVC,EAAY,KAAKR,CAAS,EAC1BS,EAAa,IAAIT,CAAS,EAAE,KAAMU,GAAYR,EAAU,KAAKQ,EAAQ,cAAc,CAAC,CAAA,CACrF,EAAE,KAAK,CAAC,CAACC,EAASC,CAAO,IACxBD,EAAQ,IAAKE,IAAY,CACvB,OAAAA,EACA,OAAQD,EAAQ,KAAME,GAAWA,EAAO,WAAaD,EAAO,OAAO,CAAA,EACnE,CAAA,CACJ,EAGIE,EAAS,MAAOC,GAAgC,CACpD,MAAMC,EAAY,MAAMT,EAAY,OAAO,CAAE,UAAAR,EAAW,KAAMgB,EAAO,KAAM,EAC3EV,EAAA,EACAT,EAAa,MAAQoB,EAAU,KACjC,EAEMC,EAAQC,EACZ,KACG,CACC,QAAS,CACP,CAAE,MAAO,MAAA,EACT,CAAE,MAAO,eAAA,EACT,CAAE,MAAO,OAAA,EACT,CAAE,MAAO,GAAI,MAAO,OAAA,CAAQ,EAE9B,KACEd,EAAK,OAAO,IAAI,CAAC,CAAE,OAAAQ,EAAQ,OAAAC,MAAc,CACvC,IAAKD,EAAO,GACZ,MAAO,CACL,CACE,KAAM,OACN,KAAMA,EAAO,IAAA,EAEf,CACE,KAAM,OACN,KAAMO,EAAaP,EAAO,SAAS,CAAA,EAErC,CACE,KAAM,OACN,KAAMC,GAAQ,OAAS,SAAA,EAEzB,CACE,KAAM,UACN,QAAS,CACP,CACE,MAAO,SACP,KAAMO,EACN,UAAW,GACX,QAAS,SAAY,CACnB,MAAMb,EAAY,OAAOR,EAAWa,EAAO,EAAE,EAC7CP,EAAA,CACF,CAAA,CACF,CACF,CACF,CACF,EACA,GAAK,CAAA,CAAC,EACZ"}