{"version":3,"file":"EditorLogin-BE9qDgWP.js","sources":["../../src/apps/console/views/EditorLogin.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <Navbar />\n    <div class=\"content\">\n      <AntSpin v-if=\"loading || !organizations\" />\n      <AntForm v-else layout=\"vertical\" class=\"card\">\n        <AntTypographyTitle :level=\"3\" style=\"padding: 0px; margin: 0px; margin-bottom: 30px\">\n          {{ i18nProvider.translate('i18n_create_or_choose_project') }}\n        </AntTypographyTitle>\n        <AntFormItem :label=\"i18nProvider.translate('i18n_get_api_key_organization')\">\n          <AntSelect\n            style=\"width: 100%\"\n            :placeholder=\"i18nProvider.translate('i18n_get_api_key_choose_organization')\"\n            size=\"large\"\n            :value=\"organizationSelectorValue\"\n            @update:value=\"selectOrganization\"\n          >\n            <AntSelectOptGroup :label=\"i18nProvider.translate('i18n_get_api_key_new_organization')\">\n              <AntSelectOption :key=\"NEW_ORGANIZATION_KEY\">\n                {{ i18nProvider.translate('i18n_get_api_key_create_new_organization') }}\n              </AntSelectOption>\n            </AntSelectOptGroup>\n            <AntSelectOptGroup\n              v-if=\"organizationOptions.length > 0\"\n              :label=\"i18nProvider.translate('i18n_get_api_key_existing_organizations')\"\n            >\n              <AntSelectOption v-for=\"organization in organizationOptions\" :key=\"organization.key\">\n                {{ organization.label }}\n              </AntSelectOption>\n            </AntSelectOptGroup>\n          </AntSelect>\n        </AntFormItem>\n        <AntFormItem\n          v-if=\"state.type == 'new-organization'\"\n          :label=\"i18nProvider.translate('i18n_get_api_key_organization_name')\"\n        >\n          <AntInput\n            v-model:value=\"state.organizationName\"\n            :placeholder=\"i18nProvider.translate('i18n_get_api_key_choose_organization_name')\"\n            size=\"large\"\n          />\n        </AntFormItem>\n        <AntFormItem\n          v-if=\"state.type !== 'new-organization'\"\n          :label=\"i18nProvider.translate('i18n_get_api_key_folder')\"\n        >\n          <AntSelect\n            :disabled=\"foldersLoading\"\n            :value=\"folderSelectorValue\"\n            :loading=\"foldersLoading\"\n            size=\"large\"\n            @update:value=\"selectFolder\"\n          >\n            <AntSelectOptGroup :label=\"i18nProvider.translate('i18n_get_api_key_new_folder')\">\n              <AntSelectOption :key=\"NEW_FOLDER_KEY\">\n                {{ i18nProvider.translate('i18n_get_api_key_create_new_folder') }}\n              </AntSelectOption>\n            </AntSelectOptGroup>\n            <AntSelectOptGroup\n              v-if=\"folderOptions.length > 0\"\n              :label=\"i18nProvider.translate('i18n_get_api_key_existing_folders')\"\n            >\n              <AntSelectOption v-for=\"folder in folderOptions\" :key=\"folder.value\">\n                {{ folder.label }}\n              </AntSelectOption>\n            </AntSelectOptGroup>\n          </AntSelect>\n        </AntFormItem>\n        <AntFormItem\n          v-if=\"state.type === 'new-organization' || state.type === 'new-folder'\"\n          :label=\"i18nProvider.translate('i18n_get_api_key_folder_name')\"\n        >\n          <AntInput\n            v-model:value=\"state.folderName\"\n            :placeholder=\"i18nProvider.translate('i18n_get_api_key_choose_folder_name')\"\n            size=\"large\"\n          />\n        </AntFormItem>\n        <AntFormItem\n          v-if=\"state.type !== 'new-organization' && state.type !== 'new-folder'\"\n          :label=\"i18nProvider.translate('i18n_get_api_key_project')\"\n        >\n          <AntSelect\n            style=\"width: 100%\"\n            :disabled=\"projectsLoading\"\n            :placeholder=\"i18nProvider.translate('i18n_get_api_key_choose_project')\"\n            size=\"large\"\n            :value=\"projectSelectorValue\"\n            @update:value=\"selectProject\"\n          >\n            <template v-if=\"projectsLoading\" #notFoundContent>\n              <AntSpin size=\"small\" />\n            </template>\n            <AntSelectOptGroup\n              v-if=\"!projectsLoading\"\n              :label=\"i18nProvider.translate('i18n_get_api_key_new_project')\"\n            >\n              <AntSelectOption :key=\"NEW_PROJECT_KEY\">\n                {{ i18nProvider.translate('i18n_get_api_key_create_new_project') }}\n              </AntSelectOption>\n            </AntSelectOptGroup>\n            <AntSelectOptGroup\n              v-if=\"projectOptions.length > 0 && !projectsLoading\"\n              :label=\"i18nProvider.translate('i18n_get_api_key_existing_projects')\"\n            >\n              <AntSelectOption v-for=\"project in projectOptions\" :key=\"project.key\">\n                {{ project.label }}\n              </AntSelectOption>\n            </AntSelectOptGroup>\n          </AntSelect>\n        </AntFormItem>\n        <AntFormItem\n          v-if=\"\n            state.type === 'new-organization' ||\n            state.type === 'new-folder' ||\n            state.type === 'new-project'\n          \"\n          label=\"Project name\"\n        >\n          <AntInput\n            v-model:value=\"state.projectName\"\n            :placeholder=\"i18nProvider.translate('i18n_get_api_key_choose_project_name')\"\n            size=\"large\"\n          />\n        </AntFormItem>\n        <AntFormItem style=\"margin-top: 40px\">\n          <AntButton\n            type=\"primary\"\n            :disabled=\"nextDisabled\"\n            :loading=\"generating\"\n            style=\"width: 100%\"\n            @click=\"handleNext\"\n          >\n            {{ i18nProvider.translate('i18n_login_with_this_project') }}\n          </AntButton>\n        </AntFormItem>\n      </AntForm>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport Navbar from '@/apps/console/components/workspace/Navbar.vue';\nimport { asyncComputed } from '@/utils/asyncComputed';\nimport { mergeQueryParams } from '@/utils/url';\nimport { i18nProvider } from '@/widgets-lib/common/i18n';\nimport {\n  Button as AntButton,\n  Form as AntForm,\n  FormItem as AntFormItem,\n  Input as AntInput,\n  Select as AntSelect,\n  SelectOptGroup as AntSelectOptGroup,\n  SelectOption as AntSelectOption,\n  Spin as AntSpin,\n  TypographyTitle as AntTypographyTitle,\n} from 'ant-design-vue';\nimport { SelectValue } from 'ant-design-vue/es/select';\nimport { computed, ref } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { ApiKeyModel, MemberAPI, OrganizationAPI, ProjectAPI } from '../apis/cloud';\nimport { FolderAPI, FolderDTO } from '../apis/cloud/folder';\nimport { authorManager } from '../authn/authorManager';\n\nconst folderApi = new FolderAPI();\nconst organizationApi = new OrganizationAPI();\nconst projectApi = new ProjectAPI();\nconst memberApi = new MemberAPI();\n\nconst currentUserEmail = authorManager.getAuthor()?.claims.email;\n\nconst { result: organizations, loading } = asyncComputed(async () => {\n  const orgs = await organizationApi.list();\n  selectOrganization(orgs.length > 0 ? orgs[0].id : NEW_ORGANIZATION_KEY);\n  return orgs;\n});\n\nconst {\n  result: projects,\n  loading: projectsLoading,\n  refetch: refetchProjects,\n} = asyncComputed(async () => {\n  if (state.value.type === 'loading-organizations' || state.value.type === 'new-organization') {\n    return [];\n  }\n  return projectApi.list(state.value.organizationId);\n});\n\nconst {\n  result: folders,\n  loading: foldersLoading,\n  refetch: refetchFolders,\n} = asyncComputed(async () => {\n  if (state.value.type === 'loading-organizations' || state.value.type === 'new-organization') {\n    return [];\n  }\n  return folderApi.list(state.value.organizationId);\n});\n\nconst organizationOptions = computed(\n  () => organizations.value?.map((org) => ({ key: org.id, label: org.name })) ?? [],\n);\n\nconst projectOptions = computed(() => {\n  if (!projects.value) return [];\n  return projects.value\n    .filter((p) => {\n      switch (state.value.type) {\n        case 'new-project':\n          return p.folderId === state.value.folderId;\n        case 'selected-project':\n          return p.folderId === state.value.folderId;\n        case 'loading-folder':\n          return p.folderId === state.value.folderId;\n        default:\n          return false;\n      }\n    })\n    .map((p) => ({ key: p.id, label: p.name }));\n});\n\nconst folderOptions = computed(\n  () => folders.value?.map((folder) => ({ value: folder.id, label: folder.name })) ?? [],\n);\n\nconst nextDisabled = computed(() => {\n  switch (state.value.type) {\n    case 'new-organization':\n      return !state.value.organizationName;\n    case 'new-folder':\n      return !state.value.folderName;\n    case 'new-project':\n      return !state.value.projectName || !state.value.folderId;\n    case 'selected-project':\n      return false;\n    case 'loading-organization':\n    case 'loading-folder':\n      return true;\n    default:\n      throw new Error(`Invalid state ${JSON.stringify(state.value)}`);\n  }\n});\n\nconst createApiKey = async (projectId: string) => {\n  return await ApiKeyModel.create({ projectId, name: 'default' });\n};\n\nconst NEW_ORGANIZATION_KEY = 'NEW_ORGANIZATION_KEY';\nconst NEW_FOLDER_KEY = 'NEW_FOLDER_KEY';\nconst NEW_PROJECT_KEY = 'NEW_PROJECT_KEY';\n\ntype State =\n  | {\n      type: 'loading-organizations';\n    }\n  | {\n      type: 'new-organization';\n      organizationName: string;\n      folderName: string;\n      projectName: string;\n    }\n  | {\n      type: 'loading-organization';\n      organizationId: string;\n    }\n  | {\n      type: 'new-folder';\n      organizationId: string;\n      folderName: string;\n      projectName: string;\n    }\n  | {\n      type: 'loading-folder';\n      organizationId: string;\n      folderId: string;\n    }\n  | {\n      type: 'new-project';\n      organizationId: string;\n      folderId: string;\n      projectName: string;\n    }\n  | {\n      type: 'selected-project';\n      organizationId: string;\n      folderId: string;\n      projectId: string;\n    };\n\nconst state = ref<State>({ type: 'loading-organizations' });\n\nconst organizationSelectorValue = computed(() => {\n  if (state.value.type === 'new-organization' || state.value.type === 'loading-organizations') {\n    return NEW_ORGANIZATION_KEY;\n  } else {\n    return state.value.organizationId;\n  }\n});\n\nconst projectSelectorValue = computed(() => {\n  if (\n    state.value.type === 'new-organization' ||\n    state.value.type === 'new-folder' ||\n    state.value.type === 'new-project' ||\n    state.value.type === 'loading-organization' ||\n    state.value.type === 'loading-folder' ||\n    state.value.type === 'loading-organizations'\n  ) {\n    return NEW_PROJECT_KEY;\n  } else if (state.value.type === 'selected-project') {\n    return state.value.projectId;\n  } else {\n    throw new Error(`Invalid state ${JSON.stringify(state.value)}`);\n  }\n});\n\nconst folderSelectorValue = computed(() => {\n  if (state.value.type === 'new-project' || state.value.type === 'selected-project') {\n    return state.value.folderId;\n  } else {\n    return NEW_FOLDER_KEY;\n  }\n});\n\nfunction companyFromEmail(email: string) {\n  return email.split('@')[1].split('.')[0];\n}\n\nasync function selectOrganization(option: SelectValue) {\n  if (option === NEW_ORGANIZATION_KEY) {\n    state.value = {\n      type: 'new-organization',\n      organizationName: companyFromEmail(authorManager.getAuthor()!.claims.email),\n      folderName: 'My team folder',\n      projectName: 'My project',\n    };\n  } else {\n    state.value = {\n      type: 'loading-organization',\n      organizationId: String(option),\n    };\n\n    await Promise.all([refetchProjects(), refetchFolders()]);\n\n    const firstFolder = folders.value?.find((f) => f.organizationId === String(option));\n    const firstProject = projects.value?.find((p) => p.folderId === firstFolder?.id);\n\n    if (!firstFolder) {\n      state.value = {\n        type: 'new-folder',\n        organizationId: String(option),\n        folderName: 'My team folder',\n        projectName: 'My project',\n      };\n    } else if (!firstProject) {\n      state.value = {\n        type: 'new-project',\n        organizationId: String(option),\n        folderId: firstFolder.id,\n        projectName: 'My project',\n      };\n    } else {\n      state.value = {\n        type: 'selected-project',\n        organizationId: String(option),\n        folderId: firstFolder.id,\n        projectId: firstProject.id,\n      };\n    }\n  }\n}\n\nfunction selectProject(option: SelectValue) {\n  if (\n    state.value.type === 'new-organization' ||\n    state.value.type === 'new-folder' ||\n    state.value.type === 'loading-organization' ||\n    state.value.type === 'loading-folder' ||\n    state.value.type === 'loading-organizations'\n  ) {\n    throw new Error(`Invalid state ${JSON.stringify(state.value)}`);\n  } else if (option === NEW_PROJECT_KEY) {\n    state.value = {\n      type: 'new-project',\n      organizationId: state.value.organizationId,\n      folderId: state.value.folderId,\n      projectName: 'New project',\n    };\n  } else {\n    state.value = {\n      type: 'selected-project',\n      organizationId: state.value.organizationId,\n      folderId: state.value.folderId,\n      projectId: String(option),\n    };\n  }\n}\n\nasync function selectFolder(folderId: SelectValue) {\n  if (state.value.type === 'new-organization' || state.value.type === 'loading-organizations') {\n    throw new Error(`Invalid state ${JSON.stringify(state.value)}`);\n  } else if (folderId === NEW_FOLDER_KEY) {\n    state.value = {\n      type: 'new-folder',\n      organizationId: state.value.organizationId,\n      folderName: 'New folder',\n      projectName: 'New project',\n    };\n  } else {\n    state.value = {\n      type: 'loading-folder',\n      organizationId: state.value.organizationId,\n      folderId: String(folderId),\n    };\n    await refetchProjects();\n    const firstProject = projects.value?.find((p) => p.folderId === String(folderId));\n    if (firstProject) {\n      state.value = {\n        type: 'selected-project',\n        organizationId: state.value.organizationId,\n        folderId: String(folderId),\n        projectId: firstProject.id,\n      };\n    } else {\n      state.value = {\n        type: 'new-project',\n        organizationId: state.value.organizationId,\n        folderId: String(folderId),\n        projectName: 'New project',\n      };\n    }\n  }\n}\n\nasync function getCurrentMemberId(organizationId: string) {\n  const members = await memberApi.list(organizationId);\n  const member = members.find((m) => m.email === currentUserEmail);\n  if (!member) throw new Error('Member not found');\n  return member.id;\n}\n\nasync function ensureFolder(organizationId: string): Promise<FolderDTO> {\n  const orgMembers = await memberApi.list(organizationId);\n  const folders = await folderApi.list(organizationId);\n\n  if (folders.length === 0) {\n    await folderApi.create({\n      name: 'Default Folder',\n      organizationId: organizationId,\n      memberIds: [...orgMembers.map((m) => m.id)],\n    });\n  }\n\n  const refreshedFolders = await folderApi.list(organizationId);\n\n  return refreshedFolders[0];\n}\n\nconst generating = ref(false);\nasync function handleNext() {\n  if (generating.value) return;\n  generating.value = true;\n  try {\n    if (state.value.type === 'new-organization') {\n      const newOrganization = await organizationApi.create({ name: state.value.organizationName });\n\n      const folder = await ensureFolder(newOrganization.id);\n\n      const newProject = await projectApi.create({\n        name: state.value.projectName,\n        organizationId: newOrganization.id,\n        folderId: folder.id,\n      });\n\n      const apiKey = await createApiKey(newProject.id);\n      if (apiKey.value) {\n        done(apiKey.value);\n      }\n    } else if (state.value.type === 'new-folder') {\n      const currentMemberId = await getCurrentMemberId(state.value.organizationId);\n      const folder = await folderApi.create({\n        name: state.value.folderName,\n        organizationId: state.value.organizationId,\n        memberIds: [currentMemberId],\n      });\n\n      const newProject = await projectApi.create({\n        name: state.value.projectName,\n        organizationId: state.value.organizationId,\n        folderId: folder.id,\n      });\n\n      const apiKey = await createApiKey(newProject.id);\n      if (apiKey.value) {\n        done(apiKey.value);\n      }\n    } else if (state.value.type === 'new-project') {\n      const newProject = await projectApi.create({\n        name: state.value.projectName,\n        organizationId: state.value.organizationId,\n        folderId: state.value.folderId,\n      });\n      const apiKey = await createApiKey(newProject.id);\n      if (apiKey.value) {\n        done(apiKey.value);\n      }\n    } else if (state.value.type === 'selected-project') {\n      const apiKey = await createApiKey(state.value.projectId);\n      if (apiKey.value) {\n        done(apiKey.value);\n      }\n    }\n  } finally {\n    generating.value = false;\n  }\n}\n\nconst route = useRoute();\nconst apiKeyState = ref<string | null>(null);\n\nasync function done(apiKey: string) {\n  if (route.query['redirect']) {\n    const href = route.query['redirect'] as string;\n    if (!href.match(/http:\\/\\/localhost:\\d+/)) throw new Error('Invalid redirect');\n\n    const url = decodeURIComponent(href);\n    location.href = mergeQueryParams(url, { 'api-key': apiKey });\n  } else {\n    apiKeyState.value = apiKey;\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.container {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n}\n\n.content {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: auto 0px;\n  box-sizing: border-box;\n}\n\n.card {\n  background-color: #fff;\n  padding: 30px;\n  border-radius: 8px;\n  border: 1px solid #f5f5f5;\n  width: 600px;\n}\n</style>\n"],"names":["NEW_ORGANIZATION_KEY","NEW_FOLDER_KEY","NEW_PROJECT_KEY","folderApi","FolderAPI","organizationApi","OrganizationAPI","projectApi","ProjectAPI","memberApi","MemberAPI","currentUserEmail","authorManager","organizations","loading","asyncComputed","orgs","selectOrganization","projects","projectsLoading","refetchProjects","state","folders","foldersLoading","refetchFolders","organizationOptions","computed","org","projectOptions","p","folderOptions","folder","nextDisabled","createApiKey","projectId","ApiKeyModel","ref","organizationSelectorValue","projectSelectorValue","folderSelectorValue","companyFromEmail","email","option","firstFolder","f","firstProject","selectProject","selectFolder","folderId","getCurrentMemberId","organizationId","member","m","ensureFolder","orgMembers","generating","handleNext","newOrganization","newProject","apiKey","done","currentMemberId","route","useRoute","apiKeyState","href","url","mergeQueryParams"],"mappings":"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"}