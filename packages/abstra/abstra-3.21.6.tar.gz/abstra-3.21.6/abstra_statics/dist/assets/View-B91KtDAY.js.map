{"version":3,"file":"View-B91KtDAY.js","sources":["../../src/apps/console/views/AccessControl/signupPolicyEditor/View.vue","../../src/apps/console/views/AccessControl/userEditor/NewUser.vue","../../src/apps/console/views/AccessControl/userEditor/UpdateUser.vue","../../src/apps/console/views/AccessControl/userEditor/View.vue","../../src/apps/console/views/AccessControl/roleEditor/NewRole.vue","../../src/apps/console/views/AccessControl/roleEditor/UpdateRole.vue","../../src/apps/console/views/AccessControl/roleEditor/View.vue","../../src/models/signup-policy/types.ts","../../src/models/signup-policy/repository.ts","../../src/models/users/types.ts","../../src/models/users/repository.ts","../../src/apps/console/views/AccessControl/View.vue"],"sourcesContent":["<template>\n  <AntFlex style=\"padding-top: 8px; width: 100%\" justify=\"space-between\" align=\"flex-end\">\n    <AntRadioGroup :value=\"strategy\" @update:value=\"onStrategyUpdate\">\n      <AntSpace direction=\"vertical\">\n        <AntRadio value=\"inviteOnly\">Allow listed users only</AntRadio>\n        <AntSpace>\n          <AntRadio value=\"patternOnly\">Allow everyone from this domain:</AntRadio>\n          <AntSelect\n            mode=\"tags\"\n            :value=\"signupPolicy.emailPatterns\"\n            style=\"min-width: 300px\"\n            placeholder=\"@domain.com or sub.domain.com\"\n            :disabled=\"strategy !== 'patternOnly'\"\n            :options=\"options\"\n            dropdown-match-select-width\n            :open=\"false\"\n            @update:value=\"handlePatternUpdate\"\n          />\n        </AntSpace>\n      </AntSpace>\n    </AntRadioGroup>\n    <AntButton :disabled=\"!signupPolicy.hasChanges\" type=\"primary\" @click=\"onSave\">\n      Save changes\n    </AntButton>\n  </AntFlex>\n</template>\n<script lang=\"ts\" setup>\nimport { SignupPolicy, Strategy } from '@/models/signup-policy';\nimport {\n  Button as AntButton,\n  Flex as AntFlex,\n  Radio as AntRadio,\n  RadioGroup as AntRadioGroup,\n  Select as AntSelect,\n  Space as AntSpace,\n} from 'ant-design-vue';\nimport { DefaultOptionType, SelectValue } from 'ant-design-vue/es/select';\nimport { RawValueType } from 'ant-design-vue/es/vc-select/BaseSelect';\nimport { ref } from 'vue';\n\nconst emit = defineEmits<{\n  (e: 'updated', policy: SignupPolicy): void;\n  (e: 'save'): void;\n}>();\n\nconst props = defineProps<{\n  signupPolicy: SignupPolicy;\n}>();\n\nconst strategy = ref<Strategy>(props.signupPolicy.strategy);\n\nconst emailPatters = ref<RawValueType[]>(\n  props.signupPolicy.strategy === 'patternOnly' ? props.signupPolicy.emailPatterns : [],\n);\n\nconst options = ref<DefaultOptionType[]>(\n  props.signupPolicy.strategy === 'patternOnly'\n    ? props.signupPolicy.emailPatterns.map((value) => ({ label: value }))\n    : [],\n);\n\nconst handlePatternUpdate = (v: SelectValue) => {\n  const selectedOptions = v as RawValueType[];\n  emailPatters.value = selectedOptions;\n  if (selectedOptions.length === 0) {\n    //all patterns were removed, so change to inviteOnly\n    strategy.value = 'inviteOnly';\n    onStrategyUpdate('inviteOnly');\n    return;\n  }\n  options.value = selectedOptions.map((value) => ({ label: value as string }));\n  props.signupPolicy.emailPatterns = v as string[];\n  emit('updated', props.signupPolicy);\n};\n\nconst onSave = () => {\n  emit('save');\n};\n\nconst onStrategyUpdate = (v: Strategy) => {\n  strategy.value = v;\n  if (v === 'patternOnly') {\n    return;\n  }\n  if (v === 'inviteOnly') {\n    props.signupPolicy.allowOnlyInvited();\n  }\n  emit('updated', props.signupPolicy);\n};\n</script>\n","<template>\n  <AntDrawer\n    open\n    title=\"New user\"\n    :width=\"720\"\n    :body-style=\"{ paddingBottom: '80px' }\"\n    :footer-style=\"{ textAlign: 'right' }\"\n    @close=\"cancel\"\n  >\n    <AntForm :model=\"newUser\" layout=\"vertical\">\n      <AntFormItem key=\"email\" label=\"Email\" :required=\"true\">\n        <AntInput v-model:value=\"newUser.email\" />\n      </AntFormItem>\n      <AntFormItem key=\"role\" label=\"Role\">\n        <AntSelect v-model:value=\"newUser.roles\" mode=\"multiple\" :options=\"selectRoleOptions\" />\n      </AntFormItem>\n    </AntForm>\n    <template #extra>\n      <AntSpace>\n        <AntButton @click=\"cancel\">Cancel</AntButton>\n        <AntButton type=\"primary\" @click=\"created\">Submit</AntButton>\n      </AntSpace>\n    </template>\n  </AntDrawer>\n</template>\n\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue';\nimport { CloudApiConsoleUserCreateRequest } from '@/contracts.generated';\n\nconst props = defineProps<{\n  roleOptions: Role[];\n}>();\n\nconst selectRoleOptions = props.roleOptions.map((role) => ({ label: role.name, value: role.name }));\n\nimport {\n  Form as AntForm,\n  Input as AntInput,\n  Space as AntSpace,\n  Button as AntButton,\n  Select as AntSelect,\n  Drawer as AntDrawer,\n  FormItem as AntFormItem,\n} from 'ant-design-vue';\nimport { Role } from '@/models/roles';\n\nconst emits = defineEmits<{\n  (e: 'created', dto: CloudApiConsoleUserCreateRequest): void;\n  (e: 'cancel'): void;\n}>();\n\nconst newUser = reactive<CloudApiConsoleUserCreateRequest>({\n  email: '',\n  roles: [],\n});\n\nfunction cancel() {\n  emits('cancel');\n}\n\nfunction created() {\n  if (!newUser.email) return;\n  emits('created', newUser);\n}\n</script>\n","<template>\n  <AntDrawer\n    open\n    title=\"Update user\"\n    :width=\"720\"\n    :body-style=\"{ paddingBottom: '80px' }\"\n    :footer-style=\"{ textAlign: 'right' }\"\n    @close=\"cancel\"\n  >\n    <AntForm :model=\"updatedUser\" layout=\"vertical\">\n      <AntFormItem key=\"email\" label=\"Email\">\n        <AntInput v-model:value=\"updatedUser.email\" />\n      </AntFormItem>\n      <AntFormItem key=\"role\" label=\"Role\">\n        <AntSelect v-model:value=\"updatedUser.roles\" mode=\"multiple\" :options=\"roleOptions\" />\n      </AntFormItem>\n    </AntForm>\n    <template #extra>\n      <AntSpace>\n        <AntButton @click=\"cancel\">Cancel</AntButton>\n        <AntButton type=\"primary\" @click=\"updated\">Submit</AntButton>\n      </AntSpace>\n    </template>\n  </AntDrawer>\n</template>\n\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue';\n\nimport {\n  Form as AntForm,\n  Input as AntInput,\n  Space as AntSpace,\n  Button as AntButton,\n  Select as AntSelect,\n  Drawer as AntDrawer,\n  FormItem as AntFormItem,\n} from 'ant-design-vue';\nimport {\n  CloudApiConsoleUserUpdateRequest,\n  CommonUserEmail,\n  CommonUserRoles,\n} from '@/contracts.generated';\nimport { Role } from '@/models/roles';\n\nconst emits = defineEmits<{\n  (e: 'updated', dto: CloudApiConsoleUserUpdateRequest): void;\n  (e: 'cancel'): void;\n}>();\n\nconst props = defineProps<{\n  roleOptions: Role[];\n  email: CommonUserEmail;\n  roles: CommonUserRoles;\n}>();\n\nconst roleOptions = props.roleOptions.map((role) => ({ label: role.name, value: role.name }));\n\nconst updatedUser = reactive<CloudApiConsoleUserUpdateRequest>({\n  email: props.email,\n  roles: props.roles,\n});\n\nfunction cancel() {\n  emits('cancel');\n}\n\nfunction updated() {\n  emits('updated', updatedUser);\n}\n</script>\n","<template>\n  <CrudView\n    entity-name=\"users\"\n    title=\"\"\n    :loading=\"loading\"\n    description=\"List all app users.\"\n    empty-title=\"No users yet\"\n    :table=\"usersTable\"\n    create-button-text=\"Add users\"\n    :create=\"onCreate\"\n  >\n    <template #roles=\"{ payload }\">\n      <AntTag v-for=\"role in payload.roles\" :key=\"role\" bordered>\n        {{ role }}\n      </AntTag>\n    </template>\n  </CrudView>\n</template>\n\n<script lang=\"ts\" setup>\nimport CrudView, { CrudTable } from '@/components/inputs/CrudView.vue';\nimport { User } from '@/models/users';\nimport { PhPencil, PhTrash } from '@phosphor-icons/vue';\nimport { Tag as AntTag } from 'ant-design-vue';\nimport { computed } from 'vue';\n\nconst props = defineProps<{\n  loading: boolean;\n  users: User[];\n  onCreate: () => void;\n  onEdit: (user: User) => void;\n  onDelete: (user: User) => void;\n}>();\n\nconst usersTable = computed(\n  () =>\n    ({\n      columns: [{ title: 'Email' }, { title: 'Roles' }, { title: '', align: 'right' }],\n      rows:\n        props.users.map((user) => ({\n          key: user.email,\n          cells: [\n            {\n              type: 'text',\n              text: user.email,\n            },\n            {\n              type: 'slot',\n              key: 'roles',\n              payload: { roles: user.roles },\n            },\n            {\n              type: 'actions',\n              actions: [\n                {\n                  icon: PhPencil,\n                  label: 'Edit',\n                  onClick: () => props.onEdit(user),\n                },\n                {\n                  icon: PhTrash,\n                  label: 'Delete',\n                  onClick: () => props.onDelete(user),\n                },\n              ],\n            },\n          ],\n        })) ?? [],\n    } satisfies CrudTable),\n);\n</script>\n","<template>\n  <AntDrawer\n    open\n    title=\"New role\"\n    :width=\"720\"\n    :body-style=\"{ paddingBottom: '80px' }\"\n    :footer-style=\"{ textAlign: 'right' }\"\n    @close=\"cancel\"\n  >\n    <AntForm :model=\"newRole\" layout=\"vertical\">\n      <AntFormItem key=\"name\" label=\"Name\" :required=\"true\">\n        <AntInput v-model:value=\"newRole.name\" />\n      </AntFormItem>\n      <AntFormItem key=\"description\" label=\"Description\">\n        <AntTextArea\n          v-model:value=\"newRole.description\"\n          placeholder=\"Optional description\"\n          :rows=\"3\"\n        />\n      </AntFormItem>\n    </AntForm>\n    <template #extra>\n      <AntSpace>\n        <AntButton @click=\"cancel\">Cancel</AntButton>\n        <AntButton type=\"primary\" @click=\"created\">Submit</AntButton>\n      </AntSpace>\n    </template>\n  </AntDrawer>\n</template>\n\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue';\nimport { CloudApiConsoleRoleCreateRequest } from '@/contracts.generated';\n\nimport {\n  Form as AntForm,\n  Input as AntInput,\n  Space as AntSpace,\n  Button as AntButton,\n  Textarea as AntTextArea,\n  Drawer as AntDrawer,\n  FormItem as AntFormItem,\n} from 'ant-design-vue';\n\nconst emits = defineEmits<{\n  (e: 'created', dto: CloudApiConsoleRoleCreateRequest): void;\n  (e: 'cancel'): void;\n}>();\n\nconst newRole = reactive<CloudApiConsoleRoleCreateRequest>({\n  name: '',\n  description: '',\n});\n\nfunction cancel() {\n  emits('cancel');\n}\n\nfunction created() {\n  if (!newRole.name) return;\n  emits('created', newRole);\n}\n</script>\n","<template>\n  <AntDrawer\n    open\n    title=\"Update role\"\n    :width=\"720\"\n    :body-style=\"{ paddingBottom: '80px' }\"\n    :footer-style=\"{ textAlign: 'right' }\"\n    @close=\"cancel\"\n  >\n    <AntForm :model=\"updatedRole\" layout=\"vertical\">\n      <AntFormItem key=\"name\" label=\"Name\">\n        <AntInput :value=\"props.name\" disabled />\n      </AntFormItem>\n      <AntFormItem key=\"role\" label=\"Role\">\n        <AntTextArea\n          v-model:value=\"updatedRole.description\"\n          placeholder=\"Optional description\"\n          :rows=\"3\"\n        />\n      </AntFormItem>\n    </AntForm>\n    <template #extra>\n      <AntSpace>\n        <AntButton @click=\"cancel\">Cancel</AntButton>\n        <AntButton type=\"primary\" @click=\"updated\">Submit</AntButton>\n      </AntSpace>\n    </template>\n  </AntDrawer>\n</template>\n\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue';\n\nimport {\n  Form as AntForm,\n  Input as AntInput,\n  Space as AntSpace,\n  Button as AntButton,\n  Textarea as AntTextArea,\n  Drawer as AntDrawer,\n  FormItem as AntFormItem,\n} from 'ant-design-vue';\nimport { CloudApiConsoleRoleUpdateRequest } from '@/contracts.generated';\n\nconst emits = defineEmits<{\n  (e: 'updated', dto: CloudApiConsoleRoleUpdateRequest): void;\n  (e: 'cancel'): void;\n}>();\n\nconst props = defineProps<{ name: string; description: string }>();\n\nconst updatedRole = reactive<CloudApiConsoleRoleUpdateRequest>({\n  description: props.description,\n});\n\nfunction cancel() {\n  emits('cancel');\n}\n\nfunction updated() {\n  emits('updated', updatedRole);\n}\n</script>\n","<template>\n  <CrudView\n    entity-name=\"roles\"\n    :loading=\"loading\"\n    title=\"\"\n    description=\"List all app roles.\"\n    empty-title=\"No roles yet\"\n    :table=\"rolesTable\"\n    create-button-text=\"Add roles\"\n    :create=\"onCreate\"\n  />\n</template>\n\n<script lang=\"ts\" setup>\nimport CrudView, { CrudTable } from '@/components/inputs/CrudView.vue';\nimport { Role } from '@/models/roles';\nimport { PhPencil, PhTrash } from '@phosphor-icons/vue';\nimport { computed } from 'vue';\n\nconst props = defineProps<{\n  loading: boolean;\n  roles: Role[];\n  onCreate: () => void;\n  onEdit: (role: Role) => void;\n  onDelete: (role: Role) => void;\n}>();\n\nconst rolesTable = computed(\n  () =>\n    ({\n      columns: [{ title: 'Name' }, { title: 'Description' }, { title: '', align: 'right' }],\n      rows:\n        props.roles.map((role) => ({\n          key: role.id,\n          cells: [\n            {\n              type: 'text',\n              text: role.name,\n            },\n            {\n              type: 'text',\n              text: role.description,\n            },\n            {\n              type: 'actions',\n              actions: [\n                {\n                  icon: PhPencil,\n                  label: 'Edit',\n                  onClick: () => props.onEdit(role),\n                },\n                {\n                  icon: PhTrash,\n                  label: 'Delete',\n                  onClick: () => props.onDelete(role),\n                },\n              ],\n            },\n          ],\n        })) ?? [],\n    } satisfies CrudTable),\n);\n</script>\n","import { CommonSignupPolicy } from '@/contracts.generated';\nimport { EditableRecord } from '@/utils/record';\n\nexport type Strategy = 'inviteOnly' | 'patternOnly';\n\nexport interface SignupPolicyRepository {\n  update(policy: SignupPolicy): Promise<SignupPolicy>;\n  get(): Promise<SignupPolicy>;\n}\n\nexport class SignupPolicy {\n  static pattern = /^@?(?!-)[A-Za-z0-9-]{1,}(?<!-)(\\.[A-Za-z]{2,})+$/;\n  private record: EditableRecord<CommonSignupPolicy>;\n\n  private constructor(private dto: CommonSignupPolicy) {\n    this.record = EditableRecord.from(dto);\n  }\n\n  static from(dto: CommonSignupPolicy): SignupPolicy {\n    return new SignupPolicy(dto);\n  }\n\n  toDTO(): CommonSignupPolicy {\n    return this.record.toDTO();\n  }\n\n  get id(): string {\n    return this.record.get('id');\n  }\n\n  get projectId(): string {\n    return this.record.get('projectId');\n  }\n\n  get emailPatterns(): string[] {\n    return this.record.get('emailPatterns');\n  }\n\n  set emailPatterns(value: string[]) {\n    this.record.set('emailPatterns', value);\n  }\n\n  get hasChanges(): boolean {\n    return this.record.hasChangesDeep('emailPatterns');\n  }\n\n  get strategy(): Strategy {\n    //emailPatterns = []\n    if (this.dto.emailPatterns.length === 0) {\n      return 'inviteOnly';\n    }\n    return 'patternOnly';\n  }\n\n  get changes(): Partial<CommonSignupPolicy> {\n    return this.record.changes;\n  }\n\n  allowOnlyInvited() {\n    this.record.set('emailPatterns', []);\n  }\n\n  static validate(pattern: string): boolean {\n    return SignupPolicy.pattern.test(pattern);\n  }\n}\n","import { CloudApiGateway } from '@/apps/console/apis/cloud/gateway';\nimport {\n  CloudApiConsoleSignupPolicyUpdateRequest,\n  CommonSignupPolicy,\n} from '@/contracts.generated';\nimport { SignupPolicy, SignupPolicyRepository } from './types';\n\nclass signupPolicyAPI {\n  private urlPath = `signup-policy`;\n\n  async update(\n    projectId: string,\n    dto: CloudApiConsoleSignupPolicyUpdateRequest,\n  ): Promise<CommonSignupPolicy> {\n    return CloudApiGateway.patch(`projects/${projectId}/${this.urlPath}`, dto);\n  }\n\n  async get(projectId: string): Promise<CommonSignupPolicy> {\n    return CloudApiGateway.get(`projects/${projectId}/${this.urlPath}`);\n  }\n}\n\nconst api = new signupPolicyAPI();\n\nexport class CloudSignupPolicyRepository implements SignupPolicyRepository {\n  constructor(private projectId: string) {}\n\n  async update(policy: SignupPolicy): Promise<SignupPolicy> {\n    const { emailPatterns } = policy.changes;\n    if (!emailPatterns) {\n      return policy;\n    }\n\n    const dto = await api.update(this.projectId, {\n      emailPatterns,\n    });\n\n    return SignupPolicy.from(dto);\n  }\n\n  async get(): Promise<SignupPolicy> {\n    const dto = await api.get(this.projectId);\n    return SignupPolicy.from(dto);\n  }\n}\n","import { CommonUserRoles, CommonUser as UserDTO } from '@/contracts.generated';\nimport { EditableRecord } from '@/utils/record';\n\nexport class User {\n  private record: EditableRecord<UserDTO>;\n\n  private constructor(private dto: UserDTO) {\n    this.record = EditableRecord.from(dto);\n  }\n\n  static from(dto: UserDTO): User {\n    return new User(dto);\n  }\n\n  toDTO(): UserDTO {\n    return this.record.toDTO();\n  }\n\n  get changes(): Partial<UserDTO> {\n    return this.record.changes;\n  }\n\n  get id(): string {\n    return this.record.get('id');\n  }\n\n  get email(): string {\n    return this.record.get('email');\n  }\n\n  set email(value: string) {\n    this.record.set('email', value);\n  }\n\n  get projectId(): string {\n    return this.record.get('projectId');\n  }\n\n  get roles(): CommonUserRoles {\n    return this.record.get('roles');\n  }\n\n  set roles(roles: CommonUserRoles) {\n    this.record.set('roles', roles);\n  }\n\n  update(dto: Partial<UserDTO>) {\n    this.record.update(dto);\n  }\n\n  resetChanges() {\n    this.record.resetChanges();\n  }\n}\n","import { CloudApiGateway } from '@/apps/console/apis/cloud/gateway';\nimport {\n  CloudApiConsoleUserCreateRequest,\n  CloudApiConsoleUserCreateResponse,\n  CloudApiConsoleUserListQuery,\n  CloudApiConsoleUserListResponse,\n  CloudApiConsoleUserUpdateRequest,\n  CloudApiConsoleUserUpdateResponse,\n} from '@/contracts.generated';\nimport { User } from './types';\n\nclass UserAPI {\n  private urlPath = `users`;\n\n  async create(\n    projectId: string,\n    dto: CloudApiConsoleUserCreateRequest,\n  ): Promise<CloudApiConsoleUserCreateResponse> {\n    return CloudApiGateway.post(`projects/${projectId}/${this.urlPath}`, dto);\n  }\n\n  async delete(projectId: string, id: string): Promise<void> {\n    await CloudApiGateway.delete(`projects/${projectId}/${this.urlPath}/${id}`);\n  }\n\n  async list(\n    projectId: string,\n    { limit, offset }: CloudApiConsoleUserListQuery,\n  ): Promise<CloudApiConsoleUserListResponse> {\n    const paramsObj: {\n      limit?: string;\n      offset?: string;\n    } = {};\n    if (limit) {\n      paramsObj.limit = limit.toString();\n    }\n    if (offset) {\n      paramsObj.offset = offset.toString();\n    }\n    const params = new URLSearchParams(paramsObj);\n    return CloudApiGateway.get(`projects/${projectId}/${this.urlPath}?${params.toString()}`);\n  }\n\n  async update(\n    projectId: string,\n    id: string,\n    changes: Partial<CloudApiConsoleUserUpdateRequest>,\n  ): Promise<CloudApiConsoleUserUpdateResponse> {\n    return CloudApiGateway.patch(`projects/${projectId}/${this.urlPath}/${id}`, changes);\n  }\n}\n\nconst api = new UserAPI();\n\nexport class ConsoleUserRepository {\n  constructor(private projectId: string) {}\n\n  async create(data: CloudApiConsoleUserCreateRequest): Promise<void> {\n    await api.create(this.projectId, data);\n  }\n\n  async update(id: string, changes: CloudApiConsoleUserUpdateRequest): Promise<void> {\n    await api.update(this.projectId, id, changes);\n  }\n\n  async delete(id: string): Promise<void> {\n    await api.delete(this.projectId, id);\n  }\n\n  async list(limit: number, offset: number): Promise<User[]> {\n    const dto = await api.list(this.projectId, { limit, offset });\n    return dto.map(User.from);\n  }\n}\n","<template>\n  <AntTitle>Access Control</AntTitle>\n  <AntParagraph>\n    Manage how your end users interect with your application.\n    <DocsButton path=\"tools/access-control\" />\n  </AntParagraph>\n\n  <AntTabs v-model:active-key=\"selectedTab\">\n    <AntTabPane key=\"users\" tab=\"Users\" />\n    <AntTabPane key=\"roles\" tab=\"Roles\" />\n  </AntTabs>\n\n  <SignupPolicyView\n    v-if=\"selectedTab === 'users' && policy\"\n    :signup-policy=\"policy\"\n    @save=\"updatePolicy\"\n  />\n  <UserView\n    v-if=\"selectedTab === 'users'\"\n    :loading=\"usersLoading\"\n    :users=\"users || []\"\n    @create=\"openNewUser\"\n    @edit=\"openEditUser\"\n    @delete=\"deleteUser\"\n  />\n\n  <RoleView\n    v-if=\"selectedTab === 'roles'\"\n    :loading=\"rolesLoading\"\n    :roles=\"roles || []\"\n    @create=\"openNewRole\"\n    @edit=\"openEditRole\"\n    @delete=\"deleteRole\"\n  />\n\n  <NewUserForm\n    v-if=\"state.type === 'creatingUser'\"\n    :role-options=\"roles || []\"\n    @cancel=\"close\"\n    @created=\"createUser\"\n  />\n  <UpdateUserForm\n    v-else-if=\"state.type === 'editingUser'\"\n    :email=\"state.payload.email\"\n    :roles=\"state.payload.roles || []\"\n    :role-options=\"roles || []\"\n    @updated=\"updateUser\"\n    @cancel=\"close\"\n  />\n  <NewRoleForm v-else-if=\"state.type === 'creatingRole'\" @cancel=\"close\" @created=\"createRole\" />\n  <UpdateRoleForm\n    v-else-if=\"state.type === 'editingRole'\"\n    :name=\"state.payload.name\"\n    :description=\"state.payload.description\"\n    @updated=\"updateRole\"\n    @cancel=\"close\"\n  />\n</template>\n\n<script lang=\"ts\" setup>\nimport { asyncComputed } from '@/utils/asyncComputed';\nimport { onMounted, ref } from 'vue';\nimport { useRoute } from 'vue-router';\n\nimport SignupPolicyView from './signupPolicyEditor/View.vue';\n\nimport DocsButton from '@/apps/editor/components/workspace/DocsButton.vue';\nimport { TypographyParagraph as AntParagraph } from 'ant-design-vue';\n\nimport NewUserForm from './userEditor/NewUser.vue';\nimport UpdateUserForm from './userEditor/UpdateUser.vue';\nimport UserView from './userEditor/View.vue';\n\nimport NewRoleForm from './roleEditor/NewRole.vue';\nimport UpdateRoleForm from './roleEditor/UpdateRole.vue';\nimport RoleView from './roleEditor/View.vue';\n\nimport { ConsoleRoleRepository, Role } from '@/models/roles';\nimport { CloudSignupPolicyRepository } from '@/models/signup-policy';\nimport { ConsoleUserRepository, User } from '@/models/users';\n\nimport {\n  CloudApiConsoleRoleCreateRequest,\n  CloudApiConsoleRoleUpdateRequest,\n  CloudApiConsoleUserCreateRequest,\n  CloudApiConsoleUserUpdateRequest,\n} from '@/contracts.generated';\n\nimport { popupError } from '@/components/popupNotifcation';\nimport { askForConfirmation } from '@/utils/ant-design';\nimport {\n  TabPane as AntTabPane,\n  Tabs as AntTabs,\n  TypographyTitle as AntTitle,\n} from 'ant-design-vue';\n\nconst route = useRoute();\nconst projectId = route.params.projectId as string;\n\ntype State =\n  | {\n      type: 'initial';\n    }\n  | {\n      type: 'creatingUser';\n    }\n  | {\n      type: 'editingUser';\n      payload: User;\n    }\n  | {\n      type: 'creatingRole';\n    }\n  | {\n      type: 'editingRole';\n      payload: Role;\n    };\n\nconst state = ref<State>({ type: 'initial' });\n\nconst selectedTab = ref<'users' | 'roles'>('users');\n\nonMounted(() => {\n  const query = new URLSearchParams(location.search);\n  const tab = query.get('selected-panel') || 'users';\n  const selectedTabValue = ['roles', 'users'].includes(tab) ? tab : 'users';\n\n  if (tab) {\n    selectedTab.value = selectedTabValue as 'roles' | 'users';\n  }\n});\n\nconst close = () => {\n  state.value.type = 'initial';\n};\n\nconst openNewUser = () => {\n  state.value.type = 'creatingUser';\n};\n\nconst openEditUser = (user: User) => {\n  state.value = { type: 'editingUser', payload: user };\n};\n\nconst openNewRole = () => {\n  state.value.type = 'creatingRole';\n};\n\nconst openEditRole = (role: Role) => {\n  state.value = { type: 'editingRole', payload: role };\n};\n\nconst signupRepo = new CloudSignupPolicyRepository(projectId);\nconst { result: policy, refetch: refetchPolicy } = asyncComputed(() => signupRepo.get());\n\nconst updatePolicy = async () => {\n  if (!policy.value) return;\n  try {\n    await signupRepo.update(policy.value);\n    refetchPolicy();\n  } catch (e) {\n    if (e instanceof Error) popupError('Update Error', e.message);\n  }\n};\n\nconst userRepo = new ConsoleUserRepository(projectId);\n\nconst {\n  loading: usersLoading,\n  result: users,\n  refetch: refetchUsers,\n} = asyncComputed(() => userRepo.list(100, 0));\n\nconst roleRepo = new ConsoleRoleRepository(projectId);\nconst {\n  loading: rolesLoading,\n  result: roles,\n  refetch: refetchRoles,\n} = asyncComputed(() => roleRepo.list(100, 0));\n\nconst createUser = async (dto: CloudApiConsoleUserCreateRequest) => {\n  try {\n    if (state.value.type !== 'creatingUser') return;\n    await userRepo.create(dto);\n    close();\n    refetchUsers();\n  } catch (e) {\n    if (e instanceof Error) popupError('Create Error', e.message);\n  }\n};\n\nconst updateUser = async (dto: CloudApiConsoleUserUpdateRequest) => {\n  try {\n    if (state.value.type !== 'editingUser') return;\n    await userRepo.update(state.value.payload.id, dto);\n    close();\n    refetchUsers();\n  } catch (e) {\n    if (e instanceof Error) popupError('Update Error', e.message);\n  }\n};\n\nconst deleteUser = async (user: User) => {\n  const confirmed = await askForConfirmation(\n    \"Deleting users revoke their access to your application (in case they aren't allowed by a domain rule). Are you sure you want to continue?\",\n  );\n  if (!confirmed) return;\n  try {\n    await userRepo.delete(user.id);\n    refetchUsers();\n  } catch (e) {\n    if (e instanceof Error) popupError('Delete Error', e.message);\n  }\n};\n\nconst createRole = async (dto: CloudApiConsoleRoleCreateRequest) => {\n  try {\n    if (state.value.type !== 'creatingRole') return;\n    await roleRepo.create(dto);\n    close();\n    refetchRoles();\n  } catch (e) {\n    if (e instanceof Error) popupError('Create Error', e.message);\n  }\n};\n\nconst updateRole = async (dto: CloudApiConsoleRoleUpdateRequest) => {\n  try {\n    if (state.value.type !== 'editingRole') return;\n    await roleRepo.update(state.value.payload.id, dto);\n    close();\n    refetchRoles();\n  } catch (e) {\n    if (e instanceof Error) popupError('Update Error', e.message);\n  }\n};\n\nconst deleteRole = async (role: Role) => {\n  const confirmed = await askForConfirmation(\n    'Deleteing roles may revoke access to some features in your application. Are you sure you want to continue?',\n  );\n  if (!confirmed) return;\n  try {\n    await roleRepo.delete(role.id);\n    refetchRoles();\n    refetchUsers();\n  } catch (e) {\n    if (e instanceof Error) popupError('Delete Error', e.message);\n  }\n};\n</script>\n"],"names":["strategy","ref","props","emailPatters","options","value","handlePatternUpdate","v","selectedOptions","onStrategyUpdate","emit","onSave","selectRoleOptions","role","newUser","reactive","cancel","emits","created","roleOptions","updatedUser","updated","usersTable","computed","user","PhPencil","PhTrash","newRole","updatedRole","rolesTable","SignupPolicy","dto","EditableRecord","pattern","signupPolicyAPI","projectId","CloudApiGateway","api","CloudSignupPolicyRepository","policy","emailPatterns","User","roles","UserAPI","id","limit","offset","paramsObj","params","changes","ConsoleUserRepository","data","useRoute","state","selectedTab","onMounted","tab","selectedTabValue","close","openNewUser","openEditUser","openNewRole","openEditRole","signupRepo","refetchPolicy","asyncComputed","updatePolicy","e","popupError","userRepo","usersLoading","users","refetchUsers","roleRepo","ConsoleRoleRepository","rolesLoading","refetchRoles","createUser","updateUser","deleteUser","askForConfirmation","createRole","updateRole","deleteRole"],"mappings":"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"}