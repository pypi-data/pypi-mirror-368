{"version":3,"file":"CrudView-wZnp03a2.js","sources":["../../src/components/inputs/CreationModal.vue","../../src/components/inputs/CrudView.vue"],"sourcesContent":["<template>\n  <AntModal :open=\"isOpen\" :title=\"title\" @cancel=\"close\" @ok=\"create\">\n    <AntForm layout=\"vertical\">\n      <AntFormItem\n        v-for=\"field in fields\"\n        :key=\"field.key\"\n        :label=\"field.label\"\n        :help=\"field.hint?.(state.inputValue[field.key])\"\n        :tooltip=\"field.tooltip\"\n      >\n        <AntInput\n          v-if=\"!field.type || field.type === 'text' || field.type === 'password'\"\n          v-model:value=\"state.inputValue[field.key]\"\n          :placeholder=\"field.placeholder ?? ''\"\n          :type=\"field.type ?? 'text'\"\n          @input=\"formatOnChange($event, field.key)\"\n          @blur=\"onBlur($event, field.key)\"\n        />\n        <AntTextArea\n          v-else-if=\"field.type === 'multiline-text'\"\n          v-model:value=\"state.inputValue[field.key]\"\n          :placeholder=\"field.placeholder ?? ''\"\n          @input=\"formatOnChange($event, field.key)\"\n          @blur=\"onBlur($event, field.key)\"\n        />\n        <AntSelect\n          v-else-if=\"field.type === 'select'\"\n          v-model:value=\"state.inputValue[field.key]\"\n          :mode=\"field.mode\"\n        >\n          <AntSelectOption\n            v-for=\"option in field.options\"\n            :key=\"typeof option === 'string' ? option : option.value\"\n            :value=\"typeof option === 'string' ? option : option.value\"\n          >\n            {{ typeof option === 'string' ? option : option.label }}\n          </AntSelectOption>\n        </AntSelect>\n      </AntFormItem>\n    </AntForm>\n  </AntModal>\n</template>\n<script lang=\"ts\" setup>\nimport {\n  Form as AntForm,\n  FormItem as AntFormItem,\n  Input as AntInput,\n  Modal as AntModal,\n  Select as AntSelect,\n  SelectOption as AntSelectOption,\n  Textarea as AntTextArea,\n  notification,\n} from 'ant-design-vue';\nimport { reactive, ref } from 'vue';\n\nexport type Options = string[] | { label: string; value: string }[];\n\ntype CreationFieldSelect = {\n  type: 'select';\n  mode: 'multiple' | 'tags';\n  options: Options;\n};\n\ntype CreationFieldText = {\n  type?: 'text' | 'password' | 'multiline-text';\n};\n\ntype BasicField = {\n  key: string;\n  label: string;\n  placeholder?: string;\n  hint?: (value: any) => string | undefined;\n  format?: (value: string) => any;\n  blur?: (value: string) => any;\n  tooltip?: string;\n};\n\ntype CreationField = BasicField & (CreationFieldSelect | CreationFieldText);\nexport type CreationFields = CreationField[];\n\nconst props = defineProps<{\n  entityName: string;\n  fields: CreationFields;\n  create: (values: Record<string, any>) => Promise<void> | void;\n}>();\n\nconst title = `Create ${props.entityName}`;\n\nconst state = reactive<{\n  inputValue: Record<string, any>;\n}>({\n  inputValue: {},\n});\n\nconst isOpen = ref(false);\nconst open = () => (isOpen.value = true);\nconst close = () => {\n  isOpen.value = false;\n  state.inputValue = {};\n};\n\nconst create = async () => {\n  try {\n    await props.create(state.inputValue);\n    close();\n  } catch (e) {\n    if (e instanceof Error) {\n      notification.error({\n        message: 'Failed to create',\n        description: e.message,\n      });\n    }\n  }\n};\n\nconst formatOnChange = (e: Event, fieldKey: string) => {\n  const value = (e.target as HTMLInputElement).value;\n  const field = props.fields.find((field) => field.key === fieldKey);\n  if (field?.format) {\n    state.inputValue[fieldKey] = field.format(value);\n  } else {\n    state.inputValue[fieldKey] = value;\n  }\n};\n\nconst onBlur = (e: Event, fieldKey: string) => {\n  const value = (e.target as HTMLInputElement).value;\n  const field = props.fields.find((field) => field.key === fieldKey);\n  if (field?.blur) {\n    state.inputValue[fieldKey] = field.blur(value);\n  } else {\n    state.inputValue[fieldKey] = value;\n  }\n};\n\ndefineExpose({\n  open,\n  close,\n});\n</script>\n","<template>\n  <AntSpace direction=\"vertical\" class=\"crud-view\">\n    <AntFlex align=\"center\" justify=\"space-between\">\n      <AntTitle v-if=\"!!title\">{{ title }}</AntTitle>\n      <slot name=\"more\" />\n    </AntFlex>\n    <AntParagraph v-if=\"!!description\">\n      {{ description }}\n      <slot name=\"description\" />\n\n      <DocsButton v-if=\"docsPath\" :path=\"docsPath\" />\n    </AntParagraph>\n\n    <AntFlex gap=\"middle\">\n      <AntButton v-if=\"createButtonText\" type=\"primary\" @click=\"showCreationModal\">\n        {{ createButtonText }}\n      </AntButton>\n      <slot name=\"secondary\" />\n    </AntFlex>\n    <slot name=\"extra\" />\n    <AntTable\n      :filter-dropdown=\"true\"\n      size=\"small\"\n      :style=\"tableStyle\"\n      :data-source=\"table.rows\"\n      :loading=\"performingAction || (loading && !live)\"\n      :height=\"400\"\n      :columns=\"\n        table.columns?.map((column, key) => ({\n          ...column,\n          key,\n          filtered: true,\n          align: column.align ?? 'center',\n          sorter: makeSorter(column, key),\n        }))\n      \"\n    >\n      <template #emptyText>{{ emptyTitle }}</template>\n      <template #headerCell=\"col\">\n        {{ col.title }}\n      </template>\n      <template #bodyCell=\"{ column: { key }, record }\">\n        <slot\n          v-if=\"record.cells[key!].type === 'slot'\"\n          :name=\"record.cells[key!].key\"\n          :payload=\"record.cells[key!].payload\"\n        />\n        <AntPopover v-else :open=\"record.cells[key!].hover ? undefined : false\">\n          <template #content>\n            <AntParagraph\n              style=\"width: 300px; overflow: auto; font-family: monospace\"\n              copyable\n              :content=\"record.cells[key!].hover\"\n            />\n          </template>\n          <AntText\n            v-if=\"record.cells[key!].type === 'text'\"\n            :secondary=\"record.cells[key!].secondary\"\n            :code=\"record.cells[key!].code\"\n          >\n            <AntBadge :dot=\"record.cells[key!].contentType === 'warning'\" color=\"#faad14\">\n              {{ record.cells[key!].text }}\n            </AntBadge>\n          </AntText>\n          <AntText\n            v-else-if=\"record.cells[key!].type === 'secret'\"\n            :copyable=\"{text: record.cells[key!].text}\"\n          >\n            ********\n          </AntText>\n          <AntTag\n            v-else-if=\"record.cells[key!].type === 'tag'\"\n            :color=\"record.cells[key!].tagColor\"\n          >\n            {{ record.cells[key!].text }}\n          </AntTag>\n          <AntSpace v-else-if=\"record.cells[key!].type === 'tags'\">\n            <AntTag v-for=\"(tag, idx) in record.cells[key!].tags\" :key=\"idx\" :color=\"tag.color\">\n              {{ tag.text }}\n            </AntTag>\n          </AntSpace>\n          <RouterLink v-else-if=\"record.cells[key!].type === 'link'\" :to=\"record.cells[key!].to\">\n            {{ record.cells[key!].text }}\n          </RouterLink>\n          <AntDropdown v-else-if=\"record.cells[key!].type === 'actions'\">\n            <PhDotsThreeVertical style=\"cursor: pointer\" size=\"25px\" />\n            <template #overlay>\n              <AntMenu :disabled=\"performingAction\">\n                <AntMenuItem\n                  v-for=\"(action, idx) in record.cells[key!].actions.filter((a: any) => !a.hide)\"\n                  :key=\"idx\"\n                  :danger=\"action.dangerous\"\n                  @click=\"actionClick(action, record as Row)\"\n                >\n                  <AntPopover v-if=\"!!action.popoverMessage\" placement=\"left\">\n                    <template #content>\n                      <div class=\"action-warning\">\n                        <AntText>{{ action.popoverMessage }}</AntText>\n                      </div>\n                    </template>\n                    <AntText :disabled=\"action.disabled\" class=\"action-item\">\n                      <Component :is=\"action.icon\" v-if=\"action.icon\" />\n                      {{ action.label }}\n                    </AntText>\n                  </AntPopover>\n                  <AntText v-else :disabled=\"action.disabled\" class=\"action-item\">\n                    <Component :is=\"action.icon\" v-if=\"action.icon\" />\n                    {{ action.label }}\n                  </AntText>\n                </AntMenuItem>\n              </AntMenu>\n            </template>\n          </AntDropdown>\n        </AntPopover>\n      </template>\n      <template #footer>\n        <AntRow v-if=\"live\" justify=\"end\" :gutter=\"10\">\n          <AntCol>\n            <AntSpin size=\"small\" />\n          </AntCol>\n          <AntCol>\n            <AntText> auto updating </AntText>\n          </AntCol>\n        </AntRow>\n      </template>\n    </AntTable>\n  </AntSpace>\n  <CreationModal\n    v-if=\"fields && create\"\n    ref=\"modalRef\"\n    :fields=\"fields\"\n    :entity-name=\"entityName\"\n    :create=\"create\"\n  />\n</template>\n\n<script lang=\"ts\" setup>\nimport router from '@/apps/console/router';\nimport DocsButton from '@/apps/editor/components/workspace/DocsButton.vue';\nimport { DocsPath } from '@/docs';\nimport { isUrl } from '@/utils/url';\nimport { PhDotsThreeVertical } from '@phosphor-icons/vue';\nimport {\n  Badge as AntBadge,\n  Button as AntButton,\n  Col as AntCol,\n  Dropdown as AntDropdown,\n  Flex as AntFlex,\n  Menu as AntMenu,\n  MenuItem as AntMenuItem,\n  TypographyParagraph as AntParagraph,\n  Popover as AntPopover,\n  Row as AntRow,\n  Space as AntSpace,\n  Spin as AntSpin,\n  Table as AntTable,\n  Tag as AntTag,\n  TypographyText as AntText,\n  TypographyTitle as AntTitle,\n} from 'ant-design-vue';\nimport { computed, defineComponent, ref } from 'vue';\nimport { RouteLocationRaw } from 'vue-router';\nimport CreationModal, { type CreationFields } from './CreationModal.vue';\n\ntype CellActionFunctionHandler = {\n  onClick: (payload: any) => any;\n};\n\ntype CellActionLinkHandler = {\n  link: RouteLocationRaw;\n};\n\ntype CellActionHandler = CellActionFunctionHandler | CellActionLinkHandler;\nexport type CellAction = {\n  icon: ReturnType<typeof defineComponent>;\n  label: string;\n  dangerous?: boolean;\n  hide?: boolean;\n} & CellActionHandler;\n\ntype TextCell = {\n  type: 'text';\n  text: string;\n  hover?: string | null;\n  secondary?: boolean;\n  code?: boolean;\n  contentType?: 'success' | 'warning' | 'error' | 'default';\n};\n\ntype SecretCell = {\n  type: 'secret';\n  text: string;\n};\n\ntype LinkCell = {\n  type: 'link';\n  text: string;\n  to: RouteLocationRaw;\n  hover?: string | null;\n};\n\ntype TagCell = {\n  type: 'tag';\n  tagColor: string;\n  text: string;\n};\n\ntype TagsCell = {\n  type: 'tags';\n  tags: { color: string; text: string }[];\n};\n\ntype SlotCell = {\n  type: 'slot';\n  key: string;\n  payload: unknown;\n  hover?: string | null;\n  sortableText?: string;\n};\n\ntype ActionsCell = {\n  type: 'actions';\n  actions: CellAction[];\n};\n\nexport type Cell = TextCell | SecretCell | LinkCell | TagCell | TagsCell | SlotCell | ActionsCell;\n\nexport type Row = {\n  key: string;\n  cells: Cell[];\n};\n\nexport type Column = {\n  title: string;\n  align?: 'left' | 'center' | 'right';\n};\n\nexport type CrudTable = {\n  columns: Column[];\n  rows: Row[];\n};\n\nconst props = defineProps<{\n  table: CrudTable;\n  loading: boolean;\n  title: string;\n  emptyTitle: string;\n  entityName: string;\n  description: string;\n  create?: (values: Record<string, string>) => Promise<void> | void;\n  createButtonText?: string;\n  docsPath?: DocsPath;\n  live?: boolean;\n  fields?: CreationFields;\n}>();\n\nconst modalRef = ref<InstanceType<typeof CreationModal> | null>(null);\n\nconst makeSorter = (column: Column, key: number) => {\n  const columnType = props.table.rows[0]?.cells[key].type;\n  if (columnType === 'actions' || columnType === 'slot') return;\n  return (a: Row, b: Row) => sorter(a, b, key);\n};\n\nconst sorter = (a: Row, b: Row, columnKey: number) => {\n  const aCell = a.cells[columnKey];\n  const bCell = b.cells[columnKey];\n\n  if (aCell.type === 'text' && bCell.type === 'text') {\n    return aCell.text.localeCompare(bCell.text);\n  }\n\n  if (aCell.type === 'tag' && bCell.type === 'tag') {\n    return aCell.text.localeCompare(bCell.text);\n  }\n\n  if (aCell.type === 'tags' && bCell.type === 'tags') {\n    return aCell.tags[0].text.localeCompare(bCell.tags[0].text);\n  }\n\n  if (aCell.type === 'secret' && bCell.type === 'secret') {\n    return aCell.text.localeCompare(bCell.text);\n  }\n\n  if (aCell.type === 'link' && bCell.type === 'link') {\n    return aCell.text.localeCompare(bCell.text);\n  }\n\n  if (aCell.type === 'actions' && bCell.type === 'actions') {\n    return 0;\n  }\n\n  return 0;\n};\n\nconst showCreationModal = async () => {\n  if (props.fields) {\n    modalRef.value?.open();\n  } else if (props.create) {\n    await props.create({});\n  }\n};\n\nconst performingAction = ref(false);\nasync function actionClick(action: CellActionHandler, row: Row) {\n  if (performingAction.value) return;\n  performingAction.value = true;\n  try {\n    if ('onClick' in action) {\n      await action.onClick({ key: row.key });\n    } else if ('link' in action) {\n      if (typeof action.link === 'string' && isUrl(action.link)) open(action.link, '_blank');\n      else router.push(action.link);\n    }\n  } finally {\n    performingAction.value = false;\n  }\n}\n\nconst tableStyle = computed(() => ({ '--columnCount': `${props.table.columns.length}` }));\n</script>\n\n<style lang=\"scss\" scoped>\n.crud-view {\n  width: 100%;\n}\n\n.action-item {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n}\n\n.action-warning {\n  width: 300px;\n}\n</style>\n"],"names":["title","props","state","reactive","isOpen","ref","open","close","create","e","notification","formatOnChange","fieldKey","value","field","onBlur","__expose","modalRef","makeSorter","column","key","columnType","a","b","sorter","columnKey","aCell","bCell","showCreationModal","performingAction","actionClick","action","row","isUrl","router","tableStyle","computed"],"mappings":"6iCAsFMA,EAAQ,UAAUC,EAAM,UAAU,GAElCC,EAAQC,EAEX,CACD,WAAY,CAAA,CAAC,CACd,EAEKC,EAASC,EAAI,EAAK,EAClBC,EAAO,IAAOF,EAAO,MAAQ,GAC7BG,EAAQ,IAAM,CAClBH,EAAO,MAAQ,GACfF,EAAM,WAAa,CAAA,CACrB,EAEMM,EAAS,SAAY,CACzB,GAAI,CACF,MAAMP,EAAM,OAAOC,EAAM,UAAU,EACnCK,EAAA,CACF,OAASE,EAAG,CACNA,aAAa,OACfC,EAAa,MAAM,CACjB,QAAS,mBACT,YAAaD,EAAE,OAAA,CAChB,CAEL,CACF,EAEME,EAAiB,CAACF,EAAUG,IAAqB,CACrD,MAAMC,EAASJ,EAAE,OAA4B,MACvCK,EAAQb,EAAM,OAAO,KAAMa,GAAUA,EAAM,MAAQF,CAAQ,EAC7DE,GAAO,OACTZ,EAAM,WAAWU,CAAQ,EAAIE,EAAM,OAAOD,CAAK,EAE/CX,EAAM,WAAWU,CAAQ,EAAIC,CAEjC,EAEME,EAAS,CAACN,EAAUG,IAAqB,CAC7C,MAAMC,EAASJ,EAAE,OAA4B,MACvCK,EAAQb,EAAM,OAAO,KAAMa,GAAUA,EAAM,MAAQF,CAAQ,EAC7DE,GAAO,KACTZ,EAAM,WAAWU,CAAQ,EAAIE,EAAM,KAAKD,CAAK,EAE7CX,EAAM,WAAWU,CAAQ,EAAIC,CAEjC,EAEA,OAAAG,EAAa,CACX,KAAAV,EACA,MAAAC,CAAA,CACD,4/CCsHKU,EAAWZ,EAA+C,IAAI,EAE9Da,EAAa,CAACC,EAAgBC,IAAgB,CAClD,MAAMC,EAAapB,EAAM,MAAM,KAAK,CAAC,GAAG,MAAMmB,CAAG,EAAE,KACnD,GAAI,EAAAC,IAAe,WAAaA,IAAe,QAC/C,MAAO,CAACC,EAAQC,IAAWC,EAAOF,EAAGC,EAAGH,CAAG,CAC7C,EAEMI,EAAS,CAACF,EAAQC,EAAQE,IAAsB,CACpD,MAAMC,EAAQJ,EAAE,MAAMG,CAAS,EACzBE,EAAQJ,EAAE,MAAME,CAAS,EAM/B,OAJIC,EAAM,OAAS,QAAUC,EAAM,OAAS,QAIxCD,EAAM,OAAS,OAASC,EAAM,OAAS,MAClCD,EAAM,KAAK,cAAcC,EAAM,IAAI,EAGxCD,EAAM,OAAS,QAAUC,EAAM,OAAS,OACnCD,EAAM,KAAK,CAAC,EAAE,KAAK,cAAcC,EAAM,KAAK,CAAC,EAAE,IAAI,EAGxDD,EAAM,OAAS,UAAYC,EAAM,OAAS,UAI1CD,EAAM,OAAS,QAAUC,EAAM,OAAS,OACnCD,EAAM,KAAK,cAAcC,EAAM,IAAI,GAGxCD,EAAM,OAAS,WAAaC,EAAM,OAAS,UACtC,EAIX,EAEMC,EAAoB,SAAY,CAChC3B,EAAM,OACRgB,EAAS,OAAO,KAAA,EACPhB,EAAM,QACf,MAAMA,EAAM,OAAO,EAAE,CAEzB,EAEM4B,EAAmBxB,EAAI,EAAK,EAClC,eAAeyB,EAAYC,EAA2BC,EAAU,CAC9D,GAAI,CAAAH,EAAiB,MACrB,CAAAA,EAAiB,MAAQ,GACzB,GAAI,CACE,YAAaE,EACf,MAAMA,EAAO,QAAQ,CAAE,IAAKC,EAAI,IAAK,EAC5B,SAAUD,IACf,OAAOA,EAAO,MAAS,UAAYE,EAAMF,EAAO,IAAI,EAAG,KAAKA,EAAO,KAAM,QAAQ,EAChFG,EAAO,KAAKH,EAAO,IAAI,EAEhC,QAAA,CACEF,EAAiB,MAAQ,EAC3B,EACF,CAEA,MAAMM,EAAaC,EAAS,KAAO,CAAE,gBAAiB,GAAGnC,EAAM,MAAM,QAAQ,MAAM,EAAA,EAAK"}