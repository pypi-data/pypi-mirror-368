{"version":3,"file":"Tables-CX1wUv59.js","sources":["../../src/apps/console/views/Tables.vue"],"sourcesContent":["<template>\n  <TablesTabs />\n  <CrudView\n    entity-name=\"table\"\n    :loading=\"loading\"\n    docs-path=\"tools/tables\"\n    title=\"Tables\"\n    description=\"Create and manage your database tables here.\"\n    empty-title=\"No tables here yet\"\n    :table=\"table\"\n    :fields=\"fields\"\n    create-button-text=\"Create Table\"\n    :create=\"createTable\"\n  >\n  </CrudView>\n</template>\n\n<script lang=\"ts\" setup>\nimport { CreationFields } from '@/components/inputs/CreationModal.vue';\nimport CrudView, { CrudTable } from '@/components/inputs/CrudView.vue';\nimport { omniChatPubSub } from '@/services/ai/omniChatStore';\nimport { askForConfirmation } from '@/utils/ant-design';\nimport { asyncComputed } from '@/utils/asyncComputed';\nimport { normalizeToSnakeCase } from '@/utils/string';\nimport { PhPencil, PhTrash } from '@phosphor-icons/vue';\nimport { computed, onBeforeUnmount, onMounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { TableModel } from '../apis/cloud';\nimport TablesTabs from '../components/tables/TablesTabs.vue';\n\nconst router = useRouter();\nconst route = useRoute();\nconst projectId = route.params.projectId as string;\nconst { loading, result: tables, refetch } = asyncComputed(() => TableModel.list(projectId));\n\nconst createTable = async (values: Record<string, string>) => {\n  const table = await TableModel.create(projectId, values.name);\n  router.push({\n    name: 'tableEditor',\n    params: {\n      tableId: table.id,\n      projectId,\n    },\n  });\n};\n\nconst table = computed(() => ({\n  columns: [{ title: 'Table Name' }, { title: '', align: 'right' }] satisfies CrudTable['columns'],\n  rows:\n    tables.value?.map((table) => ({\n      key: table.id,\n      cells: [\n        {\n          type: 'link',\n          text: table.name,\n          to: {\n            name: 'tableEditor',\n            params: {\n              tableId: table.id,\n              projectId,\n            },\n          },\n        },\n        {\n          type: 'actions',\n          actions: [\n            {\n              icon: PhPencil,\n              label: 'Edit Table',\n              onClick({ key }) {\n                router.push({\n                  name: 'tableEditor',\n                  params: {\n                    tableId: key,\n                    projectId,\n                  },\n                });\n              },\n            },\n            {\n              icon: PhTrash,\n              label: 'Delete',\n              dangerous: true,\n              async onClick() {\n                const confirmed = await askForConfirmation(\n                  'Are you sure you want to delete this table and all its data?',\n                );\n                if (!confirmed) return;\n                await table.delete(projectId, table.id);\n                refetch();\n              },\n            },\n          ],\n        },\n      ] satisfies CrudTable['rows'][number]['cells'],\n    })) ?? [],\n}));\n\nconst formatAsSnakeCase = (value: string) => normalizeToSnakeCase(value, true);\nconst fixTraillingName = (value: string) => normalizeToSnakeCase(value, false);\n\nconst fields: CreationFields = [\n  {\n    key: 'name',\n    label: 'Table name',\n    type: 'text',\n    format: formatAsSnakeCase,\n    blur: fixTraillingName,\n  },\n];\n\nonMounted(() => {\n  const token = omniChatPubSub.subscribe('tableCreated', () => {\n    refetch();\n  });\n\n  onBeforeUnmount(() => {\n    omniChatPubSub.unsubscribe(token);\n  });\n});\n</script>\n"],"names":["router","useRouter","projectId","useRoute","loading","tables","refetch","asyncComputed","TableModel","createTable","values","table","computed","PhPencil","key","PhTrash","askForConfirmation","fields","value","normalizeToSnakeCase","onMounted","token","omniChatPubSub","onBeforeUnmount"],"mappings":"8tCA8BA,MAAMA,EAASC,EAAA,EAETC,EADQC,EAAA,EACU,OAAO,UACzB,CAAE,QAAAC,EAAS,OAAQC,EAAQ,QAAAC,CAAA,EAAYC,EAAc,IAAMC,EAAW,KAAKN,CAAS,CAAC,EAErFO,EAAc,MAAOC,GAAmC,CAC5D,MAAMC,EAAQ,MAAMH,EAAW,OAAON,EAAWQ,EAAO,IAAI,EAC5DV,EAAO,KAAK,CACV,KAAM,cACN,OAAQ,CACN,QAASW,EAAM,GACf,UAAAT,CAAA,CACF,CACD,CACH,EAEMS,EAAQC,EAAS,KAAO,CAC5B,QAAS,CAAC,CAAE,MAAO,YAAA,EAAgB,CAAE,MAAO,GAAI,MAAO,QAAS,EAChE,KACEP,EAAO,OAAO,IAAKM,IAAW,CAC5B,IAAKA,EAAM,GACX,MAAO,CACL,CACE,KAAM,OACN,KAAMA,EAAM,KACZ,GAAI,CACF,KAAM,cACN,OAAQ,CACN,QAASA,EAAM,GACf,UAAAT,CAAA,CACF,CACF,EAEF,CACE,KAAM,UACN,QAAS,CACP,CACE,KAAMW,EACN,MAAO,aACP,QAAQ,CAAE,IAAAC,GAAO,CACfd,EAAO,KAAK,CACV,KAAM,cACN,OAAQ,CACN,QAASc,EACT,UAAAZ,CAAA,CACF,CACD,CACH,CAAA,EAEF,CACE,KAAMa,EACN,MAAO,SACP,UAAW,GACX,MAAM,SAAU,CACI,MAAMC,EACtB,8DAAA,IAGF,MAAML,EAAM,OAAOT,EAAWS,EAAM,EAAE,EACtCL,EAAA,EACF,CAAA,CACF,CACF,CACF,CACF,EACA,GAAK,CAAA,CAAC,EACV,EAKIW,EAAyB,CAC7B,CACE,IAAK,OACL,MAAO,aACP,KAAM,OACN,OARuBC,GAAkBC,EAAqBD,EAAO,EAAI,EASzE,KARsBA,GAAkBC,EAAqBD,EAAO,EAAK,CAQnE,CACR,EAGF,OAAAE,EAAU,IAAM,CACd,MAAMC,EAAQC,EAAe,UAAU,eAAgB,IAAM,CAC3DhB,EAAA,CACF,CAAC,EAEDiB,EAAgB,IAAM,CACpBD,EAAe,YAAYD,CAAK,CAClC,CAAC,CACH,CAAC"}