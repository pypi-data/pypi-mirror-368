{"version":3,"file":"Form-ChhRJJNs.js","sources":["../../src/apps/player/views/Form.vue"],"sourcesContent":["<template>\n  <div v-if=\"loading\" class=\"loading\">\n    <LoadingIndicator />\n  </div>\n  <FormRunner\n    v-else-if=\"result && result.runnerData && formState && !error && !loading\"\n    :key=\"state.playerKey\"\n    :form-runner-data=\"result.runnerData\"\n    :form-state=\"formState\"\n    :is-preview=\"false\"\n    :user-email=\"userStore.email\"\n    @redirect=\"handleRedirect\"\n    @action-clicked=\"result?.controller.handleActionClick\"\n    @update-widget-errors=\"result?.controller.updateWidgetFrontendErrors\"\n    @update-widget-value=\"result?.controller.updateWidgetValue\"\n    @auth-complete=\"result?.controller.handleAuthComplete\"\n  />\n</template>\n\n<script lang=\"ts\" setup>\nimport { useUserStore } from '@/apps/player/auth/userStore';\nimport { FormConnectionManager } from '@/form/FormConnectionManager';\nimport { FormRunnerController, FormStateType } from '@/form/FormRunnerController';\nimport FormRunner from '@/form/components/FormRunner.vue';\nimport { redirect } from '@/utils';\nimport { asyncComputed } from '@/utils/asyncComputed';\nimport { uuid } from '@/utils/uuid';\nimport LoadingIndicator from '@/widgets-lib/common/components/CircularLoading.vue';\nimport { computed, onMounted, onUnmounted, reactive, ref, watch, watchEffect } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { fetchRunnerData } from '../services/api';\n\nconst route = useRoute();\nconst router = useRouter();\nconst state = reactive({ playerKey: uuid() });\n\nconst userStore = useUserStore();\n\nconst formState = ref<FormStateType | null>(null);\n\nwatch(route, () => {\n  if (route.name === 'form') refetch();\n});\n\nconst { loading, result, error, refetch } = asyncComputed(async () => {\n  state.playerKey = uuid();\n  const formPath = route.path.slice(1);\n  const runnerData = await fetchRunnerData(formPath);\n  if (!runnerData) {\n    router.push({\n      name: 'error',\n      params: { status: '404' },\n    });\n    return;\n  }\n\n  const controller = new FormRunnerController({\n    formRunnerData: runnerData,\n    logService: null,\n    connectionManager: new FormConnectionManager(\n      runnerData.id,\n      'player',\n      route.query as Record<string, string>,\n    ),\n    onRedirect: handleRedirect,\n    onFormStart: () => {\n      // do nothing\n    },\n    onFormEnd: () => {\n      // do nothing\n    },\n    onStackTraceUpdate: null,\n    onStateUpdate: (newState) => (formState.value = newState),\n  });\n\n  const initialState = controller.getState();\n\n  formState.value = initialState.formState;\n\n  return { runnerData, controller };\n});\n\nconst hasGenericError = computed(() => {\n  const finishedLoading = !loading;\n  const hasError = !!error;\n  const hasNoResult = !result || formState.value === null;\n  return finishedLoading && (hasError || hasNoResult);\n});\n\nwatchEffect(() => {\n  if (hasGenericError.value) {\n    router.push({\n      name: 'error',\n      params: { status: '500' },\n    });\n  }\n  if (!result.value?.runnerData) return;\n\n  if (result.value?.runnerData) {\n    document.title = result.value?.runnerData.welcomeTitle ?? result.value?.runnerData.title;\n  }\n});\n\nfunction handleRedirect(url: string, params: Record<string, string>) {\n  window.removeEventListener('beforeunload', handleUnloadEvent);\n  redirect('player', router, url, params);\n}\n\nonMounted(async () => {\n  window.addEventListener('beforeunload', handleUnloadEvent);\n});\n\nonUnmounted(() => {\n  window.removeEventListener('beforeunload', handleUnloadEvent);\n});\n\nconst handleUnloadEvent = (e: BeforeUnloadEvent) => {\n  if (result.value?.controller.handleCloseAttempt()) {\n    e.preventDefault();\n    return '';\n  }\n};\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/styles/colors.scss';\n\n.loading {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>\n"],"names":["route","useRoute","router","useRouter","state","reactive","uuid","userStore","useUserStore","formState","ref","watch","refetch","loading","result","error","asyncComputed","formPath","runnerData","fetchRunnerData","controller","FormRunnerController","FormConnectionManager","handleRedirect","newState","initialState","hasGenericError","computed","finishedLoading","hasError","hasNoResult","watchEffect","url","params","handleUnloadEvent","redirect","onMounted","onUnmounted","e"],"mappings":"ysCAgCA,MAAMA,EAAQC,EAAA,EACRC,EAASC,EAAA,EACTC,EAAQC,EAAS,CAAE,UAAWC,EAAA,EAAQ,EAEtCC,EAAYC,EAAA,EAEZC,EAAYC,EAA0B,IAAI,EAEhDC,EAAMX,EAAO,IAAM,CACbA,EAAM,OAAS,QAAQY,EAAA,CAC7B,CAAC,EAED,KAAM,CAAE,QAAAC,EAAS,OAAAC,EAAQ,MAAAC,EAAO,QAAAH,CAAA,EAAYI,EAAc,SAAY,CACpEZ,EAAM,UAAYE,EAAA,EAClB,MAAMW,EAAWjB,EAAM,KAAK,MAAM,CAAC,EAC7BkB,EAAa,MAAMC,EAAgBF,CAAQ,EACjD,GAAI,CAACC,EAAY,CACfhB,EAAO,KAAK,CACV,KAAM,QACN,OAAQ,CAAE,OAAQ,KAAA,CAAM,CACzB,EACD,MACF,CAEA,MAAMkB,EAAa,IAAIC,EAAqB,CAC1C,eAAgBH,EAChB,WAAY,KACZ,kBAAmB,IAAII,EACrBJ,EAAW,GACX,SACAlB,EAAM,KAAA,EAER,WAAYuB,EACZ,YAAa,IAAM,CAEnB,EACA,UAAW,IAAM,CAEjB,EACA,mBAAoB,KACpB,cAAgBC,GAAcf,EAAU,MAAQe,CAAA,CACjD,EAEKC,EAAeL,EAAW,SAAA,EAEhC,OAAAX,EAAU,MAAQgB,EAAa,UAExB,CAAE,WAAAP,EAAY,WAAAE,CAAA,CACvB,CAAC,EAEKM,EAAkBC,EAAS,IAAM,CACrC,MAAMC,EAAkB,CAACf,EACnBgB,EAAW,CAAC,CAACd,EACbe,EAAc,CAAChB,GAAUL,EAAU,QAAU,KACnD,OAAOmB,IAAoBC,GAAYC,EACzC,CAAC,EAEDC,EAAY,IAAM,CACZL,EAAgB,OAClBxB,EAAO,KAAK,CACV,KAAM,QACN,OAAQ,CAAE,OAAQ,KAAA,CAAM,CACzB,EAEEY,EAAO,OAAO,YAEfA,EAAO,OAAO,aAChB,SAAS,MAAQA,EAAO,OAAO,WAAW,cAAgBA,EAAO,OAAO,WAAW,MAEvF,CAAC,EAED,SAASS,EAAeS,EAAaC,EAAgC,CACnE,OAAO,oBAAoB,eAAgBC,CAAiB,EAC5DC,EAAS,SAAUjC,EAAQ8B,EAAKC,CAAM,CACxC,CAEAG,EAAU,SAAY,CACpB,OAAO,iBAAiB,eAAgBF,CAAiB,CAC3D,CAAC,EAEDG,EAAY,IAAM,CAChB,OAAO,oBAAoB,eAAgBH,CAAiB,CAC9D,CAAC,EAED,MAAMA,EAAqBI,GAAyB,CAClD,GAAIxB,EAAO,OAAO,WAAW,mBAAA,EAC3B,OAAAwB,EAAE,eAAA,EACK,EAEX"}