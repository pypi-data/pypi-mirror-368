import{C as s}from"./router-D5wfdag3.js";import{E as m}from"./record-BZIfMWML.js";import{n as u}from"./string-BYR4BIXr.js";import{z as n}from"./jwt-decode.esm-Dca5fHH5.js";(function(){try{var a=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},e=new Error().stack;e&&(a._sentryDebugIds=a._sentryDebugIds||{},a._sentryDebugIds[e]="ae5eed0d-fcd4-4367-9644-4d5ff2243d10",a._sentryDebugIdIdentifier="sentry-dbid-ae5eed0d-fcd4-4367-9644-4d5ff2243d10")}catch{}})();n.object({name:n.string().optional(),unique:n.boolean().optional(),nullable:n.boolean().optional(),type:n.object({newType:n.string(),using:n.string()}).optional(),default:n.string().optional(),foreignKey:n.object({columnId:n.string()}).nullish().optional()});const I={boolean:["boolean","bool"],int:["int","integer","int4"],varchar:["varchar","character varying","text"],json:["json"],date:["date"],timestamp:["timestamp"],uuid:["uuid"],real:["real","float4","float8"]},b=a=>{for(const e of w)if(I[e].includes(a))return e;throw new Error(`Unknown type: ${a}`)};class j{async create(e){return s.post(`projects/${e.projectId}/tables/${e.tableId}/columns`,e)}async delete(e){return s.delete(`projects/${e.projectId}/tables/${e.tableId}/columns/${e.id}`)}async update(e,t){return s.patch(`projects/${e.projectId}/tables/${e.tableId}/columns/${e.id}`,t)}async getById(e){return s.get(`projects/${e.projectId}/columns/${e.id}`)}}const h=new j;class d{record;constructor(e){this.record=m.from(e)}static async create(e,t,r,c,i,p,g,f){const y=await h.create({name:e,type:t,default:r,nullable:c,unique:i,tableId:p,projectId:g,foreignKey:f});return"error"in y?y:new d(y)}async update(e){const t={...this.record.changes,type:this.record.changes.type&&e?{newType:this.record.changes.type,using:e}:void 0};return Object.keys(t).length===0||!this.id?{success:!0,error:""}:(await h.update({id:this.id,tableId:this.tableId,projectId:this.projectId},t),{success:!0,error:""})}static fromDTO=e=>new d(e);static fromID=async(e,t)=>{const r=await h.getById({projectId:e,id:t});return d.fromDTO(r.column)};toDTO(){return this.record.state}get id(){return this.record.get("id")}get tableId(){return this.record.get("tableId")}get projectId(){return this.record.get("projectId")}get protected(){return this.record.get("protected")}get type(){return b(this.record.get("type"))}set type(e){this.record.set("type",e)}get name(){return this.record.get("name")}set name(e){this.record.set("name",e)}get nullable(){return this.record.get("nullable")}set nullable(e){this.record.set("nullable",e)}get unique(){return this.record.get("unique")}set unique(e){this.record.set("unique",e)}get primaryKey(){return this.record.get("primaryKey")}get default(){return this.record.get("default")?.split("::")[0]}set default(e){this.record.set("default",e)}get foreignKey(){return this.record.get("foreignKey")}set foreignKey(e){this.record.set("foreignKey",e)}async delete(){this.id&&await h.delete({id:this.id,tableId:this.tableId,projectId:this.projectId})}}const w=["varchar","int","boolean","json","date","timestamp","uuid","real"],O={varchar:"'DEFAULT_VALUE'",int:"",boolean:"false",json:"'{}'::json",date:"now()",timestamp:"now()",uuid:"gen_random_uuid()",real:"0.0"};class ${async list(e){return s.get(`projects/${e}/tables`)}async create(e,t){return await s.post(`projects/${e.projectId}/tables`,t)}async get(e){return s.get(`projects/${e.projectId}/tables/${e.tableId}`)}async delete(e){return s.delete(`projects/${e.projectId}/tables/${e.tableId}`)}async selectRows(e){return s.get(`projects/${e.projectId}/tables/${e.tableId}/rows`,{limit:e.limit.toString(),offset:e.offset.toString(),search:e.search,where:JSON.stringify(e.where),orderBy:JSON.stringify(e.orderBy)})}async update(e,t){return s.patch(`projects/${e.projectId}/tables/${e.tableId}`,t)}async insertRow(e,t){return s.post(`projects/${e.projectId}/tables/${e.tableId}/rows`,t)}async updateRow(e,t){return s.patch(`projects/${e.projectId}/tables/${e.tableId}/rows/${e.rowId}`,t)}async deleteRow(e){return s.delete(`projects/${e.projectId}/tables/${e.tableId}/rows/${e.rowId}`)}async getByColumnID(e){return s.get(`projects/${e.projectId}/columns/${e.columnId}`)}}const o=new $;class l{record;columns;constructor(e,t=null){this.record=m.from(e),this.columns=t}static async list(e){return(await o.list(e)).map(r=>new l(r))}static async fromColumnId(e,t){const r=await o.getByColumnID({projectId:e,columnId:t});return l.get(e,r.table.id)}static async create(e,t,r){const c=u(t,!1),i=await o.create({projectId:e},{name:c,id:r});return new l(i.table,i.columns.map(g=>d.fromDTO(g)))}static async get(e,t){const r=await o.get({projectId:e,tableId:t}),c=r.table,i=r.columns.map(p=>d.fromDTO({...p,projectId:c.projectId}));return new l(c,i)}async delete(e,t){return o.delete({projectId:e,tableId:t})}fixTraillingName(){this.name=u(this.name,!1)}async save(){if(Object.keys(this.record.changes).length!==0){this.record.changes.name&&this.fixTraillingName();try{await o.update({id:this.id,tableId:this.id,projectId:this.projectId},this.record.changes)}finally{this.record.resetChanges()}}}resetChanges(){this.record.resetChanges()}onUpdate(e){this.record.pubsub.subscribe("update",e)}hasChanges(){return this.record.hasChanges()}hasChangesDeep(e){return this.record.hasChangesDeep(e)&&u(this.name,!1)!==this.record.initialState.name}getColumns(){return this.columns??[]}getUnprotectedColumns(){return this.columns?.filter(e=>!e.protected).map(e=>e.toDTO())??[]}get id(){return this.record.get("id")}get name(){return this.record.get("name")}set name(e){const t=u(e,!0);this.record.set("name",t)}get projectId(){return this.record.get("projectId")}async addColumn(e){const t=await d.create(e.name,e.type,e.default,e.nullable,e.unique,this.id,this.projectId,e.foreignKey);return"error"in t?{success:!1,error:t.error}:this.columns?(this.columns.push(t),{success:!0,error:""}):(this.columns=[t],{success:!0,error:""})}getColumn(e){return this.columns?.find(t=>t.id&&t.id===e)}async select(e={},t,r,c,i){return o.selectRows({name:this.name,where:e,tableId:this.id,projectId:this.projectId,limit:r,offset:t,search:c,orderBy:i})}async insertRow(e){return o.insertRow({tableId:this.id,projectId:this.projectId},e)}async updateRow(e,t){return o.updateRow({tableId:this.id,projectId:this.projectId,rowId:e},t)}async deleteRow(e){return o.deleteRow({tableId:this.id,projectId:this.projectId,rowId:e})}}export{l as T,O as d,w as p};
//# sourceMappingURL=tables-BsqTY_wE.js.map
