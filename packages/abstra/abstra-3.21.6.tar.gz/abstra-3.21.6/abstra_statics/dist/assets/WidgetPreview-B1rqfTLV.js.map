{"version":3,"file":"WidgetPreview-B1rqfTLV.js","sources":["../../src/form/components/ActionButton.vue","../../src/apps/console/views/WidgetPreview.vue"],"sourcesContent":["<template>\n  <StyleProvider>\n    <AntButton\n      ref=\"element\"\n      class=\"next-button\"\n      :loading=\"loading\"\n      :disabled=\"disabled\"\n      :class=\"disabled ? 'disabled' : ''\"\n      @click=\"emits('click')\"\n      @keydown.enter=\"emits('click')\"\n    >\n      {{ displayName }}\n    </AntButton>\n  </StyleProvider>\n</template>\n\n<script lang=\"ts\" setup>\nimport type { PageAction } from '@/widgets-lib/common/PageActionsInterface';\nimport { onMounted, ref } from 'vue';\nimport { Button as AntButton } from 'ant-design-vue';\nimport { StyleProvider } from 'ant-design-vue';\n\nconst props = defineProps<{\n  action: PageAction;\n  displayName: string;\n  disabled?: boolean;\n  loading?: boolean;\n}>();\n\nconst element = ref<HTMLElement | null>(null);\n\nonMounted(() => {\n  if (element.value) props.action.setElement(element.value);\n});\n\nconst emits = defineEmits<{\n  (event: 'click'): void;\n}>();\n</script>\n<style scoped lang=\"scss\">\n.disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n</style>\n","<template>\n  <WidgetsFrame\n    main-color=\"#d14056\"\n    class=\"preview\"\n    background=\"#fbfbfb\"\n    font-family=\"Inter\"\n    locale=\"en\"\n  >\n    <Steps\n      v-if=\"shouldShowSteps()\"\n      class=\"steps\"\n      :steps-info=\"{\n        current: 1,\n        total: 3,\n      }\"\n      is-preview\n    />\n    <div class=\"form\">\n      <div class=\"form-wrapper\">\n        <div v-for=\"(widget, index) in getWidgetList()\" :key=\"index\" class=\"widget\">\n          <Component\n            :is=\"widget.component\"\n            :user-props=\"widget.userProps\"\n            :value=\"widget.userProps.value\"\n            :errors=\"errors\"\n          />\n        </div>\n      </div>\n      <div v-if=\"getButtonsList().length\" class=\"buttons\">\n        <ActionButton\n          v-for=\"button in getButtonsList()\"\n          :key=\"button\"\n          :display-name=\"getMockPageAction(button).name\"\n          :action=\"getMockPageAction(button)\"\n        />\n      </div>\n    </div>\n  </WidgetsFrame>\n</template>\n<script lang=\"ts\" setup>\nimport ActionButton from '@/form/components/ActionButton.vue';\nimport Steps from '@/form/components/Steps.vue';\nimport { PageAction } from '@/widgets-lib/common/PageActionsInterface';\nimport WidgetsFrame from '@/widgets-lib/common/components/PlayerConfigProvider/PlayerConfigProvider.vue';\nimport { inputWidgets } from '@/widgets-lib/generated/inputWidgets';\nimport { outputWidgets } from '@/widgets-lib/generated/outputWidgets';\nimport { ref } from 'vue';\nimport { useRoute } from 'vue-router';\n\nconst route = useRoute();\n\nconst errors = ref<string[]>([]);\n\nfunction getWidgetComponent(widgetType: string) {\n  return (\n    inputWidgets[widgetType as keyof typeof inputWidgets] ||\n    outputWidgets[widgetType as keyof typeof outputWidgets] ||\n    null\n  );\n}\n\nfunction parseSingleParam(rawWidget: string) {\n  try {\n    const widget = JSON.parse(rawWidget);\n\n    widget['component'] = getWidgetComponent(widget.type);\n\n    if (!widget.component) {\n      throw new Error(`Widget ${widget.type} not found`);\n    }\n\n    if (!widget.component) {\n      return null;\n    }\n\n    return widget;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction getWidgetList() {\n  const queryValue = route.query.widget as string | string[];\n\n  if (Array.isArray(queryValue)) {\n    return queryValue.map(parseSingleParam).filter(Boolean);\n  }\n\n  return [parseSingleParam(queryValue)];\n}\n\nfunction shouldShowSteps() {\n  return route.query.steps === 'true';\n}\n\nfunction getButtonsList() {\n  const queryValue = route.query.button as string | string[];\n\n  if (!queryValue) {\n    return [];\n  }\n\n  if (Array.isArray(queryValue)) {\n    return queryValue;\n  }\n\n  return [queryValue];\n}\n\nconst getMockPageAction = (label: string): PageAction => ({\n  name: label,\n  isDefault: false,\n  isFocused: false,\n  focusOnButton: () => {\n    // just a mock\n  },\n  addKeydownListener: () => {\n    // just a mock\n  },\n  setElement: () => {\n    // just a mock\n  },\n});\n</script>\n\n<style lang=\"scss\" scoped>\n@import '../../../widgets-lib/common/style/widgets.scss';\n\n.preview {\n  box-sizing: border-box;\n  overflow: visible;\n  min-width: fit-content;\n  padding: 2rem;\n}\n\n.steps {\n  margin-bottom: 50px;\n}\n\n.buttons {\n  display: flex;\n  flex-direction: row;\n  gap: 1rem;\n  justify-content: flex-end;\n  align-items: center;\n  width: 100%;\n}\n\n.disable-events {\n  pointer-events: none;\n}\n</style>\n"],"names":["element","ref","onMounted","props","route","useRoute","errors","getWidgetComponent","widgetType","inputWidgets","outputWidgets","parseSingleParam","rawWidget","widget","getWidgetList","queryValue","shouldShowSteps","getButtonsList","getMockPageAction","label"],"mappings":"20BA6BMA,EAAUC,EAAwB,IAAI,EAE5C,OAAAC,EAAU,IAAM,CACVF,EAAQ,OAAOG,EAAM,OAAO,WAAWH,EAAQ,KAAK,CAC1D,CAAC,qeCgBD,MAAMI,EAAQC,EAAA,EAERC,EAASL,EAAc,EAAE,EAE/B,SAASM,EAAmBC,EAAoB,CAC9C,OACEC,EAAaD,CAAuC,GACpDE,EAAcF,CAAwC,GACtD,IAEJ,CAEA,SAASG,EAAiBC,EAAmB,CAC3C,GAAI,CACF,MAAMC,EAAS,KAAK,MAAMD,CAAS,EAInC,GAFAC,EAAO,UAAeN,EAAmBM,EAAO,IAAI,EAEhD,CAACA,EAAO,UACV,MAAM,IAAI,MAAM,UAAUA,EAAO,IAAI,YAAY,EAGnD,OAAKA,EAAO,UAILA,EAHE,IAIX,MAAY,CACV,OAAO,IACT,CACF,CAEA,SAASC,GAAgB,CACvB,MAAMC,EAAaX,EAAM,MAAM,OAE/B,OAAI,MAAM,QAAQW,CAAU,EACnBA,EAAW,IAAIJ,CAAgB,EAAE,OAAO,OAAO,EAGjD,CAACA,EAAiBI,CAAU,CAAC,CACtC,CAEA,SAASC,GAAkB,CACzB,OAAOZ,EAAM,MAAM,QAAU,MAC/B,CAEA,SAASa,GAAiB,CACxB,MAAMF,EAAaX,EAAM,MAAM,OAE/B,OAAKW,EAID,MAAM,QAAQA,CAAU,EACnBA,EAGF,CAACA,CAAU,EAPT,CAAA,CAQX,CAEA,MAAMG,EAAqBC,IAA+B,CACxD,KAAMA,EACN,UAAW,GACX,UAAW,GACX,cAAe,IAAM,CAErB,EACA,mBAAoB,IAAM,CAE1B,EACA,WAAY,IAAM,CAElB,CAAA"}