# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from flexlogger.automation.proto import TestSession_pb2 as flexlogger_dot_automation_dot_proto_dot_TestSession__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in flexlogger/automation/proto/TestSession_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TestSessionStub(object):
    """Service interface for a server side test session.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddNote = channel.unary_unary(
                '/national_instruments.flex_logger.automation.protocols.TestSession/AddNote',
                request_serializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.AddNoteRequest.SerializeToString,
                response_deserializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.AddNoteResponse.FromString,
                _registered_method=True)
        self.GetState = channel.unary_unary(
                '/national_instruments.flex_logger.automation.protocols.TestSession/GetState',
                request_serializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.GetTestSessionStateRequest.SerializeToString,
                response_deserializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.GetTestSessionStateResponse.FromString,
                _registered_method=True)
        self.Start = channel.unary_unary(
                '/national_instruments.flex_logger.automation.protocols.TestSession/Start',
                request_serializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.StartTestSessionRequest.SerializeToString,
                response_deserializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.StartTestSessionResponse.FromString,
                _registered_method=True)
        self.Stop = channel.unary_unary(
                '/national_instruments.flex_logger.automation.protocols.TestSession/Stop',
                request_serializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.StopTestSessionRequest.SerializeToString,
                response_deserializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.StopTestSessionResponse.FromString,
                _registered_method=True)
        self.Pause = channel.unary_unary(
                '/national_instruments.flex_logger.automation.protocols.TestSession/Pause',
                request_serializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.PauseTestSessionRequest.SerializeToString,
                response_deserializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.PauseTestSessionResponse.FromString,
                _registered_method=True)
        self.Resume = channel.unary_unary(
                '/national_instruments.flex_logger.automation.protocols.TestSession/Resume',
                request_serializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.ResumeTestSessionRequest.SerializeToString,
                response_deserializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.ResumeTestSessionResponse.FromString,
                _registered_method=True)
        self.GetElapsedTestTime = channel.unary_unary(
                '/national_instruments.flex_logger.automation.protocols.TestSession/GetElapsedTestTime',
                request_serializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.GetElapsedTestTimeRequest.SerializeToString,
                response_deserializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.GetElapsedTestTimeResponse.FromString,
                _registered_method=True)


class TestSessionServicer(object):
    """Service interface for a server side test session.
    """

    def AddNote(self, request, context):
        """RPC call to add a note to the log file. Notes can only be added while the test session is running.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetState(self, request, context):
        """RPC call to get the state of the test session.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Start(self, request, context):
        """RPC call to start the test session.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """RPC call to stop the test session.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Pause(self, request, context):
        """RPC call to pause the test session.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Resume(self, request, context):
        """RPC call to resume the test session.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetElapsedTestTime(self, request, context):
        """RPC call to query elapsed test time
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TestSessionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddNote': grpc.unary_unary_rpc_method_handler(
                    servicer.AddNote,
                    request_deserializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.AddNoteRequest.FromString,
                    response_serializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.AddNoteResponse.SerializeToString,
            ),
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.GetTestSessionStateRequest.FromString,
                    response_serializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.GetTestSessionStateResponse.SerializeToString,
            ),
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.StartTestSessionRequest.FromString,
                    response_serializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.StartTestSessionResponse.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.StopTestSessionRequest.FromString,
                    response_serializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.StopTestSessionResponse.SerializeToString,
            ),
            'Pause': grpc.unary_unary_rpc_method_handler(
                    servicer.Pause,
                    request_deserializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.PauseTestSessionRequest.FromString,
                    response_serializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.PauseTestSessionResponse.SerializeToString,
            ),
            'Resume': grpc.unary_unary_rpc_method_handler(
                    servicer.Resume,
                    request_deserializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.ResumeTestSessionRequest.FromString,
                    response_serializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.ResumeTestSessionResponse.SerializeToString,
            ),
            'GetElapsedTestTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetElapsedTestTime,
                    request_deserializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.GetElapsedTestTimeRequest.FromString,
                    response_serializer=flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.GetElapsedTestTimeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'national_instruments.flex_logger.automation.protocols.TestSession', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('national_instruments.flex_logger.automation.protocols.TestSession', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TestSession(object):
    """Service interface for a server side test session.
    """

    @staticmethod
    def AddNote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/national_instruments.flex_logger.automation.protocols.TestSession/AddNote',
            flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.AddNoteRequest.SerializeToString,
            flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.AddNoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/national_instruments.flex_logger.automation.protocols.TestSession/GetState',
            flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.GetTestSessionStateRequest.SerializeToString,
            flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.GetTestSessionStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/national_instruments.flex_logger.automation.protocols.TestSession/Start',
            flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.StartTestSessionRequest.SerializeToString,
            flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.StartTestSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/national_instruments.flex_logger.automation.protocols.TestSession/Stop',
            flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.StopTestSessionRequest.SerializeToString,
            flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.StopTestSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Pause(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/national_instruments.flex_logger.automation.protocols.TestSession/Pause',
            flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.PauseTestSessionRequest.SerializeToString,
            flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.PauseTestSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Resume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/national_instruments.flex_logger.automation.protocols.TestSession/Resume',
            flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.ResumeTestSessionRequest.SerializeToString,
            flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.ResumeTestSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetElapsedTestTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/national_instruments.flex_logger.automation.protocols.TestSession/GetElapsedTestTime',
            flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.GetElapsedTestTimeRequest.SerializeToString,
            flexlogger_dot_automation_dot_proto_dot_TestSession__pb2.GetElapsedTestTimeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
