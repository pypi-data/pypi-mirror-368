# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from flexlogger.automation.proto import FlexLoggerApplication_pb2 as flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in flexlogger/automation/proto/FlexLoggerApplication_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FlexLoggerApplicationStub(object):
    """Service interface for the server application.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OpenProject = channel.unary_unary(
                '/national_instruments.flex_logger.automation.protocols.FlexLoggerApplication/OpenProject',
                request_serializer=flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.OpenProjectRequest.SerializeToString,
                response_deserializer=flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.OpenProjectResponse.FromString,
                _registered_method=True)
        self.GetActiveProject = channel.unary_unary(
                '/national_instruments.flex_logger.automation.protocols.FlexLoggerApplication/GetActiveProject',
                request_serializer=flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.GetActiveProjectRequest.SerializeToString,
                response_deserializer=flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.GetActiveProjectResponse.FromString,
                _registered_method=True)
        self.GetVersion = channel.unary_unary(
                '/national_instruments.flex_logger.automation.protocols.FlexLoggerApplication/GetVersion',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.GetVersionResponse.FromString,
                _registered_method=True)
        self.Initialize = channel.unary_unary(
                '/national_instruments.flex_logger.automation.protocols.FlexLoggerApplication/Initialize',
                request_serializer=flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.InitializeRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class FlexLoggerApplicationServicer(object):
    """Service interface for the server application.
    """

    def OpenProject(self, request, context):
        """RPC call to open an existing project on the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActiveProject(self, request, context):
        """RPC call to get the currently active (open) project from the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVersion(self, request, context):
        """RPC call to get the FlexLogger version from the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Initialize(self, request, context):
        """RPC call to initialize the API client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlexLoggerApplicationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OpenProject': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenProject,
                    request_deserializer=flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.OpenProjectRequest.FromString,
                    response_serializer=flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.OpenProjectResponse.SerializeToString,
            ),
            'GetActiveProject': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActiveProject,
                    request_deserializer=flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.GetActiveProjectRequest.FromString,
                    response_serializer=flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.GetActiveProjectResponse.SerializeToString,
            ),
            'GetVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVersion,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.GetVersionResponse.SerializeToString,
            ),
            'Initialize': grpc.unary_unary_rpc_method_handler(
                    servicer.Initialize,
                    request_deserializer=flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.InitializeRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'national_instruments.flex_logger.automation.protocols.FlexLoggerApplication', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('national_instruments.flex_logger.automation.protocols.FlexLoggerApplication', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FlexLoggerApplication(object):
    """Service interface for the server application.
    """

    @staticmethod
    def OpenProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/national_instruments.flex_logger.automation.protocols.FlexLoggerApplication/OpenProject',
            flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.OpenProjectRequest.SerializeToString,
            flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.OpenProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetActiveProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/national_instruments.flex_logger.automation.protocols.FlexLoggerApplication/GetActiveProject',
            flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.GetActiveProjectRequest.SerializeToString,
            flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.GetActiveProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/national_instruments.flex_logger.automation.protocols.FlexLoggerApplication/GetVersion',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.GetVersionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Initialize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/national_instruments.flex_logger.automation.protocols.FlexLoggerApplication/Initialize',
            flexlogger_dot_automation_dot_proto_dot_FlexLoggerApplication__pb2.InitializeRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
